
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00009b20 memsz 0x00009c70 flags rwx
    LOAD off    0x0000b000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007984  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ec  00007b40  00007b40  00008b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f14  00007c2c  00007c2c  00008c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00009b40  00009b40  0000ab40  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00009c90  00009c90  0000b000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  02004000  02004000  0000b000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  02009020  02009020  0000b000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0000b000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000b78  00000000  00000000  0000b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00018ba2  00000000  00000000  0000bba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006c02  00000000  00000000  00024742  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000076e2  00000000  00000000  0002b344  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c88  00000000  00000000  00032a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b94  00000000  00000000  000346b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000047be  00000000  00000000  00037244  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0003ba04  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000005a0  00000000  00000000  0003ba18  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003eca1  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003eca4  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003ecb0  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003ecb1  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0003ecb2  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0003ecbd  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0003ecc8  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  0003ecd3  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000037  00000000  00000000  0003ecdb  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000e0f1e  00000000  00000000  0003ed12  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
00007b40 l    d  .rodata	00000000 .rodata
00007c2c l    d  .rwdata	00000000 .rwdata
00009b40 l    d  .bss	00000000 .bss
00009c90 l    d  .sdram	00000000 .sdram
02004000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
02009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 motor_setting.c
00000000 l    df *ABS*	00000000 pin_tests.c
00000000 l    df *ABS*	00000000 stearing_setting.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 ultrasound.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00007c2c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00002534 l     F .text	00000008 __fp_lock
0000253c l     F .text	00000008 __fp_unlock
00002550 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000035b0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00003704 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000382c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003858 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003960 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00003a5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003c40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00009b28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003ec4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004014 l     F .text	00000038 alt_dev_reg
00008600 l     O .rwdata	000000cc epcs_flash_controller_0
000086cc l     O .rwdata	00001060 jtag_uart_0
0000972c l     O .rwdata	000000c4 New_UltraSound0
000097f0 l     O .rwdata	000000c4 New_UltraSound1
000098b4 l     O .rwdata	000000c4 New_UltraSound2
00009978 l     O .rwdata	000000c4 New_UltraSound3
00009a3c l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00004198 l     F .text	00000038 alt_flash_device_register
00004224 l     F .text	000003f8 alt_epcs_flash_query
0000461c l     F .text	000000e8 alt_epcs_flash_memcmp
000049f0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004eb8 l     F .text	00000204 altera_avalon_jtag_uart_irq
000050bc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000056dc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00005990 l     F .text	00000098 altera_avalon_uart_irq
00005a28 l     F .text	000000e0 altera_avalon_uart_rxirq
00005b08 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00005ca0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00005ecc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
00006124 l     F .text	00000038 epcs_test_wip
0000615c l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00006834 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00006d68 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00006ec0 l     F .text	00000050 alt_get_errno
00006f10 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00004964 g     F .text	0000008c alt_epcs_flash_get_info
000034a4 g     F .text	00000054 _isatty_r
00003b88 g     F .text	00000078 alt_main
00000a4c g     F .text	000000a8 _puts_r
00009b90 g     O .bss	00000100 alt_irq
000034f8 g     F .text	0000005c _lseek_r
00009c90 g       *ABS*	00000000 __alt_heap_start
00003234 g     F .text	0000005c __sseek
00002894 g     F .text	00000010 __sinit
000026ec g     F .text	00000078 __sfmoreglue
00003c20 g     F .text	00000020 __malloc_unlock
00000964 g     F .text	00000034 ultrasound_init
00001a34 g     F .text	0000015c memmove
0000287c g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
00006194 g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
000005ac g     F .text	000001e4 test_motor
0000344c g     F .text	00000058 _fstat_r
00009b4c g     O .bss	00000004 errno
000031b0 g     F .text	00000008 __seofread
00009b54 g     O .bss	00000004 alt_argv
00011b00 g       *ABS*	00000000 _gp
00008480 g     O .rwdata	00000180 alt_fd_list
000063d0 g     F .text	00000068 epcs_write_status_register
00007524 g     F .text	00000090 alt_find_dev
000018fc g     F .text	00000138 memcpy
00002544 g     F .text	0000000c _cleanup_r
00006e48 g     F .text	00000078 alt_io_redirect
00007b40 g       *ABS*	00000000 __DTOR_END__
00000af4 g     F .text	00000014 puts
00004af8 g     F .text	00000100 alt_epcs_flash_write_block
000052b8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000036cc g     F .text	00000008 .hidden __udivsi3
000039b0 g     F .text	000000ac isatty
00009b48 g     O .bss	00000004 __malloc_top_pad
00000ba0 g     F .text	000004cc __sfvwrite_r
000020f8 g     F .text	00000054 _sbrk_r
00003554 g     F .text	0000005c _read_r
00009b20 g     O .rwdata	00000004 alt_max_fd
00003348 g     F .text	000000f0 _fclose_r
00002504 g     F .text	00000030 fflush
00009b44 g     O .bss	00000004 __malloc_max_sbrked_mem
000003d4 g     F .text	000001d8 test_stearing
00004a84 g     F .text	00000074 alt_epcs_flash_erase_block
00003aac g     F .text	000000dc lseek
00009b00 g     O .rwdata	00000004 _global_impure_ptr
00006698 g     F .text	0000005c epcs_exit_4_bytes_mode
00001b90 g     F .text	00000568 _realloc_r
00009c90 g       *ABS*	00000000 __bss_end
00006c78 g     F .text	000000f0 alt_iic_isr_register
000071fc g     F .text	00000104 alt_tick
000002f0 g     F .text	000000e4 motor_setting
000058e8 g     F .text	000000a8 altera_avalon_uart_init
000028b4 g     F .text	00000018 __fp_lock_all
00006c2c g     F .text	0000004c alt_ic_irq_enabled
00007164 g     F .text	00000098 alt_alarm_stop
00009b5c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
00008458 g     O .rwdata	00000028 alt_dev_null
00009b18 g     O .rwdata	00000008 alt_dev_list
00003f14 g     F .text	00000100 write
000038a8 g     F .text	000000b8 fstat
000036d4 g     F .text	00000008 .hidden __umodsi3
00006554 g     F .text	00000068 epcs_read_electronic_signature
00009c90 g       *ABS*	00000000 end
00005f1c g     F .text	000001ac altera_avalon_uart_write
00004df4 g     F .text	000000c4 altera_avalon_jtag_uart_init
00007b40 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00005750 g     F .text	00000088 alt_avalon_timer_sc_init
00005838 g     F .text	00000060 altera_avalon_uart_write_fd
00000904 g     F .text	00000060 uart_receive_byte
00005898 g     F .text	00000050 altera_avalon_uart_close_fd
000054c4 g     F .text	00000218 altera_avalon_jtag_uart_write
0000084c g     F .text	0000004c uart_init
000028a4 g     F .text	00000004 __sfp_lock_acquire
00001814 g     F .text	000000e8 memchr
00002a08 g     F .text	000002f0 _free_r
00007978 g     F .text	00000194 __call_exitprocs
00009b08 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	00000038 _start
00009b60 g     O .bss	00000004 _alt_tick_rate
00007320 g     F .text	00000204 alt_avalon_spi_command
00009b64 g     O .bss	00000004 _alt_nticks
00003c90 g     F .text	00000104 read
00004080 g     F .text	00000118 alt_sys_init
00007864 g     F .text	00000114 __register_exitproc
00005164 g     F .text	00000068 altera_avalon_jtag_uart_close
000036dc g     F .text	00000028 .hidden __mulsi3
00009b68 g     O .bss	00000028 __malloc_current_mallinfo
000060c8 g     F .text	0000005c epcs_read_status_register
00004c90 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000076c8 g     F .text	000000d4 alt_get_fd
000032f4 g     F .text	00000054 _close_r
000065bc g     F .text	00000080 epcs_read_device_id
000077e8 g     F .text	0000007c memcmp
00004d50 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00009c90 g       *ABS*	00000000 __alt_stack_base
00004da0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00000998 g     F .text	000000b4 ultrasound_read
0000214c g     F .text	00000154 __swsetup_r
00002764 g     F .text	00000118 __sfp
00008050 g     O .rwdata	00000408 __malloc_av_
000028b0 g     F .text	00000004 __sinit_lock_release
0000315c g     F .text	00000054 __sread
000075b4 g     F .text	00000114 alt_find_file
00006884 g     F .text	000000a4 alt_dev_llist_insert
00003c00 g     F .text	00000020 __malloc_lock
00003e14 g     F .text	000000b0 sbrk
000024a8 g     F .text	0000005c _fflush_r
00009b2c g     O .rwdata	00000008 alt_flash_dev_list
00009b40 g       *ABS*	00000000 __bss_start
00003038 g     F .text	00000124 memset
000001f4 g     F .text	000000fc main
00009b58 g     O .bss	00000004 alt_envp
00009b40 g     O .bss	00000004 __malloc_max_total_mem
00004cf0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00003290 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00003438 g     F .text	00000014 fclose
0000106c g     F .text	000007a8 _malloc_r
00009b24 g     O .rwdata	00000004 alt_errno
00002cf8 g     F .text	000000c4 _fwalk
0000361c g     F .text	00000054 .hidden __divsi3
000028e4 g     F .text	00000124 _malloc_trim_r
00007b40 g       *ABS*	00000000 __CTOR_END__
00004704 g     F .text	00000260 alt_epcs_flash_write
00007b40 g       *ABS*	00000000 __DTOR_LIST__
0000404c g     F .text	00000034 alt_irq_init
00003d94 g     F .text	00000080 alt_release_fd
00000790 g     F .text	000000bc stearing_setting
0000779c g     F .text	00000014 atexit
00003298 g     F .text	0000005c _write_r
00009b04 g     O .rwdata	00000004 _impure_ptr
00009b50 g     O .bss	00000004 alt_argc
000022a0 g     F .text	00000208 __sflush_r
00006984 g     F .text	0000005c _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000028cc g     F .text	00000018 __fp_unlock_all
00009b10 g     O .rwdata	00000008 alt_fs_list
00000898 g     F .text	0000006c uart_send_byte
0000628c g     F .text	000000f4 epcs_read_buffer
000041d0 g     F .text	00000054 alt_epcs_flash_init
00006a98 g     F .text	00000050 alt_ic_isr_register
00009b40 g       *ABS*	00000000 _edata
000057d8 g     F .text	00000060 altera_avalon_uart_read_fd
00009c90 g       *ABS*	00000000 _end
000069e0 g     F .text	00000068 alt_flash_open_dev
000051cc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00006b88 g     F .text	000000a4 alt_ic_irq_disable
0000663c g     F .text	0000005c epcs_enter_4_bytes_mode
000031b8 g     F .text	0000007c __swrite
00009b0c g     O .rwdata	00000004 __malloc_trim_threshold
00007300 g     F .text	00000020 altera_nios2_qsys_irq_init
000077b0 g     F .text	00000038 exit
00002dbc g     F .text	000000c4 _fwalk_reent
00006a48 g     F .text	00000050 alt_flash_close_dev
00003670 g     F .text	0000005c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000028a8 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00005c4c g     F .text	00000054 altera_avalon_uart_close
00007b0c g     F .text	00000034 _exit
000066f4 g     F .text	00000140 alt_alarm_start
00002e80 g     F .text	000001b8 __smakebuf_r
00000b08 g     F .text	00000098 strlen
00006380 g     F .text	00000050 epcs_write_enable
00007004 g     F .text	00000160 open
00009b34 g     O .rwdata	00000004 alt_priority_mask
00006ae8 g     F .text	000000a0 alt_ic_irq_enable
00005cf0 g     F .text	000001dc altera_avalon_uart_read
00004bf8 g     F .text	00000098 alt_epcs_flash_read
00009b38 g     O .rwdata	00000008 alt_alarm_list
00006928 g     F .text	0000005c _do_ctors
00003754 g     F .text	000000d8 close
00000000  w      *UND*	00000000 free
000028ac g     F .text	00000004 __sinit_lock_acquire
00006438 g     F .text	0000011c epcs_write_buffer



Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10a6e404 	addi	r2,r2,-25712
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10a6e404 	addi	r2,r2,-25712
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	21000104 	addi	r4,r4,4
 158:	1105883a 	add	r2,r2,r4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d686c014 	ori	gp,gp,6912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1d0:	10a6d014 	ori	r2,r2,39744

    movhi r3, %hi(__bss_end)
     1d4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d8:	18e72414 	ori	r3,r3,40080

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	0003b880 	call	3b88 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <main>:
 */

#include "main.h"

int main()
{
     1f4:	deffef04 	addi	sp,sp,-68
     1f8:	dfc01015 	stw	ra,64(sp)
     1fc:	df000f15 	stw	fp,60(sp)
     200:	df000f04 	addi	fp,sp,60
	printf("Running!\n");
     204:	01000034 	movhi	r4,0
     208:	211ed004 	addi	r4,r4,31552
     20c:	0000af40 	call	af4 <puts>

	//Assign motor pins
	unsigned long m_phase1=0x0,m_phase2=0x000,m_duty1=0x0,m_duty2=0x0,m_period=0x186A,m_enable=0x3;
     210:	e03ff315 	stw	zero,-52(fp)
     214:	e03ff415 	stw	zero,-48(fp)
     218:	e03ff515 	stw	zero,-44(fp)
     21c:	e03ff615 	stw	zero,-40(fp)
     220:	00861a84 	movi	r2,6250
     224:	e0bff715 	stw	r2,-36(fp)
     228:	008000c4 	movi	r2,3
     22c:	e0bff815 	stw	r2,-32(fp)
	motor_setting(m_phase1,m_duty1,m_phase2,m_duty2,m_period,m_enable);
     230:	e0bff717 	ldw	r2,-36(fp)
     234:	d8800015 	stw	r2,0(sp)
     238:	e0bff817 	ldw	r2,-32(fp)
     23c:	d8800115 	stw	r2,4(sp)
     240:	e13ff317 	ldw	r4,-52(fp)
     244:	e17ff517 	ldw	r5,-44(fp)
     248:	e1bff417 	ldw	r6,-48(fp)
     24c:	e1fff617 	ldw	r7,-40(fp)
     250:	00002f00 	call	2f0 <motor_setting>

	//Assign steering pins
	unsigned long s_phase1=0x0,s_phase2=0x000,s_duty1=0x0,s_duty2=0x0,s_period=0x186A,s_enable=0x3;
     254:	e03ff915 	stw	zero,-28(fp)
     258:	e03ffa15 	stw	zero,-24(fp)
     25c:	e03ffb15 	stw	zero,-20(fp)
     260:	e03ffc15 	stw	zero,-16(fp)
     264:	00861a84 	movi	r2,6250
     268:	e0bffd15 	stw	r2,-12(fp)
     26c:	008000c4 	movi	r2,3
     270:	e0bffe15 	stw	r2,-8(fp)
	stearing_setting(s_phase1,s_duty1,s_phase2,s_duty2,s_period,s_enable);
     274:	e0bffd17 	ldw	r2,-12(fp)
     278:	d8800015 	stw	r2,0(sp)
     27c:	e0bffe17 	ldw	r2,-8(fp)
     280:	d8800115 	stw	r2,4(sp)
     284:	e13ff917 	ldw	r4,-28(fp)
     288:	e17ffb17 	ldw	r5,-20(fp)
     28c:	e1bffa17 	ldw	r6,-24(fp)
     290:	e1fffc17 	ldw	r7,-16(fp)
     294:	00007900 	call	790 <stearing_setting>


	//Intit Ultrasound
	unsigned int distance0, distance1, distance2, i, j = 0;
     298:	e03fff15 	stw	zero,-4(fp)
	ultrasound_init(NEW_ULTRASOUND0_BASE);
     29c:	01008074 	movhi	r4,513
     2a0:	21288804 	addi	r4,r4,-24032
     2a4:	00009640 	call	964 <ultrasound_init>
	ultrasound_init(NEW_ULTRASOUND1_BASE);
     2a8:	01008074 	movhi	r4,513
     2ac:	21288004 	addi	r4,r4,-24064
     2b0:	00009640 	call	964 <ultrasound_init>
	ultrasound_init(NEW_ULTRASOUND2_BASE);
     2b4:	01008074 	movhi	r4,513
     2b8:	21287804 	addi	r4,r4,-24096
     2bc:	00009640 	call	964 <ultrasound_init>
	//for(i = 0; i<2550; i++); //delay TODO (necessary?)
	printf("Ultrasound initialized!\n");
     2c0:	01000034 	movhi	r4,0
     2c4:	211ed304 	addi	r4,r4,31564
     2c8:	0000af40 	call	af4 <puts>




	//test
	test_stearing(1, s_period);
     2cc:	01000044 	movi	r4,1
     2d0:	e17ffd17 	ldw	r5,-12(fp)
     2d4:	00003d40 	call	3d4 <test_stearing>


	return 0;
     2d8:	0005883a 	mov	r2,zero
}
     2dc:	e037883a 	mov	sp,fp
     2e0:	dfc00117 	ldw	ra,4(sp)
     2e4:	df000017 	ldw	fp,0(sp)
     2e8:	dec00204 	addi	sp,sp,8
     2ec:	f800283a 	ret

000002f0 <motor_setting>:
//phase1 -> forward
//phase2 -> backward
//will only set one pin greater zero
void motor_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable)
{
     2f0:	defff504 	addi	sp,sp,-44
     2f4:	df000a15 	stw	fp,40(sp)
     2f8:	df000a04 	addi	fp,sp,40
     2fc:	e13ffc15 	stw	r4,-16(fp)
     300:	e17ffd15 	stw	r5,-12(fp)
     304:	e1bffe15 	stw	r6,-8(fp)
     308:	e1ffff15 	stw	r7,-4(fp)
	if(phase1>0 && phase2>0){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10000826 	beq	r2,zero,334 <motor_setting+0x44>
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	10000626 	beq	r2,zero,334 <motor_setting+0x44>
		if(phase1>=phase2) phase2 = 0;
     31c:	e0fffc17 	ldw	r3,-16(fp)
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	18800236 	bltu	r3,r2,330 <motor_setting+0x40>
     328:	e03ffe15 	stw	zero,-8(fp)
     32c:	00000106 	br	334 <motor_setting+0x44>
		else phase1 = 0;
     330:	e03ffc15 	stw	zero,-16(fp)

	}

	unsigned long * pwm_en= (unsigned long *)MOTOR_PWM_EN;
     334:	00808074 	movhi	r2,513
     338:	10a8b004 	addi	r2,r2,-23872
     33c:	e0bff615 	stw	r2,-40(fp)
	unsigned long * pwm_period=(unsigned long *)MOTOR_PWM_PERIOD;
     340:	00808074 	movhi	r2,513
     344:	10a8b104 	addi	r2,r2,-23868
     348:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_phase1=(unsigned long *)MOTOR_PWM_PHASE1;
     34c:	00808074 	movhi	r2,513
     350:	10a8b404 	addi	r2,r2,-23856
     354:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_phase2=(unsigned long *)MOTOR_PWM_PHASE2;
     358:	00808074 	movhi	r2,513
     35c:	10a8b504 	addi	r2,r2,-23852
     360:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_duty1=(unsigned long *)MOTOR_PWM_DUTY1;
     364:	00808074 	movhi	r2,513
     368:	10a8b204 	addi	r2,r2,-23864
     36c:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_duty2=(unsigned long *)MOTOR_PWM_DUTY2;
     370:	00808074 	movhi	r2,513
     374:	10a8b304 	addi	r2,r2,-23860
     378:	e0bffb15 	stw	r2,-20(fp)

	* pwm_en=enable;
     37c:	e0bff617 	ldw	r2,-40(fp)
     380:	e0c00217 	ldw	r3,8(fp)
     384:	10c00015 	stw	r3,0(r2)
	* pwm_period=period;
     388:	e0bff717 	ldw	r2,-36(fp)
     38c:	e0c00117 	ldw	r3,4(fp)
     390:	10c00015 	stw	r3,0(r2)
	* pwm_phase1=phase1;
     394:	e0bff817 	ldw	r2,-32(fp)
     398:	e0fffc17 	ldw	r3,-16(fp)
     39c:	10c00015 	stw	r3,0(r2)
	* pwm_phase2=phase2;
     3a0:	e0bff917 	ldw	r2,-28(fp)
     3a4:	e0fffe17 	ldw	r3,-8(fp)
     3a8:	10c00015 	stw	r3,0(r2)
	* pwm_duty1=duty1;
     3ac:	e0bffa17 	ldw	r2,-24(fp)
     3b0:	e0fffd17 	ldw	r3,-12(fp)
     3b4:	10c00015 	stw	r3,0(r2)
	* pwm_duty2=duty2;
     3b8:	e0bffb17 	ldw	r2,-20(fp)
     3bc:	e0ffff17 	ldw	r3,-4(fp)
     3c0:	10c00015 	stw	r3,0(r2)

}
     3c4:	e037883a 	mov	sp,fp
     3c8:	df000017 	ldw	fp,0(sp)
     3cc:	dec00104 	addi	sp,sp,4
     3d0:	f800283a 	ret

000003d4 <test_stearing>:
#include "pin_tests.h"

//function to test stearing pins (will not terminate!)
//type 1: alternate on pin 1; sets pin 2 to zero
//type 2: alternate on pin 2; sets pin 1 to zero
void test_stearing(unsigned int test_type, unsigned long s_period){
     3d4:	defff604 	addi	sp,sp,-40
     3d8:	dfc00915 	stw	ra,36(sp)
     3dc:	df000815 	stw	fp,32(sp)
     3e0:	df000804 	addi	fp,sp,32
     3e4:	e13ffe15 	stw	r4,-8(fp)
     3e8:	e17fff15 	stw	r5,-4(fp)

	if(test_type==1){ //test 1
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	10800058 	cmpnei	r2,r2,1
     3f4:	1000321e 	bne	r2,zero,4c0 <test_stearing+0xec>
		unsigned long s_duty1 = 0;
     3f8:	e03ffa15 	stw	zero,-24(fp)
		unsigned int i = 0;
     3fc:	e03ffb15 	stw	zero,-20(fp)
		while(1){
			while(s_duty1<s_period){
     400:	00001406 	br	454 <test_stearing+0x80>
				stearing_setting(0, s_duty1, 0, 0, s_period, 1);
     404:	e0bfff17 	ldw	r2,-4(fp)
     408:	d8800015 	stw	r2,0(sp)
     40c:	00800044 	movi	r2,1
     410:	d8800115 	stw	r2,4(sp)
     414:	0009883a 	mov	r4,zero
     418:	e17ffa17 	ldw	r5,-24(fp)
     41c:	000d883a 	mov	r6,zero
     420:	000f883a 	mov	r7,zero
     424:	00007900 	call	790 <stearing_setting>
				s_duty1 += 10;
     428:	e0bffa17 	ldw	r2,-24(fp)
     42c:	10800284 	addi	r2,r2,10
     430:	e0bffa15 	stw	r2,-24(fp)
				for(i=0;i<2550;i++); //delay
     434:	e03ffb15 	stw	zero,-20(fp)
     438:	00000306 	br	448 <test_stearing+0x74>
     43c:	e0bffb17 	ldw	r2,-20(fp)
     440:	10800044 	addi	r2,r2,1
     444:	e0bffb15 	stw	r2,-20(fp)
     448:	e0bffb17 	ldw	r2,-20(fp)
     44c:	10827db0 	cmpltui	r2,r2,2550
     450:	103ffa1e 	bne	r2,zero,43c <test_stearing+0x68>

	if(test_type==1){ //test 1
		unsigned long s_duty1 = 0;
		unsigned int i = 0;
		while(1){
			while(s_duty1<s_period){
     454:	e0fffa17 	ldw	r3,-24(fp)
     458:	e0bfff17 	ldw	r2,-4(fp)
     45c:	18bfe936 	bltu	r3,r2,404 <test_stearing+0x30>
				stearing_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty1>0){
     460:	00001406 	br	4b4 <test_stearing+0xe0>
				stearing_setting(0, s_duty1, 0, 0, s_period, 1);
     464:	e0bfff17 	ldw	r2,-4(fp)
     468:	d8800015 	stw	r2,0(sp)
     46c:	00800044 	movi	r2,1
     470:	d8800115 	stw	r2,4(sp)
     474:	0009883a 	mov	r4,zero
     478:	e17ffa17 	ldw	r5,-24(fp)
     47c:	000d883a 	mov	r6,zero
     480:	000f883a 	mov	r7,zero
     484:	00007900 	call	790 <stearing_setting>
				s_duty1 -= 10;
     488:	e0bffa17 	ldw	r2,-24(fp)
     48c:	10bffd84 	addi	r2,r2,-10
     490:	e0bffa15 	stw	r2,-24(fp)
				for(i=0;i<2550;i++); //delay
     494:	e03ffb15 	stw	zero,-20(fp)
     498:	00000306 	br	4a8 <test_stearing+0xd4>
     49c:	e0bffb17 	ldw	r2,-20(fp)
     4a0:	10800044 	addi	r2,r2,1
     4a4:	e0bffb15 	stw	r2,-20(fp)
     4a8:	e0bffb17 	ldw	r2,-20(fp)
     4ac:	10827db0 	cmpltui	r2,r2,2550
     4b0:	103ffa1e 	bne	r2,zero,49c <test_stearing+0xc8>
			while(s_duty1<s_period){
				stearing_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty1>0){
     4b4:	e0bffa17 	ldw	r2,-24(fp)
     4b8:	103fea1e 	bne	r2,zero,464 <test_stearing+0x90>
				stearing_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 -= 10;
				for(i=0;i<2550;i++); //delay
			}
		}
     4bc:	003fd006 	br	400 <test_stearing+0x2c>
	}else if(test_type==2){ //test 2
     4c0:	e0bffe17 	ldw	r2,-8(fp)
     4c4:	10800098 	cmpnei	r2,r2,2
     4c8:	1000321e 	bne	r2,zero,594 <test_stearing+0x1c0>
		unsigned long s_duty2 = 0;
     4cc:	e03ffc15 	stw	zero,-16(fp)
		unsigned int i = 0;
     4d0:	e03ffd15 	stw	zero,-12(fp)
		while(1){
			while(s_duty2<s_period){
     4d4:	00001406 	br	528 <test_stearing+0x154>
				stearing_setting(0, 0, 0, s_duty2, s_period, 2);
     4d8:	e0bfff17 	ldw	r2,-4(fp)
     4dc:	d8800015 	stw	r2,0(sp)
     4e0:	00800084 	movi	r2,2
     4e4:	d8800115 	stw	r2,4(sp)
     4e8:	0009883a 	mov	r4,zero
     4ec:	000b883a 	mov	r5,zero
     4f0:	000d883a 	mov	r6,zero
     4f4:	e1fffc17 	ldw	r7,-16(fp)
     4f8:	00007900 	call	790 <stearing_setting>
				s_duty2 += 10;
     4fc:	e0bffc17 	ldw	r2,-16(fp)
     500:	10800284 	addi	r2,r2,10
     504:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     508:	e03ffd15 	stw	zero,-12(fp)
     50c:	00000306 	br	51c <test_stearing+0x148>
     510:	e0bffd17 	ldw	r2,-12(fp)
     514:	10800044 	addi	r2,r2,1
     518:	e0bffd15 	stw	r2,-12(fp)
     51c:	e0bffd17 	ldw	r2,-12(fp)
     520:	10827db0 	cmpltui	r2,r2,2550
     524:	103ffa1e 	bne	r2,zero,510 <test_stearing+0x13c>
		}
	}else if(test_type==2){ //test 2
		unsigned long s_duty2 = 0;
		unsigned int i = 0;
		while(1){
			while(s_duty2<s_period){
     528:	e0fffc17 	ldw	r3,-16(fp)
     52c:	e0bfff17 	ldw	r2,-4(fp)
     530:	18bfe936 	bltu	r3,r2,4d8 <test_stearing+0x104>
				stearing_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty2>0){
     534:	00001406 	br	588 <test_stearing+0x1b4>
				stearing_setting(0, 0, 0, s_duty2, s_period, 2);
     538:	e0bfff17 	ldw	r2,-4(fp)
     53c:	d8800015 	stw	r2,0(sp)
     540:	00800084 	movi	r2,2
     544:	d8800115 	stw	r2,4(sp)
     548:	0009883a 	mov	r4,zero
     54c:	000b883a 	mov	r5,zero
     550:	000d883a 	mov	r6,zero
     554:	e1fffc17 	ldw	r7,-16(fp)
     558:	00007900 	call	790 <stearing_setting>
				s_duty2 -= 10;
     55c:	e0bffc17 	ldw	r2,-16(fp)
     560:	10bffd84 	addi	r2,r2,-10
     564:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     568:	e03ffd15 	stw	zero,-12(fp)
     56c:	00000306 	br	57c <test_stearing+0x1a8>
     570:	e0bffd17 	ldw	r2,-12(fp)
     574:	10800044 	addi	r2,r2,1
     578:	e0bffd15 	stw	r2,-12(fp)
     57c:	e0bffd17 	ldw	r2,-12(fp)
     580:	10827db0 	cmpltui	r2,r2,2550
     584:	103ffa1e 	bne	r2,zero,570 <test_stearing+0x19c>
			while(s_duty2<s_period){
				stearing_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty2>0){
     588:	e0bffc17 	ldw	r2,-16(fp)
     58c:	103fea1e 	bne	r2,zero,538 <test_stearing+0x164>
				stearing_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 -= 10;
				for(i=0;i<2550;i++); //delay
			}
		}
     590:	003fd006 	br	4d4 <test_stearing+0x100>
	}
	return;
     594:	0001883a 	nop
}
     598:	e037883a 	mov	sp,fp
     59c:	dfc00117 	ldw	ra,4(sp)
     5a0:	df000017 	ldw	fp,0(sp)
     5a4:	dec00204 	addi	sp,sp,8
     5a8:	f800283a 	ret

000005ac <test_motor>:

//function to test motor pin (will not terminate)
//test 1: TODO
//test 2: TODO
//test 3: alternate between max value on pin 1 and on pin 2
void test_motor(unsigned int test_type, unsigned long m_period){
     5ac:	defff704 	addi	sp,sp,-36
     5b0:	dfc00815 	stw	ra,32(sp)
     5b4:	df000715 	stw	fp,28(sp)
     5b8:	df000704 	addi	fp,sp,28
     5bc:	e13ffe15 	stw	r4,-8(fp)
     5c0:	e17fff15 	stw	r5,-4(fp)
	if(test_type==1){ //test 1
     5c4:	e0bffe17 	ldw	r2,-8(fp)
     5c8:	10800060 	cmpeqi	r2,r2,1
     5cc:	10006a1e 	bne	r2,zero,778 <test_motor+0x1cc>

	}else if(test_type==2){//test 2
     5d0:	e0bffe17 	ldw	r2,-8(fp)
     5d4:	108000a0 	cmpeqi	r2,r2,2
     5d8:	1000671e 	bne	r2,zero,778 <test_motor+0x1cc>

	}else if(test_type==3){//test 3
     5dc:	e0bffe17 	ldw	r2,-8(fp)
     5e0:	108000d8 	cmpnei	r2,r2,3
     5e4:	1000641e 	bne	r2,zero,778 <test_motor+0x1cc>
		unsigned long m_duty1 = 0;
     5e8:	e03ffb15 	stw	zero,-20(fp)
		unsigned long m_duty2 = 0;
     5ec:	e03ffc15 	stw	zero,-16(fp)
		unsigned int i = 0;
     5f0:	e03ffd15 	stw	zero,-12(fp)
		while(1){
			//drive forward
			while(m_duty1<m_period){
     5f4:	00001406 	br	648 <test_motor+0x9c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     5f8:	e0bfff17 	ldw	r2,-4(fp)
     5fc:	d8800015 	stw	r2,0(sp)
     600:	008000c4 	movi	r2,3
     604:	d8800115 	stw	r2,4(sp)
     608:	0009883a 	mov	r4,zero
     60c:	e17ffb17 	ldw	r5,-20(fp)
     610:	000d883a 	mov	r6,zero
     614:	e1fffc17 	ldw	r7,-16(fp)
     618:	00002f00 	call	2f0 <motor_setting>
				m_duty1 += 10;
     61c:	e0bffb17 	ldw	r2,-20(fp)
     620:	10800284 	addi	r2,r2,10
     624:	e0bffb15 	stw	r2,-20(fp)
				for(i=0;i<2550;i++); //delay
     628:	e03ffd15 	stw	zero,-12(fp)
     62c:	00000306 	br	63c <test_motor+0x90>
     630:	e0bffd17 	ldw	r2,-12(fp)
     634:	10800044 	addi	r2,r2,1
     638:	e0bffd15 	stw	r2,-12(fp)
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	10827db0 	cmpltui	r2,r2,2550
     644:	103ffa1e 	bne	r2,zero,630 <test_motor+0x84>
		unsigned long m_duty1 = 0;
		unsigned long m_duty2 = 0;
		unsigned int i = 0;
		while(1){
			//drive forward
			while(m_duty1<m_period){
     648:	e0fffb17 	ldw	r3,-20(fp)
     64c:	e0bfff17 	ldw	r2,-4(fp)
     650:	18bfe936 	bltu	r3,r2,5f8 <test_motor+0x4c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty1>0){
     654:	00001406 	br	6a8 <test_motor+0xfc>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     658:	e0bfff17 	ldw	r2,-4(fp)
     65c:	d8800015 	stw	r2,0(sp)
     660:	008000c4 	movi	r2,3
     664:	d8800115 	stw	r2,4(sp)
     668:	0009883a 	mov	r4,zero
     66c:	e17ffb17 	ldw	r5,-20(fp)
     670:	000d883a 	mov	r6,zero
     674:	e1fffc17 	ldw	r7,-16(fp)
     678:	00002f00 	call	2f0 <motor_setting>
				m_duty1 -= 10;
     67c:	e0bffb17 	ldw	r2,-20(fp)
     680:	10bffd84 	addi	r2,r2,-10
     684:	e0bffb15 	stw	r2,-20(fp)
				for(i=0;i<2550;i++); //delay
     688:	e03ffd15 	stw	zero,-12(fp)
     68c:	00000306 	br	69c <test_motor+0xf0>
     690:	e0bffd17 	ldw	r2,-12(fp)
     694:	10800044 	addi	r2,r2,1
     698:	e0bffd15 	stw	r2,-12(fp)
     69c:	e0bffd17 	ldw	r2,-12(fp)
     6a0:	10827db0 	cmpltui	r2,r2,2550
     6a4:	103ffa1e 	bne	r2,zero,690 <test_motor+0xe4>
			while(m_duty1<m_period){
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty1>0){
     6a8:	e0bffb17 	ldw	r2,-20(fp)
     6ac:	103fea1e 	bne	r2,zero,658 <test_motor+0xac>
				m_duty1 -= 10;
				for(i=0;i<2550;i++); //delay
			}

			//drive backwards
			m_duty1 = 0;
     6b0:	e03ffb15 	stw	zero,-20(fp)
			while(m_duty2<m_period){
     6b4:	00001406 	br	708 <test_motor+0x15c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     6b8:	e0bfff17 	ldw	r2,-4(fp)
     6bc:	d8800015 	stw	r2,0(sp)
     6c0:	008000c4 	movi	r2,3
     6c4:	d8800115 	stw	r2,4(sp)
     6c8:	0009883a 	mov	r4,zero
     6cc:	e17ffb17 	ldw	r5,-20(fp)
     6d0:	000d883a 	mov	r6,zero
     6d4:	e1fffc17 	ldw	r7,-16(fp)
     6d8:	00002f00 	call	2f0 <motor_setting>
				m_duty2 += 10;
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10800284 	addi	r2,r2,10
     6e4:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     6e8:	e03ffd15 	stw	zero,-12(fp)
     6ec:	00000306 	br	6fc <test_motor+0x150>
     6f0:	e0bffd17 	ldw	r2,-12(fp)
     6f4:	10800044 	addi	r2,r2,1
     6f8:	e0bffd15 	stw	r2,-12(fp)
     6fc:	e0bffd17 	ldw	r2,-12(fp)
     700:	10827db0 	cmpltui	r2,r2,2550
     704:	103ffa1e 	bne	r2,zero,6f0 <test_motor+0x144>
				for(i=0;i<2550;i++); //delay
			}

			//drive backwards
			m_duty1 = 0;
			while(m_duty2<m_period){
     708:	e0fffc17 	ldw	r3,-16(fp)
     70c:	e0bfff17 	ldw	r2,-4(fp)
     710:	18bfe936 	bltu	r3,r2,6b8 <test_motor+0x10c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty2>0){
     714:	00001406 	br	768 <test_motor+0x1bc>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     718:	e0bfff17 	ldw	r2,-4(fp)
     71c:	d8800015 	stw	r2,0(sp)
     720:	008000c4 	movi	r2,3
     724:	d8800115 	stw	r2,4(sp)
     728:	0009883a 	mov	r4,zero
     72c:	e17ffb17 	ldw	r5,-20(fp)
     730:	000d883a 	mov	r6,zero
     734:	e1fffc17 	ldw	r7,-16(fp)
     738:	00002f00 	call	2f0 <motor_setting>
				m_duty2 -= 10;
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	10bffd84 	addi	r2,r2,-10
     744:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     748:	e03ffd15 	stw	zero,-12(fp)
     74c:	00000306 	br	75c <test_motor+0x1b0>
     750:	e0bffd17 	ldw	r2,-12(fp)
     754:	10800044 	addi	r2,r2,1
     758:	e0bffd15 	stw	r2,-12(fp)
     75c:	e0bffd17 	ldw	r2,-12(fp)
     760:	10827db0 	cmpltui	r2,r2,2550
     764:	103ffa1e 	bne	r2,zero,750 <test_motor+0x1a4>
			while(m_duty2<m_period){
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty2>0){
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	103fea1e 	bne	r2,zero,718 <test_motor+0x16c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 -= 10;
				for(i=0;i<2550;i++); //delay
			}
			m_duty2 = 0;
     770:	e03ffc15 	stw	zero,-16(fp)
		}
     774:	003f9f06 	br	5f4 <test_motor+0x48>
	}
	return;
     778:	0001883a 	nop
}
     77c:	e037883a 	mov	sp,fp
     780:	dfc00117 	ldw	ra,4(sp)
     784:	df000017 	ldw	fp,0(sp)
     788:	dec00204 	addi	sp,sp,8
     78c:	f800283a 	ret

00000790 <stearing_setting>:
 */

#include "stearing_setting.h"

void stearing_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable){
     790:	defff504 	addi	sp,sp,-44
     794:	df000a15 	stw	fp,40(sp)
     798:	df000a04 	addi	fp,sp,40
     79c:	e13ffc15 	stw	r4,-16(fp)
     7a0:	e17ffd15 	stw	r5,-12(fp)
     7a4:	e1bffe15 	stw	r6,-8(fp)
     7a8:	e1ffff15 	stw	r7,-4(fp)

	unsigned long * pwm_en= (unsigned long *)STEARING_PWM_EN;
     7ac:	00808074 	movhi	r2,513
     7b0:	10a8a804 	addi	r2,r2,-23904
     7b4:	e0bff615 	stw	r2,-40(fp)
	unsigned long * pwm_period=(unsigned long *)STEARING_PWM_PERIOD;
     7b8:	00808074 	movhi	r2,513
     7bc:	10a8a904 	addi	r2,r2,-23900
     7c0:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_phase1=(unsigned long *)STEARING_PWM_PHASE1;
     7c4:	00808074 	movhi	r2,513
     7c8:	10a8ac04 	addi	r2,r2,-23888
     7cc:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_phase2=(unsigned long *)STEARING_PWM_PHASE2;
     7d0:	00808074 	movhi	r2,513
     7d4:	10a8ad04 	addi	r2,r2,-23884
     7d8:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_duty1=(unsigned long *)STEARING_PWM_DUTY1;
     7dc:	00808074 	movhi	r2,513
     7e0:	10a8aa04 	addi	r2,r2,-23896
     7e4:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_duty2=(unsigned long *)STEARING_PWM_DUTY2;
     7e8:	00808074 	movhi	r2,513
     7ec:	10a8ab04 	addi	r2,r2,-23892
     7f0:	e0bffb15 	stw	r2,-20(fp)

	* pwm_en=enable;
     7f4:	e0bff617 	ldw	r2,-40(fp)
     7f8:	e0c00217 	ldw	r3,8(fp)
     7fc:	10c00015 	stw	r3,0(r2)
	* pwm_period=period;
     800:	e0bff717 	ldw	r2,-36(fp)
     804:	e0c00117 	ldw	r3,4(fp)
     808:	10c00015 	stw	r3,0(r2)
	* pwm_phase1=phase1;
     80c:	e0bff817 	ldw	r2,-32(fp)
     810:	e0fffc17 	ldw	r3,-16(fp)
     814:	10c00015 	stw	r3,0(r2)
	* pwm_phase2=phase2;
     818:	e0bff917 	ldw	r2,-28(fp)
     81c:	e0fffe17 	ldw	r3,-8(fp)
     820:	10c00015 	stw	r3,0(r2)
	* pwm_duty1=duty1;
     824:	e0bffa17 	ldw	r2,-24(fp)
     828:	e0fffd17 	ldw	r3,-12(fp)
     82c:	10c00015 	stw	r3,0(r2)
	* pwm_duty2=duty2;
     830:	e0bffb17 	ldw	r2,-20(fp)
     834:	e0ffff17 	ldw	r3,-4(fp)
     838:	10c00015 	stw	r3,0(r2)
}
     83c:	e037883a 	mov	sp,fp
     840:	df000017 	ldw	fp,0(sp)
     844:	dec00104 	addi	sp,sp,4
     848:	f800283a 	ret

0000084c <uart_init>:

  Remarks:
    None
  ***************************************************************************/
void uart_init(long Address, unsigned char flag)
{
     84c:	defffd04 	addi	sp,sp,-12
     850:	df000215 	stw	fp,8(sp)
     854:	df000204 	addi	fp,sp,8
     858:	e13ffe15 	stw	r4,-8(fp)
     85c:	2805883a 	mov	r2,r5
     860:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL(Address, flag);
     864:	e0bffe17 	ldw	r2,-8(fp)
     868:	10800304 	addi	r2,r2,12
     86c:	1007883a 	mov	r3,r2
     870:	e0bfff03 	ldbu	r2,-4(fp)
     874:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_UART_STATUS(Address, 0x00);
     878:	e0bffe17 	ldw	r2,-8(fp)
     87c:	10800204 	addi	r2,r2,8
     880:	0007883a 	mov	r3,zero
     884:	10c00035 	stwio	r3,0(r2)
}
     888:	e037883a 	mov	sp,fp
     88c:	df000017 	ldw	fp,0(sp)
     890:	dec00104 	addi	sp,sp,4
     894:	f800283a 	ret

00000898 <uart_send_byte>:

  Remarks:
    None
  ***************************************************************************/
void uart_send_byte(long Address, unsigned char data)
{
     898:	defffc04 	addi	sp,sp,-16
     89c:	df000315 	stw	fp,12(sp)
     8a0:	df000304 	addi	fp,sp,12
     8a4:	e13ffe15 	stw	r4,-8(fp)
     8a8:	2805883a 	mov	r2,r5
     8ac:	e0bfff05 	stb	r2,-4(fp)
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
     8b0:	e0bffe17 	ldw	r2,-8(fp)
     8b4:	10800104 	addi	r2,r2,4
     8b8:	1007883a 	mov	r3,r2
     8bc:	e0bfff03 	ldbu	r2,-4(fp)
     8c0:	18800035 	stwio	r2,0(r3)
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     8c4:	e0bffe17 	ldw	r2,-8(fp)
     8c8:	10800204 	addi	r2,r2,8
     8cc:	10800037 	ldwio	r2,0(r2)
     8d0:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0040))
     8d4:	00000406 	br	8e8 <uart_send_byte+0x50>
    {
    	//printf("Status in send is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     8d8:	e0bffe17 	ldw	r2,-8(fp)
     8dc:	10800204 	addi	r2,r2,8
     8e0:	10800037 	ldwio	r2,0(r2)
     8e4:	e0bffd15 	stw	r2,-12(fp)
void uart_send_byte(long Address, unsigned char data)
{
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0040))
     8e8:	e0bffd17 	ldw	r2,-12(fp)
     8ec:	1080100c 	andi	r2,r2,64
     8f0:	103ff926 	beq	r2,zero,8d8 <uart_send_byte+0x40>
    {
    	//printf("Status in send is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
}
     8f4:	e037883a 	mov	sp,fp
     8f8:	df000017 	ldw	fp,0(sp)
     8fc:	dec00104 	addi	sp,sp,4
     900:	f800283a 	ret

00000904 <uart_receive_byte>:

  Remarks:
    None
  ***************************************************************************/
unsigned char uart_receive_byte(long Address)
{
     904:	defffc04 	addi	sp,sp,-16
     908:	df000315 	stw	fp,12(sp)
     90c:	df000304 	addi	fp,sp,12
     910:	e13fff15 	stw	r4,-4(fp)
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     914:	e0bfff17 	ldw	r2,-4(fp)
     918:	10800204 	addi	r2,r2,8
     91c:	10800037 	ldwio	r2,0(r2)
     920:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0080))
     924:	00000406 	br	938 <uart_receive_byte+0x34>
    {
    	//printf("Status in receive is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     928:	e0bfff17 	ldw	r2,-4(fp)
     92c:	10800204 	addi	r2,r2,8
     930:	10800037 	ldwio	r2,0(r2)
     934:	e0bffd15 	stw	r2,-12(fp)
unsigned char uart_receive_byte(long Address)
{
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0080))
     938:	e0bffd17 	ldw	r2,-12(fp)
     93c:	1080200c 	andi	r2,r2,128
     940:	103ff926 	beq	r2,zero,928 <uart_receive_byte+0x24>
    {
    	//printf("Status in receive is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
    res=IORD_ALTERA_AVALON_UART_RXDATA(Address);
     944:	e0bfff17 	ldw	r2,-4(fp)
     948:	10800037 	ldwio	r2,0(r2)
     94c:	e0bffe05 	stb	r2,-8(fp)
    return res;
     950:	e0bffe03 	ldbu	r2,-8(fp)
}
     954:	e037883a 	mov	sp,fp
     958:	df000017 	ldw	fp,0(sp)
     95c:	dec00104 	addi	sp,sp,4
     960:	f800283a 	ret

00000964 <ultrasound_init>:

  Remarks:
    None
  ***************************************************************************/
void ultrasound_init(long Address)
{
     964:	defffd04 	addi	sp,sp,-12
     968:	dfc00215 	stw	ra,8(sp)
     96c:	df000115 	stw	fp,4(sp)
     970:	df000104 	addi	fp,sp,4
     974:	e13fff15 	stw	r4,-4(fp)
	uart_init(Address, 0x00);
     978:	e13fff17 	ldw	r4,-4(fp)
     97c:	000b883a 	mov	r5,zero
     980:	000084c0 	call	84c <uart_init>
}
     984:	e037883a 	mov	sp,fp
     988:	dfc00117 	ldw	ra,4(sp)
     98c:	df000017 	ldw	fp,0(sp)
     990:	dec00204 	addi	sp,sp,8
     994:	f800283a 	ret

00000998 <ultrasound_read>:

  Remarks:
    Distance in meter
  ***************************************************************************/
unsigned int ultrasound_read(long Address)
{
     998:	defffb04 	addi	sp,sp,-20
     99c:	dfc00415 	stw	ra,16(sp)
     9a0:	df000315 	stw	fp,12(sp)
     9a4:	df000304 	addi	fp,sp,12
     9a8:	e13fff15 	stw	r4,-4(fp)
	unsigned int i;
	unsigned char res_l, res_h;
	uart_send_byte(Address, 0xe8);
     9ac:	e13fff17 	ldw	r4,-4(fp)
     9b0:	01403a04 	movi	r5,232
     9b4:	00008980 	call	898 <uart_send_byte>

	for (i = 0; i < 2000; i++); //delay
     9b8:	e03ffd15 	stw	zero,-12(fp)
     9bc:	00000306 	br	9cc <ultrasound_read+0x34>
     9c0:	e0bffd17 	ldw	r2,-12(fp)
     9c4:	10800044 	addi	r2,r2,1
     9c8:	e0bffd15 	stw	r2,-12(fp)
     9cc:	e0bffd17 	ldw	r2,-12(fp)
     9d0:	1081f430 	cmpltui	r2,r2,2000
     9d4:	103ffa1e 	bne	r2,zero,9c0 <ultrasound_read+0x28>

	uart_send_byte(Address, 0x02);
     9d8:	e13fff17 	ldw	r4,-4(fp)
     9dc:	01400084 	movi	r5,2
     9e0:	00008980 	call	898 <uart_send_byte>

	for (i = 0; i < 2000; i++); //delay
     9e4:	e03ffd15 	stw	zero,-12(fp)
     9e8:	00000306 	br	9f8 <ultrasound_read+0x60>
     9ec:	e0bffd17 	ldw	r2,-12(fp)
     9f0:	10800044 	addi	r2,r2,1
     9f4:	e0bffd15 	stw	r2,-12(fp)
     9f8:	e0bffd17 	ldw	r2,-12(fp)
     9fc:	1081f430 	cmpltui	r2,r2,2000
     a00:	103ffa1e 	bne	r2,zero,9ec <ultrasound_read+0x54>

	uart_send_byte(Address, 0x0a); //0x0a -> range (0m-1m)
     a04:	e13fff17 	ldw	r4,-4(fp)
     a08:	01400284 	movi	r5,10
     a0c:	00008980 	call	898 <uart_send_byte>

	res_h = uart_receive_byte(Address);
     a10:	e13fff17 	ldw	r4,-4(fp)
     a14:	00009040 	call	904 <uart_receive_byte>
     a18:	e0bffe05 	stb	r2,-8(fp)

	//for (i = 0; i < 1000; i++); //delay

	res_l = uart_receive_byte(Address);
     a1c:	e13fff17 	ldw	r4,-4(fp)
     a20:	00009040 	call	904 <uart_receive_byte>
     a24:	e0bffe45 	stb	r2,-7(fp)

	//printf("res_h is %x, res_l is %x.\n", res_h, res_l);

	return (((unsigned int) res_h) << 8) + res_l;
     a28:	e0bffe03 	ldbu	r2,-8(fp)
     a2c:	1006923a 	slli	r3,r2,8
     a30:	e0bffe43 	ldbu	r2,-7(fp)
     a34:	1885883a 	add	r2,r3,r2
}
     a38:	e037883a 	mov	sp,fp
     a3c:	dfc00117 	ldw	ra,4(sp)
     a40:	df000017 	ldw	fp,0(sp)
     a44:	dec00204 	addi	sp,sp,8
     a48:	f800283a 	ret

00000a4c <_puts_r>:
     a4c:	defff604 	addi	sp,sp,-40
     a50:	dc000715 	stw	r16,28(sp)
     a54:	2021883a 	mov	r16,r4
     a58:	2809883a 	mov	r4,r5
     a5c:	dc400815 	stw	r17,32(sp)
     a60:	dfc00915 	stw	ra,36(sp)
     a64:	2823883a 	mov	r17,r5
     a68:	0000b080 	call	b08 <strlen>
     a6c:	81400217 	ldw	r5,8(r16)
     a70:	11000044 	addi	r4,r2,1
     a74:	d8800115 	stw	r2,4(sp)
     a78:	00800034 	movhi	r2,0
     a7c:	2980030b 	ldhu	r6,12(r5)
     a80:	109ed904 	addi	r2,r2,31588
     a84:	d8800215 	stw	r2,8(sp)
     a88:	00800044 	movi	r2,1
     a8c:	d8800315 	stw	r2,12(sp)
     a90:	00800084 	movi	r2,2
     a94:	d8800515 	stw	r2,20(sp)
     a98:	dc400015 	stw	r17,0(sp)
     a9c:	d9000615 	stw	r4,24(sp)
     aa0:	dec00415 	stw	sp,16(sp)
     aa4:	3088000c 	andi	r2,r6,8192
     aa8:	1000061e 	bne	r2,zero,ac4 <_puts_r+0x78>
     aac:	29001917 	ldw	r4,100(r5)
     ab0:	00b7ffc4 	movi	r2,-8193
     ab4:	31880014 	ori	r6,r6,8192
     ab8:	2084703a 	and	r2,r4,r2
     abc:	2980030d 	sth	r6,12(r5)
     ac0:	28801915 	stw	r2,100(r5)
     ac4:	8009883a 	mov	r4,r16
     ac8:	d9800404 	addi	r6,sp,16
     acc:	0000ba00 	call	ba0 <__sfvwrite_r>
     ad0:	1000061e 	bne	r2,zero,aec <_puts_r+0xa0>
     ad4:	00800284 	movi	r2,10
     ad8:	dfc00917 	ldw	ra,36(sp)
     adc:	dc400817 	ldw	r17,32(sp)
     ae0:	dc000717 	ldw	r16,28(sp)
     ae4:	dec00a04 	addi	sp,sp,40
     ae8:	f800283a 	ret
     aec:	00bfffc4 	movi	r2,-1
     af0:	003ff906 	br	ad8 <_puts_r+0x8c>

00000af4 <puts>:
     af4:	00800074 	movhi	r2,1
     af8:	10a6c104 	addi	r2,r2,-25852
     afc:	200b883a 	mov	r5,r4
     b00:	11000017 	ldw	r4,0(r2)
     b04:	0000a4c1 	jmpi	a4c <_puts_r>

00000b08 <strlen>:
     b08:	208000cc 	andi	r2,r4,3
     b0c:	10002026 	beq	r2,zero,b90 <strlen+0x88>
     b10:	20800007 	ldb	r2,0(r4)
     b14:	10002026 	beq	r2,zero,b98 <strlen+0x90>
     b18:	2005883a 	mov	r2,r4
     b1c:	00000206 	br	b28 <strlen+0x20>
     b20:	10c00007 	ldb	r3,0(r2)
     b24:	18001826 	beq	r3,zero,b88 <strlen+0x80>
     b28:	10800044 	addi	r2,r2,1
     b2c:	10c000cc 	andi	r3,r2,3
     b30:	183ffb1e 	bne	r3,zero,b20 <strlen+0x18>
     b34:	10c00017 	ldw	r3,0(r2)
     b38:	01ffbff4 	movhi	r7,65279
     b3c:	39ffbfc4 	addi	r7,r7,-257
     b40:	00ca303a 	nor	r5,zero,r3
     b44:	01a02074 	movhi	r6,32897
     b48:	19c7883a 	add	r3,r3,r7
     b4c:	31a02004 	addi	r6,r6,-32640
     b50:	1946703a 	and	r3,r3,r5
     b54:	1986703a 	and	r3,r3,r6
     b58:	1800091e 	bne	r3,zero,b80 <strlen+0x78>
     b5c:	10800104 	addi	r2,r2,4
     b60:	10c00017 	ldw	r3,0(r2)
     b64:	19cb883a 	add	r5,r3,r7
     b68:	00c6303a 	nor	r3,zero,r3
     b6c:	28c6703a 	and	r3,r5,r3
     b70:	1986703a 	and	r3,r3,r6
     b74:	183ff926 	beq	r3,zero,b5c <strlen+0x54>
     b78:	00000106 	br	b80 <strlen+0x78>
     b7c:	10800044 	addi	r2,r2,1
     b80:	10c00007 	ldb	r3,0(r2)
     b84:	183ffd1e 	bne	r3,zero,b7c <strlen+0x74>
     b88:	1105c83a 	sub	r2,r2,r4
     b8c:	f800283a 	ret
     b90:	2005883a 	mov	r2,r4
     b94:	003fe706 	br	b34 <strlen+0x2c>
     b98:	0005883a 	mov	r2,zero
     b9c:	f800283a 	ret

00000ba0 <__sfvwrite_r>:
     ba0:	30800217 	ldw	r2,8(r6)
     ba4:	10006726 	beq	r2,zero,d44 <__sfvwrite_r+0x1a4>
     ba8:	defff404 	addi	sp,sp,-48
     bac:	dd000615 	stw	r20,24(sp)
     bb0:	2029883a 	mov	r20,r4
     bb4:	2900030b 	ldhu	r4,12(r5)
     bb8:	ddc00915 	stw	r23,36(sp)
     bbc:	dc000215 	stw	r16,8(sp)
     bc0:	dfc00b15 	stw	ra,44(sp)
     bc4:	df000a15 	stw	fp,40(sp)
     bc8:	dd800815 	stw	r22,32(sp)
     bcc:	dd400715 	stw	r21,28(sp)
     bd0:	dcc00515 	stw	r19,20(sp)
     bd4:	dc800415 	stw	r18,16(sp)
     bd8:	dc400315 	stw	r17,12(sp)
     bdc:	2080020c 	andi	r2,r4,8
     be0:	2821883a 	mov	r16,r5
     be4:	302f883a 	mov	r23,r6
     be8:	10002726 	beq	r2,zero,c88 <__sfvwrite_r+0xe8>
     bec:	28800417 	ldw	r2,16(r5)
     bf0:	10002526 	beq	r2,zero,c88 <__sfvwrite_r+0xe8>
     bf4:	2080008c 	andi	r2,r4,2
     bf8:	bc400017 	ldw	r17,0(r23)
     bfc:	10002a26 	beq	r2,zero,ca8 <__sfvwrite_r+0x108>
     c00:	05600034 	movhi	r21,32768
     c04:	0027883a 	mov	r19,zero
     c08:	0025883a 	mov	r18,zero
     c0c:	ad7f0004 	addi	r21,r21,-1024
     c10:	980d883a 	mov	r6,r19
     c14:	a009883a 	mov	r4,r20
     c18:	90004626 	beq	r18,zero,d34 <__sfvwrite_r+0x194>
     c1c:	900f883a 	mov	r7,r18
     c20:	81400717 	ldw	r5,28(r16)
     c24:	ac80022e 	bgeu	r21,r18,c30 <__sfvwrite_r+0x90>
     c28:	01e00034 	movhi	r7,32768
     c2c:	39ff0004 	addi	r7,r7,-1024
     c30:	80800917 	ldw	r2,36(r16)
     c34:	103ee83a 	callr	r2
     c38:	0080550e 	bge	zero,r2,d90 <__sfvwrite_r+0x1f0>
     c3c:	b8c00217 	ldw	r3,8(r23)
     c40:	98a7883a 	add	r19,r19,r2
     c44:	90a5c83a 	sub	r18,r18,r2
     c48:	1885c83a 	sub	r2,r3,r2
     c4c:	b8800215 	stw	r2,8(r23)
     c50:	103fef1e 	bne	r2,zero,c10 <__sfvwrite_r+0x70>
     c54:	0005883a 	mov	r2,zero
     c58:	dfc00b17 	ldw	ra,44(sp)
     c5c:	df000a17 	ldw	fp,40(sp)
     c60:	ddc00917 	ldw	r23,36(sp)
     c64:	dd800817 	ldw	r22,32(sp)
     c68:	dd400717 	ldw	r21,28(sp)
     c6c:	dd000617 	ldw	r20,24(sp)
     c70:	dcc00517 	ldw	r19,20(sp)
     c74:	dc800417 	ldw	r18,16(sp)
     c78:	dc400317 	ldw	r17,12(sp)
     c7c:	dc000217 	ldw	r16,8(sp)
     c80:	dec00c04 	addi	sp,sp,48
     c84:	f800283a 	ret
     c88:	a009883a 	mov	r4,r20
     c8c:	800b883a 	mov	r5,r16
     c90:	000214c0 	call	214c <__swsetup_r>
     c94:	1000ef1e 	bne	r2,zero,1054 <__sfvwrite_r+0x4b4>
     c98:	8100030b 	ldhu	r4,12(r16)
     c9c:	bc400017 	ldw	r17,0(r23)
     ca0:	2080008c 	andi	r2,r4,2
     ca4:	103fd61e 	bne	r2,zero,c00 <__sfvwrite_r+0x60>
     ca8:	2080004c 	andi	r2,r4,1
     cac:	10003d1e 	bne	r2,zero,da4 <__sfvwrite_r+0x204>
     cb0:	0039883a 	mov	fp,zero
     cb4:	0025883a 	mov	r18,zero
     cb8:	90001a26 	beq	r18,zero,d24 <__sfvwrite_r+0x184>
     cbc:	2080800c 	andi	r2,r4,512
     cc0:	85800217 	ldw	r22,8(r16)
     cc4:	10007926 	beq	r2,zero,eac <__sfvwrite_r+0x30c>
     cc8:	b027883a 	mov	r19,r22
     ccc:	95809736 	bltu	r18,r22,f2c <__sfvwrite_r+0x38c>
     cd0:	2081200c 	andi	r2,r4,1152
     cd4:	1000a21e 	bne	r2,zero,f60 <__sfvwrite_r+0x3c0>
     cd8:	81000017 	ldw	r4,0(r16)
     cdc:	e00b883a 	mov	r5,fp
     ce0:	980d883a 	mov	r6,r19
     ce4:	0001a340 	call	1a34 <memmove>
     ce8:	81000217 	ldw	r4,8(r16)
     cec:	81400017 	ldw	r5,0(r16)
     cf0:	9005883a 	mov	r2,r18
     cf4:	2587c83a 	sub	r3,r4,r22
     cf8:	2ce7883a 	add	r19,r5,r19
     cfc:	80c00215 	stw	r3,8(r16)
     d00:	84c00015 	stw	r19,0(r16)
     d04:	b8c00217 	ldw	r3,8(r23)
     d08:	e0b9883a 	add	fp,fp,r2
     d0c:	90a5c83a 	sub	r18,r18,r2
     d10:	1885c83a 	sub	r2,r3,r2
     d14:	b8800215 	stw	r2,8(r23)
     d18:	103fce26 	beq	r2,zero,c54 <__sfvwrite_r+0xb4>
     d1c:	8100030b 	ldhu	r4,12(r16)
     d20:	903fe61e 	bne	r18,zero,cbc <__sfvwrite_r+0x11c>
     d24:	8f000017 	ldw	fp,0(r17)
     d28:	8c800117 	ldw	r18,4(r17)
     d2c:	8c400204 	addi	r17,r17,8
     d30:	003fe106 	br	cb8 <__sfvwrite_r+0x118>
     d34:	8cc00017 	ldw	r19,0(r17)
     d38:	8c800117 	ldw	r18,4(r17)
     d3c:	8c400204 	addi	r17,r17,8
     d40:	003fb306 	br	c10 <__sfvwrite_r+0x70>
     d44:	0005883a 	mov	r2,zero
     d48:	f800283a 	ret
     d4c:	00a00034 	movhi	r2,32768
     d50:	10bfffc4 	addi	r2,r2,-1
     d54:	9009883a 	mov	r4,r18
     d58:	1480012e 	bgeu	r2,r18,d60 <__sfvwrite_r+0x1c0>
     d5c:	1009883a 	mov	r4,r2
     d60:	980b883a 	mov	r5,r19
     d64:	000361c0 	call	361c <__divsi3>
     d68:	9809883a 	mov	r4,r19
     d6c:	100b883a 	mov	r5,r2
     d70:	00036dc0 	call	36dc <__mulsi3>
     d74:	81400717 	ldw	r5,28(r16)
     d78:	80c00917 	ldw	r3,36(r16)
     d7c:	a009883a 	mov	r4,r20
     d80:	e00d883a 	mov	r6,fp
     d84:	100f883a 	mov	r7,r2
     d88:	183ee83a 	callr	r3
     d8c:	00bfdd16 	blt	zero,r2,d04 <__sfvwrite_r+0x164>
     d90:	8080030b 	ldhu	r2,12(r16)
     d94:	10801014 	ori	r2,r2,64
     d98:	8080030d 	sth	r2,12(r16)
     d9c:	00bfffc4 	movi	r2,-1
     da0:	003fad06 	br	c58 <__sfvwrite_r+0xb8>
     da4:	0027883a 	mov	r19,zero
     da8:	0011883a 	mov	r8,zero
     dac:	0039883a 	mov	fp,zero
     db0:	0025883a 	mov	r18,zero
     db4:	90001f26 	beq	r18,zero,e34 <__sfvwrite_r+0x294>
     db8:	40006026 	beq	r8,zero,f3c <__sfvwrite_r+0x39c>
     dbc:	982b883a 	mov	r21,r19
     dc0:	94c0012e 	bgeu	r18,r19,dc8 <__sfvwrite_r+0x228>
     dc4:	902b883a 	mov	r21,r18
     dc8:	81000017 	ldw	r4,0(r16)
     dcc:	80800417 	ldw	r2,16(r16)
     dd0:	a82d883a 	mov	r22,r21
     dd4:	81800217 	ldw	r6,8(r16)
     dd8:	81c00517 	ldw	r7,20(r16)
     ddc:	1100022e 	bgeu	r2,r4,de8 <__sfvwrite_r+0x248>
     de0:	31c7883a 	add	r3,r6,r7
     de4:	1d401816 	blt	r3,r21,e48 <__sfvwrite_r+0x2a8>
     de8:	a9c04416 	blt	r21,r7,efc <__sfvwrite_r+0x35c>
     dec:	80800917 	ldw	r2,36(r16)
     df0:	81400717 	ldw	r5,28(r16)
     df4:	a009883a 	mov	r4,r20
     df8:	da000115 	stw	r8,4(sp)
     dfc:	e00d883a 	mov	r6,fp
     e00:	103ee83a 	callr	r2
     e04:	102d883a 	mov	r22,r2
     e08:	da000117 	ldw	r8,4(sp)
     e0c:	00bfe00e 	bge	zero,r2,d90 <__sfvwrite_r+0x1f0>
     e10:	9da7c83a 	sub	r19,r19,r22
     e14:	98001f26 	beq	r19,zero,e94 <__sfvwrite_r+0x2f4>
     e18:	b8800217 	ldw	r2,8(r23)
     e1c:	e5b9883a 	add	fp,fp,r22
     e20:	95a5c83a 	sub	r18,r18,r22
     e24:	15adc83a 	sub	r22,r2,r22
     e28:	bd800215 	stw	r22,8(r23)
     e2c:	b03f8926 	beq	r22,zero,c54 <__sfvwrite_r+0xb4>
     e30:	903fe11e 	bne	r18,zero,db8 <__sfvwrite_r+0x218>
     e34:	8f000017 	ldw	fp,0(r17)
     e38:	8c800117 	ldw	r18,4(r17)
     e3c:	0011883a 	mov	r8,zero
     e40:	8c400204 	addi	r17,r17,8
     e44:	003fdb06 	br	db4 <__sfvwrite_r+0x214>
     e48:	180d883a 	mov	r6,r3
     e4c:	e00b883a 	mov	r5,fp
     e50:	da000115 	stw	r8,4(sp)
     e54:	d8c00015 	stw	r3,0(sp)
     e58:	0001a340 	call	1a34 <memmove>
     e5c:	d8c00017 	ldw	r3,0(sp)
     e60:	80800017 	ldw	r2,0(r16)
     e64:	a009883a 	mov	r4,r20
     e68:	800b883a 	mov	r5,r16
     e6c:	10c5883a 	add	r2,r2,r3
     e70:	80800015 	stw	r2,0(r16)
     e74:	d8c00015 	stw	r3,0(sp)
     e78:	00024a80 	call	24a8 <_fflush_r>
     e7c:	d8c00017 	ldw	r3,0(sp)
     e80:	da000117 	ldw	r8,4(sp)
     e84:	103fc21e 	bne	r2,zero,d90 <__sfvwrite_r+0x1f0>
     e88:	182d883a 	mov	r22,r3
     e8c:	9da7c83a 	sub	r19,r19,r22
     e90:	983fe11e 	bne	r19,zero,e18 <__sfvwrite_r+0x278>
     e94:	a009883a 	mov	r4,r20
     e98:	800b883a 	mov	r5,r16
     e9c:	00024a80 	call	24a8 <_fflush_r>
     ea0:	103fbb1e 	bne	r2,zero,d90 <__sfvwrite_r+0x1f0>
     ea4:	0011883a 	mov	r8,zero
     ea8:	003fdb06 	br	e18 <__sfvwrite_r+0x278>
     eac:	81000017 	ldw	r4,0(r16)
     eb0:	80800417 	ldw	r2,16(r16)
     eb4:	11000236 	bltu	r2,r4,ec0 <__sfvwrite_r+0x320>
     eb8:	84c00517 	ldw	r19,20(r16)
     ebc:	94ffa32e 	bgeu	r18,r19,d4c <__sfvwrite_r+0x1ac>
     ec0:	9027883a 	mov	r19,r18
     ec4:	b480012e 	bgeu	r22,r18,ecc <__sfvwrite_r+0x32c>
     ec8:	b027883a 	mov	r19,r22
     ecc:	e00b883a 	mov	r5,fp
     ed0:	980d883a 	mov	r6,r19
     ed4:	0001a340 	call	1a34 <memmove>
     ed8:	80800217 	ldw	r2,8(r16)
     edc:	80c00017 	ldw	r3,0(r16)
     ee0:	14c5c83a 	sub	r2,r2,r19
     ee4:	1cc7883a 	add	r3,r3,r19
     ee8:	80800215 	stw	r2,8(r16)
     eec:	80c00015 	stw	r3,0(r16)
     ef0:	10004326 	beq	r2,zero,1000 <__sfvwrite_r+0x460>
     ef4:	9805883a 	mov	r2,r19
     ef8:	003f8206 	br	d04 <__sfvwrite_r+0x164>
     efc:	a80d883a 	mov	r6,r21
     f00:	e00b883a 	mov	r5,fp
     f04:	da000115 	stw	r8,4(sp)
     f08:	0001a340 	call	1a34 <memmove>
     f0c:	80800217 	ldw	r2,8(r16)
     f10:	80c00017 	ldw	r3,0(r16)
     f14:	da000117 	ldw	r8,4(sp)
     f18:	1545c83a 	sub	r2,r2,r21
     f1c:	1d6b883a 	add	r21,r3,r21
     f20:	80800215 	stw	r2,8(r16)
     f24:	85400015 	stw	r21,0(r16)
     f28:	003fb906 	br	e10 <__sfvwrite_r+0x270>
     f2c:	81000017 	ldw	r4,0(r16)
     f30:	902d883a 	mov	r22,r18
     f34:	9027883a 	mov	r19,r18
     f38:	003f6806 	br	cdc <__sfvwrite_r+0x13c>
     f3c:	e009883a 	mov	r4,fp
     f40:	01400284 	movi	r5,10
     f44:	900d883a 	mov	r6,r18
     f48:	00018140 	call	1814 <memchr>
     f4c:	10003e26 	beq	r2,zero,1048 <__sfvwrite_r+0x4a8>
     f50:	10800044 	addi	r2,r2,1
     f54:	1727c83a 	sub	r19,r2,fp
     f58:	02000044 	movi	r8,1
     f5c:	003f9706 	br	dbc <__sfvwrite_r+0x21c>
     f60:	80800517 	ldw	r2,20(r16)
     f64:	81400417 	ldw	r5,16(r16)
     f68:	80c00017 	ldw	r3,0(r16)
     f6c:	10a7883a 	add	r19,r2,r2
     f70:	9885883a 	add	r2,r19,r2
     f74:	1026d7fa 	srli	r19,r2,31
     f78:	196bc83a 	sub	r21,r3,r5
     f7c:	a9800044 	addi	r6,r21,1
     f80:	9885883a 	add	r2,r19,r2
     f84:	1027d07a 	srai	r19,r2,1
     f88:	3485883a 	add	r2,r6,r18
     f8c:	980d883a 	mov	r6,r19
     f90:	9880022e 	bgeu	r19,r2,f9c <__sfvwrite_r+0x3fc>
     f94:	1027883a 	mov	r19,r2
     f98:	100d883a 	mov	r6,r2
     f9c:	2101000c 	andi	r4,r4,1024
     fa0:	20001c26 	beq	r4,zero,1014 <__sfvwrite_r+0x474>
     fa4:	a009883a 	mov	r4,r20
     fa8:	300b883a 	mov	r5,r6
     fac:	000106c0 	call	106c <_malloc_r>
     fb0:	102d883a 	mov	r22,r2
     fb4:	10002926 	beq	r2,zero,105c <__sfvwrite_r+0x4bc>
     fb8:	81400417 	ldw	r5,16(r16)
     fbc:	1009883a 	mov	r4,r2
     fc0:	a80d883a 	mov	r6,r21
     fc4:	00018fc0 	call	18fc <memcpy>
     fc8:	8080030b 	ldhu	r2,12(r16)
     fcc:	00fedfc4 	movi	r3,-1153
     fd0:	10c4703a 	and	r2,r2,r3
     fd4:	10802014 	ori	r2,r2,128
     fd8:	8080030d 	sth	r2,12(r16)
     fdc:	b549883a 	add	r4,r22,r21
     fe0:	9d4bc83a 	sub	r5,r19,r21
     fe4:	85800415 	stw	r22,16(r16)
     fe8:	84c00515 	stw	r19,20(r16)
     fec:	81000015 	stw	r4,0(r16)
     ff0:	902d883a 	mov	r22,r18
     ff4:	81400215 	stw	r5,8(r16)
     ff8:	9027883a 	mov	r19,r18
     ffc:	003f3706 	br	cdc <__sfvwrite_r+0x13c>
    1000:	a009883a 	mov	r4,r20
    1004:	800b883a 	mov	r5,r16
    1008:	00024a80 	call	24a8 <_fflush_r>
    100c:	103fb926 	beq	r2,zero,ef4 <__sfvwrite_r+0x354>
    1010:	003f5f06 	br	d90 <__sfvwrite_r+0x1f0>
    1014:	a009883a 	mov	r4,r20
    1018:	0001b900 	call	1b90 <_realloc_r>
    101c:	102d883a 	mov	r22,r2
    1020:	103fee1e 	bne	r2,zero,fdc <__sfvwrite_r+0x43c>
    1024:	81400417 	ldw	r5,16(r16)
    1028:	a009883a 	mov	r4,r20
    102c:	0002a080 	call	2a08 <_free_r>
    1030:	8080030b 	ldhu	r2,12(r16)
    1034:	00ffdfc4 	movi	r3,-129
    1038:	1884703a 	and	r2,r3,r2
    103c:	00c00304 	movi	r3,12
    1040:	a0c00015 	stw	r3,0(r20)
    1044:	003f5306 	br	d94 <__sfvwrite_r+0x1f4>
    1048:	94c00044 	addi	r19,r18,1
    104c:	02000044 	movi	r8,1
    1050:	003f5a06 	br	dbc <__sfvwrite_r+0x21c>
    1054:	00bfffc4 	movi	r2,-1
    1058:	003eff06 	br	c58 <__sfvwrite_r+0xb8>
    105c:	00800304 	movi	r2,12
    1060:	a0800015 	stw	r2,0(r20)
    1064:	8080030b 	ldhu	r2,12(r16)
    1068:	003f4a06 	br	d94 <__sfvwrite_r+0x1f4>

0000106c <_malloc_r>:
    106c:	defff504 	addi	sp,sp,-44
    1070:	dc800315 	stw	r18,12(sp)
    1074:	dfc00a15 	stw	ra,40(sp)
    1078:	df000915 	stw	fp,36(sp)
    107c:	ddc00815 	stw	r23,32(sp)
    1080:	dd800715 	stw	r22,28(sp)
    1084:	dd400615 	stw	r21,24(sp)
    1088:	dd000515 	stw	r20,20(sp)
    108c:	dcc00415 	stw	r19,16(sp)
    1090:	dc400215 	stw	r17,8(sp)
    1094:	dc000115 	stw	r16,4(sp)
    1098:	288002c4 	addi	r2,r5,11
    109c:	00c00584 	movi	r3,22
    10a0:	2025883a 	mov	r18,r4
    10a4:	18802a2e 	bgeu	r3,r2,1150 <_malloc_r+0xe4>
    10a8:	047ffe04 	movi	r17,-8
    10ac:	1462703a 	and	r17,r2,r17
    10b0:	88009e16 	blt	r17,zero,132c <_malloc_r+0x2c0>
    10b4:	89409d36 	bltu	r17,r5,132c <_malloc_r+0x2c0>
    10b8:	0003c000 	call	3c00 <__malloc_lock>
    10bc:	00807dc4 	movi	r2,503
    10c0:	14402736 	bltu	r2,r17,1160 <_malloc_r+0xf4>
    10c4:	8806d0fa 	srli	r3,r17,3
    10c8:	04c00074 	movhi	r19,1
    10cc:	9ce01404 	addi	r19,r19,-32688
    10d0:	18c5883a 	add	r2,r3,r3
    10d4:	1085883a 	add	r2,r2,r2
    10d8:	1085883a 	add	r2,r2,r2
    10dc:	9885883a 	add	r2,r19,r2
    10e0:	14000317 	ldw	r16,12(r2)
    10e4:	80814a26 	beq	r16,r2,1610 <_malloc_r+0x5a4>
    10e8:	80c00117 	ldw	r3,4(r16)
    10ec:	81000317 	ldw	r4,12(r16)
    10f0:	00bfff04 	movi	r2,-4
    10f4:	1884703a 	and	r2,r3,r2
    10f8:	81400217 	ldw	r5,8(r16)
    10fc:	8085883a 	add	r2,r16,r2
    1100:	10c00117 	ldw	r3,4(r2)
    1104:	29000315 	stw	r4,12(r5)
    1108:	21400215 	stw	r5,8(r4)
    110c:	18c00054 	ori	r3,r3,1
    1110:	10c00115 	stw	r3,4(r2)
    1114:	9009883a 	mov	r4,r18
    1118:	0003c200 	call	3c20 <__malloc_unlock>
    111c:	80800204 	addi	r2,r16,8
    1120:	dfc00a17 	ldw	ra,40(sp)
    1124:	df000917 	ldw	fp,36(sp)
    1128:	ddc00817 	ldw	r23,32(sp)
    112c:	dd800717 	ldw	r22,28(sp)
    1130:	dd400617 	ldw	r21,24(sp)
    1134:	dd000517 	ldw	r20,20(sp)
    1138:	dcc00417 	ldw	r19,16(sp)
    113c:	dc800317 	ldw	r18,12(sp)
    1140:	dc400217 	ldw	r17,8(sp)
    1144:	dc000117 	ldw	r16,4(sp)
    1148:	dec00b04 	addi	sp,sp,44
    114c:	f800283a 	ret
    1150:	04400404 	movi	r17,16
    1154:	89407536 	bltu	r17,r5,132c <_malloc_r+0x2c0>
    1158:	0003c000 	call	3c00 <__malloc_lock>
    115c:	003fd906 	br	10c4 <_malloc_r+0x58>
    1160:	8806d27a 	srli	r3,r17,9
    1164:	18007526 	beq	r3,zero,133c <_malloc_r+0x2d0>
    1168:	00800104 	movi	r2,4
    116c:	10c0ef36 	bltu	r2,r3,152c <_malloc_r+0x4c0>
    1170:	8806d1ba 	srli	r3,r17,6
    1174:	19c00e04 	addi	r7,r3,56
    1178:	39cb883a 	add	r5,r7,r7
    117c:	04c00074 	movhi	r19,1
    1180:	294b883a 	add	r5,r5,r5
    1184:	9ce01404 	addi	r19,r19,-32688
    1188:	294b883a 	add	r5,r5,r5
    118c:	994b883a 	add	r5,r19,r5
    1190:	2c000317 	ldw	r16,12(r5)
    1194:	2c000e26 	beq	r5,r16,11d0 <_malloc_r+0x164>
    1198:	80800117 	ldw	r2,4(r16)
    119c:	01bfff04 	movi	r6,-4
    11a0:	010003c4 	movi	r4,15
    11a4:	1184703a 	and	r2,r2,r6
    11a8:	1447c83a 	sub	r3,r2,r17
    11ac:	20c00716 	blt	r4,r3,11cc <_malloc_r+0x160>
    11b0:	1800650e 	bge	r3,zero,1348 <_malloc_r+0x2dc>
    11b4:	84000317 	ldw	r16,12(r16)
    11b8:	2c000526 	beq	r5,r16,11d0 <_malloc_r+0x164>
    11bc:	80800117 	ldw	r2,4(r16)
    11c0:	1184703a 	and	r2,r2,r6
    11c4:	1447c83a 	sub	r3,r2,r17
    11c8:	20fff90e 	bge	r4,r3,11b0 <_malloc_r+0x144>
    11cc:	39ffffc4 	addi	r7,r7,-1
    11d0:	38c00044 	addi	r3,r7,1
    11d4:	01800074 	movhi	r6,1
    11d8:	9c000417 	ldw	r16,16(r19)
    11dc:	31a01404 	addi	r6,r6,-32688
    11e0:	32400204 	addi	r9,r6,8
    11e4:	82410326 	beq	r16,r9,15f4 <_malloc_r+0x588>
    11e8:	81000117 	ldw	r4,4(r16)
    11ec:	00bfff04 	movi	r2,-4
    11f0:	208e703a 	and	r7,r4,r2
    11f4:	3c45c83a 	sub	r2,r7,r17
    11f8:	010003c4 	movi	r4,15
    11fc:	2080ee16 	blt	r4,r2,15b8 <_malloc_r+0x54c>
    1200:	32400515 	stw	r9,20(r6)
    1204:	32400415 	stw	r9,16(r6)
    1208:	1000510e 	bge	r2,zero,1350 <_malloc_r+0x2e4>
    120c:	00807fc4 	movi	r2,511
    1210:	11c0ce36 	bltu	r2,r7,154c <_malloc_r+0x4e0>
    1214:	3808d0fa 	srli	r4,r7,3
    1218:	01c00044 	movi	r7,1
    121c:	30800117 	ldw	r2,4(r6)
    1220:	210b883a 	add	r5,r4,r4
    1224:	294b883a 	add	r5,r5,r5
    1228:	2009d0ba 	srai	r4,r4,2
    122c:	294b883a 	add	r5,r5,r5
    1230:	298b883a 	add	r5,r5,r6
    1234:	2a000217 	ldw	r8,8(r5)
    1238:	3908983a 	sll	r4,r7,r4
    123c:	81400315 	stw	r5,12(r16)
    1240:	82000215 	stw	r8,8(r16)
    1244:	2088b03a 	or	r4,r4,r2
    1248:	2c000215 	stw	r16,8(r5)
    124c:	31000115 	stw	r4,4(r6)
    1250:	44000315 	stw	r16,12(r8)
    1254:	1805d0ba 	srai	r2,r3,2
    1258:	01400044 	movi	r5,1
    125c:	288a983a 	sll	r5,r5,r2
    1260:	21404336 	bltu	r4,r5,1370 <_malloc_r+0x304>
    1264:	2144703a 	and	r2,r4,r5
    1268:	10000a1e 	bne	r2,zero,1294 <_malloc_r+0x228>
    126c:	00bfff04 	movi	r2,-4
    1270:	294b883a 	add	r5,r5,r5
    1274:	1886703a 	and	r3,r3,r2
    1278:	2144703a 	and	r2,r4,r5
    127c:	18c00104 	addi	r3,r3,4
    1280:	1000041e 	bne	r2,zero,1294 <_malloc_r+0x228>
    1284:	294b883a 	add	r5,r5,r5
    1288:	2144703a 	and	r2,r4,r5
    128c:	18c00104 	addi	r3,r3,4
    1290:	103ffc26 	beq	r2,zero,1284 <_malloc_r+0x218>
    1294:	023fff04 	movi	r8,-4
    1298:	01c003c4 	movi	r7,15
    129c:	18c5883a 	add	r2,r3,r3
    12a0:	1085883a 	add	r2,r2,r2
    12a4:	1085883a 	add	r2,r2,r2
    12a8:	9895883a 	add	r10,r19,r2
    12ac:	52c00304 	addi	r11,r10,12
    12b0:	1819883a 	mov	r12,r3
    12b4:	5c000017 	ldw	r16,0(r11)
    12b8:	59bffd04 	addi	r6,r11,-12
    12bc:	8180041e 	bne	r16,r6,12d0 <_malloc_r+0x264>
    12c0:	0000ce06 	br	15fc <_malloc_r+0x590>
    12c4:	2000d70e 	bge	r4,zero,1624 <_malloc_r+0x5b8>
    12c8:	84000317 	ldw	r16,12(r16)
    12cc:	8180cb26 	beq	r16,r6,15fc <_malloc_r+0x590>
    12d0:	80800117 	ldw	r2,4(r16)
    12d4:	1204703a 	and	r2,r2,r8
    12d8:	1449c83a 	sub	r4,r2,r17
    12dc:	393ff90e 	bge	r7,r4,12c4 <_malloc_r+0x258>
    12e0:	80800317 	ldw	r2,12(r16)
    12e4:	80c00217 	ldw	r3,8(r16)
    12e8:	89400054 	ori	r5,r17,1
    12ec:	81400115 	stw	r5,4(r16)
    12f0:	18800315 	stw	r2,12(r3)
    12f4:	10c00215 	stw	r3,8(r2)
    12f8:	8463883a 	add	r17,r16,r17
    12fc:	9c400515 	stw	r17,20(r19)
    1300:	9c400415 	stw	r17,16(r19)
    1304:	20800054 	ori	r2,r4,1
    1308:	88800115 	stw	r2,4(r17)
    130c:	8a400315 	stw	r9,12(r17)
    1310:	8a400215 	stw	r9,8(r17)
    1314:	8923883a 	add	r17,r17,r4
    1318:	89000015 	stw	r4,0(r17)
    131c:	9009883a 	mov	r4,r18
    1320:	0003c200 	call	3c20 <__malloc_unlock>
    1324:	80800204 	addi	r2,r16,8
    1328:	003f7d06 	br	1120 <_malloc_r+0xb4>
    132c:	00800304 	movi	r2,12
    1330:	90800015 	stw	r2,0(r18)
    1334:	0005883a 	mov	r2,zero
    1338:	003f7906 	br	1120 <_malloc_r+0xb4>
    133c:	01401f84 	movi	r5,126
    1340:	01c00fc4 	movi	r7,63
    1344:	003f8d06 	br	117c <_malloc_r+0x110>
    1348:	81000317 	ldw	r4,12(r16)
    134c:	003f6a06 	br	10f8 <_malloc_r+0x8c>
    1350:	81c5883a 	add	r2,r16,r7
    1354:	10c00117 	ldw	r3,4(r2)
    1358:	9009883a 	mov	r4,r18
    135c:	18c00054 	ori	r3,r3,1
    1360:	10c00115 	stw	r3,4(r2)
    1364:	0003c200 	call	3c20 <__malloc_unlock>
    1368:	80800204 	addi	r2,r16,8
    136c:	003f6c06 	br	1120 <_malloc_r+0xb4>
    1370:	9c000217 	ldw	r16,8(r19)
    1374:	00bfff04 	movi	r2,-4
    1378:	85800117 	ldw	r22,4(r16)
    137c:	b0ac703a 	and	r22,r22,r2
    1380:	b4400336 	bltu	r22,r17,1390 <_malloc_r+0x324>
    1384:	b445c83a 	sub	r2,r22,r17
    1388:	00c003c4 	movi	r3,15
    138c:	18805d16 	blt	r3,r2,1504 <_malloc_r+0x498>
    1390:	05c00074 	movhi	r23,1
    1394:	00800074 	movhi	r2,1
    1398:	bde6c204 	addi	r23,r23,-25848
    139c:	10a6d204 	addi	r2,r2,-25784
    13a0:	15400017 	ldw	r21,0(r2)
    13a4:	b9000017 	ldw	r4,0(r23)
    13a8:	00ffffc4 	movi	r3,-1
    13ac:	858d883a 	add	r6,r16,r22
    13b0:	8d6b883a 	add	r21,r17,r21
    13b4:	20c0e426 	beq	r4,r3,1748 <_malloc_r+0x6dc>
    13b8:	ad4403c4 	addi	r21,r21,4111
    13bc:	00fc0004 	movi	r3,-4096
    13c0:	a8ea703a 	and	r21,r21,r3
    13c4:	9009883a 	mov	r4,r18
    13c8:	a80b883a 	mov	r5,r21
    13cc:	d9800015 	stw	r6,0(sp)
    13d0:	00020f80 	call	20f8 <_sbrk_r>
    13d4:	00ffffc4 	movi	r3,-1
    13d8:	1029883a 	mov	r20,r2
    13dc:	d9800017 	ldw	r6,0(sp)
    13e0:	10c0a426 	beq	r2,r3,1674 <_malloc_r+0x608>
    13e4:	1180a236 	bltu	r2,r6,1670 <_malloc_r+0x604>
    13e8:	07000074 	movhi	fp,1
    13ec:	e726da04 	addi	fp,fp,-25752
    13f0:	e0c00017 	ldw	r3,0(fp)
    13f4:	a8c7883a 	add	r3,r21,r3
    13f8:	e0c00015 	stw	r3,0(fp)
    13fc:	3500da26 	beq	r6,r20,1768 <_malloc_r+0x6fc>
    1400:	b9000017 	ldw	r4,0(r23)
    1404:	00bfffc4 	movi	r2,-1
    1408:	2080e426 	beq	r4,r2,179c <_malloc_r+0x730>
    140c:	a185c83a 	sub	r2,r20,r6
    1410:	1885883a 	add	r2,r3,r2
    1414:	e0800015 	stw	r2,0(fp)
    1418:	a0c001cc 	andi	r3,r20,7
    141c:	1800b526 	beq	r3,zero,16f4 <_malloc_r+0x688>
    1420:	a0e9c83a 	sub	r20,r20,r3
    1424:	00840204 	movi	r2,4104
    1428:	a5000204 	addi	r20,r20,8
    142c:	10c7c83a 	sub	r3,r2,r3
    1430:	a545883a 	add	r2,r20,r21
    1434:	1083ffcc 	andi	r2,r2,4095
    1438:	18abc83a 	sub	r21,r3,r2
    143c:	9009883a 	mov	r4,r18
    1440:	a80b883a 	mov	r5,r21
    1444:	00020f80 	call	20f8 <_sbrk_r>
    1448:	00ffffc4 	movi	r3,-1
    144c:	10c0d026 	beq	r2,r3,1790 <_malloc_r+0x724>
    1450:	1507c83a 	sub	r3,r2,r20
    1454:	a8c7883a 	add	r3,r21,r3
    1458:	18c00054 	ori	r3,r3,1
    145c:	e0800017 	ldw	r2,0(fp)
    1460:	9d000215 	stw	r20,8(r19)
    1464:	a0c00115 	stw	r3,4(r20)
    1468:	a887883a 	add	r3,r21,r2
    146c:	e0c00015 	stw	r3,0(fp)
    1470:	84c00e26 	beq	r16,r19,14ac <_malloc_r+0x440>
    1474:	018003c4 	movi	r6,15
    1478:	3580a02e 	bgeu	r6,r22,16fc <_malloc_r+0x690>
    147c:	81400117 	ldw	r5,4(r16)
    1480:	013ffe04 	movi	r4,-8
    1484:	b0bffd04 	addi	r2,r22,-12
    1488:	1104703a 	and	r2,r2,r4
    148c:	2900004c 	andi	r4,r5,1
    1490:	1108b03a 	or	r4,r2,r4
    1494:	81000115 	stw	r4,4(r16)
    1498:	01400144 	movi	r5,5
    149c:	8089883a 	add	r4,r16,r2
    14a0:	21400115 	stw	r5,4(r4)
    14a4:	21400215 	stw	r5,8(r4)
    14a8:	3080c036 	bltu	r6,r2,17ac <_malloc_r+0x740>
    14ac:	00800074 	movhi	r2,1
    14b0:	10a6d104 	addi	r2,r2,-25788
    14b4:	11000017 	ldw	r4,0(r2)
    14b8:	20c0012e 	bgeu	r4,r3,14c0 <_malloc_r+0x454>
    14bc:	10c00015 	stw	r3,0(r2)
    14c0:	00800074 	movhi	r2,1
    14c4:	10a6d004 	addi	r2,r2,-25792
    14c8:	11000017 	ldw	r4,0(r2)
    14cc:	9c000217 	ldw	r16,8(r19)
    14d0:	20c0012e 	bgeu	r4,r3,14d8 <_malloc_r+0x46c>
    14d4:	10c00015 	stw	r3,0(r2)
    14d8:	80c00117 	ldw	r3,4(r16)
    14dc:	00bfff04 	movi	r2,-4
    14e0:	1886703a 	and	r3,r3,r2
    14e4:	1c45c83a 	sub	r2,r3,r17
    14e8:	1c400236 	bltu	r3,r17,14f4 <_malloc_r+0x488>
    14ec:	00c003c4 	movi	r3,15
    14f0:	18800416 	blt	r3,r2,1504 <_malloc_r+0x498>
    14f4:	9009883a 	mov	r4,r18
    14f8:	0003c200 	call	3c20 <__malloc_unlock>
    14fc:	0005883a 	mov	r2,zero
    1500:	003f0706 	br	1120 <_malloc_r+0xb4>
    1504:	88c00054 	ori	r3,r17,1
    1508:	80c00115 	stw	r3,4(r16)
    150c:	8463883a 	add	r17,r16,r17
    1510:	10800054 	ori	r2,r2,1
    1514:	9c400215 	stw	r17,8(r19)
    1518:	88800115 	stw	r2,4(r17)
    151c:	9009883a 	mov	r4,r18
    1520:	0003c200 	call	3c20 <__malloc_unlock>
    1524:	80800204 	addi	r2,r16,8
    1528:	003efd06 	br	1120 <_malloc_r+0xb4>
    152c:	00800504 	movi	r2,20
    1530:	10c0482e 	bgeu	r2,r3,1654 <_malloc_r+0x5e8>
    1534:	00801504 	movi	r2,84
    1538:	10c06836 	bltu	r2,r3,16dc <_malloc_r+0x670>
    153c:	8806d33a 	srli	r3,r17,12
    1540:	19c01b84 	addi	r7,r3,110
    1544:	39cb883a 	add	r5,r7,r7
    1548:	003f0c06 	br	117c <_malloc_r+0x110>
    154c:	3804d27a 	srli	r2,r7,9
    1550:	01000104 	movi	r4,4
    1554:	2080422e 	bgeu	r4,r2,1660 <_malloc_r+0x5f4>
    1558:	01000504 	movi	r4,20
    155c:	20807c36 	bltu	r4,r2,1750 <_malloc_r+0x6e4>
    1560:	110016c4 	addi	r4,r2,91
    1564:	210b883a 	add	r5,r4,r4
    1568:	294b883a 	add	r5,r5,r5
    156c:	294b883a 	add	r5,r5,r5
    1570:	994b883a 	add	r5,r19,r5
    1574:	28800217 	ldw	r2,8(r5)
    1578:	02000074 	movhi	r8,1
    157c:	42201404 	addi	r8,r8,-32688
    1580:	11406326 	beq	r2,r5,1710 <_malloc_r+0x6a4>
    1584:	01bfff04 	movi	r6,-4
    1588:	11000117 	ldw	r4,4(r2)
    158c:	2188703a 	and	r4,r4,r6
    1590:	3900022e 	bgeu	r7,r4,159c <_malloc_r+0x530>
    1594:	10800217 	ldw	r2,8(r2)
    1598:	28bffb1e 	bne	r5,r2,1588 <_malloc_r+0x51c>
    159c:	11800317 	ldw	r6,12(r2)
    15a0:	99000117 	ldw	r4,4(r19)
    15a4:	81800315 	stw	r6,12(r16)
    15a8:	80800215 	stw	r2,8(r16)
    15ac:	34000215 	stw	r16,8(r6)
    15b0:	14000315 	stw	r16,12(r2)
    15b4:	003f2706 	br	1254 <_malloc_r+0x1e8>
    15b8:	88c00054 	ori	r3,r17,1
    15bc:	80c00115 	stw	r3,4(r16)
    15c0:	8463883a 	add	r17,r16,r17
    15c4:	34400515 	stw	r17,20(r6)
    15c8:	34400415 	stw	r17,16(r6)
    15cc:	10c00054 	ori	r3,r2,1
    15d0:	8a400315 	stw	r9,12(r17)
    15d4:	8a400215 	stw	r9,8(r17)
    15d8:	88c00115 	stw	r3,4(r17)
    15dc:	88a3883a 	add	r17,r17,r2
    15e0:	88800015 	stw	r2,0(r17)
    15e4:	9009883a 	mov	r4,r18
    15e8:	0003c200 	call	3c20 <__malloc_unlock>
    15ec:	80800204 	addi	r2,r16,8
    15f0:	003ecb06 	br	1120 <_malloc_r+0xb4>
    15f4:	31000117 	ldw	r4,4(r6)
    15f8:	003f1606 	br	1254 <_malloc_r+0x1e8>
    15fc:	63000044 	addi	r12,r12,1
    1600:	608000cc 	andi	r2,r12,3
    1604:	5ac00204 	addi	r11,r11,8
    1608:	103f2a1e 	bne	r2,zero,12b4 <_malloc_r+0x248>
    160c:	00002106 	br	1694 <_malloc_r+0x628>
    1610:	80800204 	addi	r2,r16,8
    1614:	84000517 	ldw	r16,20(r16)
    1618:	143eb31e 	bne	r2,r16,10e8 <_malloc_r+0x7c>
    161c:	18c00084 	addi	r3,r3,2
    1620:	003eec06 	br	11d4 <_malloc_r+0x168>
    1624:	8085883a 	add	r2,r16,r2
    1628:	10c00117 	ldw	r3,4(r2)
    162c:	81000317 	ldw	r4,12(r16)
    1630:	81400217 	ldw	r5,8(r16)
    1634:	18c00054 	ori	r3,r3,1
    1638:	10c00115 	stw	r3,4(r2)
    163c:	29000315 	stw	r4,12(r5)
    1640:	21400215 	stw	r5,8(r4)
    1644:	9009883a 	mov	r4,r18
    1648:	0003c200 	call	3c20 <__malloc_unlock>
    164c:	80800204 	addi	r2,r16,8
    1650:	003eb306 	br	1120 <_malloc_r+0xb4>
    1654:	19c016c4 	addi	r7,r3,91
    1658:	39cb883a 	add	r5,r7,r7
    165c:	003ec706 	br	117c <_malloc_r+0x110>
    1660:	3804d1ba 	srli	r2,r7,6
    1664:	11000e04 	addi	r4,r2,56
    1668:	210b883a 	add	r5,r4,r4
    166c:	003fbe06 	br	1568 <_malloc_r+0x4fc>
    1670:	84ff5d26 	beq	r16,r19,13e8 <_malloc_r+0x37c>
    1674:	9c000217 	ldw	r16,8(r19)
    1678:	00bfff04 	movi	r2,-4
    167c:	80c00117 	ldw	r3,4(r16)
    1680:	1886703a 	and	r3,r3,r2
    1684:	003f9706 	br	14e4 <_malloc_r+0x478>
    1688:	52800017 	ldw	r10,0(r10)
    168c:	18ffffc4 	addi	r3,r3,-1
    1690:	50805c1e 	bne	r10,r2,1804 <_malloc_r+0x798>
    1694:	190000cc 	andi	r4,r3,3
    1698:	50bffe04 	addi	r2,r10,-8
    169c:	203ffa1e 	bne	r4,zero,1688 <_malloc_r+0x61c>
    16a0:	98800117 	ldw	r2,4(r19)
    16a4:	0146303a 	nor	r3,zero,r5
    16a8:	1884703a 	and	r2,r3,r2
    16ac:	98800115 	stw	r2,4(r19)
    16b0:	294b883a 	add	r5,r5,r5
    16b4:	117f2e36 	bltu	r2,r5,1370 <_malloc_r+0x304>
    16b8:	283f2d26 	beq	r5,zero,1370 <_malloc_r+0x304>
    16bc:	1146703a 	and	r3,r2,r5
    16c0:	1800521e 	bne	r3,zero,180c <_malloc_r+0x7a0>
    16c4:	6007883a 	mov	r3,r12
    16c8:	294b883a 	add	r5,r5,r5
    16cc:	1148703a 	and	r4,r2,r5
    16d0:	18c00104 	addi	r3,r3,4
    16d4:	203ffc26 	beq	r4,zero,16c8 <_malloc_r+0x65c>
    16d8:	003ef006 	br	129c <_malloc_r+0x230>
    16dc:	00805504 	movi	r2,340
    16e0:	10c01336 	bltu	r2,r3,1730 <_malloc_r+0x6c4>
    16e4:	8806d3fa 	srli	r3,r17,15
    16e8:	19c01dc4 	addi	r7,r3,119
    16ec:	39cb883a 	add	r5,r7,r7
    16f0:	003ea206 	br	117c <_malloc_r+0x110>
    16f4:	00c40004 	movi	r3,4096
    16f8:	003f4d06 	br	1430 <_malloc_r+0x3c4>
    16fc:	00800044 	movi	r2,1
    1700:	a0800115 	stw	r2,4(r20)
    1704:	a021883a 	mov	r16,r20
    1708:	0007883a 	mov	r3,zero
    170c:	003f7506 	br	14e4 <_malloc_r+0x478>
    1710:	200bd0ba 	srai	r5,r4,2
    1714:	01800044 	movi	r6,1
    1718:	41000117 	ldw	r4,4(r8)
    171c:	314a983a 	sll	r5,r6,r5
    1720:	100d883a 	mov	r6,r2
    1724:	2908b03a 	or	r4,r5,r4
    1728:	41000115 	stw	r4,4(r8)
    172c:	003f9d06 	br	15a4 <_malloc_r+0x538>
    1730:	00815504 	movi	r2,1364
    1734:	10c01336 	bltu	r2,r3,1784 <_malloc_r+0x718>
    1738:	8806d4ba 	srli	r3,r17,18
    173c:	19c01f04 	addi	r7,r3,124
    1740:	39cb883a 	add	r5,r7,r7
    1744:	003e8d06 	br	117c <_malloc_r+0x110>
    1748:	ad400404 	addi	r21,r21,16
    174c:	003f1d06 	br	13c4 <_malloc_r+0x358>
    1750:	01001504 	movi	r4,84
    1754:	20801c36 	bltu	r4,r2,17c8 <_malloc_r+0x75c>
    1758:	3804d33a 	srli	r2,r7,12
    175c:	11001b84 	addi	r4,r2,110
    1760:	210b883a 	add	r5,r4,r4
    1764:	003f8006 	br	1568 <_malloc_r+0x4fc>
    1768:	3083ffcc 	andi	r2,r6,4095
    176c:	103f241e 	bne	r2,zero,1400 <_malloc_r+0x394>
    1770:	99000217 	ldw	r4,8(r19)
    1774:	ad85883a 	add	r2,r21,r22
    1778:	10800054 	ori	r2,r2,1
    177c:	20800115 	stw	r2,4(r4)
    1780:	003f4a06 	br	14ac <_malloc_r+0x440>
    1784:	01403f04 	movi	r5,252
    1788:	01c01f84 	movi	r7,126
    178c:	003e7b06 	br	117c <_malloc_r+0x110>
    1790:	00c00044 	movi	r3,1
    1794:	002b883a 	mov	r21,zero
    1798:	003f3006 	br	145c <_malloc_r+0x3f0>
    179c:	00800074 	movhi	r2,1
    17a0:	10a6c204 	addi	r2,r2,-25848
    17a4:	15000015 	stw	r20,0(r2)
    17a8:	003f1b06 	br	1418 <_malloc_r+0x3ac>
    17ac:	9009883a 	mov	r4,r18
    17b0:	81400204 	addi	r5,r16,8
    17b4:	0002a080 	call	2a08 <_free_r>
    17b8:	00800074 	movhi	r2,1
    17bc:	10a6da04 	addi	r2,r2,-25752
    17c0:	10c00017 	ldw	r3,0(r2)
    17c4:	003f3906 	br	14ac <_malloc_r+0x440>
    17c8:	01005504 	movi	r4,340
    17cc:	20800436 	bltu	r4,r2,17e0 <_malloc_r+0x774>
    17d0:	3804d3fa 	srli	r2,r7,15
    17d4:	11001dc4 	addi	r4,r2,119
    17d8:	210b883a 	add	r5,r4,r4
    17dc:	003f6206 	br	1568 <_malloc_r+0x4fc>
    17e0:	01015504 	movi	r4,1364
    17e4:	20800436 	bltu	r4,r2,17f8 <_malloc_r+0x78c>
    17e8:	3804d4ba 	srli	r2,r7,18
    17ec:	11001f04 	addi	r4,r2,124
    17f0:	210b883a 	add	r5,r4,r4
    17f4:	003f5c06 	br	1568 <_malloc_r+0x4fc>
    17f8:	01403f04 	movi	r5,252
    17fc:	01001f84 	movi	r4,126
    1800:	003f5906 	br	1568 <_malloc_r+0x4fc>
    1804:	98800117 	ldw	r2,4(r19)
    1808:	003fa906 	br	16b0 <_malloc_r+0x644>
    180c:	6007883a 	mov	r3,r12
    1810:	003ea206 	br	129c <_malloc_r+0x230>

00001814 <memchr>:
    1814:	208000cc 	andi	r2,r4,3
    1818:	280f883a 	mov	r7,r5
    181c:	10003526 	beq	r2,zero,18f4 <memchr+0xe0>
    1820:	30bfffc4 	addi	r2,r6,-1
    1824:	30001b26 	beq	r6,zero,1894 <memchr+0x80>
    1828:	21800003 	ldbu	r6,0(r4)
    182c:	28c03fcc 	andi	r3,r5,255
    1830:	30c01a26 	beq	r6,r3,189c <memchr+0x88>
    1834:	180d883a 	mov	r6,r3
    1838:	00000406 	br	184c <memchr+0x38>
    183c:	10001526 	beq	r2,zero,1894 <memchr+0x80>
    1840:	20c00003 	ldbu	r3,0(r4)
    1844:	10bfffc4 	addi	r2,r2,-1
    1848:	19801426 	beq	r3,r6,189c <memchr+0x88>
    184c:	21000044 	addi	r4,r4,1
    1850:	20c000cc 	andi	r3,r4,3
    1854:	183ff91e 	bne	r3,zero,183c <memchr+0x28>
    1858:	024000c4 	movi	r9,3
    185c:	48801136 	bltu	r9,r2,18a4 <memchr+0x90>
    1860:	10000c26 	beq	r2,zero,1894 <memchr+0x80>
    1864:	20c00003 	ldbu	r3,0(r4)
    1868:	29403fcc 	andi	r5,r5,255
    186c:	19400b26 	beq	r3,r5,189c <memchr+0x88>
    1870:	20c00044 	addi	r3,r4,1
    1874:	2085883a 	add	r2,r4,r2
    1878:	39803fcc 	andi	r6,r7,255
    187c:	00000306 	br	188c <memchr+0x78>
    1880:	18c00044 	addi	r3,r3,1
    1884:	197fffc3 	ldbu	r5,-1(r3)
    1888:	29800426 	beq	r5,r6,189c <memchr+0x88>
    188c:	1809883a 	mov	r4,r3
    1890:	18bffb1e 	bne	r3,r2,1880 <memchr+0x6c>
    1894:	0005883a 	mov	r2,zero
    1898:	f800283a 	ret
    189c:	2005883a 	mov	r2,r4
    18a0:	f800283a 	ret
    18a4:	28c03fcc 	andi	r3,r5,255
    18a8:	1810923a 	slli	r8,r3,8
    18ac:	02ffbff4 	movhi	r11,65279
    18b0:	02a02074 	movhi	r10,32897
    18b4:	40c6b03a 	or	r3,r8,r3
    18b8:	1810943a 	slli	r8,r3,16
    18bc:	5affbfc4 	addi	r11,r11,-257
    18c0:	52a02004 	addi	r10,r10,-32640
    18c4:	40d0b03a 	or	r8,r8,r3
    18c8:	20c00017 	ldw	r3,0(r4)
    18cc:	40c6f03a 	xor	r3,r8,r3
    18d0:	1acd883a 	add	r6,r3,r11
    18d4:	00c6303a 	nor	r3,zero,r3
    18d8:	30c6703a 	and	r3,r6,r3
    18dc:	1a86703a 	and	r3,r3,r10
    18e0:	183fdf1e 	bne	r3,zero,1860 <memchr+0x4c>
    18e4:	10bfff04 	addi	r2,r2,-4
    18e8:	21000104 	addi	r4,r4,4
    18ec:	48bff636 	bltu	r9,r2,18c8 <memchr+0xb4>
    18f0:	003fdb06 	br	1860 <memchr+0x4c>
    18f4:	3005883a 	mov	r2,r6
    18f8:	003fd706 	br	1858 <memchr+0x44>

000018fc <memcpy>:
    18fc:	deffff04 	addi	sp,sp,-4
    1900:	dc000015 	stw	r16,0(sp)
    1904:	00c003c4 	movi	r3,15
    1908:	2005883a 	mov	r2,r4
    190c:	1980432e 	bgeu	r3,r6,1a1c <memcpy+0x120>
    1910:	2146b03a 	or	r3,r4,r5
    1914:	18c000cc 	andi	r3,r3,3
    1918:	1800421e 	bne	r3,zero,1a24 <memcpy+0x128>
    191c:	343ffc04 	addi	r16,r6,-16
    1920:	8020d13a 	srli	r16,r16,4
    1924:	28c00104 	addi	r3,r5,4
    1928:	23400104 	addi	r13,r4,4
    192c:	801e913a 	slli	r15,r16,4
    1930:	2b000204 	addi	r12,r5,8
    1934:	22c00204 	addi	r11,r4,8
    1938:	7bc00504 	addi	r15,r15,20
    193c:	2a800304 	addi	r10,r5,12
    1940:	22400304 	addi	r9,r4,12
    1944:	2bdf883a 	add	r15,r5,r15
    1948:	2811883a 	mov	r8,r5
    194c:	200f883a 	mov	r7,r4
    1950:	41000017 	ldw	r4,0(r8)
    1954:	39c00404 	addi	r7,r7,16
    1958:	18c00404 	addi	r3,r3,16
    195c:	393ffc15 	stw	r4,-16(r7)
    1960:	1bbffc17 	ldw	r14,-16(r3)
    1964:	6b400404 	addi	r13,r13,16
    1968:	5ac00404 	addi	r11,r11,16
    196c:	6bbffc15 	stw	r14,-16(r13)
    1970:	63800017 	ldw	r14,0(r12)
    1974:	4a400404 	addi	r9,r9,16
    1978:	42000404 	addi	r8,r8,16
    197c:	5bbffc15 	stw	r14,-16(r11)
    1980:	53800017 	ldw	r14,0(r10)
    1984:	63000404 	addi	r12,r12,16
    1988:	52800404 	addi	r10,r10,16
    198c:	4bbffc15 	stw	r14,-16(r9)
    1990:	1bffef1e 	bne	r3,r15,1950 <memcpy+0x54>
    1994:	81c00044 	addi	r7,r16,1
    1998:	380e913a 	slli	r7,r7,4
    199c:	310003cc 	andi	r4,r6,15
    19a0:	02c000c4 	movi	r11,3
    19a4:	11c7883a 	add	r3,r2,r7
    19a8:	29cb883a 	add	r5,r5,r7
    19ac:	59001f2e 	bgeu	r11,r4,1a2c <memcpy+0x130>
    19b0:	1813883a 	mov	r9,r3
    19b4:	2811883a 	mov	r8,r5
    19b8:	200f883a 	mov	r7,r4
    19bc:	42800017 	ldw	r10,0(r8)
    19c0:	4a400104 	addi	r9,r9,4
    19c4:	39ffff04 	addi	r7,r7,-4
    19c8:	4abfff15 	stw	r10,-4(r9)
    19cc:	42000104 	addi	r8,r8,4
    19d0:	59fffa36 	bltu	r11,r7,19bc <memcpy+0xc0>
    19d4:	213fff04 	addi	r4,r4,-4
    19d8:	2008d0ba 	srli	r4,r4,2
    19dc:	318000cc 	andi	r6,r6,3
    19e0:	21000044 	addi	r4,r4,1
    19e4:	2109883a 	add	r4,r4,r4
    19e8:	2109883a 	add	r4,r4,r4
    19ec:	1907883a 	add	r3,r3,r4
    19f0:	290b883a 	add	r5,r5,r4
    19f4:	30000626 	beq	r6,zero,1a10 <memcpy+0x114>
    19f8:	198d883a 	add	r6,r3,r6
    19fc:	29c00003 	ldbu	r7,0(r5)
    1a00:	18c00044 	addi	r3,r3,1
    1a04:	29400044 	addi	r5,r5,1
    1a08:	19ffffc5 	stb	r7,-1(r3)
    1a0c:	19bffb1e 	bne	r3,r6,19fc <memcpy+0x100>
    1a10:	dc000017 	ldw	r16,0(sp)
    1a14:	dec00104 	addi	sp,sp,4
    1a18:	f800283a 	ret
    1a1c:	2007883a 	mov	r3,r4
    1a20:	003ff406 	br	19f4 <memcpy+0xf8>
    1a24:	2007883a 	mov	r3,r4
    1a28:	003ff306 	br	19f8 <memcpy+0xfc>
    1a2c:	200d883a 	mov	r6,r4
    1a30:	003ff006 	br	19f4 <memcpy+0xf8>

00001a34 <memmove>:
    1a34:	2005883a 	mov	r2,r4
    1a38:	29000b2e 	bgeu	r5,r4,1a68 <memmove+0x34>
    1a3c:	298f883a 	add	r7,r5,r6
    1a40:	21c0092e 	bgeu	r4,r7,1a68 <memmove+0x34>
    1a44:	2187883a 	add	r3,r4,r6
    1a48:	198bc83a 	sub	r5,r3,r6
    1a4c:	30004b26 	beq	r6,zero,1b7c <memmove+0x148>
    1a50:	39ffffc4 	addi	r7,r7,-1
    1a54:	39000003 	ldbu	r4,0(r7)
    1a58:	18ffffc4 	addi	r3,r3,-1
    1a5c:	19000005 	stb	r4,0(r3)
    1a60:	197ffb1e 	bne	r3,r5,1a50 <memmove+0x1c>
    1a64:	f800283a 	ret
    1a68:	00c003c4 	movi	r3,15
    1a6c:	1980412e 	bgeu	r3,r6,1b74 <memmove+0x140>
    1a70:	1146b03a 	or	r3,r2,r5
    1a74:	18c000cc 	andi	r3,r3,3
    1a78:	1800411e 	bne	r3,zero,1b80 <memmove+0x14c>
    1a7c:	33fffc04 	addi	r15,r6,-16
    1a80:	781ed13a 	srli	r15,r15,4
    1a84:	28c00104 	addi	r3,r5,4
    1a88:	13400104 	addi	r13,r2,4
    1a8c:	781c913a 	slli	r14,r15,4
    1a90:	2b000204 	addi	r12,r5,8
    1a94:	12c00204 	addi	r11,r2,8
    1a98:	73800504 	addi	r14,r14,20
    1a9c:	2a800304 	addi	r10,r5,12
    1aa0:	12400304 	addi	r9,r2,12
    1aa4:	2b9d883a 	add	r14,r5,r14
    1aa8:	2811883a 	mov	r8,r5
    1aac:	100f883a 	mov	r7,r2
    1ab0:	41000017 	ldw	r4,0(r8)
    1ab4:	39c00404 	addi	r7,r7,16
    1ab8:	18c00404 	addi	r3,r3,16
    1abc:	393ffc15 	stw	r4,-16(r7)
    1ac0:	193ffc17 	ldw	r4,-16(r3)
    1ac4:	6b400404 	addi	r13,r13,16
    1ac8:	5ac00404 	addi	r11,r11,16
    1acc:	693ffc15 	stw	r4,-16(r13)
    1ad0:	61000017 	ldw	r4,0(r12)
    1ad4:	4a400404 	addi	r9,r9,16
    1ad8:	42000404 	addi	r8,r8,16
    1adc:	593ffc15 	stw	r4,-16(r11)
    1ae0:	51000017 	ldw	r4,0(r10)
    1ae4:	63000404 	addi	r12,r12,16
    1ae8:	52800404 	addi	r10,r10,16
    1aec:	493ffc15 	stw	r4,-16(r9)
    1af0:	1bbfef1e 	bne	r3,r14,1ab0 <memmove+0x7c>
    1af4:	79000044 	addi	r4,r15,1
    1af8:	2008913a 	slli	r4,r4,4
    1afc:	328003cc 	andi	r10,r6,15
    1b00:	02c000c4 	movi	r11,3
    1b04:	1107883a 	add	r3,r2,r4
    1b08:	290b883a 	add	r5,r5,r4
    1b0c:	5a801e2e 	bgeu	r11,r10,1b88 <memmove+0x154>
    1b10:	1813883a 	mov	r9,r3
    1b14:	2811883a 	mov	r8,r5
    1b18:	500f883a 	mov	r7,r10
    1b1c:	41000017 	ldw	r4,0(r8)
    1b20:	4a400104 	addi	r9,r9,4
    1b24:	39ffff04 	addi	r7,r7,-4
    1b28:	493fff15 	stw	r4,-4(r9)
    1b2c:	42000104 	addi	r8,r8,4
    1b30:	59fffa36 	bltu	r11,r7,1b1c <memmove+0xe8>
    1b34:	513fff04 	addi	r4,r10,-4
    1b38:	2008d0ba 	srli	r4,r4,2
    1b3c:	318000cc 	andi	r6,r6,3
    1b40:	21000044 	addi	r4,r4,1
    1b44:	2109883a 	add	r4,r4,r4
    1b48:	2109883a 	add	r4,r4,r4
    1b4c:	1907883a 	add	r3,r3,r4
    1b50:	290b883a 	add	r5,r5,r4
    1b54:	30000926 	beq	r6,zero,1b7c <memmove+0x148>
    1b58:	198d883a 	add	r6,r3,r6
    1b5c:	29c00003 	ldbu	r7,0(r5)
    1b60:	18c00044 	addi	r3,r3,1
    1b64:	29400044 	addi	r5,r5,1
    1b68:	19ffffc5 	stb	r7,-1(r3)
    1b6c:	19bffb1e 	bne	r3,r6,1b5c <memmove+0x128>
    1b70:	f800283a 	ret
    1b74:	1007883a 	mov	r3,r2
    1b78:	003ff606 	br	1b54 <memmove+0x120>
    1b7c:	f800283a 	ret
    1b80:	1007883a 	mov	r3,r2
    1b84:	003ff406 	br	1b58 <memmove+0x124>
    1b88:	500d883a 	mov	r6,r10
    1b8c:	003ff106 	br	1b54 <memmove+0x120>

00001b90 <_realloc_r>:
    1b90:	defff604 	addi	sp,sp,-40
    1b94:	dd000415 	stw	r20,16(sp)
    1b98:	dc400115 	stw	r17,4(sp)
    1b9c:	dfc00915 	stw	ra,36(sp)
    1ba0:	df000815 	stw	fp,32(sp)
    1ba4:	ddc00715 	stw	r23,28(sp)
    1ba8:	dd800615 	stw	r22,24(sp)
    1bac:	dd400515 	stw	r21,20(sp)
    1bb0:	dcc00315 	stw	r19,12(sp)
    1bb4:	dc800215 	stw	r18,8(sp)
    1bb8:	dc000015 	stw	r16,0(sp)
    1bbc:	2829883a 	mov	r20,r5
    1bc0:	3023883a 	mov	r17,r6
    1bc4:	2800ad26 	beq	r5,zero,1e7c <_realloc_r+0x2ec>
    1bc8:	2025883a 	mov	r18,r4
    1bcc:	0003c000 	call	3c00 <__malloc_lock>
    1bd0:	a0ffff17 	ldw	r3,-4(r20)
    1bd4:	043fff04 	movi	r16,-4
    1bd8:	890002c4 	addi	r4,r17,11
    1bdc:	01c00584 	movi	r7,22
    1be0:	a57ffe04 	addi	r21,r20,-8
    1be4:	1c20703a 	and	r16,r3,r16
    1be8:	39001d2e 	bgeu	r7,r4,1c60 <_realloc_r+0xd0>
    1bec:	05bffe04 	movi	r22,-8
    1bf0:	25ac703a 	and	r22,r4,r22
    1bf4:	b00f883a 	mov	r7,r22
    1bf8:	b0006516 	blt	r22,zero,1d90 <_realloc_r+0x200>
    1bfc:	b4406436 	bltu	r22,r17,1d90 <_realloc_r+0x200>
    1c00:	81c01a0e 	bge	r16,r7,1c6c <_realloc_r+0xdc>
    1c04:	07000074 	movhi	fp,1
    1c08:	e7201404 	addi	fp,fp,-32688
    1c0c:	e1400217 	ldw	r5,8(fp)
    1c10:	ac11883a 	add	r8,r21,r16
    1c14:	2a006226 	beq	r5,r8,1da0 <_realloc_r+0x210>
    1c18:	41800117 	ldw	r6,4(r8)
    1c1c:	027fff84 	movi	r9,-2
    1c20:	3252703a 	and	r9,r6,r9
    1c24:	4253883a 	add	r9,r8,r9
    1c28:	49000117 	ldw	r4,4(r9)
    1c2c:	2100004c 	andi	r4,r4,1
    1c30:	2000281e 	bne	r4,zero,1cd4 <_realloc_r+0x144>
    1c34:	00bfff04 	movi	r2,-4
    1c38:	3084703a 	and	r2,r6,r2
    1c3c:	1409883a 	add	r4,r2,r16
    1c40:	21c05e16 	blt	r4,r7,1dbc <_realloc_r+0x22c>
    1c44:	40800317 	ldw	r2,12(r8)
    1c48:	41400217 	ldw	r5,8(r8)
    1c4c:	a023883a 	mov	r17,r20
    1c50:	2021883a 	mov	r16,r4
    1c54:	28800315 	stw	r2,12(r5)
    1c58:	11400215 	stw	r5,8(r2)
    1c5c:	00000406 	br	1c70 <_realloc_r+0xe0>
    1c60:	01c00404 	movi	r7,16
    1c64:	382d883a 	mov	r22,r7
    1c68:	003fe406 	br	1bfc <_realloc_r+0x6c>
    1c6c:	a023883a 	mov	r17,r20
    1c70:	858fc83a 	sub	r7,r16,r22
    1c74:	008003c4 	movi	r2,15
    1c78:	18c0004c 	andi	r3,r3,1
    1c7c:	11c07236 	bltu	r2,r7,1e48 <_realloc_r+0x2b8>
    1c80:	1c06b03a 	or	r3,r3,r16
    1c84:	a8c00115 	stw	r3,4(r21)
    1c88:	ac21883a 	add	r16,r21,r16
    1c8c:	80800117 	ldw	r2,4(r16)
    1c90:	10800054 	ori	r2,r2,1
    1c94:	80800115 	stw	r2,4(r16)
    1c98:	9009883a 	mov	r4,r18
    1c9c:	0003c200 	call	3c20 <__malloc_unlock>
    1ca0:	8805883a 	mov	r2,r17
    1ca4:	dfc00917 	ldw	ra,36(sp)
    1ca8:	df000817 	ldw	fp,32(sp)
    1cac:	ddc00717 	ldw	r23,28(sp)
    1cb0:	dd800617 	ldw	r22,24(sp)
    1cb4:	dd400517 	ldw	r21,20(sp)
    1cb8:	dd000417 	ldw	r20,16(sp)
    1cbc:	dcc00317 	ldw	r19,12(sp)
    1cc0:	dc800217 	ldw	r18,8(sp)
    1cc4:	dc400117 	ldw	r17,4(sp)
    1cc8:	dc000017 	ldw	r16,0(sp)
    1ccc:	dec00a04 	addi	sp,sp,40
    1cd0:	f800283a 	ret
    1cd4:	18c0004c 	andi	r3,r3,1
    1cd8:	1800081e 	bne	r3,zero,1cfc <_realloc_r+0x16c>
    1cdc:	a4fffe17 	ldw	r19,-8(r20)
    1ce0:	00bfff04 	movi	r2,-4
    1ce4:	ace7c83a 	sub	r19,r21,r19
    1ce8:	98c00117 	ldw	r3,4(r19)
    1cec:	1886703a 	and	r3,r3,r2
    1cf0:	98000226 	beq	r19,zero,1cfc <_realloc_r+0x16c>
    1cf4:	1c2f883a 	add	r23,r3,r16
    1cf8:	b9c06d0e 	bge	r23,r7,1eb0 <_realloc_r+0x320>
    1cfc:	880b883a 	mov	r5,r17
    1d00:	9009883a 	mov	r4,r18
    1d04:	000106c0 	call	106c <_malloc_r>
    1d08:	1023883a 	mov	r17,r2
    1d0c:	1000ef26 	beq	r2,zero,20cc <_realloc_r+0x53c>
    1d10:	a0ffff17 	ldw	r3,-4(r20)
    1d14:	113ffe04 	addi	r4,r2,-8
    1d18:	00bfff84 	movi	r2,-2
    1d1c:	1884703a 	and	r2,r3,r2
    1d20:	a885883a 	add	r2,r21,r2
    1d24:	2080bf26 	beq	r4,r2,2024 <_realloc_r+0x494>
    1d28:	81bfff04 	addi	r6,r16,-4
    1d2c:	00800904 	movi	r2,36
    1d30:	11808936 	bltu	r2,r6,1f58 <_realloc_r+0x3c8>
    1d34:	00c004c4 	movi	r3,19
    1d38:	19806c2e 	bgeu	r3,r6,1eec <_realloc_r+0x35c>
    1d3c:	a0c00017 	ldw	r3,0(r20)
    1d40:	88c00015 	stw	r3,0(r17)
    1d44:	a0c00117 	ldw	r3,4(r20)
    1d48:	88c00115 	stw	r3,4(r17)
    1d4c:	00c006c4 	movi	r3,27
    1d50:	1980ac36 	bltu	r3,r6,2004 <_realloc_r+0x474>
    1d54:	88800204 	addi	r2,r17,8
    1d58:	a0c00204 	addi	r3,r20,8
    1d5c:	19000017 	ldw	r4,0(r3)
    1d60:	11000015 	stw	r4,0(r2)
    1d64:	19000117 	ldw	r4,4(r3)
    1d68:	11000115 	stw	r4,4(r2)
    1d6c:	18c00217 	ldw	r3,8(r3)
    1d70:	10c00215 	stw	r3,8(r2)
    1d74:	a00b883a 	mov	r5,r20
    1d78:	9009883a 	mov	r4,r18
    1d7c:	0002a080 	call	2a08 <_free_r>
    1d80:	9009883a 	mov	r4,r18
    1d84:	0003c200 	call	3c20 <__malloc_unlock>
    1d88:	8805883a 	mov	r2,r17
    1d8c:	003fc506 	br	1ca4 <_realloc_r+0x114>
    1d90:	00800304 	movi	r2,12
    1d94:	90800015 	stw	r2,0(r18)
    1d98:	0005883a 	mov	r2,zero
    1d9c:	003fc106 	br	1ca4 <_realloc_r+0x114>
    1da0:	29800117 	ldw	r6,4(r5)
    1da4:	00bfff04 	movi	r2,-4
    1da8:	b1000404 	addi	r4,r22,16
    1dac:	3084703a 	and	r2,r6,r2
    1db0:	140d883a 	add	r6,r2,r16
    1db4:	31005b0e 	bge	r6,r4,1f24 <_realloc_r+0x394>
    1db8:	2811883a 	mov	r8,r5
    1dbc:	18c0004c 	andi	r3,r3,1
    1dc0:	183fce1e 	bne	r3,zero,1cfc <_realloc_r+0x16c>
    1dc4:	a4fffe17 	ldw	r19,-8(r20)
    1dc8:	00ffff04 	movi	r3,-4
    1dcc:	ace7c83a 	sub	r19,r21,r19
    1dd0:	99000117 	ldw	r4,4(r19)
    1dd4:	20c6703a 	and	r3,r4,r3
    1dd8:	403fc526 	beq	r8,zero,1cf0 <_realloc_r+0x160>
    1ddc:	1c2f883a 	add	r23,r3,r16
    1de0:	b8af883a 	add	r23,r23,r2
    1de4:	41406026 	beq	r8,r5,1f68 <_realloc_r+0x3d8>
    1de8:	b9ffc116 	blt	r23,r7,1cf0 <_realloc_r+0x160>
    1dec:	40c00217 	ldw	r3,8(r8)
    1df0:	40800317 	ldw	r2,12(r8)
    1df4:	81bfff04 	addi	r6,r16,-4
    1df8:	01000904 	movi	r4,36
    1dfc:	18800315 	stw	r2,12(r3)
    1e00:	10c00215 	stw	r3,8(r2)
    1e04:	99400217 	ldw	r5,8(r19)
    1e08:	98c00317 	ldw	r3,12(r19)
    1e0c:	9c400204 	addi	r17,r19,8
    1e10:	28c00315 	stw	r3,12(r5)
    1e14:	19400215 	stw	r5,8(r3)
    1e18:	21802d36 	bltu	r4,r6,1ed0 <_realloc_r+0x340>
    1e1c:	008004c4 	movi	r2,19
    1e20:	1180352e 	bgeu	r2,r6,1ef8 <_realloc_r+0x368>
    1e24:	a0800017 	ldw	r2,0(r20)
    1e28:	98800215 	stw	r2,8(r19)
    1e2c:	a0800117 	ldw	r2,4(r20)
    1e30:	98800315 	stw	r2,12(r19)
    1e34:	008006c4 	movi	r2,27
    1e38:	11808036 	bltu	r2,r6,203c <_realloc_r+0x4ac>
    1e3c:	98c00404 	addi	r3,r19,16
    1e40:	a5000204 	addi	r20,r20,8
    1e44:	00002d06 	br	1efc <_realloc_r+0x36c>
    1e48:	1d86b03a 	or	r3,r3,r22
    1e4c:	ad8b883a 	add	r5,r21,r22
    1e50:	a8c00115 	stw	r3,4(r21)
    1e54:	38800054 	ori	r2,r7,1
    1e58:	28800115 	stw	r2,4(r5)
    1e5c:	29cf883a 	add	r7,r5,r7
    1e60:	38800117 	ldw	r2,4(r7)
    1e64:	9009883a 	mov	r4,r18
    1e68:	29400204 	addi	r5,r5,8
    1e6c:	10800054 	ori	r2,r2,1
    1e70:	38800115 	stw	r2,4(r7)
    1e74:	0002a080 	call	2a08 <_free_r>
    1e78:	003f8706 	br	1c98 <_realloc_r+0x108>
    1e7c:	300b883a 	mov	r5,r6
    1e80:	dfc00917 	ldw	ra,36(sp)
    1e84:	df000817 	ldw	fp,32(sp)
    1e88:	ddc00717 	ldw	r23,28(sp)
    1e8c:	dd800617 	ldw	r22,24(sp)
    1e90:	dd400517 	ldw	r21,20(sp)
    1e94:	dd000417 	ldw	r20,16(sp)
    1e98:	dcc00317 	ldw	r19,12(sp)
    1e9c:	dc800217 	ldw	r18,8(sp)
    1ea0:	dc400117 	ldw	r17,4(sp)
    1ea4:	dc000017 	ldw	r16,0(sp)
    1ea8:	dec00a04 	addi	sp,sp,40
    1eac:	000106c1 	jmpi	106c <_malloc_r>
    1eb0:	98800317 	ldw	r2,12(r19)
    1eb4:	98c00217 	ldw	r3,8(r19)
    1eb8:	81bfff04 	addi	r6,r16,-4
    1ebc:	01000904 	movi	r4,36
    1ec0:	18800315 	stw	r2,12(r3)
    1ec4:	10c00215 	stw	r3,8(r2)
    1ec8:	9c400204 	addi	r17,r19,8
    1ecc:	21bfd32e 	bgeu	r4,r6,1e1c <_realloc_r+0x28c>
    1ed0:	8809883a 	mov	r4,r17
    1ed4:	a00b883a 	mov	r5,r20
    1ed8:	0001a340 	call	1a34 <memmove>
    1edc:	98c00117 	ldw	r3,4(r19)
    1ee0:	b821883a 	mov	r16,r23
    1ee4:	982b883a 	mov	r21,r19
    1ee8:	003f6106 	br	1c70 <_realloc_r+0xe0>
    1eec:	8805883a 	mov	r2,r17
    1ef0:	a007883a 	mov	r3,r20
    1ef4:	003f9906 	br	1d5c <_realloc_r+0x1cc>
    1ef8:	8807883a 	mov	r3,r17
    1efc:	a0800017 	ldw	r2,0(r20)
    1f00:	b821883a 	mov	r16,r23
    1f04:	982b883a 	mov	r21,r19
    1f08:	18800015 	stw	r2,0(r3)
    1f0c:	a0800117 	ldw	r2,4(r20)
    1f10:	18800115 	stw	r2,4(r3)
    1f14:	a0800217 	ldw	r2,8(r20)
    1f18:	18800215 	stw	r2,8(r3)
    1f1c:	98c00117 	ldw	r3,4(r19)
    1f20:	003f5306 	br	1c70 <_realloc_r+0xe0>
    1f24:	adab883a 	add	r21,r21,r22
    1f28:	3585c83a 	sub	r2,r6,r22
    1f2c:	e5400215 	stw	r21,8(fp)
    1f30:	10800054 	ori	r2,r2,1
    1f34:	a8800115 	stw	r2,4(r21)
    1f38:	a0bfff17 	ldw	r2,-4(r20)
    1f3c:	9009883a 	mov	r4,r18
    1f40:	1080004c 	andi	r2,r2,1
    1f44:	b0acb03a 	or	r22,r22,r2
    1f48:	a5bfff15 	stw	r22,-4(r20)
    1f4c:	0003c200 	call	3c20 <__malloc_unlock>
    1f50:	a005883a 	mov	r2,r20
    1f54:	003f5306 	br	1ca4 <_realloc_r+0x114>
    1f58:	8809883a 	mov	r4,r17
    1f5c:	a00b883a 	mov	r5,r20
    1f60:	0001a340 	call	1a34 <memmove>
    1f64:	003f8306 	br	1d74 <_realloc_r+0x1e4>
    1f68:	b0800404 	addi	r2,r22,16
    1f6c:	b8bf6016 	blt	r23,r2,1cf0 <_realloc_r+0x160>
    1f70:	98800317 	ldw	r2,12(r19)
    1f74:	98c00217 	ldw	r3,8(r19)
    1f78:	81bfff04 	addi	r6,r16,-4
    1f7c:	01000904 	movi	r4,36
    1f80:	18800315 	stw	r2,12(r3)
    1f84:	10c00215 	stw	r3,8(r2)
    1f88:	9c400204 	addi	r17,r19,8
    1f8c:	21804336 	bltu	r4,r6,209c <_realloc_r+0x50c>
    1f90:	008004c4 	movi	r2,19
    1f94:	11803f2e 	bgeu	r2,r6,2094 <_realloc_r+0x504>
    1f98:	a0800017 	ldw	r2,0(r20)
    1f9c:	98800215 	stw	r2,8(r19)
    1fa0:	a0800117 	ldw	r2,4(r20)
    1fa4:	98800315 	stw	r2,12(r19)
    1fa8:	008006c4 	movi	r2,27
    1fac:	11803f36 	bltu	r2,r6,20ac <_realloc_r+0x51c>
    1fb0:	98800404 	addi	r2,r19,16
    1fb4:	a5000204 	addi	r20,r20,8
    1fb8:	a0c00017 	ldw	r3,0(r20)
    1fbc:	10c00015 	stw	r3,0(r2)
    1fc0:	a0c00117 	ldw	r3,4(r20)
    1fc4:	10c00115 	stw	r3,4(r2)
    1fc8:	a0c00217 	ldw	r3,8(r20)
    1fcc:	10c00215 	stw	r3,8(r2)
    1fd0:	9d87883a 	add	r3,r19,r22
    1fd4:	bd85c83a 	sub	r2,r23,r22
    1fd8:	e0c00215 	stw	r3,8(fp)
    1fdc:	10800054 	ori	r2,r2,1
    1fe0:	18800115 	stw	r2,4(r3)
    1fe4:	98800117 	ldw	r2,4(r19)
    1fe8:	9009883a 	mov	r4,r18
    1fec:	1080004c 	andi	r2,r2,1
    1ff0:	b0acb03a 	or	r22,r22,r2
    1ff4:	9d800115 	stw	r22,4(r19)
    1ff8:	0003c200 	call	3c20 <__malloc_unlock>
    1ffc:	8805883a 	mov	r2,r17
    2000:	003f2806 	br	1ca4 <_realloc_r+0x114>
    2004:	a0c00217 	ldw	r3,8(r20)
    2008:	88c00215 	stw	r3,8(r17)
    200c:	a0c00317 	ldw	r3,12(r20)
    2010:	88c00315 	stw	r3,12(r17)
    2014:	30801126 	beq	r6,r2,205c <_realloc_r+0x4cc>
    2018:	88800404 	addi	r2,r17,16
    201c:	a0c00404 	addi	r3,r20,16
    2020:	003f4e06 	br	1d5c <_realloc_r+0x1cc>
    2024:	893fff17 	ldw	r4,-4(r17)
    2028:	00bfff04 	movi	r2,-4
    202c:	a023883a 	mov	r17,r20
    2030:	2084703a 	and	r2,r4,r2
    2034:	80a1883a 	add	r16,r16,r2
    2038:	003f0d06 	br	1c70 <_realloc_r+0xe0>
    203c:	a0800217 	ldw	r2,8(r20)
    2040:	98800415 	stw	r2,16(r19)
    2044:	a0800317 	ldw	r2,12(r20)
    2048:	98800515 	stw	r2,20(r19)
    204c:	31000a26 	beq	r6,r4,2078 <_realloc_r+0x4e8>
    2050:	98c00604 	addi	r3,r19,24
    2054:	a5000404 	addi	r20,r20,16
    2058:	003fa806 	br	1efc <_realloc_r+0x36c>
    205c:	a1000417 	ldw	r4,16(r20)
    2060:	88800604 	addi	r2,r17,24
    2064:	a0c00604 	addi	r3,r20,24
    2068:	89000415 	stw	r4,16(r17)
    206c:	a1000517 	ldw	r4,20(r20)
    2070:	89000515 	stw	r4,20(r17)
    2074:	003f3906 	br	1d5c <_realloc_r+0x1cc>
    2078:	a0800417 	ldw	r2,16(r20)
    207c:	a5000604 	addi	r20,r20,24
    2080:	98c00804 	addi	r3,r19,32
    2084:	98800615 	stw	r2,24(r19)
    2088:	a0bfff17 	ldw	r2,-4(r20)
    208c:	98800715 	stw	r2,28(r19)
    2090:	003f9a06 	br	1efc <_realloc_r+0x36c>
    2094:	8805883a 	mov	r2,r17
    2098:	003fc706 	br	1fb8 <_realloc_r+0x428>
    209c:	8809883a 	mov	r4,r17
    20a0:	a00b883a 	mov	r5,r20
    20a4:	0001a340 	call	1a34 <memmove>
    20a8:	003fc906 	br	1fd0 <_realloc_r+0x440>
    20ac:	a0800217 	ldw	r2,8(r20)
    20b0:	98800415 	stw	r2,16(r19)
    20b4:	a0800317 	ldw	r2,12(r20)
    20b8:	98800515 	stw	r2,20(r19)
    20bc:	31000726 	beq	r6,r4,20dc <_realloc_r+0x54c>
    20c0:	98800604 	addi	r2,r19,24
    20c4:	a5000404 	addi	r20,r20,16
    20c8:	003fbb06 	br	1fb8 <_realloc_r+0x428>
    20cc:	9009883a 	mov	r4,r18
    20d0:	0003c200 	call	3c20 <__malloc_unlock>
    20d4:	0005883a 	mov	r2,zero
    20d8:	003ef206 	br	1ca4 <_realloc_r+0x114>
    20dc:	a0c00417 	ldw	r3,16(r20)
    20e0:	a5000604 	addi	r20,r20,24
    20e4:	98800804 	addi	r2,r19,32
    20e8:	98c00615 	stw	r3,24(r19)
    20ec:	a0ffff17 	ldw	r3,-4(r20)
    20f0:	98c00715 	stw	r3,28(r19)
    20f4:	003fb006 	br	1fb8 <_realloc_r+0x428>

000020f8 <_sbrk_r>:
    20f8:	defffd04 	addi	sp,sp,-12
    20fc:	dc000015 	stw	r16,0(sp)
    2100:	04000074 	movhi	r16,1
    2104:	dc400115 	stw	r17,4(sp)
    2108:	8426d304 	addi	r16,r16,-25780
    210c:	2023883a 	mov	r17,r4
    2110:	2809883a 	mov	r4,r5
    2114:	dfc00215 	stw	ra,8(sp)
    2118:	80000015 	stw	zero,0(r16)
    211c:	0003e140 	call	3e14 <sbrk>
    2120:	00ffffc4 	movi	r3,-1
    2124:	10c00526 	beq	r2,r3,213c <_sbrk_r+0x44>
    2128:	dfc00217 	ldw	ra,8(sp)
    212c:	dc400117 	ldw	r17,4(sp)
    2130:	dc000017 	ldw	r16,0(sp)
    2134:	dec00304 	addi	sp,sp,12
    2138:	f800283a 	ret
    213c:	80c00017 	ldw	r3,0(r16)
    2140:	183ff926 	beq	r3,zero,2128 <_sbrk_r+0x30>
    2144:	88c00015 	stw	r3,0(r17)
    2148:	003ff706 	br	2128 <_sbrk_r+0x30>

0000214c <__swsetup_r>:
    214c:	00800074 	movhi	r2,1
    2150:	defffd04 	addi	sp,sp,-12
    2154:	10a6c104 	addi	r2,r2,-25852
    2158:	dc400115 	stw	r17,4(sp)
    215c:	2023883a 	mov	r17,r4
    2160:	11000017 	ldw	r4,0(r2)
    2164:	dc000015 	stw	r16,0(sp)
    2168:	dfc00215 	stw	ra,8(sp)
    216c:	2821883a 	mov	r16,r5
    2170:	20000226 	beq	r4,zero,217c <__swsetup_r+0x30>
    2174:	20c00e17 	ldw	r3,56(r4)
    2178:	18003126 	beq	r3,zero,2240 <__swsetup_r+0xf4>
    217c:	8080030b 	ldhu	r2,12(r16)
    2180:	10c0020c 	andi	r3,r2,8
    2184:	100d883a 	mov	r6,r2
    2188:	18000f26 	beq	r3,zero,21c8 <__swsetup_r+0x7c>
    218c:	80c00417 	ldw	r3,16(r16)
    2190:	18001526 	beq	r3,zero,21e8 <__swsetup_r+0x9c>
    2194:	1100004c 	andi	r4,r2,1
    2198:	20001c1e 	bne	r4,zero,220c <__swsetup_r+0xc0>
    219c:	1080008c 	andi	r2,r2,2
    21a0:	1000291e 	bne	r2,zero,2248 <__swsetup_r+0xfc>
    21a4:	80800517 	ldw	r2,20(r16)
    21a8:	80800215 	stw	r2,8(r16)
    21ac:	18001c26 	beq	r3,zero,2220 <__swsetup_r+0xd4>
    21b0:	0005883a 	mov	r2,zero
    21b4:	dfc00217 	ldw	ra,8(sp)
    21b8:	dc400117 	ldw	r17,4(sp)
    21bc:	dc000017 	ldw	r16,0(sp)
    21c0:	dec00304 	addi	sp,sp,12
    21c4:	f800283a 	ret
    21c8:	3080040c 	andi	r2,r6,16
    21cc:	10002e26 	beq	r2,zero,2288 <__swsetup_r+0x13c>
    21d0:	3080010c 	andi	r2,r6,4
    21d4:	10001e1e 	bne	r2,zero,2250 <__swsetup_r+0x104>
    21d8:	80c00417 	ldw	r3,16(r16)
    21dc:	30800214 	ori	r2,r6,8
    21e0:	8080030d 	sth	r2,12(r16)
    21e4:	183feb1e 	bne	r3,zero,2194 <__swsetup_r+0x48>
    21e8:	1140a00c 	andi	r5,r2,640
    21ec:	01008004 	movi	r4,512
    21f0:	293fe826 	beq	r5,r4,2194 <__swsetup_r+0x48>
    21f4:	8809883a 	mov	r4,r17
    21f8:	800b883a 	mov	r5,r16
    21fc:	0002e800 	call	2e80 <__smakebuf_r>
    2200:	8080030b 	ldhu	r2,12(r16)
    2204:	80c00417 	ldw	r3,16(r16)
    2208:	003fe206 	br	2194 <__swsetup_r+0x48>
    220c:	80800517 	ldw	r2,20(r16)
    2210:	80000215 	stw	zero,8(r16)
    2214:	0085c83a 	sub	r2,zero,r2
    2218:	80800615 	stw	r2,24(r16)
    221c:	183fe41e 	bne	r3,zero,21b0 <__swsetup_r+0x64>
    2220:	80c0030b 	ldhu	r3,12(r16)
    2224:	0005883a 	mov	r2,zero
    2228:	1900200c 	andi	r4,r3,128
    222c:	203fe126 	beq	r4,zero,21b4 <__swsetup_r+0x68>
    2230:	18c01014 	ori	r3,r3,64
    2234:	80c0030d 	sth	r3,12(r16)
    2238:	00bfffc4 	movi	r2,-1
    223c:	003fdd06 	br	21b4 <__swsetup_r+0x68>
    2240:	00028940 	call	2894 <__sinit>
    2244:	003fcd06 	br	217c <__swsetup_r+0x30>
    2248:	0005883a 	mov	r2,zero
    224c:	003fd606 	br	21a8 <__swsetup_r+0x5c>
    2250:	81400c17 	ldw	r5,48(r16)
    2254:	28000626 	beq	r5,zero,2270 <__swsetup_r+0x124>
    2258:	80801004 	addi	r2,r16,64
    225c:	28800326 	beq	r5,r2,226c <__swsetup_r+0x120>
    2260:	8809883a 	mov	r4,r17
    2264:	0002a080 	call	2a08 <_free_r>
    2268:	8180030b 	ldhu	r6,12(r16)
    226c:	80000c15 	stw	zero,48(r16)
    2270:	80c00417 	ldw	r3,16(r16)
    2274:	00bff6c4 	movi	r2,-37
    2278:	118c703a 	and	r6,r2,r6
    227c:	80000115 	stw	zero,4(r16)
    2280:	80c00015 	stw	r3,0(r16)
    2284:	003fd506 	br	21dc <__swsetup_r+0x90>
    2288:	00800244 	movi	r2,9
    228c:	88800015 	stw	r2,0(r17)
    2290:	30801014 	ori	r2,r6,64
    2294:	8080030d 	sth	r2,12(r16)
    2298:	00bfffc4 	movi	r2,-1
    229c:	003fc506 	br	21b4 <__swsetup_r+0x68>

000022a0 <__sflush_r>:
    22a0:	2880030b 	ldhu	r2,12(r5)
    22a4:	defffb04 	addi	sp,sp,-20
    22a8:	dcc00315 	stw	r19,12(sp)
    22ac:	dc400115 	stw	r17,4(sp)
    22b0:	dfc00415 	stw	ra,16(sp)
    22b4:	dc800215 	stw	r18,8(sp)
    22b8:	dc000015 	stw	r16,0(sp)
    22bc:	10c0020c 	andi	r3,r2,8
    22c0:	2823883a 	mov	r17,r5
    22c4:	2027883a 	mov	r19,r4
    22c8:	1800311e 	bne	r3,zero,2390 <__sflush_r+0xf0>
    22cc:	28c00117 	ldw	r3,4(r5)
    22d0:	10820014 	ori	r2,r2,2048
    22d4:	2880030d 	sth	r2,12(r5)
    22d8:	00c04b0e 	bge	zero,r3,2408 <__sflush_r+0x168>
    22dc:	8a000a17 	ldw	r8,40(r17)
    22e0:	40002326 	beq	r8,zero,2370 <__sflush_r+0xd0>
    22e4:	9c000017 	ldw	r16,0(r19)
    22e8:	10c4000c 	andi	r3,r2,4096
    22ec:	98000015 	stw	zero,0(r19)
    22f0:	18004826 	beq	r3,zero,2414 <__sflush_r+0x174>
    22f4:	89801417 	ldw	r6,80(r17)
    22f8:	10c0010c 	andi	r3,r2,4
    22fc:	18000626 	beq	r3,zero,2318 <__sflush_r+0x78>
    2300:	88c00117 	ldw	r3,4(r17)
    2304:	88800c17 	ldw	r2,48(r17)
    2308:	30cdc83a 	sub	r6,r6,r3
    230c:	10000226 	beq	r2,zero,2318 <__sflush_r+0x78>
    2310:	88800f17 	ldw	r2,60(r17)
    2314:	308dc83a 	sub	r6,r6,r2
    2318:	89400717 	ldw	r5,28(r17)
    231c:	9809883a 	mov	r4,r19
    2320:	000f883a 	mov	r7,zero
    2324:	403ee83a 	callr	r8
    2328:	00ffffc4 	movi	r3,-1
    232c:	10c04426 	beq	r2,r3,2440 <__sflush_r+0x1a0>
    2330:	88c0030b 	ldhu	r3,12(r17)
    2334:	89000417 	ldw	r4,16(r17)
    2338:	88000115 	stw	zero,4(r17)
    233c:	197dffcc 	andi	r5,r3,63487
    2340:	8940030d 	sth	r5,12(r17)
    2344:	89000015 	stw	r4,0(r17)
    2348:	18c4000c 	andi	r3,r3,4096
    234c:	18002c1e 	bne	r3,zero,2400 <__sflush_r+0x160>
    2350:	89400c17 	ldw	r5,48(r17)
    2354:	9c000015 	stw	r16,0(r19)
    2358:	28000526 	beq	r5,zero,2370 <__sflush_r+0xd0>
    235c:	88801004 	addi	r2,r17,64
    2360:	28800226 	beq	r5,r2,236c <__sflush_r+0xcc>
    2364:	9809883a 	mov	r4,r19
    2368:	0002a080 	call	2a08 <_free_r>
    236c:	88000c15 	stw	zero,48(r17)
    2370:	0005883a 	mov	r2,zero
    2374:	dfc00417 	ldw	ra,16(sp)
    2378:	dcc00317 	ldw	r19,12(sp)
    237c:	dc800217 	ldw	r18,8(sp)
    2380:	dc400117 	ldw	r17,4(sp)
    2384:	dc000017 	ldw	r16,0(sp)
    2388:	dec00504 	addi	sp,sp,20
    238c:	f800283a 	ret
    2390:	2c800417 	ldw	r18,16(r5)
    2394:	903ff626 	beq	r18,zero,2370 <__sflush_r+0xd0>
    2398:	2c000017 	ldw	r16,0(r5)
    239c:	108000cc 	andi	r2,r2,3
    23a0:	2c800015 	stw	r18,0(r5)
    23a4:	84a1c83a 	sub	r16,r16,r18
    23a8:	1000131e 	bne	r2,zero,23f8 <__sflush_r+0x158>
    23ac:	28800517 	ldw	r2,20(r5)
    23b0:	88800215 	stw	r2,8(r17)
    23b4:	04000316 	blt	zero,r16,23c4 <__sflush_r+0x124>
    23b8:	003fed06 	br	2370 <__sflush_r+0xd0>
    23bc:	90a5883a 	add	r18,r18,r2
    23c0:	043feb0e 	bge	zero,r16,2370 <__sflush_r+0xd0>
    23c4:	88800917 	ldw	r2,36(r17)
    23c8:	89400717 	ldw	r5,28(r17)
    23cc:	800f883a 	mov	r7,r16
    23d0:	900d883a 	mov	r6,r18
    23d4:	9809883a 	mov	r4,r19
    23d8:	103ee83a 	callr	r2
    23dc:	80a1c83a 	sub	r16,r16,r2
    23e0:	00bff616 	blt	zero,r2,23bc <__sflush_r+0x11c>
    23e4:	88c0030b 	ldhu	r3,12(r17)
    23e8:	00bfffc4 	movi	r2,-1
    23ec:	18c01014 	ori	r3,r3,64
    23f0:	88c0030d 	sth	r3,12(r17)
    23f4:	003fdf06 	br	2374 <__sflush_r+0xd4>
    23f8:	0005883a 	mov	r2,zero
    23fc:	003fec06 	br	23b0 <__sflush_r+0x110>
    2400:	88801415 	stw	r2,80(r17)
    2404:	003fd206 	br	2350 <__sflush_r+0xb0>
    2408:	28c00f17 	ldw	r3,60(r5)
    240c:	00ffb316 	blt	zero,r3,22dc <__sflush_r+0x3c>
    2410:	003fd706 	br	2370 <__sflush_r+0xd0>
    2414:	89400717 	ldw	r5,28(r17)
    2418:	000d883a 	mov	r6,zero
    241c:	9809883a 	mov	r4,r19
    2420:	01c00044 	movi	r7,1
    2424:	403ee83a 	callr	r8
    2428:	100d883a 	mov	r6,r2
    242c:	00bfffc4 	movi	r2,-1
    2430:	30801426 	beq	r6,r2,2484 <__sflush_r+0x1e4>
    2434:	8880030b 	ldhu	r2,12(r17)
    2438:	8a000a17 	ldw	r8,40(r17)
    243c:	003fae06 	br	22f8 <__sflush_r+0x58>
    2440:	98c00017 	ldw	r3,0(r19)
    2444:	183fba26 	beq	r3,zero,2330 <__sflush_r+0x90>
    2448:	01000744 	movi	r4,29
    244c:	19000626 	beq	r3,r4,2468 <__sflush_r+0x1c8>
    2450:	01000584 	movi	r4,22
    2454:	19000426 	beq	r3,r4,2468 <__sflush_r+0x1c8>
    2458:	88c0030b 	ldhu	r3,12(r17)
    245c:	18c01014 	ori	r3,r3,64
    2460:	88c0030d 	sth	r3,12(r17)
    2464:	003fc306 	br	2374 <__sflush_r+0xd4>
    2468:	8880030b 	ldhu	r2,12(r17)
    246c:	88c00417 	ldw	r3,16(r17)
    2470:	88000115 	stw	zero,4(r17)
    2474:	10bdffcc 	andi	r2,r2,63487
    2478:	8880030d 	sth	r2,12(r17)
    247c:	88c00015 	stw	r3,0(r17)
    2480:	003fb306 	br	2350 <__sflush_r+0xb0>
    2484:	98800017 	ldw	r2,0(r19)
    2488:	103fea26 	beq	r2,zero,2434 <__sflush_r+0x194>
    248c:	00c00744 	movi	r3,29
    2490:	10c00226 	beq	r2,r3,249c <__sflush_r+0x1fc>
    2494:	00c00584 	movi	r3,22
    2498:	10ffd21e 	bne	r2,r3,23e4 <__sflush_r+0x144>
    249c:	9c000015 	stw	r16,0(r19)
    24a0:	0005883a 	mov	r2,zero
    24a4:	003fb306 	br	2374 <__sflush_r+0xd4>

000024a8 <_fflush_r>:
    24a8:	defffd04 	addi	sp,sp,-12
    24ac:	dc000115 	stw	r16,4(sp)
    24b0:	dfc00215 	stw	ra,8(sp)
    24b4:	2021883a 	mov	r16,r4
    24b8:	20000226 	beq	r4,zero,24c4 <_fflush_r+0x1c>
    24bc:	20800e17 	ldw	r2,56(r4)
    24c0:	10000c26 	beq	r2,zero,24f4 <_fflush_r+0x4c>
    24c4:	2880030f 	ldh	r2,12(r5)
    24c8:	1000051e 	bne	r2,zero,24e0 <_fflush_r+0x38>
    24cc:	0005883a 	mov	r2,zero
    24d0:	dfc00217 	ldw	ra,8(sp)
    24d4:	dc000117 	ldw	r16,4(sp)
    24d8:	dec00304 	addi	sp,sp,12
    24dc:	f800283a 	ret
    24e0:	8009883a 	mov	r4,r16
    24e4:	dfc00217 	ldw	ra,8(sp)
    24e8:	dc000117 	ldw	r16,4(sp)
    24ec:	dec00304 	addi	sp,sp,12
    24f0:	00022a01 	jmpi	22a0 <__sflush_r>
    24f4:	d9400015 	stw	r5,0(sp)
    24f8:	00028940 	call	2894 <__sinit>
    24fc:	d9400017 	ldw	r5,0(sp)
    2500:	003ff006 	br	24c4 <_fflush_r+0x1c>

00002504 <fflush>:
    2504:	20000526 	beq	r4,zero,251c <fflush+0x18>
    2508:	00800074 	movhi	r2,1
    250c:	10a6c104 	addi	r2,r2,-25852
    2510:	200b883a 	mov	r5,r4
    2514:	11000017 	ldw	r4,0(r2)
    2518:	00024a81 	jmpi	24a8 <_fflush_r>
    251c:	00800074 	movhi	r2,1
    2520:	10a6c004 	addi	r2,r2,-25856
    2524:	11000017 	ldw	r4,0(r2)
    2528:	01400034 	movhi	r5,0
    252c:	29492a04 	addi	r5,r5,9384
    2530:	0002dbc1 	jmpi	2dbc <_fwalk_reent>

00002534 <__fp_lock>:
    2534:	0005883a 	mov	r2,zero
    2538:	f800283a 	ret

0000253c <__fp_unlock>:
    253c:	0005883a 	mov	r2,zero
    2540:	f800283a 	ret

00002544 <_cleanup_r>:
    2544:	01400034 	movhi	r5,0
    2548:	294cd204 	addi	r5,r5,13128
    254c:	0002dbc1 	jmpi	2dbc <_fwalk_reent>

00002550 <__sinit.part.1>:
    2550:	defff704 	addi	sp,sp,-36
    2554:	00c00034 	movhi	r3,0
    2558:	dfc00815 	stw	ra,32(sp)
    255c:	ddc00715 	stw	r23,28(sp)
    2560:	dd800615 	stw	r22,24(sp)
    2564:	dd400515 	stw	r21,20(sp)
    2568:	dd000415 	stw	r20,16(sp)
    256c:	dcc00315 	stw	r19,12(sp)
    2570:	dc800215 	stw	r18,8(sp)
    2574:	dc400115 	stw	r17,4(sp)
    2578:	dc000015 	stw	r16,0(sp)
    257c:	18c95104 	addi	r3,r3,9540
    2580:	24000117 	ldw	r16,4(r4)
    2584:	20c00f15 	stw	r3,60(r4)
    2588:	2080bb04 	addi	r2,r4,748
    258c:	00c000c4 	movi	r3,3
    2590:	20c0b915 	stw	r3,740(r4)
    2594:	2080ba15 	stw	r2,744(r4)
    2598:	2000b815 	stw	zero,736(r4)
    259c:	05c00204 	movi	r23,8
    25a0:	00800104 	movi	r2,4
    25a4:	2025883a 	mov	r18,r4
    25a8:	b80d883a 	mov	r6,r23
    25ac:	81001704 	addi	r4,r16,92
    25b0:	000b883a 	mov	r5,zero
    25b4:	80000015 	stw	zero,0(r16)
    25b8:	80000115 	stw	zero,4(r16)
    25bc:	80000215 	stw	zero,8(r16)
    25c0:	8080030d 	sth	r2,12(r16)
    25c4:	80001915 	stw	zero,100(r16)
    25c8:	8000038d 	sth	zero,14(r16)
    25cc:	80000415 	stw	zero,16(r16)
    25d0:	80000515 	stw	zero,20(r16)
    25d4:	80000615 	stw	zero,24(r16)
    25d8:	00030380 	call	3038 <memset>
    25dc:	05800034 	movhi	r22,0
    25e0:	94400217 	ldw	r17,8(r18)
    25e4:	05400034 	movhi	r21,0
    25e8:	05000034 	movhi	r20,0
    25ec:	04c00034 	movhi	r19,0
    25f0:	b58c5704 	addi	r22,r22,12636
    25f4:	ad4c6e04 	addi	r21,r21,12728
    25f8:	a50c8d04 	addi	r20,r20,12852
    25fc:	9ccca404 	addi	r19,r19,12944
    2600:	85800815 	stw	r22,32(r16)
    2604:	85400915 	stw	r21,36(r16)
    2608:	85000a15 	stw	r20,40(r16)
    260c:	84c00b15 	stw	r19,44(r16)
    2610:	84000715 	stw	r16,28(r16)
    2614:	00800284 	movi	r2,10
    2618:	8880030d 	sth	r2,12(r17)
    261c:	00800044 	movi	r2,1
    2620:	89001704 	addi	r4,r17,92
    2624:	b80d883a 	mov	r6,r23
    2628:	000b883a 	mov	r5,zero
    262c:	88000015 	stw	zero,0(r17)
    2630:	88000115 	stw	zero,4(r17)
    2634:	88000215 	stw	zero,8(r17)
    2638:	88001915 	stw	zero,100(r17)
    263c:	8880038d 	sth	r2,14(r17)
    2640:	88000415 	stw	zero,16(r17)
    2644:	88000515 	stw	zero,20(r17)
    2648:	88000615 	stw	zero,24(r17)
    264c:	00030380 	call	3038 <memset>
    2650:	94000317 	ldw	r16,12(r18)
    2654:	00800484 	movi	r2,18
    2658:	8c400715 	stw	r17,28(r17)
    265c:	8d800815 	stw	r22,32(r17)
    2660:	8d400915 	stw	r21,36(r17)
    2664:	8d000a15 	stw	r20,40(r17)
    2668:	8cc00b15 	stw	r19,44(r17)
    266c:	8080030d 	sth	r2,12(r16)
    2670:	00800084 	movi	r2,2
    2674:	80000015 	stw	zero,0(r16)
    2678:	80000115 	stw	zero,4(r16)
    267c:	80000215 	stw	zero,8(r16)
    2680:	80001915 	stw	zero,100(r16)
    2684:	8080038d 	sth	r2,14(r16)
    2688:	80000415 	stw	zero,16(r16)
    268c:	80000515 	stw	zero,20(r16)
    2690:	80000615 	stw	zero,24(r16)
    2694:	81001704 	addi	r4,r16,92
    2698:	000b883a 	mov	r5,zero
    269c:	b80d883a 	mov	r6,r23
    26a0:	00030380 	call	3038 <memset>
    26a4:	00800044 	movi	r2,1
    26a8:	84000715 	stw	r16,28(r16)
    26ac:	85800815 	stw	r22,32(r16)
    26b0:	85400915 	stw	r21,36(r16)
    26b4:	85000a15 	stw	r20,40(r16)
    26b8:	84c00b15 	stw	r19,44(r16)
    26bc:	90800e15 	stw	r2,56(r18)
    26c0:	dfc00817 	ldw	ra,32(sp)
    26c4:	ddc00717 	ldw	r23,28(sp)
    26c8:	dd800617 	ldw	r22,24(sp)
    26cc:	dd400517 	ldw	r21,20(sp)
    26d0:	dd000417 	ldw	r20,16(sp)
    26d4:	dcc00317 	ldw	r19,12(sp)
    26d8:	dc800217 	ldw	r18,8(sp)
    26dc:	dc400117 	ldw	r17,4(sp)
    26e0:	dc000017 	ldw	r16,0(sp)
    26e4:	dec00904 	addi	sp,sp,36
    26e8:	f800283a 	ret

000026ec <__sfmoreglue>:
    26ec:	defffc04 	addi	sp,sp,-16
    26f0:	dc800215 	stw	r18,8(sp)
    26f4:	2825883a 	mov	r18,r5
    26f8:	dc000015 	stw	r16,0(sp)
    26fc:	01401a04 	movi	r5,104
    2700:	2021883a 	mov	r16,r4
    2704:	913fffc4 	addi	r4,r18,-1
    2708:	dfc00315 	stw	ra,12(sp)
    270c:	dc400115 	stw	r17,4(sp)
    2710:	00036dc0 	call	36dc <__mulsi3>
    2714:	8009883a 	mov	r4,r16
    2718:	11401d04 	addi	r5,r2,116
    271c:	1023883a 	mov	r17,r2
    2720:	000106c0 	call	106c <_malloc_r>
    2724:	1021883a 	mov	r16,r2
    2728:	10000726 	beq	r2,zero,2748 <__sfmoreglue+0x5c>
    272c:	11000304 	addi	r4,r2,12
    2730:	10000015 	stw	zero,0(r2)
    2734:	14800115 	stw	r18,4(r2)
    2738:	11000215 	stw	r4,8(r2)
    273c:	000b883a 	mov	r5,zero
    2740:	89801a04 	addi	r6,r17,104
    2744:	00030380 	call	3038 <memset>
    2748:	8005883a 	mov	r2,r16
    274c:	dfc00317 	ldw	ra,12(sp)
    2750:	dc800217 	ldw	r18,8(sp)
    2754:	dc400117 	ldw	r17,4(sp)
    2758:	dc000017 	ldw	r16,0(sp)
    275c:	dec00404 	addi	sp,sp,16
    2760:	f800283a 	ret

00002764 <__sfp>:
    2764:	00800074 	movhi	r2,1
    2768:	defffb04 	addi	sp,sp,-20
    276c:	10a6c004 	addi	r2,r2,-25856
    2770:	dc800215 	stw	r18,8(sp)
    2774:	14800017 	ldw	r18,0(r2)
    2778:	dcc00315 	stw	r19,12(sp)
    277c:	dfc00415 	stw	ra,16(sp)
    2780:	90800e17 	ldw	r2,56(r18)
    2784:	dc400115 	stw	r17,4(sp)
    2788:	dc000015 	stw	r16,0(sp)
    278c:	2027883a 	mov	r19,r4
    2790:	1000021e 	bne	r2,zero,279c <__sfp+0x38>
    2794:	9009883a 	mov	r4,r18
    2798:	00025500 	call	2550 <__sinit.part.1>
    279c:	9480b804 	addi	r18,r18,736
    27a0:	047fffc4 	movi	r17,-1
    27a4:	91400117 	ldw	r5,4(r18)
    27a8:	94000217 	ldw	r16,8(r18)
    27ac:	297fffc4 	addi	r5,r5,-1
    27b0:	28000a16 	blt	r5,zero,27dc <__sfp+0x78>
    27b4:	8080030f 	ldh	r2,12(r16)
    27b8:	10000c26 	beq	r2,zero,27ec <__sfp+0x88>
    27bc:	80c01d04 	addi	r3,r16,116
    27c0:	00000206 	br	27cc <__sfp+0x68>
    27c4:	18bfe60f 	ldh	r2,-104(r3)
    27c8:	10000826 	beq	r2,zero,27ec <__sfp+0x88>
    27cc:	297fffc4 	addi	r5,r5,-1
    27d0:	1c3ffd04 	addi	r16,r3,-12
    27d4:	18c01a04 	addi	r3,r3,104
    27d8:	2c7ffa1e 	bne	r5,r17,27c4 <__sfp+0x60>
    27dc:	90800017 	ldw	r2,0(r18)
    27e0:	10001d26 	beq	r2,zero,2858 <__sfp+0xf4>
    27e4:	1025883a 	mov	r18,r2
    27e8:	003fee06 	br	27a4 <__sfp+0x40>
    27ec:	00bfffc4 	movi	r2,-1
    27f0:	8080038d 	sth	r2,14(r16)
    27f4:	00800044 	movi	r2,1
    27f8:	8080030d 	sth	r2,12(r16)
    27fc:	80001915 	stw	zero,100(r16)
    2800:	80000015 	stw	zero,0(r16)
    2804:	80000215 	stw	zero,8(r16)
    2808:	80000115 	stw	zero,4(r16)
    280c:	80000415 	stw	zero,16(r16)
    2810:	80000515 	stw	zero,20(r16)
    2814:	80000615 	stw	zero,24(r16)
    2818:	81001704 	addi	r4,r16,92
    281c:	000b883a 	mov	r5,zero
    2820:	01800204 	movi	r6,8
    2824:	00030380 	call	3038 <memset>
    2828:	8005883a 	mov	r2,r16
    282c:	80000c15 	stw	zero,48(r16)
    2830:	80000d15 	stw	zero,52(r16)
    2834:	80001115 	stw	zero,68(r16)
    2838:	80001215 	stw	zero,72(r16)
    283c:	dfc00417 	ldw	ra,16(sp)
    2840:	dcc00317 	ldw	r19,12(sp)
    2844:	dc800217 	ldw	r18,8(sp)
    2848:	dc400117 	ldw	r17,4(sp)
    284c:	dc000017 	ldw	r16,0(sp)
    2850:	dec00504 	addi	sp,sp,20
    2854:	f800283a 	ret
    2858:	9809883a 	mov	r4,r19
    285c:	01400104 	movi	r5,4
    2860:	00026ec0 	call	26ec <__sfmoreglue>
    2864:	90800015 	stw	r2,0(r18)
    2868:	103fde1e 	bne	r2,zero,27e4 <__sfp+0x80>
    286c:	00800304 	movi	r2,12
    2870:	98800015 	stw	r2,0(r19)
    2874:	0005883a 	mov	r2,zero
    2878:	003ff006 	br	283c <__sfp+0xd8>

0000287c <_cleanup>:
    287c:	00800074 	movhi	r2,1
    2880:	10a6c004 	addi	r2,r2,-25856
    2884:	11000017 	ldw	r4,0(r2)
    2888:	01400034 	movhi	r5,0
    288c:	294cd204 	addi	r5,r5,13128
    2890:	0002dbc1 	jmpi	2dbc <_fwalk_reent>

00002894 <__sinit>:
    2894:	20800e17 	ldw	r2,56(r4)
    2898:	10000126 	beq	r2,zero,28a0 <__sinit+0xc>
    289c:	f800283a 	ret
    28a0:	00025501 	jmpi	2550 <__sinit.part.1>

000028a4 <__sfp_lock_acquire>:
    28a4:	f800283a 	ret

000028a8 <__sfp_lock_release>:
    28a8:	f800283a 	ret

000028ac <__sinit_lock_acquire>:
    28ac:	f800283a 	ret

000028b0 <__sinit_lock_release>:
    28b0:	f800283a 	ret

000028b4 <__fp_lock_all>:
    28b4:	00800074 	movhi	r2,1
    28b8:	10a6c104 	addi	r2,r2,-25852
    28bc:	11000017 	ldw	r4,0(r2)
    28c0:	01400034 	movhi	r5,0
    28c4:	29494d04 	addi	r5,r5,9524
    28c8:	0002cf81 	jmpi	2cf8 <_fwalk>

000028cc <__fp_unlock_all>:
    28cc:	00800074 	movhi	r2,1
    28d0:	10a6c104 	addi	r2,r2,-25852
    28d4:	11000017 	ldw	r4,0(r2)
    28d8:	01400034 	movhi	r5,0
    28dc:	29494f04 	addi	r5,r5,9532
    28e0:	0002cf81 	jmpi	2cf8 <_fwalk>

000028e4 <_malloc_trim_r>:
    28e4:	defffb04 	addi	sp,sp,-20
    28e8:	dcc00315 	stw	r19,12(sp)
    28ec:	04c00074 	movhi	r19,1
    28f0:	dc800215 	stw	r18,8(sp)
    28f4:	dc400115 	stw	r17,4(sp)
    28f8:	dc000015 	stw	r16,0(sp)
    28fc:	dfc00415 	stw	ra,16(sp)
    2900:	2821883a 	mov	r16,r5
    2904:	9ce01404 	addi	r19,r19,-32688
    2908:	2025883a 	mov	r18,r4
    290c:	0003c000 	call	3c00 <__malloc_lock>
    2910:	98800217 	ldw	r2,8(r19)
    2914:	14400117 	ldw	r17,4(r2)
    2918:	00bfff04 	movi	r2,-4
    291c:	88a2703a 	and	r17,r17,r2
    2920:	8c21c83a 	sub	r16,r17,r16
    2924:	8403fbc4 	addi	r16,r16,4079
    2928:	8020d33a 	srli	r16,r16,12
    292c:	0083ffc4 	movi	r2,4095
    2930:	843fffc4 	addi	r16,r16,-1
    2934:	8020933a 	slli	r16,r16,12
    2938:	1400060e 	bge	r2,r16,2954 <_malloc_trim_r+0x70>
    293c:	9009883a 	mov	r4,r18
    2940:	000b883a 	mov	r5,zero
    2944:	00020f80 	call	20f8 <_sbrk_r>
    2948:	98c00217 	ldw	r3,8(r19)
    294c:	1c47883a 	add	r3,r3,r17
    2950:	10c00a26 	beq	r2,r3,297c <_malloc_trim_r+0x98>
    2954:	9009883a 	mov	r4,r18
    2958:	0003c200 	call	3c20 <__malloc_unlock>
    295c:	0005883a 	mov	r2,zero
    2960:	dfc00417 	ldw	ra,16(sp)
    2964:	dcc00317 	ldw	r19,12(sp)
    2968:	dc800217 	ldw	r18,8(sp)
    296c:	dc400117 	ldw	r17,4(sp)
    2970:	dc000017 	ldw	r16,0(sp)
    2974:	dec00504 	addi	sp,sp,20
    2978:	f800283a 	ret
    297c:	9009883a 	mov	r4,r18
    2980:	040bc83a 	sub	r5,zero,r16
    2984:	00020f80 	call	20f8 <_sbrk_r>
    2988:	00ffffc4 	movi	r3,-1
    298c:	10c00d26 	beq	r2,r3,29c4 <_malloc_trim_r+0xe0>
    2990:	00c00074 	movhi	r3,1
    2994:	18e6da04 	addi	r3,r3,-25752
    2998:	18800017 	ldw	r2,0(r3)
    299c:	99000217 	ldw	r4,8(r19)
    29a0:	8c23c83a 	sub	r17,r17,r16
    29a4:	8c400054 	ori	r17,r17,1
    29a8:	1421c83a 	sub	r16,r2,r16
    29ac:	24400115 	stw	r17,4(r4)
    29b0:	9009883a 	mov	r4,r18
    29b4:	1c000015 	stw	r16,0(r3)
    29b8:	0003c200 	call	3c20 <__malloc_unlock>
    29bc:	00800044 	movi	r2,1
    29c0:	003fe706 	br	2960 <_malloc_trim_r+0x7c>
    29c4:	9009883a 	mov	r4,r18
    29c8:	000b883a 	mov	r5,zero
    29cc:	00020f80 	call	20f8 <_sbrk_r>
    29d0:	99000217 	ldw	r4,8(r19)
    29d4:	014003c4 	movi	r5,15
    29d8:	1107c83a 	sub	r3,r2,r4
    29dc:	28ffdd0e 	bge	r5,r3,2954 <_malloc_trim_r+0x70>
    29e0:	01400074 	movhi	r5,1
    29e4:	2966c204 	addi	r5,r5,-25848
    29e8:	29400017 	ldw	r5,0(r5)
    29ec:	18c00054 	ori	r3,r3,1
    29f0:	20c00115 	stw	r3,4(r4)
    29f4:	00c00074 	movhi	r3,1
    29f8:	1145c83a 	sub	r2,r2,r5
    29fc:	18e6da04 	addi	r3,r3,-25752
    2a00:	18800015 	stw	r2,0(r3)
    2a04:	003fd306 	br	2954 <_malloc_trim_r+0x70>

00002a08 <_free_r>:
    2a08:	28004c26 	beq	r5,zero,2b3c <_free_r+0x134>
    2a0c:	defffd04 	addi	sp,sp,-12
    2a10:	dc400115 	stw	r17,4(sp)
    2a14:	dc000015 	stw	r16,0(sp)
    2a18:	2023883a 	mov	r17,r4
    2a1c:	2821883a 	mov	r16,r5
    2a20:	dfc00215 	stw	ra,8(sp)
    2a24:	0003c000 	call	3c00 <__malloc_lock>
    2a28:	813fff17 	ldw	r4,-4(r16)
    2a2c:	00bfff84 	movi	r2,-2
    2a30:	02400074 	movhi	r9,1
    2a34:	81bffe04 	addi	r6,r16,-8
    2a38:	2084703a 	and	r2,r4,r2
    2a3c:	4a601404 	addi	r9,r9,-32688
    2a40:	308b883a 	add	r5,r6,r2
    2a44:	2a000117 	ldw	r8,4(r5)
    2a48:	49c00217 	ldw	r7,8(r9)
    2a4c:	00ffff04 	movi	r3,-4
    2a50:	40c6703a 	and	r3,r8,r3
    2a54:	39405326 	beq	r7,r5,2ba4 <_free_r+0x19c>
    2a58:	28c00115 	stw	r3,4(r5)
    2a5c:	2100004c 	andi	r4,r4,1
    2a60:	2000091e 	bne	r4,zero,2a88 <_free_r+0x80>
    2a64:	81fffe17 	ldw	r7,-8(r16)
    2a68:	4a000204 	addi	r8,r9,8
    2a6c:	31cdc83a 	sub	r6,r6,r7
    2a70:	31000217 	ldw	r4,8(r6)
    2a74:	11c5883a 	add	r2,r2,r7
    2a78:	22006126 	beq	r4,r8,2c00 <_free_r+0x1f8>
    2a7c:	31c00317 	ldw	r7,12(r6)
    2a80:	21c00315 	stw	r7,12(r4)
    2a84:	39000215 	stw	r4,8(r7)
    2a88:	28c9883a 	add	r4,r5,r3
    2a8c:	21c00117 	ldw	r7,4(r4)
    2a90:	39c0004c 	andi	r7,r7,1
    2a94:	38000d1e 	bne	r7,zero,2acc <_free_r+0xc4>
    2a98:	29000217 	ldw	r4,8(r5)
    2a9c:	10c5883a 	add	r2,r2,r3
    2aa0:	00c00074 	movhi	r3,1
    2aa4:	18e01604 	addi	r3,r3,-32680
    2aa8:	20c07526 	beq	r4,r3,2c80 <_free_r+0x278>
    2aac:	29c00317 	ldw	r7,12(r5)
    2ab0:	11400054 	ori	r5,r2,1
    2ab4:	3087883a 	add	r3,r6,r2
    2ab8:	21c00315 	stw	r7,12(r4)
    2abc:	39000215 	stw	r4,8(r7)
    2ac0:	31400115 	stw	r5,4(r6)
    2ac4:	18800015 	stw	r2,0(r3)
    2ac8:	00000406 	br	2adc <_free_r+0xd4>
    2acc:	10c00054 	ori	r3,r2,1
    2ad0:	30c00115 	stw	r3,4(r6)
    2ad4:	3087883a 	add	r3,r6,r2
    2ad8:	18800015 	stw	r2,0(r3)
    2adc:	00c07fc4 	movi	r3,511
    2ae0:	18801736 	bltu	r3,r2,2b40 <_free_r+0x138>
    2ae4:	1004d0fa 	srli	r2,r2,3
    2ae8:	01400044 	movi	r5,1
    2aec:	49000117 	ldw	r4,4(r9)
    2af0:	1087883a 	add	r3,r2,r2
    2af4:	18c7883a 	add	r3,r3,r3
    2af8:	1005d0ba 	srai	r2,r2,2
    2afc:	18c7883a 	add	r3,r3,r3
    2b00:	1a47883a 	add	r3,r3,r9
    2b04:	19c00217 	ldw	r7,8(r3)
    2b08:	2884983a 	sll	r2,r5,r2
    2b0c:	30c00315 	stw	r3,12(r6)
    2b10:	31c00215 	stw	r7,8(r6)
    2b14:	1104b03a 	or	r2,r2,r4
    2b18:	19800215 	stw	r6,8(r3)
    2b1c:	48800115 	stw	r2,4(r9)
    2b20:	39800315 	stw	r6,12(r7)
    2b24:	8809883a 	mov	r4,r17
    2b28:	dfc00217 	ldw	ra,8(sp)
    2b2c:	dc400117 	ldw	r17,4(sp)
    2b30:	dc000017 	ldw	r16,0(sp)
    2b34:	dec00304 	addi	sp,sp,12
    2b38:	0003c201 	jmpi	3c20 <__malloc_unlock>
    2b3c:	f800283a 	ret
    2b40:	1006d27a 	srli	r3,r2,9
    2b44:	01000104 	movi	r4,4
    2b48:	20c04036 	bltu	r4,r3,2c4c <_free_r+0x244>
    2b4c:	1006d1ba 	srli	r3,r2,6
    2b50:	19400e04 	addi	r5,r3,56
    2b54:	2947883a 	add	r3,r5,r5
    2b58:	18c7883a 	add	r3,r3,r3
    2b5c:	18c7883a 	add	r3,r3,r3
    2b60:	1a49883a 	add	r4,r3,r9
    2b64:	20c00217 	ldw	r3,8(r4)
    2b68:	01c00074 	movhi	r7,1
    2b6c:	39e01404 	addi	r7,r7,-32688
    2b70:	19003b26 	beq	r3,r4,2c60 <_free_r+0x258>
    2b74:	01ffff04 	movi	r7,-4
    2b78:	19400117 	ldw	r5,4(r3)
    2b7c:	29ca703a 	and	r5,r5,r7
    2b80:	1140022e 	bgeu	r2,r5,2b8c <_free_r+0x184>
    2b84:	18c00217 	ldw	r3,8(r3)
    2b88:	20fffb1e 	bne	r4,r3,2b78 <_free_r+0x170>
    2b8c:	18800317 	ldw	r2,12(r3)
    2b90:	30800315 	stw	r2,12(r6)
    2b94:	30c00215 	stw	r3,8(r6)
    2b98:	11800215 	stw	r6,8(r2)
    2b9c:	19800315 	stw	r6,12(r3)
    2ba0:	003fe006 	br	2b24 <_free_r+0x11c>
    2ba4:	2100004c 	andi	r4,r4,1
    2ba8:	1885883a 	add	r2,r3,r2
    2bac:	2000071e 	bne	r4,zero,2bcc <_free_r+0x1c4>
    2bb0:	817ffe17 	ldw	r5,-8(r16)
    2bb4:	314dc83a 	sub	r6,r6,r5
    2bb8:	30c00317 	ldw	r3,12(r6)
    2bbc:	31000217 	ldw	r4,8(r6)
    2bc0:	1145883a 	add	r2,r2,r5
    2bc4:	20c00315 	stw	r3,12(r4)
    2bc8:	19000215 	stw	r4,8(r3)
    2bcc:	10c00054 	ori	r3,r2,1
    2bd0:	30c00115 	stw	r3,4(r6)
    2bd4:	00c00074 	movhi	r3,1
    2bd8:	18e6c304 	addi	r3,r3,-25844
    2bdc:	18c00017 	ldw	r3,0(r3)
    2be0:	49800215 	stw	r6,8(r9)
    2be4:	10ffcf36 	bltu	r2,r3,2b24 <_free_r+0x11c>
    2be8:	00800074 	movhi	r2,1
    2bec:	10a6d204 	addi	r2,r2,-25784
    2bf0:	11400017 	ldw	r5,0(r2)
    2bf4:	8809883a 	mov	r4,r17
    2bf8:	00028e40 	call	28e4 <_malloc_trim_r>
    2bfc:	003fc906 	br	2b24 <_free_r+0x11c>
    2c00:	28c9883a 	add	r4,r5,r3
    2c04:	21000117 	ldw	r4,4(r4)
    2c08:	2100004c 	andi	r4,r4,1
    2c0c:	20000a1e 	bne	r4,zero,2c38 <_free_r+0x230>
    2c10:	29000317 	ldw	r4,12(r5)
    2c14:	29400217 	ldw	r5,8(r5)
    2c18:	10c5883a 	add	r2,r2,r3
    2c1c:	10c00054 	ori	r3,r2,1
    2c20:	29000315 	stw	r4,12(r5)
    2c24:	21400215 	stw	r5,8(r4)
    2c28:	30c00115 	stw	r3,4(r6)
    2c2c:	308d883a 	add	r6,r6,r2
    2c30:	30800015 	stw	r2,0(r6)
    2c34:	003fbb06 	br	2b24 <_free_r+0x11c>
    2c38:	10c00054 	ori	r3,r2,1
    2c3c:	30c00115 	stw	r3,4(r6)
    2c40:	308d883a 	add	r6,r6,r2
    2c44:	30800015 	stw	r2,0(r6)
    2c48:	003fb606 	br	2b24 <_free_r+0x11c>
    2c4c:	01000504 	movi	r4,20
    2c50:	20c01436 	bltu	r4,r3,2ca4 <_free_r+0x29c>
    2c54:	194016c4 	addi	r5,r3,91
    2c58:	2947883a 	add	r3,r5,r5
    2c5c:	003fbe06 	br	2b58 <_free_r+0x150>
    2c60:	280bd0ba 	srai	r5,r5,2
    2c64:	00800044 	movi	r2,1
    2c68:	39000117 	ldw	r4,4(r7)
    2c6c:	114a983a 	sll	r5,r2,r5
    2c70:	1805883a 	mov	r2,r3
    2c74:	2908b03a 	or	r4,r5,r4
    2c78:	39000115 	stw	r4,4(r7)
    2c7c:	003fc406 	br	2b90 <_free_r+0x188>
    2c80:	49800515 	stw	r6,20(r9)
    2c84:	49800415 	stw	r6,16(r9)
    2c88:	10c00054 	ori	r3,r2,1
    2c8c:	31000315 	stw	r4,12(r6)
    2c90:	31000215 	stw	r4,8(r6)
    2c94:	30c00115 	stw	r3,4(r6)
    2c98:	308d883a 	add	r6,r6,r2
    2c9c:	30800015 	stw	r2,0(r6)
    2ca0:	003fa006 	br	2b24 <_free_r+0x11c>
    2ca4:	01001504 	movi	r4,84
    2ca8:	20c00436 	bltu	r4,r3,2cbc <_free_r+0x2b4>
    2cac:	1006d33a 	srli	r3,r2,12
    2cb0:	19401b84 	addi	r5,r3,110
    2cb4:	2947883a 	add	r3,r5,r5
    2cb8:	003fa706 	br	2b58 <_free_r+0x150>
    2cbc:	01005504 	movi	r4,340
    2cc0:	20c00436 	bltu	r4,r3,2cd4 <_free_r+0x2cc>
    2cc4:	1006d3fa 	srli	r3,r2,15
    2cc8:	19401dc4 	addi	r5,r3,119
    2ccc:	2947883a 	add	r3,r5,r5
    2cd0:	003fa106 	br	2b58 <_free_r+0x150>
    2cd4:	01015504 	movi	r4,1364
    2cd8:	20c00436 	bltu	r4,r3,2cec <_free_r+0x2e4>
    2cdc:	1006d4ba 	srli	r3,r2,18
    2ce0:	19401f04 	addi	r5,r3,124
    2ce4:	2947883a 	add	r3,r5,r5
    2ce8:	003f9b06 	br	2b58 <_free_r+0x150>
    2cec:	00c03f04 	movi	r3,252
    2cf0:	01401f84 	movi	r5,126
    2cf4:	003f9806 	br	2b58 <_free_r+0x150>

00002cf8 <_fwalk>:
    2cf8:	defff704 	addi	sp,sp,-36
    2cfc:	dd000415 	stw	r20,16(sp)
    2d00:	dfc00815 	stw	ra,32(sp)
    2d04:	ddc00715 	stw	r23,28(sp)
    2d08:	dd800615 	stw	r22,24(sp)
    2d0c:	dd400515 	stw	r21,20(sp)
    2d10:	dcc00315 	stw	r19,12(sp)
    2d14:	dc800215 	stw	r18,8(sp)
    2d18:	dc400115 	stw	r17,4(sp)
    2d1c:	dc000015 	stw	r16,0(sp)
    2d20:	2500b804 	addi	r20,r4,736
    2d24:	a0002326 	beq	r20,zero,2db4 <_fwalk+0xbc>
    2d28:	282b883a 	mov	r21,r5
    2d2c:	002f883a 	mov	r23,zero
    2d30:	05800044 	movi	r22,1
    2d34:	04ffffc4 	movi	r19,-1
    2d38:	a4400117 	ldw	r17,4(r20)
    2d3c:	a4800217 	ldw	r18,8(r20)
    2d40:	8c7fffc4 	addi	r17,r17,-1
    2d44:	88000d16 	blt	r17,zero,2d7c <_fwalk+0x84>
    2d48:	94000304 	addi	r16,r18,12
    2d4c:	94800384 	addi	r18,r18,14
    2d50:	80c0000b 	ldhu	r3,0(r16)
    2d54:	8c7fffc4 	addi	r17,r17,-1
    2d58:	813ffd04 	addi	r4,r16,-12
    2d5c:	b0c0042e 	bgeu	r22,r3,2d70 <_fwalk+0x78>
    2d60:	90c0000f 	ldh	r3,0(r18)
    2d64:	1cc00226 	beq	r3,r19,2d70 <_fwalk+0x78>
    2d68:	a83ee83a 	callr	r21
    2d6c:	b8aeb03a 	or	r23,r23,r2
    2d70:	84001a04 	addi	r16,r16,104
    2d74:	94801a04 	addi	r18,r18,104
    2d78:	8cfff51e 	bne	r17,r19,2d50 <_fwalk+0x58>
    2d7c:	a5000017 	ldw	r20,0(r20)
    2d80:	a03fed1e 	bne	r20,zero,2d38 <_fwalk+0x40>
    2d84:	b805883a 	mov	r2,r23
    2d88:	dfc00817 	ldw	ra,32(sp)
    2d8c:	ddc00717 	ldw	r23,28(sp)
    2d90:	dd800617 	ldw	r22,24(sp)
    2d94:	dd400517 	ldw	r21,20(sp)
    2d98:	dd000417 	ldw	r20,16(sp)
    2d9c:	dcc00317 	ldw	r19,12(sp)
    2da0:	dc800217 	ldw	r18,8(sp)
    2da4:	dc400117 	ldw	r17,4(sp)
    2da8:	dc000017 	ldw	r16,0(sp)
    2dac:	dec00904 	addi	sp,sp,36
    2db0:	f800283a 	ret
    2db4:	002f883a 	mov	r23,zero
    2db8:	003ff206 	br	2d84 <_fwalk+0x8c>

00002dbc <_fwalk_reent>:
    2dbc:	defff704 	addi	sp,sp,-36
    2dc0:	dd400515 	stw	r21,20(sp)
    2dc4:	dfc00815 	stw	ra,32(sp)
    2dc8:	ddc00715 	stw	r23,28(sp)
    2dcc:	dd800615 	stw	r22,24(sp)
    2dd0:	dd000415 	stw	r20,16(sp)
    2dd4:	dcc00315 	stw	r19,12(sp)
    2dd8:	dc800215 	stw	r18,8(sp)
    2ddc:	dc400115 	stw	r17,4(sp)
    2de0:	dc000015 	stw	r16,0(sp)
    2de4:	2540b804 	addi	r21,r4,736
    2de8:	a8002326 	beq	r21,zero,2e78 <_fwalk_reent+0xbc>
    2dec:	2829883a 	mov	r20,r5
    2df0:	202d883a 	mov	r22,r4
    2df4:	002f883a 	mov	r23,zero
    2df8:	04c00044 	movi	r19,1
    2dfc:	04bfffc4 	movi	r18,-1
    2e00:	ac400117 	ldw	r17,4(r21)
    2e04:	ac000217 	ldw	r16,8(r21)
    2e08:	8c7fffc4 	addi	r17,r17,-1
    2e0c:	88000c16 	blt	r17,zero,2e40 <_fwalk_reent+0x84>
    2e10:	84000304 	addi	r16,r16,12
    2e14:	80c0000b 	ldhu	r3,0(r16)
    2e18:	8c7fffc4 	addi	r17,r17,-1
    2e1c:	817ffd04 	addi	r5,r16,-12
    2e20:	98c0052e 	bgeu	r19,r3,2e38 <_fwalk_reent+0x7c>
    2e24:	80c0008f 	ldh	r3,2(r16)
    2e28:	b009883a 	mov	r4,r22
    2e2c:	1c800226 	beq	r3,r18,2e38 <_fwalk_reent+0x7c>
    2e30:	a03ee83a 	callr	r20
    2e34:	b8aeb03a 	or	r23,r23,r2
    2e38:	84001a04 	addi	r16,r16,104
    2e3c:	8cbff51e 	bne	r17,r18,2e14 <_fwalk_reent+0x58>
    2e40:	ad400017 	ldw	r21,0(r21)
    2e44:	a83fee1e 	bne	r21,zero,2e00 <_fwalk_reent+0x44>
    2e48:	b805883a 	mov	r2,r23
    2e4c:	dfc00817 	ldw	ra,32(sp)
    2e50:	ddc00717 	ldw	r23,28(sp)
    2e54:	dd800617 	ldw	r22,24(sp)
    2e58:	dd400517 	ldw	r21,20(sp)
    2e5c:	dd000417 	ldw	r20,16(sp)
    2e60:	dcc00317 	ldw	r19,12(sp)
    2e64:	dc800217 	ldw	r18,8(sp)
    2e68:	dc400117 	ldw	r17,4(sp)
    2e6c:	dc000017 	ldw	r16,0(sp)
    2e70:	dec00904 	addi	sp,sp,36
    2e74:	f800283a 	ret
    2e78:	002f883a 	mov	r23,zero
    2e7c:	003ff206 	br	2e48 <_fwalk_reent+0x8c>

00002e80 <__smakebuf_r>:
    2e80:	2880030b 	ldhu	r2,12(r5)
    2e84:	10c0008c 	andi	r3,r2,2
    2e88:	1800401e 	bne	r3,zero,2f8c <__smakebuf_r+0x10c>
    2e8c:	deffec04 	addi	sp,sp,-80
    2e90:	dc000f15 	stw	r16,60(sp)
    2e94:	2821883a 	mov	r16,r5
    2e98:	2940038f 	ldh	r5,14(r5)
    2e9c:	dc401015 	stw	r17,64(sp)
    2ea0:	dfc01315 	stw	ra,76(sp)
    2ea4:	dcc01215 	stw	r19,72(sp)
    2ea8:	dc801115 	stw	r18,68(sp)
    2eac:	2023883a 	mov	r17,r4
    2eb0:	28001b16 	blt	r5,zero,2f20 <__smakebuf_r+0xa0>
    2eb4:	d80d883a 	mov	r6,sp
    2eb8:	000344c0 	call	344c <_fstat_r>
    2ebc:	10001716 	blt	r2,zero,2f1c <__smakebuf_r+0x9c>
    2ec0:	d8800117 	ldw	r2,4(sp)
    2ec4:	00e00014 	movui	r3,32768
    2ec8:	10bc000c 	andi	r2,r2,61440
    2ecc:	10c03726 	beq	r2,r3,2fac <__smakebuf_r+0x12c>
    2ed0:	80c0030b 	ldhu	r3,12(r16)
    2ed4:	18c20014 	ori	r3,r3,2048
    2ed8:	80c0030d 	sth	r3,12(r16)
    2edc:	00c80004 	movi	r3,8192
    2ee0:	10c03c1e 	bne	r2,r3,2fd4 <__smakebuf_r+0x154>
    2ee4:	8140038f 	ldh	r5,14(r16)
    2ee8:	8809883a 	mov	r4,r17
    2eec:	00034a40 	call	34a4 <_isatty_r>
    2ef0:	10004e26 	beq	r2,zero,302c <__smakebuf_r+0x1ac>
    2ef4:	8080030b 	ldhu	r2,12(r16)
    2ef8:	04c00044 	movi	r19,1
    2efc:	80c010c4 	addi	r3,r16,67
    2f00:	14c4b03a 	or	r2,r2,r19
    2f04:	8080030d 	sth	r2,12(r16)
    2f08:	80c00015 	stw	r3,0(r16)
    2f0c:	80c00415 	stw	r3,16(r16)
    2f10:	84c00515 	stw	r19,20(r16)
    2f14:	04810004 	movi	r18,1024
    2f18:	00000706 	br	2f38 <__smakebuf_r+0xb8>
    2f1c:	8080030b 	ldhu	r2,12(r16)
    2f20:	10c0200c 	andi	r3,r2,128
    2f24:	18001f1e 	bne	r3,zero,2fa4 <__smakebuf_r+0x124>
    2f28:	04810004 	movi	r18,1024
    2f2c:	10820014 	ori	r2,r2,2048
    2f30:	8080030d 	sth	r2,12(r16)
    2f34:	0027883a 	mov	r19,zero
    2f38:	8809883a 	mov	r4,r17
    2f3c:	900b883a 	mov	r5,r18
    2f40:	000106c0 	call	106c <_malloc_r>
    2f44:	10002e26 	beq	r2,zero,3000 <__smakebuf_r+0x180>
    2f48:	80c0030b 	ldhu	r3,12(r16)
    2f4c:	01000034 	movhi	r4,0
    2f50:	21095104 	addi	r4,r4,9540
    2f54:	89000f15 	stw	r4,60(r17)
    2f58:	18c02014 	ori	r3,r3,128
    2f5c:	80c0030d 	sth	r3,12(r16)
    2f60:	80800015 	stw	r2,0(r16)
    2f64:	80800415 	stw	r2,16(r16)
    2f68:	84800515 	stw	r18,20(r16)
    2f6c:	98001c1e 	bne	r19,zero,2fe0 <__smakebuf_r+0x160>
    2f70:	dfc01317 	ldw	ra,76(sp)
    2f74:	dcc01217 	ldw	r19,72(sp)
    2f78:	dc801117 	ldw	r18,68(sp)
    2f7c:	dc401017 	ldw	r17,64(sp)
    2f80:	dc000f17 	ldw	r16,60(sp)
    2f84:	dec01404 	addi	sp,sp,80
    2f88:	f800283a 	ret
    2f8c:	288010c4 	addi	r2,r5,67
    2f90:	28800015 	stw	r2,0(r5)
    2f94:	28800415 	stw	r2,16(r5)
    2f98:	00800044 	movi	r2,1
    2f9c:	28800515 	stw	r2,20(r5)
    2fa0:	f800283a 	ret
    2fa4:	04801004 	movi	r18,64
    2fa8:	003fe006 	br	2f2c <__smakebuf_r+0xac>
    2fac:	81000a17 	ldw	r4,40(r16)
    2fb0:	00c00034 	movhi	r3,0
    2fb4:	18cc8d04 	addi	r3,r3,12852
    2fb8:	20ffc51e 	bne	r4,r3,2ed0 <__smakebuf_r+0x50>
    2fbc:	80c0030b 	ldhu	r3,12(r16)
    2fc0:	01010004 	movi	r4,1024
    2fc4:	81001315 	stw	r4,76(r16)
    2fc8:	1906b03a 	or	r3,r3,r4
    2fcc:	80c0030d 	sth	r3,12(r16)
    2fd0:	003fc206 	br	2edc <__smakebuf_r+0x5c>
    2fd4:	0027883a 	mov	r19,zero
    2fd8:	04810004 	movi	r18,1024
    2fdc:	003fd606 	br	2f38 <__smakebuf_r+0xb8>
    2fe0:	8140038f 	ldh	r5,14(r16)
    2fe4:	8809883a 	mov	r4,r17
    2fe8:	00034a40 	call	34a4 <_isatty_r>
    2fec:	103fe026 	beq	r2,zero,2f70 <__smakebuf_r+0xf0>
    2ff0:	8080030b 	ldhu	r2,12(r16)
    2ff4:	10800054 	ori	r2,r2,1
    2ff8:	8080030d 	sth	r2,12(r16)
    2ffc:	003fdc06 	br	2f70 <__smakebuf_r+0xf0>
    3000:	8080030b 	ldhu	r2,12(r16)
    3004:	10c0800c 	andi	r3,r2,512
    3008:	183fd91e 	bne	r3,zero,2f70 <__smakebuf_r+0xf0>
    300c:	10800094 	ori	r2,r2,2
    3010:	80c010c4 	addi	r3,r16,67
    3014:	8080030d 	sth	r2,12(r16)
    3018:	00800044 	movi	r2,1
    301c:	80c00015 	stw	r3,0(r16)
    3020:	80c00415 	stw	r3,16(r16)
    3024:	80800515 	stw	r2,20(r16)
    3028:	003fd106 	br	2f70 <__smakebuf_r+0xf0>
    302c:	04c00044 	movi	r19,1
    3030:	04810004 	movi	r18,1024
    3034:	003fc006 	br	2f38 <__smakebuf_r+0xb8>

00003038 <memset>:
    3038:	20c000cc 	andi	r3,r4,3
    303c:	2005883a 	mov	r2,r4
    3040:	18004326 	beq	r3,zero,3150 <memset+0x118>
    3044:	31ffffc4 	addi	r7,r6,-1
    3048:	30004026 	beq	r6,zero,314c <memset+0x114>
    304c:	2813883a 	mov	r9,r5
    3050:	200d883a 	mov	r6,r4
    3054:	2007883a 	mov	r3,r4
    3058:	00000406 	br	306c <memset+0x34>
    305c:	3a3fffc4 	addi	r8,r7,-1
    3060:	31800044 	addi	r6,r6,1
    3064:	38003926 	beq	r7,zero,314c <memset+0x114>
    3068:	400f883a 	mov	r7,r8
    306c:	18c00044 	addi	r3,r3,1
    3070:	32400005 	stb	r9,0(r6)
    3074:	1a0000cc 	andi	r8,r3,3
    3078:	403ff81e 	bne	r8,zero,305c <memset+0x24>
    307c:	010000c4 	movi	r4,3
    3080:	21c02d2e 	bgeu	r4,r7,3138 <memset+0x100>
    3084:	29803fcc 	andi	r6,r5,255
    3088:	3008923a 	slli	r4,r6,8
    308c:	218cb03a 	or	r6,r4,r6
    3090:	3008943a 	slli	r4,r6,16
    3094:	218cb03a 	or	r6,r4,r6
    3098:	010003c4 	movi	r4,15
    309c:	21c0182e 	bgeu	r4,r7,3100 <memset+0xc8>
    30a0:	3b3ffc04 	addi	r12,r7,-16
    30a4:	6018d13a 	srli	r12,r12,4
    30a8:	1a000104 	addi	r8,r3,4
    30ac:	1ac00204 	addi	r11,r3,8
    30b0:	6008913a 	slli	r4,r12,4
    30b4:	1a800304 	addi	r10,r3,12
    30b8:	1813883a 	mov	r9,r3
    30bc:	21000504 	addi	r4,r4,20
    30c0:	1909883a 	add	r4,r3,r4
    30c4:	49800015 	stw	r6,0(r9)
    30c8:	41800015 	stw	r6,0(r8)
    30cc:	59800015 	stw	r6,0(r11)
    30d0:	51800015 	stw	r6,0(r10)
    30d4:	42000404 	addi	r8,r8,16
    30d8:	4a400404 	addi	r9,r9,16
    30dc:	5ac00404 	addi	r11,r11,16
    30e0:	52800404 	addi	r10,r10,16
    30e4:	413ff71e 	bne	r8,r4,30c4 <memset+0x8c>
    30e8:	63000044 	addi	r12,r12,1
    30ec:	6018913a 	slli	r12,r12,4
    30f0:	39c003cc 	andi	r7,r7,15
    30f4:	010000c4 	movi	r4,3
    30f8:	1b07883a 	add	r3,r3,r12
    30fc:	21c00e2e 	bgeu	r4,r7,3138 <memset+0x100>
    3100:	1813883a 	mov	r9,r3
    3104:	3811883a 	mov	r8,r7
    3108:	010000c4 	movi	r4,3
    310c:	49800015 	stw	r6,0(r9)
    3110:	423fff04 	addi	r8,r8,-4
    3114:	4a400104 	addi	r9,r9,4
    3118:	223ffc36 	bltu	r4,r8,310c <memset+0xd4>
    311c:	393fff04 	addi	r4,r7,-4
    3120:	2008d0ba 	srli	r4,r4,2
    3124:	39c000cc 	andi	r7,r7,3
    3128:	21000044 	addi	r4,r4,1
    312c:	2109883a 	add	r4,r4,r4
    3130:	2109883a 	add	r4,r4,r4
    3134:	1907883a 	add	r3,r3,r4
    3138:	38000426 	beq	r7,zero,314c <memset+0x114>
    313c:	19cf883a 	add	r7,r3,r7
    3140:	19400005 	stb	r5,0(r3)
    3144:	18c00044 	addi	r3,r3,1
    3148:	19fffd1e 	bne	r3,r7,3140 <memset+0x108>
    314c:	f800283a 	ret
    3150:	2007883a 	mov	r3,r4
    3154:	300f883a 	mov	r7,r6
    3158:	003fc806 	br	307c <memset+0x44>

0000315c <__sread>:
    315c:	defffe04 	addi	sp,sp,-8
    3160:	dc000015 	stw	r16,0(sp)
    3164:	2821883a 	mov	r16,r5
    3168:	2940038f 	ldh	r5,14(r5)
    316c:	dfc00115 	stw	ra,4(sp)
    3170:	00035540 	call	3554 <_read_r>
    3174:	10000716 	blt	r2,zero,3194 <__sread+0x38>
    3178:	80c01417 	ldw	r3,80(r16)
    317c:	1887883a 	add	r3,r3,r2
    3180:	80c01415 	stw	r3,80(r16)
    3184:	dfc00117 	ldw	ra,4(sp)
    3188:	dc000017 	ldw	r16,0(sp)
    318c:	dec00204 	addi	sp,sp,8
    3190:	f800283a 	ret
    3194:	80c0030b 	ldhu	r3,12(r16)
    3198:	18fbffcc 	andi	r3,r3,61439
    319c:	80c0030d 	sth	r3,12(r16)
    31a0:	dfc00117 	ldw	ra,4(sp)
    31a4:	dc000017 	ldw	r16,0(sp)
    31a8:	dec00204 	addi	sp,sp,8
    31ac:	f800283a 	ret

000031b0 <__seofread>:
    31b0:	0005883a 	mov	r2,zero
    31b4:	f800283a 	ret

000031b8 <__swrite>:
    31b8:	2880030b 	ldhu	r2,12(r5)
    31bc:	defffb04 	addi	sp,sp,-20
    31c0:	dcc00315 	stw	r19,12(sp)
    31c4:	dc800215 	stw	r18,8(sp)
    31c8:	dc400115 	stw	r17,4(sp)
    31cc:	dc000015 	stw	r16,0(sp)
    31d0:	dfc00415 	stw	ra,16(sp)
    31d4:	10c0400c 	andi	r3,r2,256
    31d8:	2821883a 	mov	r16,r5
    31dc:	2027883a 	mov	r19,r4
    31e0:	3025883a 	mov	r18,r6
    31e4:	3823883a 	mov	r17,r7
    31e8:	18000526 	beq	r3,zero,3200 <__swrite+0x48>
    31ec:	2940038f 	ldh	r5,14(r5)
    31f0:	000d883a 	mov	r6,zero
    31f4:	01c00084 	movi	r7,2
    31f8:	00034f80 	call	34f8 <_lseek_r>
    31fc:	8080030b 	ldhu	r2,12(r16)
    3200:	8140038f 	ldh	r5,14(r16)
    3204:	10bbffcc 	andi	r2,r2,61439
    3208:	9809883a 	mov	r4,r19
    320c:	900d883a 	mov	r6,r18
    3210:	880f883a 	mov	r7,r17
    3214:	8080030d 	sth	r2,12(r16)
    3218:	dfc00417 	ldw	ra,16(sp)
    321c:	dcc00317 	ldw	r19,12(sp)
    3220:	dc800217 	ldw	r18,8(sp)
    3224:	dc400117 	ldw	r17,4(sp)
    3228:	dc000017 	ldw	r16,0(sp)
    322c:	dec00504 	addi	sp,sp,20
    3230:	00032981 	jmpi	3298 <_write_r>

00003234 <__sseek>:
    3234:	defffe04 	addi	sp,sp,-8
    3238:	dc000015 	stw	r16,0(sp)
    323c:	2821883a 	mov	r16,r5
    3240:	2940038f 	ldh	r5,14(r5)
    3244:	dfc00115 	stw	ra,4(sp)
    3248:	00034f80 	call	34f8 <_lseek_r>
    324c:	00ffffc4 	movi	r3,-1
    3250:	10c00826 	beq	r2,r3,3274 <__sseek+0x40>
    3254:	80c0030b 	ldhu	r3,12(r16)
    3258:	80801415 	stw	r2,80(r16)
    325c:	18c40014 	ori	r3,r3,4096
    3260:	80c0030d 	sth	r3,12(r16)
    3264:	dfc00117 	ldw	ra,4(sp)
    3268:	dc000017 	ldw	r16,0(sp)
    326c:	dec00204 	addi	sp,sp,8
    3270:	f800283a 	ret
    3274:	80c0030b 	ldhu	r3,12(r16)
    3278:	18fbffcc 	andi	r3,r3,61439
    327c:	80c0030d 	sth	r3,12(r16)
    3280:	dfc00117 	ldw	ra,4(sp)
    3284:	dc000017 	ldw	r16,0(sp)
    3288:	dec00204 	addi	sp,sp,8
    328c:	f800283a 	ret

00003290 <__sclose>:
    3290:	2940038f 	ldh	r5,14(r5)
    3294:	00032f41 	jmpi	32f4 <_close_r>

00003298 <_write_r>:
    3298:	defffd04 	addi	sp,sp,-12
    329c:	dc000015 	stw	r16,0(sp)
    32a0:	04000074 	movhi	r16,1
    32a4:	dc400115 	stw	r17,4(sp)
    32a8:	8426d304 	addi	r16,r16,-25780
    32ac:	2023883a 	mov	r17,r4
    32b0:	2809883a 	mov	r4,r5
    32b4:	300b883a 	mov	r5,r6
    32b8:	380d883a 	mov	r6,r7
    32bc:	dfc00215 	stw	ra,8(sp)
    32c0:	80000015 	stw	zero,0(r16)
    32c4:	0003f140 	call	3f14 <write>
    32c8:	00ffffc4 	movi	r3,-1
    32cc:	10c00526 	beq	r2,r3,32e4 <_write_r+0x4c>
    32d0:	dfc00217 	ldw	ra,8(sp)
    32d4:	dc400117 	ldw	r17,4(sp)
    32d8:	dc000017 	ldw	r16,0(sp)
    32dc:	dec00304 	addi	sp,sp,12
    32e0:	f800283a 	ret
    32e4:	80c00017 	ldw	r3,0(r16)
    32e8:	183ff926 	beq	r3,zero,32d0 <_write_r+0x38>
    32ec:	88c00015 	stw	r3,0(r17)
    32f0:	003ff706 	br	32d0 <_write_r+0x38>

000032f4 <_close_r>:
    32f4:	defffd04 	addi	sp,sp,-12
    32f8:	dc000015 	stw	r16,0(sp)
    32fc:	04000074 	movhi	r16,1
    3300:	dc400115 	stw	r17,4(sp)
    3304:	8426d304 	addi	r16,r16,-25780
    3308:	2023883a 	mov	r17,r4
    330c:	2809883a 	mov	r4,r5
    3310:	dfc00215 	stw	ra,8(sp)
    3314:	80000015 	stw	zero,0(r16)
    3318:	00037540 	call	3754 <close>
    331c:	00ffffc4 	movi	r3,-1
    3320:	10c00526 	beq	r2,r3,3338 <_close_r+0x44>
    3324:	dfc00217 	ldw	ra,8(sp)
    3328:	dc400117 	ldw	r17,4(sp)
    332c:	dc000017 	ldw	r16,0(sp)
    3330:	dec00304 	addi	sp,sp,12
    3334:	f800283a 	ret
    3338:	80c00017 	ldw	r3,0(r16)
    333c:	183ff926 	beq	r3,zero,3324 <_close_r+0x30>
    3340:	88c00015 	stw	r3,0(r17)
    3344:	003ff706 	br	3324 <_close_r+0x30>

00003348 <_fclose_r>:
    3348:	28003926 	beq	r5,zero,3430 <_fclose_r+0xe8>
    334c:	defffc04 	addi	sp,sp,-16
    3350:	dc400115 	stw	r17,4(sp)
    3354:	dc000015 	stw	r16,0(sp)
    3358:	dfc00315 	stw	ra,12(sp)
    335c:	dc800215 	stw	r18,8(sp)
    3360:	2023883a 	mov	r17,r4
    3364:	2821883a 	mov	r16,r5
    3368:	20000226 	beq	r4,zero,3374 <_fclose_r+0x2c>
    336c:	20800e17 	ldw	r2,56(r4)
    3370:	10002726 	beq	r2,zero,3410 <_fclose_r+0xc8>
    3374:	8080030f 	ldh	r2,12(r16)
    3378:	1000071e 	bne	r2,zero,3398 <_fclose_r+0x50>
    337c:	0005883a 	mov	r2,zero
    3380:	dfc00317 	ldw	ra,12(sp)
    3384:	dc800217 	ldw	r18,8(sp)
    3388:	dc400117 	ldw	r17,4(sp)
    338c:	dc000017 	ldw	r16,0(sp)
    3390:	dec00404 	addi	sp,sp,16
    3394:	f800283a 	ret
    3398:	8809883a 	mov	r4,r17
    339c:	800b883a 	mov	r5,r16
    33a0:	00022a00 	call	22a0 <__sflush_r>
    33a4:	1025883a 	mov	r18,r2
    33a8:	80800b17 	ldw	r2,44(r16)
    33ac:	10000426 	beq	r2,zero,33c0 <_fclose_r+0x78>
    33b0:	81400717 	ldw	r5,28(r16)
    33b4:	8809883a 	mov	r4,r17
    33b8:	103ee83a 	callr	r2
    33bc:	10001616 	blt	r2,zero,3418 <_fclose_r+0xd0>
    33c0:	8080030b 	ldhu	r2,12(r16)
    33c4:	1080200c 	andi	r2,r2,128
    33c8:	1000151e 	bne	r2,zero,3420 <_fclose_r+0xd8>
    33cc:	81400c17 	ldw	r5,48(r16)
    33d0:	28000526 	beq	r5,zero,33e8 <_fclose_r+0xa0>
    33d4:	80801004 	addi	r2,r16,64
    33d8:	28800226 	beq	r5,r2,33e4 <_fclose_r+0x9c>
    33dc:	8809883a 	mov	r4,r17
    33e0:	0002a080 	call	2a08 <_free_r>
    33e4:	80000c15 	stw	zero,48(r16)
    33e8:	81401117 	ldw	r5,68(r16)
    33ec:	28000326 	beq	r5,zero,33fc <_fclose_r+0xb4>
    33f0:	8809883a 	mov	r4,r17
    33f4:	0002a080 	call	2a08 <_free_r>
    33f8:	80001115 	stw	zero,68(r16)
    33fc:	00028a40 	call	28a4 <__sfp_lock_acquire>
    3400:	8000030d 	sth	zero,12(r16)
    3404:	00028a80 	call	28a8 <__sfp_lock_release>
    3408:	9005883a 	mov	r2,r18
    340c:	003fdc06 	br	3380 <_fclose_r+0x38>
    3410:	00028940 	call	2894 <__sinit>
    3414:	003fd706 	br	3374 <_fclose_r+0x2c>
    3418:	04bfffc4 	movi	r18,-1
    341c:	003fe806 	br	33c0 <_fclose_r+0x78>
    3420:	81400417 	ldw	r5,16(r16)
    3424:	8809883a 	mov	r4,r17
    3428:	0002a080 	call	2a08 <_free_r>
    342c:	003fe706 	br	33cc <_fclose_r+0x84>
    3430:	0005883a 	mov	r2,zero
    3434:	f800283a 	ret

00003438 <fclose>:
    3438:	00800074 	movhi	r2,1
    343c:	10a6c104 	addi	r2,r2,-25852
    3440:	200b883a 	mov	r5,r4
    3444:	11000017 	ldw	r4,0(r2)
    3448:	00033481 	jmpi	3348 <_fclose_r>

0000344c <_fstat_r>:
    344c:	defffd04 	addi	sp,sp,-12
    3450:	dc000015 	stw	r16,0(sp)
    3454:	04000074 	movhi	r16,1
    3458:	dc400115 	stw	r17,4(sp)
    345c:	8426d304 	addi	r16,r16,-25780
    3460:	2023883a 	mov	r17,r4
    3464:	2809883a 	mov	r4,r5
    3468:	300b883a 	mov	r5,r6
    346c:	dfc00215 	stw	ra,8(sp)
    3470:	80000015 	stw	zero,0(r16)
    3474:	00038a80 	call	38a8 <fstat>
    3478:	00ffffc4 	movi	r3,-1
    347c:	10c00526 	beq	r2,r3,3494 <_fstat_r+0x48>
    3480:	dfc00217 	ldw	ra,8(sp)
    3484:	dc400117 	ldw	r17,4(sp)
    3488:	dc000017 	ldw	r16,0(sp)
    348c:	dec00304 	addi	sp,sp,12
    3490:	f800283a 	ret
    3494:	80c00017 	ldw	r3,0(r16)
    3498:	183ff926 	beq	r3,zero,3480 <_fstat_r+0x34>
    349c:	88c00015 	stw	r3,0(r17)
    34a0:	003ff706 	br	3480 <_fstat_r+0x34>

000034a4 <_isatty_r>:
    34a4:	defffd04 	addi	sp,sp,-12
    34a8:	dc000015 	stw	r16,0(sp)
    34ac:	04000074 	movhi	r16,1
    34b0:	dc400115 	stw	r17,4(sp)
    34b4:	8426d304 	addi	r16,r16,-25780
    34b8:	2023883a 	mov	r17,r4
    34bc:	2809883a 	mov	r4,r5
    34c0:	dfc00215 	stw	ra,8(sp)
    34c4:	80000015 	stw	zero,0(r16)
    34c8:	00039b00 	call	39b0 <isatty>
    34cc:	00ffffc4 	movi	r3,-1
    34d0:	10c00526 	beq	r2,r3,34e8 <_isatty_r+0x44>
    34d4:	dfc00217 	ldw	ra,8(sp)
    34d8:	dc400117 	ldw	r17,4(sp)
    34dc:	dc000017 	ldw	r16,0(sp)
    34e0:	dec00304 	addi	sp,sp,12
    34e4:	f800283a 	ret
    34e8:	80c00017 	ldw	r3,0(r16)
    34ec:	183ff926 	beq	r3,zero,34d4 <_isatty_r+0x30>
    34f0:	88c00015 	stw	r3,0(r17)
    34f4:	003ff706 	br	34d4 <_isatty_r+0x30>

000034f8 <_lseek_r>:
    34f8:	defffd04 	addi	sp,sp,-12
    34fc:	dc000015 	stw	r16,0(sp)
    3500:	04000074 	movhi	r16,1
    3504:	dc400115 	stw	r17,4(sp)
    3508:	8426d304 	addi	r16,r16,-25780
    350c:	2023883a 	mov	r17,r4
    3510:	2809883a 	mov	r4,r5
    3514:	300b883a 	mov	r5,r6
    3518:	380d883a 	mov	r6,r7
    351c:	dfc00215 	stw	ra,8(sp)
    3520:	80000015 	stw	zero,0(r16)
    3524:	0003aac0 	call	3aac <lseek>
    3528:	00ffffc4 	movi	r3,-1
    352c:	10c00526 	beq	r2,r3,3544 <_lseek_r+0x4c>
    3530:	dfc00217 	ldw	ra,8(sp)
    3534:	dc400117 	ldw	r17,4(sp)
    3538:	dc000017 	ldw	r16,0(sp)
    353c:	dec00304 	addi	sp,sp,12
    3540:	f800283a 	ret
    3544:	80c00017 	ldw	r3,0(r16)
    3548:	183ff926 	beq	r3,zero,3530 <_lseek_r+0x38>
    354c:	88c00015 	stw	r3,0(r17)
    3550:	003ff706 	br	3530 <_lseek_r+0x38>

00003554 <_read_r>:
    3554:	defffd04 	addi	sp,sp,-12
    3558:	dc000015 	stw	r16,0(sp)
    355c:	04000074 	movhi	r16,1
    3560:	dc400115 	stw	r17,4(sp)
    3564:	8426d304 	addi	r16,r16,-25780
    3568:	2023883a 	mov	r17,r4
    356c:	2809883a 	mov	r4,r5
    3570:	300b883a 	mov	r5,r6
    3574:	380d883a 	mov	r6,r7
    3578:	dfc00215 	stw	ra,8(sp)
    357c:	80000015 	stw	zero,0(r16)
    3580:	0003c900 	call	3c90 <read>
    3584:	00ffffc4 	movi	r3,-1
    3588:	10c00526 	beq	r2,r3,35a0 <_read_r+0x4c>
    358c:	dfc00217 	ldw	ra,8(sp)
    3590:	dc400117 	ldw	r17,4(sp)
    3594:	dc000017 	ldw	r16,0(sp)
    3598:	dec00304 	addi	sp,sp,12
    359c:	f800283a 	ret
    35a0:	80c00017 	ldw	r3,0(r16)
    35a4:	183ff926 	beq	r3,zero,358c <_read_r+0x38>
    35a8:	88c00015 	stw	r3,0(r17)
    35ac:	003ff706 	br	358c <_read_r+0x38>

000035b0 <udivmodsi4>:
    35b0:	2900182e 	bgeu	r5,r4,3614 <udivmodsi4+0x64>
    35b4:	28001716 	blt	r5,zero,3614 <udivmodsi4+0x64>
    35b8:	00800804 	movi	r2,32
    35bc:	00c00044 	movi	r3,1
    35c0:	00000206 	br	35cc <udivmodsi4+0x1c>
    35c4:	10001126 	beq	r2,zero,360c <udivmodsi4+0x5c>
    35c8:	28000516 	blt	r5,zero,35e0 <udivmodsi4+0x30>
    35cc:	294b883a 	add	r5,r5,r5
    35d0:	10bfffc4 	addi	r2,r2,-1
    35d4:	18c7883a 	add	r3,r3,r3
    35d8:	293ffa36 	bltu	r5,r4,35c4 <udivmodsi4+0x14>
    35dc:	18000b26 	beq	r3,zero,360c <udivmodsi4+0x5c>
    35e0:	0005883a 	mov	r2,zero
    35e4:	21400236 	bltu	r4,r5,35f0 <udivmodsi4+0x40>
    35e8:	2149c83a 	sub	r4,r4,r5
    35ec:	10c4b03a 	or	r2,r2,r3
    35f0:	1806d07a 	srli	r3,r3,1
    35f4:	280ad07a 	srli	r5,r5,1
    35f8:	183ffa1e 	bne	r3,zero,35e4 <udivmodsi4+0x34>
    35fc:	3000011e 	bne	r6,zero,3604 <udivmodsi4+0x54>
    3600:	f800283a 	ret
    3604:	2005883a 	mov	r2,r4
    3608:	f800283a 	ret
    360c:	0005883a 	mov	r2,zero
    3610:	003ffa06 	br	35fc <udivmodsi4+0x4c>
    3614:	00c00044 	movi	r3,1
    3618:	003ff106 	br	35e0 <udivmodsi4+0x30>

0000361c <__divsi3>:
    361c:	defffe04 	addi	sp,sp,-8
    3620:	dfc00115 	stw	ra,4(sp)
    3624:	dc000015 	stw	r16,0(sp)
    3628:	20000b16 	blt	r4,zero,3658 <__divsi3+0x3c>
    362c:	0021883a 	mov	r16,zero
    3630:	28000c16 	blt	r5,zero,3664 <__divsi3+0x48>
    3634:	000d883a 	mov	r6,zero
    3638:	00035b00 	call	35b0 <udivmodsi4>
    363c:	0407c83a 	sub	r3,zero,r16
    3640:	1884f03a 	xor	r2,r3,r2
    3644:	1405883a 	add	r2,r2,r16
    3648:	dfc00117 	ldw	ra,4(sp)
    364c:	dc000017 	ldw	r16,0(sp)
    3650:	dec00204 	addi	sp,sp,8
    3654:	f800283a 	ret
    3658:	0109c83a 	sub	r4,zero,r4
    365c:	04000044 	movi	r16,1
    3660:	283ff40e 	bge	r5,zero,3634 <__divsi3+0x18>
    3664:	014bc83a 	sub	r5,zero,r5
    3668:	8400005c 	xori	r16,r16,1
    366c:	003ff106 	br	3634 <__divsi3+0x18>

00003670 <__modsi3>:
    3670:	defffd04 	addi	sp,sp,-12
    3674:	dfc00215 	stw	ra,8(sp)
    3678:	dc400115 	stw	r17,4(sp)
    367c:	dc000015 	stw	r16,0(sp)
    3680:	20000c16 	blt	r4,zero,36b4 <__modsi3+0x44>
    3684:	0023883a 	mov	r17,zero
    3688:	0021883a 	mov	r16,zero
    368c:	28000d16 	blt	r5,zero,36c4 <__modsi3+0x54>
    3690:	01800044 	movi	r6,1
    3694:	00035b00 	call	35b0 <udivmodsi4>
    3698:	1404f03a 	xor	r2,r2,r16
    369c:	8885883a 	add	r2,r17,r2
    36a0:	dfc00217 	ldw	ra,8(sp)
    36a4:	dc400117 	ldw	r17,4(sp)
    36a8:	dc000017 	ldw	r16,0(sp)
    36ac:	dec00304 	addi	sp,sp,12
    36b0:	f800283a 	ret
    36b4:	0109c83a 	sub	r4,zero,r4
    36b8:	04400044 	movi	r17,1
    36bc:	043fffc4 	movi	r16,-1
    36c0:	283ff30e 	bge	r5,zero,3690 <__modsi3+0x20>
    36c4:	014bc83a 	sub	r5,zero,r5
    36c8:	003ff106 	br	3690 <__modsi3+0x20>

000036cc <__udivsi3>:
    36cc:	000d883a 	mov	r6,zero
    36d0:	00035b01 	jmpi	35b0 <udivmodsi4>

000036d4 <__umodsi3>:
    36d4:	01800044 	movi	r6,1
    36d8:	00035b01 	jmpi	35b0 <udivmodsi4>

000036dc <__mulsi3>:
    36dc:	0005883a 	mov	r2,zero
    36e0:	20000726 	beq	r4,zero,3700 <__mulsi3+0x24>
    36e4:	20c0004c 	andi	r3,r4,1
    36e8:	2008d07a 	srli	r4,r4,1
    36ec:	18000126 	beq	r3,zero,36f4 <__mulsi3+0x18>
    36f0:	1145883a 	add	r2,r2,r5
    36f4:	294b883a 	add	r5,r5,r5
    36f8:	203ffa1e 	bne	r4,zero,36e4 <__mulsi3+0x8>
    36fc:	f800283a 	ret
    3700:	f800283a 	ret

00003704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3704:	defffe04 	addi	sp,sp,-8
    3708:	dfc00115 	stw	ra,4(sp)
    370c:	df000015 	stw	fp,0(sp)
    3710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3714:	00800074 	movhi	r2,1
    3718:	10a6c904 	addi	r2,r2,-25820
    371c:	10800017 	ldw	r2,0(r2)
    3720:	10000526 	beq	r2,zero,3738 <alt_get_errno+0x34>
    3724:	00800074 	movhi	r2,1
    3728:	10a6c904 	addi	r2,r2,-25820
    372c:	10800017 	ldw	r2,0(r2)
    3730:	103ee83a 	callr	r2
    3734:	00000206 	br	3740 <alt_get_errno+0x3c>
    3738:	00800074 	movhi	r2,1
    373c:	10a6d304 	addi	r2,r2,-25780
}
    3740:	e037883a 	mov	sp,fp
    3744:	dfc00117 	ldw	ra,4(sp)
    3748:	df000017 	ldw	fp,0(sp)
    374c:	dec00204 	addi	sp,sp,8
    3750:	f800283a 	ret

00003754 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3754:	defffb04 	addi	sp,sp,-20
    3758:	dfc00415 	stw	ra,16(sp)
    375c:	df000315 	stw	fp,12(sp)
    3760:	df000304 	addi	fp,sp,12
    3764:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3768:	e0bfff17 	ldw	r2,-4(fp)
    376c:	10000816 	blt	r2,zero,3790 <close+0x3c>
    3770:	e13fff17 	ldw	r4,-4(fp)
    3774:	01400304 	movi	r5,12
    3778:	00036dc0 	call	36dc <__mulsi3>
    377c:	1007883a 	mov	r3,r2
    3780:	00800074 	movhi	r2,1
    3784:	10a12004 	addi	r2,r2,-31616
    3788:	1885883a 	add	r2,r3,r2
    378c:	00000106 	br	3794 <close+0x40>
    3790:	0005883a 	mov	r2,zero
    3794:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3798:	e0bffd17 	ldw	r2,-12(fp)
    379c:	10001926 	beq	r2,zero,3804 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    37a0:	e0bffd17 	ldw	r2,-12(fp)
    37a4:	10800017 	ldw	r2,0(r2)
    37a8:	10800417 	ldw	r2,16(r2)
    37ac:	10000626 	beq	r2,zero,37c8 <close+0x74>
    37b0:	e0bffd17 	ldw	r2,-12(fp)
    37b4:	10800017 	ldw	r2,0(r2)
    37b8:	10800417 	ldw	r2,16(r2)
    37bc:	e13ffd17 	ldw	r4,-12(fp)
    37c0:	103ee83a 	callr	r2
    37c4:	00000106 	br	37cc <close+0x78>
    37c8:	0005883a 	mov	r2,zero
    37cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    37d0:	e13fff17 	ldw	r4,-4(fp)
    37d4:	0003d940 	call	3d94 <alt_release_fd>
    if (rval < 0)
    37d8:	e0bffe17 	ldw	r2,-8(fp)
    37dc:	1000070e 	bge	r2,zero,37fc <close+0xa8>
    {
      ALT_ERRNO = -rval;
    37e0:	00037040 	call	3704 <alt_get_errno>
    37e4:	1007883a 	mov	r3,r2
    37e8:	e0bffe17 	ldw	r2,-8(fp)
    37ec:	0085c83a 	sub	r2,zero,r2
    37f0:	18800015 	stw	r2,0(r3)
      return -1;
    37f4:	00bfffc4 	movi	r2,-1
    37f8:	00000706 	br	3818 <close+0xc4>
    }
    return 0;
    37fc:	0005883a 	mov	r2,zero
    3800:	00000506 	br	3818 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3804:	00037040 	call	3704 <alt_get_errno>
    3808:	1007883a 	mov	r3,r2
    380c:	00801444 	movi	r2,81
    3810:	18800015 	stw	r2,0(r3)
    return -1;
    3814:	00bfffc4 	movi	r2,-1
  }
}
    3818:	e037883a 	mov	sp,fp
    381c:	dfc00117 	ldw	ra,4(sp)
    3820:	df000017 	ldw	fp,0(sp)
    3824:	dec00204 	addi	sp,sp,8
    3828:	f800283a 	ret

0000382c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    382c:	defffc04 	addi	sp,sp,-16
    3830:	df000315 	stw	fp,12(sp)
    3834:	df000304 	addi	fp,sp,12
    3838:	e13ffd15 	stw	r4,-12(fp)
    383c:	e17ffe15 	stw	r5,-8(fp)
    3840:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3844:	e0bfff17 	ldw	r2,-4(fp)
}
    3848:	e037883a 	mov	sp,fp
    384c:	df000017 	ldw	fp,0(sp)
    3850:	dec00104 	addi	sp,sp,4
    3854:	f800283a 	ret

00003858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3858:	defffe04 	addi	sp,sp,-8
    385c:	dfc00115 	stw	ra,4(sp)
    3860:	df000015 	stw	fp,0(sp)
    3864:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3868:	00800074 	movhi	r2,1
    386c:	10a6c904 	addi	r2,r2,-25820
    3870:	10800017 	ldw	r2,0(r2)
    3874:	10000526 	beq	r2,zero,388c <alt_get_errno+0x34>
    3878:	00800074 	movhi	r2,1
    387c:	10a6c904 	addi	r2,r2,-25820
    3880:	10800017 	ldw	r2,0(r2)
    3884:	103ee83a 	callr	r2
    3888:	00000206 	br	3894 <alt_get_errno+0x3c>
    388c:	00800074 	movhi	r2,1
    3890:	10a6d304 	addi	r2,r2,-25780
}
    3894:	e037883a 	mov	sp,fp
    3898:	dfc00117 	ldw	ra,4(sp)
    389c:	df000017 	ldw	fp,0(sp)
    38a0:	dec00204 	addi	sp,sp,8
    38a4:	f800283a 	ret

000038a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    38a8:	defffb04 	addi	sp,sp,-20
    38ac:	dfc00415 	stw	ra,16(sp)
    38b0:	df000315 	stw	fp,12(sp)
    38b4:	df000304 	addi	fp,sp,12
    38b8:	e13ffe15 	stw	r4,-8(fp)
    38bc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    38c0:	e0bffe17 	ldw	r2,-8(fp)
    38c4:	10000816 	blt	r2,zero,38e8 <fstat+0x40>
    38c8:	e13ffe17 	ldw	r4,-8(fp)
    38cc:	01400304 	movi	r5,12
    38d0:	00036dc0 	call	36dc <__mulsi3>
    38d4:	1007883a 	mov	r3,r2
    38d8:	00800074 	movhi	r2,1
    38dc:	10a12004 	addi	r2,r2,-31616
    38e0:	1885883a 	add	r2,r3,r2
    38e4:	00000106 	br	38ec <fstat+0x44>
    38e8:	0005883a 	mov	r2,zero
    38ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    38f0:	e0bffd17 	ldw	r2,-12(fp)
    38f4:	10001026 	beq	r2,zero,3938 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    38f8:	e0bffd17 	ldw	r2,-12(fp)
    38fc:	10800017 	ldw	r2,0(r2)
    3900:	10800817 	ldw	r2,32(r2)
    3904:	10000726 	beq	r2,zero,3924 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    3908:	e0bffd17 	ldw	r2,-12(fp)
    390c:	10800017 	ldw	r2,0(r2)
    3910:	10800817 	ldw	r2,32(r2)
    3914:	e13ffd17 	ldw	r4,-12(fp)
    3918:	e17fff17 	ldw	r5,-4(fp)
    391c:	103ee83a 	callr	r2
    3920:	00000a06 	br	394c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3924:	e0bfff17 	ldw	r2,-4(fp)
    3928:	00c80004 	movi	r3,8192
    392c:	10c00115 	stw	r3,4(r2)
      return 0;
    3930:	0005883a 	mov	r2,zero
    3934:	00000506 	br	394c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3938:	00038580 	call	3858 <alt_get_errno>
    393c:	1007883a 	mov	r3,r2
    3940:	00801444 	movi	r2,81
    3944:	18800015 	stw	r2,0(r3)
    return -1;
    3948:	00bfffc4 	movi	r2,-1
  }
}
    394c:	e037883a 	mov	sp,fp
    3950:	dfc00117 	ldw	ra,4(sp)
    3954:	df000017 	ldw	fp,0(sp)
    3958:	dec00204 	addi	sp,sp,8
    395c:	f800283a 	ret

00003960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3960:	defffe04 	addi	sp,sp,-8
    3964:	dfc00115 	stw	ra,4(sp)
    3968:	df000015 	stw	fp,0(sp)
    396c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3970:	00800074 	movhi	r2,1
    3974:	10a6c904 	addi	r2,r2,-25820
    3978:	10800017 	ldw	r2,0(r2)
    397c:	10000526 	beq	r2,zero,3994 <alt_get_errno+0x34>
    3980:	00800074 	movhi	r2,1
    3984:	10a6c904 	addi	r2,r2,-25820
    3988:	10800017 	ldw	r2,0(r2)
    398c:	103ee83a 	callr	r2
    3990:	00000206 	br	399c <alt_get_errno+0x3c>
    3994:	00800074 	movhi	r2,1
    3998:	10a6d304 	addi	r2,r2,-25780
}
    399c:	e037883a 	mov	sp,fp
    39a0:	dfc00117 	ldw	ra,4(sp)
    39a4:	df000017 	ldw	fp,0(sp)
    39a8:	dec00204 	addi	sp,sp,8
    39ac:	f800283a 	ret

000039b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    39b0:	deffed04 	addi	sp,sp,-76
    39b4:	dfc01215 	stw	ra,72(sp)
    39b8:	df001115 	stw	fp,68(sp)
    39bc:	df001104 	addi	fp,sp,68
    39c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    39c4:	e0bfff17 	ldw	r2,-4(fp)
    39c8:	10000816 	blt	r2,zero,39ec <isatty+0x3c>
    39cc:	e13fff17 	ldw	r4,-4(fp)
    39d0:	01400304 	movi	r5,12
    39d4:	00036dc0 	call	36dc <__mulsi3>
    39d8:	1007883a 	mov	r3,r2
    39dc:	00800074 	movhi	r2,1
    39e0:	10a12004 	addi	r2,r2,-31616
    39e4:	1885883a 	add	r2,r3,r2
    39e8:	00000106 	br	39f0 <isatty+0x40>
    39ec:	0005883a 	mov	r2,zero
    39f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    39f4:	e0bfef17 	ldw	r2,-68(fp)
    39f8:	10000e26 	beq	r2,zero,3a34 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    39fc:	e0bfef17 	ldw	r2,-68(fp)
    3a00:	10800017 	ldw	r2,0(r2)
    3a04:	10800817 	ldw	r2,32(r2)
    3a08:	1000021e 	bne	r2,zero,3a14 <isatty+0x64>
    {
      return 1;
    3a0c:	00800044 	movi	r2,1
    3a10:	00000d06 	br	3a48 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3a14:	e0bff004 	addi	r2,fp,-64
    3a18:	e13fff17 	ldw	r4,-4(fp)
    3a1c:	100b883a 	mov	r5,r2
    3a20:	00038a80 	call	38a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3a24:	e0bff117 	ldw	r2,-60(fp)
    3a28:	10880020 	cmpeqi	r2,r2,8192
    3a2c:	10803fcc 	andi	r2,r2,255
    3a30:	00000506 	br	3a48 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3a34:	00039600 	call	3960 <alt_get_errno>
    3a38:	1007883a 	mov	r3,r2
    3a3c:	00801444 	movi	r2,81
    3a40:	18800015 	stw	r2,0(r3)
    return 0;
    3a44:	0005883a 	mov	r2,zero
  }
}
    3a48:	e037883a 	mov	sp,fp
    3a4c:	dfc00117 	ldw	ra,4(sp)
    3a50:	df000017 	ldw	fp,0(sp)
    3a54:	dec00204 	addi	sp,sp,8
    3a58:	f800283a 	ret

00003a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3a5c:	defffe04 	addi	sp,sp,-8
    3a60:	dfc00115 	stw	ra,4(sp)
    3a64:	df000015 	stw	fp,0(sp)
    3a68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3a6c:	00800074 	movhi	r2,1
    3a70:	10a6c904 	addi	r2,r2,-25820
    3a74:	10800017 	ldw	r2,0(r2)
    3a78:	10000526 	beq	r2,zero,3a90 <alt_get_errno+0x34>
    3a7c:	00800074 	movhi	r2,1
    3a80:	10a6c904 	addi	r2,r2,-25820
    3a84:	10800017 	ldw	r2,0(r2)
    3a88:	103ee83a 	callr	r2
    3a8c:	00000206 	br	3a98 <alt_get_errno+0x3c>
    3a90:	00800074 	movhi	r2,1
    3a94:	10a6d304 	addi	r2,r2,-25780
}
    3a98:	e037883a 	mov	sp,fp
    3a9c:	dfc00117 	ldw	ra,4(sp)
    3aa0:	df000017 	ldw	fp,0(sp)
    3aa4:	dec00204 	addi	sp,sp,8
    3aa8:	f800283a 	ret

00003aac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3aac:	defff904 	addi	sp,sp,-28
    3ab0:	dfc00615 	stw	ra,24(sp)
    3ab4:	df000515 	stw	fp,20(sp)
    3ab8:	df000504 	addi	fp,sp,20
    3abc:	e13ffd15 	stw	r4,-12(fp)
    3ac0:	e17ffe15 	stw	r5,-8(fp)
    3ac4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3ac8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3acc:	e0bffd17 	ldw	r2,-12(fp)
    3ad0:	10000816 	blt	r2,zero,3af4 <lseek+0x48>
    3ad4:	e13ffd17 	ldw	r4,-12(fp)
    3ad8:	01400304 	movi	r5,12
    3adc:	00036dc0 	call	36dc <__mulsi3>
    3ae0:	1007883a 	mov	r3,r2
    3ae4:	00800074 	movhi	r2,1
    3ae8:	10a12004 	addi	r2,r2,-31616
    3aec:	1885883a 	add	r2,r3,r2
    3af0:	00000106 	br	3af8 <lseek+0x4c>
    3af4:	0005883a 	mov	r2,zero
    3af8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    3afc:	e0bffc17 	ldw	r2,-16(fp)
    3b00:	10001026 	beq	r2,zero,3b44 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3b04:	e0bffc17 	ldw	r2,-16(fp)
    3b08:	10800017 	ldw	r2,0(r2)
    3b0c:	10800717 	ldw	r2,28(r2)
    3b10:	10000926 	beq	r2,zero,3b38 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3b14:	e0bffc17 	ldw	r2,-16(fp)
    3b18:	10800017 	ldw	r2,0(r2)
    3b1c:	10800717 	ldw	r2,28(r2)
    3b20:	e13ffc17 	ldw	r4,-16(fp)
    3b24:	e17ffe17 	ldw	r5,-8(fp)
    3b28:	e1bfff17 	ldw	r6,-4(fp)
    3b2c:	103ee83a 	callr	r2
    3b30:	e0bffb15 	stw	r2,-20(fp)
    3b34:	00000506 	br	3b4c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3b38:	00bfde84 	movi	r2,-134
    3b3c:	e0bffb15 	stw	r2,-20(fp)
    3b40:	00000206 	br	3b4c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    3b44:	00bfebc4 	movi	r2,-81
    3b48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3b4c:	e0bffb17 	ldw	r2,-20(fp)
    3b50:	1000070e 	bge	r2,zero,3b70 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    3b54:	0003a5c0 	call	3a5c <alt_get_errno>
    3b58:	1007883a 	mov	r3,r2
    3b5c:	e0bffb17 	ldw	r2,-20(fp)
    3b60:	0085c83a 	sub	r2,zero,r2
    3b64:	18800015 	stw	r2,0(r3)
    rc = -1;
    3b68:	00bfffc4 	movi	r2,-1
    3b6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3b70:	e0bffb17 	ldw	r2,-20(fp)
}
    3b74:	e037883a 	mov	sp,fp
    3b78:	dfc00117 	ldw	ra,4(sp)
    3b7c:	df000017 	ldw	fp,0(sp)
    3b80:	dec00204 	addi	sp,sp,8
    3b84:	f800283a 	ret

00003b88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3b88:	defffd04 	addi	sp,sp,-12
    3b8c:	dfc00215 	stw	ra,8(sp)
    3b90:	df000115 	stw	fp,4(sp)
    3b94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3b98:	0009883a 	mov	r4,zero
    3b9c:	000404c0 	call	404c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3ba0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3ba4:	00040800 	call	4080 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3ba8:	01000034 	movhi	r4,0
    3bac:	211ede04 	addi	r4,r4,31608
    3bb0:	01400034 	movhi	r5,0
    3bb4:	295ede04 	addi	r5,r5,31608
    3bb8:	01800034 	movhi	r6,0
    3bbc:	319ede04 	addi	r6,r6,31608
    3bc0:	0006e480 	call	6e48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3bc4:	00069280 	call	6928 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3bc8:	01000034 	movhi	r4,0
    3bcc:	211a6104 	addi	r4,r4,27012
    3bd0:	000779c0 	call	779c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3bd4:	d1201417 	ldw	r4,-32688(gp)
    3bd8:	d0e01517 	ldw	r3,-32684(gp)
    3bdc:	d0a01617 	ldw	r2,-32680(gp)
    3be0:	180b883a 	mov	r5,r3
    3be4:	100d883a 	mov	r6,r2
    3be8:	00001f40 	call	1f4 <main>
    3bec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3bf0:	01000044 	movi	r4,1
    3bf4:	00037540 	call	3754 <close>
  exit (result);
    3bf8:	e13fff17 	ldw	r4,-4(fp)
    3bfc:	00077b00 	call	77b0 <exit>

00003c00 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3c00:	defffe04 	addi	sp,sp,-8
    3c04:	df000115 	stw	fp,4(sp)
    3c08:	df000104 	addi	fp,sp,4
    3c0c:	e13fff15 	stw	r4,-4(fp)
}
    3c10:	e037883a 	mov	sp,fp
    3c14:	df000017 	ldw	fp,0(sp)
    3c18:	dec00104 	addi	sp,sp,4
    3c1c:	f800283a 	ret

00003c20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3c20:	defffe04 	addi	sp,sp,-8
    3c24:	df000115 	stw	fp,4(sp)
    3c28:	df000104 	addi	fp,sp,4
    3c2c:	e13fff15 	stw	r4,-4(fp)
}
    3c30:	e037883a 	mov	sp,fp
    3c34:	df000017 	ldw	fp,0(sp)
    3c38:	dec00104 	addi	sp,sp,4
    3c3c:	f800283a 	ret

00003c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3c40:	defffe04 	addi	sp,sp,-8
    3c44:	dfc00115 	stw	ra,4(sp)
    3c48:	df000015 	stw	fp,0(sp)
    3c4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3c50:	00800074 	movhi	r2,1
    3c54:	10a6c904 	addi	r2,r2,-25820
    3c58:	10800017 	ldw	r2,0(r2)
    3c5c:	10000526 	beq	r2,zero,3c74 <alt_get_errno+0x34>
    3c60:	00800074 	movhi	r2,1
    3c64:	10a6c904 	addi	r2,r2,-25820
    3c68:	10800017 	ldw	r2,0(r2)
    3c6c:	103ee83a 	callr	r2
    3c70:	00000206 	br	3c7c <alt_get_errno+0x3c>
    3c74:	00800074 	movhi	r2,1
    3c78:	10a6d304 	addi	r2,r2,-25780
}
    3c7c:	e037883a 	mov	sp,fp
    3c80:	dfc00117 	ldw	ra,4(sp)
    3c84:	df000017 	ldw	fp,0(sp)
    3c88:	dec00204 	addi	sp,sp,8
    3c8c:	f800283a 	ret

00003c90 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3c90:	defff904 	addi	sp,sp,-28
    3c94:	dfc00615 	stw	ra,24(sp)
    3c98:	df000515 	stw	fp,20(sp)
    3c9c:	df000504 	addi	fp,sp,20
    3ca0:	e13ffd15 	stw	r4,-12(fp)
    3ca4:	e17ffe15 	stw	r5,-8(fp)
    3ca8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3cac:	e0bffd17 	ldw	r2,-12(fp)
    3cb0:	10000816 	blt	r2,zero,3cd4 <read+0x44>
    3cb4:	e13ffd17 	ldw	r4,-12(fp)
    3cb8:	01400304 	movi	r5,12
    3cbc:	00036dc0 	call	36dc <__mulsi3>
    3cc0:	1007883a 	mov	r3,r2
    3cc4:	00800074 	movhi	r2,1
    3cc8:	10a12004 	addi	r2,r2,-31616
    3ccc:	1885883a 	add	r2,r3,r2
    3cd0:	00000106 	br	3cd8 <read+0x48>
    3cd4:	0005883a 	mov	r2,zero
    3cd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3cdc:	e0bffb17 	ldw	r2,-20(fp)
    3ce0:	10002226 	beq	r2,zero,3d6c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3ce4:	e0bffb17 	ldw	r2,-20(fp)
    3ce8:	10800217 	ldw	r2,8(r2)
    3cec:	108000cc 	andi	r2,r2,3
    3cf0:	10800060 	cmpeqi	r2,r2,1
    3cf4:	1000181e 	bne	r2,zero,3d58 <read+0xc8>
        (fd->dev->read))
    3cf8:	e0bffb17 	ldw	r2,-20(fp)
    3cfc:	10800017 	ldw	r2,0(r2)
    3d00:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3d04:	10001426 	beq	r2,zero,3d58 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3d08:	e0bffb17 	ldw	r2,-20(fp)
    3d0c:	10800017 	ldw	r2,0(r2)
    3d10:	10800517 	ldw	r2,20(r2)
    3d14:	e0ffff17 	ldw	r3,-4(fp)
    3d18:	e13ffb17 	ldw	r4,-20(fp)
    3d1c:	e17ffe17 	ldw	r5,-8(fp)
    3d20:	180d883a 	mov	r6,r3
    3d24:	103ee83a 	callr	r2
    3d28:	e0bffc15 	stw	r2,-16(fp)
    3d2c:	e0bffc17 	ldw	r2,-16(fp)
    3d30:	1000070e 	bge	r2,zero,3d50 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    3d34:	0003c400 	call	3c40 <alt_get_errno>
    3d38:	1007883a 	mov	r3,r2
    3d3c:	e0bffc17 	ldw	r2,-16(fp)
    3d40:	0085c83a 	sub	r2,zero,r2
    3d44:	18800015 	stw	r2,0(r3)
          return -1;
    3d48:	00bfffc4 	movi	r2,-1
    3d4c:	00000c06 	br	3d80 <read+0xf0>
        }
        return rval;
    3d50:	e0bffc17 	ldw	r2,-16(fp)
    3d54:	00000a06 	br	3d80 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3d58:	0003c400 	call	3c40 <alt_get_errno>
    3d5c:	1007883a 	mov	r3,r2
    3d60:	00800344 	movi	r2,13
    3d64:	18800015 	stw	r2,0(r3)
    3d68:	00000406 	br	3d7c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3d6c:	0003c400 	call	3c40 <alt_get_errno>
    3d70:	1007883a 	mov	r3,r2
    3d74:	00801444 	movi	r2,81
    3d78:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3d7c:	00bfffc4 	movi	r2,-1
}
    3d80:	e037883a 	mov	sp,fp
    3d84:	dfc00117 	ldw	ra,4(sp)
    3d88:	df000017 	ldw	fp,0(sp)
    3d8c:	dec00204 	addi	sp,sp,8
    3d90:	f800283a 	ret

00003d94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3d94:	defffc04 	addi	sp,sp,-16
    3d98:	dfc00315 	stw	ra,12(sp)
    3d9c:	df000215 	stw	fp,8(sp)
    3da0:	dc000115 	stw	r16,4(sp)
    3da4:	df000204 	addi	fp,sp,8
    3da8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    3dac:	e0bffe17 	ldw	r2,-8(fp)
    3db0:	108000d0 	cmplti	r2,r2,3
    3db4:	1000111e 	bne	r2,zero,3dfc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    3db8:	04000074 	movhi	r16,1
    3dbc:	84212004 	addi	r16,r16,-31616
    3dc0:	e0bffe17 	ldw	r2,-8(fp)
    3dc4:	1009883a 	mov	r4,r2
    3dc8:	01400304 	movi	r5,12
    3dcc:	00036dc0 	call	36dc <__mulsi3>
    3dd0:	10800204 	addi	r2,r2,8
    3dd4:	8085883a 	add	r2,r16,r2
    3dd8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3ddc:	04000074 	movhi	r16,1
    3de0:	84212004 	addi	r16,r16,-31616
    3de4:	e0bffe17 	ldw	r2,-8(fp)
    3de8:	1009883a 	mov	r4,r2
    3dec:	01400304 	movi	r5,12
    3df0:	00036dc0 	call	36dc <__mulsi3>
    3df4:	8085883a 	add	r2,r16,r2
    3df8:	10000015 	stw	zero,0(r2)
  }
}
    3dfc:	e6ffff04 	addi	sp,fp,-4
    3e00:	dfc00217 	ldw	ra,8(sp)
    3e04:	df000117 	ldw	fp,4(sp)
    3e08:	dc000017 	ldw	r16,0(sp)
    3e0c:	dec00304 	addi	sp,sp,12
    3e10:	f800283a 	ret

00003e14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3e14:	defff904 	addi	sp,sp,-28
    3e18:	df000615 	stw	fp,24(sp)
    3e1c:	df000604 	addi	fp,sp,24
    3e20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3e24:	0005303a 	rdctl	r2,status
    3e28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e2c:	e0fffc17 	ldw	r3,-16(fp)
    3e30:	00bfff84 	movi	r2,-2
    3e34:	1884703a 	and	r2,r3,r2
    3e38:	1001703a 	wrctl	status,r2
  
  return context;
    3e3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3e40:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3e44:	d0a00a17 	ldw	r2,-32728(gp)
    3e48:	10c000c4 	addi	r3,r2,3
    3e4c:	00bfff04 	movi	r2,-4
    3e50:	1884703a 	and	r2,r3,r2
    3e54:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3e58:	d0e00a17 	ldw	r3,-32728(gp)
    3e5c:	e0bfff17 	ldw	r2,-4(fp)
    3e60:	1887883a 	add	r3,r3,r2
    3e64:	00808034 	movhi	r2,512
    3e68:	10800004 	addi	r2,r2,0
    3e6c:	10c0062e 	bgeu	r2,r3,3e88 <sbrk+0x74>
    3e70:	e0bffa17 	ldw	r2,-24(fp)
    3e74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3e78:	e0bffd17 	ldw	r2,-12(fp)
    3e7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3e80:	00bfffc4 	movi	r2,-1
    3e84:	00000b06 	br	3eb4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3e88:	d0a00a17 	ldw	r2,-32728(gp)
    3e8c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    3e90:	d0e00a17 	ldw	r3,-32728(gp)
    3e94:	e0bfff17 	ldw	r2,-4(fp)
    3e98:	1885883a 	add	r2,r3,r2
    3e9c:	d0a00a15 	stw	r2,-32728(gp)
    3ea0:	e0bffa17 	ldw	r2,-24(fp)
    3ea4:	e0bffe15 	stw	r2,-8(fp)
    3ea8:	e0bffe17 	ldw	r2,-8(fp)
    3eac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3eb0:	e0bffb17 	ldw	r2,-20(fp)
} 
    3eb4:	e037883a 	mov	sp,fp
    3eb8:	df000017 	ldw	fp,0(sp)
    3ebc:	dec00104 	addi	sp,sp,4
    3ec0:	f800283a 	ret

00003ec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3ec4:	defffe04 	addi	sp,sp,-8
    3ec8:	dfc00115 	stw	ra,4(sp)
    3ecc:	df000015 	stw	fp,0(sp)
    3ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3ed4:	00800074 	movhi	r2,1
    3ed8:	10a6c904 	addi	r2,r2,-25820
    3edc:	10800017 	ldw	r2,0(r2)
    3ee0:	10000526 	beq	r2,zero,3ef8 <alt_get_errno+0x34>
    3ee4:	00800074 	movhi	r2,1
    3ee8:	10a6c904 	addi	r2,r2,-25820
    3eec:	10800017 	ldw	r2,0(r2)
    3ef0:	103ee83a 	callr	r2
    3ef4:	00000206 	br	3f00 <alt_get_errno+0x3c>
    3ef8:	00800074 	movhi	r2,1
    3efc:	10a6d304 	addi	r2,r2,-25780
}
    3f00:	e037883a 	mov	sp,fp
    3f04:	dfc00117 	ldw	ra,4(sp)
    3f08:	df000017 	ldw	fp,0(sp)
    3f0c:	dec00204 	addi	sp,sp,8
    3f10:	f800283a 	ret

00003f14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3f14:	defff904 	addi	sp,sp,-28
    3f18:	dfc00615 	stw	ra,24(sp)
    3f1c:	df000515 	stw	fp,20(sp)
    3f20:	df000504 	addi	fp,sp,20
    3f24:	e13ffd15 	stw	r4,-12(fp)
    3f28:	e17ffe15 	stw	r5,-8(fp)
    3f2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3f30:	e0bffd17 	ldw	r2,-12(fp)
    3f34:	10000816 	blt	r2,zero,3f58 <write+0x44>
    3f38:	e13ffd17 	ldw	r4,-12(fp)
    3f3c:	01400304 	movi	r5,12
    3f40:	00036dc0 	call	36dc <__mulsi3>
    3f44:	1007883a 	mov	r3,r2
    3f48:	00800074 	movhi	r2,1
    3f4c:	10a12004 	addi	r2,r2,-31616
    3f50:	1885883a 	add	r2,r3,r2
    3f54:	00000106 	br	3f5c <write+0x48>
    3f58:	0005883a 	mov	r2,zero
    3f5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3f60:	e0bffb17 	ldw	r2,-20(fp)
    3f64:	10002126 	beq	r2,zero,3fec <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3f68:	e0bffb17 	ldw	r2,-20(fp)
    3f6c:	10800217 	ldw	r2,8(r2)
    3f70:	108000cc 	andi	r2,r2,3
    3f74:	10001826 	beq	r2,zero,3fd8 <write+0xc4>
    3f78:	e0bffb17 	ldw	r2,-20(fp)
    3f7c:	10800017 	ldw	r2,0(r2)
    3f80:	10800617 	ldw	r2,24(r2)
    3f84:	10001426 	beq	r2,zero,3fd8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3f88:	e0bffb17 	ldw	r2,-20(fp)
    3f8c:	10800017 	ldw	r2,0(r2)
    3f90:	10800617 	ldw	r2,24(r2)
    3f94:	e0ffff17 	ldw	r3,-4(fp)
    3f98:	e13ffb17 	ldw	r4,-20(fp)
    3f9c:	e17ffe17 	ldw	r5,-8(fp)
    3fa0:	180d883a 	mov	r6,r3
    3fa4:	103ee83a 	callr	r2
    3fa8:	e0bffc15 	stw	r2,-16(fp)
    3fac:	e0bffc17 	ldw	r2,-16(fp)
    3fb0:	1000070e 	bge	r2,zero,3fd0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    3fb4:	0003ec40 	call	3ec4 <alt_get_errno>
    3fb8:	1007883a 	mov	r3,r2
    3fbc:	e0bffc17 	ldw	r2,-16(fp)
    3fc0:	0085c83a 	sub	r2,zero,r2
    3fc4:	18800015 	stw	r2,0(r3)
        return -1;
    3fc8:	00bfffc4 	movi	r2,-1
    3fcc:	00000c06 	br	4000 <write+0xec>
      }
      return rval;
    3fd0:	e0bffc17 	ldw	r2,-16(fp)
    3fd4:	00000a06 	br	4000 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3fd8:	0003ec40 	call	3ec4 <alt_get_errno>
    3fdc:	1007883a 	mov	r3,r2
    3fe0:	00800344 	movi	r2,13
    3fe4:	18800015 	stw	r2,0(r3)
    3fe8:	00000406 	br	3ffc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3fec:	0003ec40 	call	3ec4 <alt_get_errno>
    3ff0:	1007883a 	mov	r3,r2
    3ff4:	00801444 	movi	r2,81
    3ff8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3ffc:	00bfffc4 	movi	r2,-1
}
    4000:	e037883a 	mov	sp,fp
    4004:	dfc00117 	ldw	ra,4(sp)
    4008:	df000017 	ldw	fp,0(sp)
    400c:	dec00204 	addi	sp,sp,8
    4010:	f800283a 	ret

00004014 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4014:	defffd04 	addi	sp,sp,-12
    4018:	dfc00215 	stw	ra,8(sp)
    401c:	df000115 	stw	fp,4(sp)
    4020:	df000104 	addi	fp,sp,4
    4024:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4028:	e13fff17 	ldw	r4,-4(fp)
    402c:	01400074 	movhi	r5,1
    4030:	2966c604 	addi	r5,r5,-25832
    4034:	00068840 	call	6884 <alt_dev_llist_insert>
}
    4038:	e037883a 	mov	sp,fp
    403c:	dfc00117 	ldw	ra,4(sp)
    4040:	df000017 	ldw	fp,0(sp)
    4044:	dec00204 	addi	sp,sp,8
    4048:	f800283a 	ret

0000404c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    404c:	defffd04 	addi	sp,sp,-12
    4050:	dfc00215 	stw	ra,8(sp)
    4054:	df000115 	stw	fp,4(sp)
    4058:	df000104 	addi	fp,sp,4
    405c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    4060:	00073000 	call	7300 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4064:	00800044 	movi	r2,1
    4068:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    406c:	e037883a 	mov	sp,fp
    4070:	dfc00117 	ldw	ra,4(sp)
    4074:	df000017 	ldw	fp,0(sp)
    4078:	dec00204 	addi	sp,sp,8
    407c:	f800283a 	ret

00004080 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4080:	defffe04 	addi	sp,sp,-8
    4084:	dfc00115 	stw	ra,4(sp)
    4088:	df000015 	stw	fp,0(sp)
    408c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    4090:	01008074 	movhi	r4,513
    4094:	2128b804 	addi	r4,r4,-23840
    4098:	000b883a 	mov	r5,zero
    409c:	000d883a 	mov	r6,zero
    40a0:	01c0fa04 	movi	r7,1000
    40a4:	00057500 	call	5750 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
    40a8:	01000074 	movhi	r4,1
    40ac:	21218004 	addi	r4,r4,-31232
    40b0:	00041d00 	call	41d0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    40b4:	01000074 	movhi	r4,1
    40b8:	2121bd04 	addi	r4,r4,-30988
    40bc:	000b883a 	mov	r5,zero
    40c0:	018000c4 	movi	r6,3
    40c4:	0004df40 	call	4df4 <altera_avalon_jtag_uart_init>
    40c8:	01000074 	movhi	r4,1
    40cc:	2121b304 	addi	r4,r4,-31028
    40d0:	00040140 	call	4014 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    40d4:	00c00044 	movi	r3,1
    40d8:	00808074 	movhi	r2,513
    40dc:	10a80004 	addi	r2,r2,-24576
    40e0:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
    40e4:	01000074 	movhi	r4,1
    40e8:	2125d504 	addi	r4,r4,-26796
    40ec:	000b883a 	mov	r5,zero
    40f0:	01800184 	movi	r6,6
    40f4:	00058e80 	call	58e8 <altera_avalon_uart_init>
    40f8:	01000074 	movhi	r4,1
    40fc:	2125cb04 	addi	r4,r4,-26836
    4100:	00040140 	call	4014 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
    4104:	01000074 	movhi	r4,1
    4108:	21260604 	addi	r4,r4,-26600
    410c:	000b883a 	mov	r5,zero
    4110:	018001c4 	movi	r6,7
    4114:	00058e80 	call	58e8 <altera_avalon_uart_init>
    4118:	01000074 	movhi	r4,1
    411c:	2125fc04 	addi	r4,r4,-26640
    4120:	00040140 	call	4014 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
    4124:	01000074 	movhi	r4,1
    4128:	21263704 	addi	r4,r4,-26404
    412c:	000b883a 	mov	r5,zero
    4130:	01800204 	movi	r6,8
    4134:	00058e80 	call	58e8 <altera_avalon_uart_init>
    4138:	01000074 	movhi	r4,1
    413c:	21262d04 	addi	r4,r4,-26444
    4140:	00040140 	call	4014 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
    4144:	01000074 	movhi	r4,1
    4148:	21266804 	addi	r4,r4,-26208
    414c:	000b883a 	mov	r5,zero
    4150:	01800244 	movi	r6,9
    4154:	00058e80 	call	58e8 <altera_avalon_uart_init>
    4158:	01000074 	movhi	r4,1
    415c:	21265e04 	addi	r4,r4,-26248
    4160:	00040140 	call	4014 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    4164:	01000074 	movhi	r4,1
    4168:	21269904 	addi	r4,r4,-26012
    416c:	000b883a 	mov	r5,zero
    4170:	01800104 	movi	r6,4
    4174:	00058e80 	call	58e8 <altera_avalon_uart_init>
    4178:	01000074 	movhi	r4,1
    417c:	21268f04 	addi	r4,r4,-26052
    4180:	00040140 	call	4014 <alt_dev_reg>
}
    4184:	e037883a 	mov	sp,fp
    4188:	dfc00117 	ldw	ra,4(sp)
    418c:	df000017 	ldw	fp,0(sp)
    4190:	dec00204 	addi	sp,sp,8
    4194:	f800283a 	ret

00004198 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    4198:	defffd04 	addi	sp,sp,-12
    419c:	dfc00215 	stw	ra,8(sp)
    41a0:	df000115 	stw	fp,4(sp)
    41a4:	df000104 	addi	fp,sp,4
    41a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    41ac:	e13fff17 	ldw	r4,-4(fp)
    41b0:	01400074 	movhi	r5,1
    41b4:	2966cb04 	addi	r5,r5,-25812
    41b8:	00068840 	call	6884 <alt_dev_llist_insert>
}
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    41d0:	defffc04 	addi	sp,sp,-16
    41d4:	dfc00315 	stw	ra,12(sp)
    41d8:	df000215 	stw	fp,8(sp)
    41dc:	df000204 	addi	fp,sp,8
    41e0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    41e4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    41e8:	e13fff17 	ldw	r4,-4(fp)
    41ec:	00042240 	call	4224 <alt_epcs_flash_query>
    41f0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    41f4:	e0bffe17 	ldw	r2,-8(fp)
    41f8:	1000041e 	bne	r2,zero,420c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    41fc:	e0bfff17 	ldw	r2,-4(fp)
    4200:	1009883a 	mov	r4,r2
    4204:	00041980 	call	4198 <alt_flash_device_register>
    4208:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    420c:	e0bffe17 	ldw	r2,-8(fp)
}
    4210:	e037883a 	mov	sp,fp
    4214:	dfc00117 	ldw	ra,4(sp)
    4218:	df000017 	ldw	fp,0(sp)
    421c:	dec00204 	addi	sp,sp,8
    4220:	f800283a 	ret

00004224 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    4224:	defffc04 	addi	sp,sp,-16
    4228:	dfc00315 	stw	ra,12(sp)
    422c:	df000215 	stw	fp,8(sp)
    4230:	df000204 	addi	fp,sp,8
    4234:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    4238:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    423c:	e0bfff17 	ldw	r2,-4(fp)
    4240:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
    4244:	e0bfff17 	ldw	r2,-4(fp)
    4248:	10802e17 	ldw	r2,184(r2)
    424c:	1009883a 	mov	r4,r2
    4250:	00065540 	call	6554 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
    4254:	10c03fcc 	andi	r3,r2,255
    4258:	e0bfff17 	ldw	r2,-4(fp)
    425c:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    4260:	e0bfff17 	ldw	r2,-4(fp)
    4264:	10803017 	ldw	r2,192(r2)
    4268:	10800598 	cmpnei	r2,r2,22
    426c:	10000a1e 	bne	r2,zero,4298 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    4270:	e0bfff17 	ldw	r2,-4(fp)
    4274:	00c02034 	movhi	r3,128
    4278:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
    427c:	e0bfff17 	ldw	r2,-4(fp)
    4280:	00c02004 	movi	r3,128
    4284:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	00c00074 	movhi	r3,1
    4290:	10c01015 	stw	r3,64(r2)
    4294:	0000ce06 	br	45d0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    4298:	e0bfff17 	ldw	r2,-4(fp)
    429c:	10803017 	ldw	r2,192(r2)
    42a0:	10800518 	cmpnei	r2,r2,20
    42a4:	10000a1e 	bne	r2,zero,42d0 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    42a8:	e0bfff17 	ldw	r2,-4(fp)
    42ac:	00c00834 	movhi	r3,32
    42b0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
    42b4:	e0bfff17 	ldw	r2,-4(fp)
    42b8:	00c00804 	movi	r3,32
    42bc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    42c0:	e0bfff17 	ldw	r2,-4(fp)
    42c4:	00c00074 	movhi	r3,1
    42c8:	10c01015 	stw	r3,64(r2)
    42cc:	0000c006 	br	45d0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    42d0:	e0bfff17 	ldw	r2,-4(fp)
    42d4:	10803017 	ldw	r2,192(r2)
    42d8:	108004d8 	cmpnei	r2,r2,19
    42dc:	10000a1e 	bne	r2,zero,4308 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    42e0:	e0bfff17 	ldw	r2,-4(fp)
    42e4:	00c00434 	movhi	r3,16
    42e8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
    42ec:	e0bfff17 	ldw	r2,-4(fp)
    42f0:	00c00404 	movi	r3,16
    42f4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    42f8:	e0bfff17 	ldw	r2,-4(fp)
    42fc:	00c00074 	movhi	r3,1
    4300:	10c01015 	stw	r3,64(r2)
    4304:	0000b206 	br	45d0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    4308:	e0bfff17 	ldw	r2,-4(fp)
    430c:	10803017 	ldw	r2,192(r2)
    4310:	10800498 	cmpnei	r2,r2,18
    4314:	10000a1e 	bne	r2,zero,4340 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    4318:	e0bfff17 	ldw	r2,-4(fp)
    431c:	00c00234 	movhi	r3,8
    4320:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
    4324:	e0bfff17 	ldw	r2,-4(fp)
    4328:	00c00204 	movi	r3,8
    432c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    4330:	e0bfff17 	ldw	r2,-4(fp)
    4334:	00c00074 	movhi	r3,1
    4338:	10c01015 	stw	r3,64(r2)
    433c:	0000a406 	br	45d0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    4340:	e0bfff17 	ldw	r2,-4(fp)
    4344:	10803017 	ldw	r2,192(r2)
    4348:	10800418 	cmpnei	r2,r2,16
    434c:	10000a1e 	bne	r2,zero,4378 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    4350:	e0bfff17 	ldw	r2,-4(fp)
    4354:	00c000b4 	movhi	r3,2
    4358:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
    435c:	e0bfff17 	ldw	r2,-4(fp)
    4360:	00c00104 	movi	r3,4
    4364:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
    4368:	e0bfff17 	ldw	r2,-4(fp)
    436c:	00e00014 	movui	r3,32768
    4370:	10c01015 	stw	r3,64(r2)
    4374:	00009606 	br	45d0 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    4378:	e0bfff17 	ldw	r2,-4(fp)
    437c:	10802e17 	ldw	r2,184(r2)
    4380:	1009883a 	mov	r4,r2
    4384:	00065bc0 	call	65bc <epcs_read_device_id>
    4388:	1007883a 	mov	r3,r2
    438c:	e0bfff17 	ldw	r2,-4(fp)
    4390:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
    4394:	e0bfff17 	ldw	r2,-4(fp)
    4398:	10c03017 	ldw	r3,192(r2)
    439c:	00804034 	movhi	r2,256
    43a0:	10bfffc4 	addi	r2,r2,-1
    43a4:	1886703a 	and	r3,r3,r2
    43a8:	00800874 	movhi	r2,33
    43ac:	10ae8544 	addi	r2,r2,-17899
    43b0:	18800a1e 	bne	r3,r2,43dc <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    43b4:	e0bfff17 	ldw	r2,-4(fp)
    43b8:	00c00834 	movhi	r3,32
    43bc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
    43c0:	e0bfff17 	ldw	r2,-4(fp)
    43c4:	00c00804 	movi	r3,32
    43c8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    43cc:	e0bfff17 	ldw	r2,-4(fp)
    43d0:	00c00074 	movhi	r3,1
    43d4:	10c01015 	stw	r3,64(r2)
    43d8:	00007d06 	br	45d0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
    43dc:	e0bfff17 	ldw	r2,-4(fp)
    43e0:	10c03017 	ldw	r3,192(r2)
    43e4:	00804034 	movhi	r2,256
    43e8:	10bfffc4 	addi	r2,r2,-1
    43ec:	1886703a 	and	r3,r3,r2
    43f0:	00800874 	movhi	r2,33
    43f4:	10ae8584 	addi	r2,r2,-17898
    43f8:	18800a1e 	bne	r3,r2,4424 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
    43fc:	e0bfff17 	ldw	r2,-4(fp)
    4400:	00c01034 	movhi	r3,64
    4404:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
    4408:	e0bfff17 	ldw	r2,-4(fp)
    440c:	00c01004 	movi	r3,64
    4410:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    4414:	e0bfff17 	ldw	r2,-4(fp)
    4418:	00c00074 	movhi	r3,1
    441c:	10c01015 	stw	r3,64(r2)
    4420:	00006b06 	br	45d0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
    4424:	e0bfff17 	ldw	r2,-4(fp)
    4428:	10c03017 	ldw	r3,192(r2)
    442c:	00804034 	movhi	r2,256
    4430:	10bfffc4 	addi	r2,r2,-1
    4434:	1886703a 	and	r3,r3,r2
    4438:	00800874 	movhi	r2,33
    443c:	10ae85c4 	addi	r2,r2,-17897
    4440:	18800a1e 	bne	r3,r2,446c <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    4444:	e0bfff17 	ldw	r2,-4(fp)
    4448:	00c02034 	movhi	r3,128
    444c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
    4450:	e0bfff17 	ldw	r2,-4(fp)
    4454:	00c02004 	movi	r3,128
    4458:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	00c00074 	movhi	r3,1
    4464:	10c01015 	stw	r3,64(r2)
    4468:	00005906 	br	45d0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    446c:	e0bfff17 	ldw	r2,-4(fp)
    4470:	10c03017 	ldw	r3,192(r2)
    4474:	00804034 	movhi	r2,256
    4478:	10bfffc4 	addi	r2,r2,-1
    447c:	1886703a 	and	r3,r3,r2
    4480:	00800874 	movhi	r2,33
    4484:	10ae8604 	addi	r2,r2,-17896
    4488:	18800a1e 	bne	r3,r2,44b4 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    448c:	e0bfff17 	ldw	r2,-4(fp)
    4490:	00c04034 	movhi	r3,256
    4494:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    4498:	e0bfff17 	ldw	r2,-4(fp)
    449c:	00c04004 	movi	r3,256
    44a0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    44a4:	e0bfff17 	ldw	r2,-4(fp)
    44a8:	00c00074 	movhi	r3,1
    44ac:	10c01015 	stw	r3,64(r2)
    44b0:	00004706 	br	45d0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    44b4:	e0bfff17 	ldw	r2,-4(fp)
    44b8:	10803017 	ldw	r2,192(r2)
    44bc:	10803fcc 	andi	r2,r2,255
    44c0:	10800618 	cmpnei	r2,r2,24
    44c4:	10000a1e 	bne	r2,zero,44f0 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    44c8:	e0bfff17 	ldw	r2,-4(fp)
    44cc:	00c04034 	movhi	r3,256
    44d0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
    44d4:	e0bfff17 	ldw	r2,-4(fp)
    44d8:	00c01004 	movi	r3,64
    44dc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
    44e0:	e0bfff17 	ldw	r2,-4(fp)
    44e4:	00c00134 	movhi	r3,4
    44e8:	10c01015 	stw	r3,64(r2)
    44ec:	00003806 	br	45d0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    44f0:	e0bfff17 	ldw	r2,-4(fp)
    44f4:	10803017 	ldw	r2,192(r2)
    44f8:	10803fcc 	andi	r2,r2,255
    44fc:	10800658 	cmpnei	r2,r2,25
    4500:	10000d1e 	bne	r2,zero,4538 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    4504:	e0bfff17 	ldw	r2,-4(fp)
    4508:	00c08034 	movhi	r3,512
    450c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    4510:	e0bfff17 	ldw	r2,-4(fp)
    4514:	00c08004 	movi	r3,512
    4518:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    451c:	e0bfff17 	ldw	r2,-4(fp)
    4520:	00c00074 	movhi	r3,1
    4524:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    4528:	e0bfff17 	ldw	r2,-4(fp)
    452c:	00c00044 	movi	r3,1
    4530:	10c03215 	stw	r3,200(r2)
    4534:	00002606 	br	45d0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
    4538:	e0bfff17 	ldw	r2,-4(fp)
    453c:	10803017 	ldw	r2,192(r2)
    4540:	10803fcc 	andi	r2,r2,255
    4544:	10800818 	cmpnei	r2,r2,32
    4548:	10000d1e 	bne	r2,zero,4580 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
    454c:	e0bfff17 	ldw	r2,-4(fp)
    4550:	00c10034 	movhi	r3,1024
    4554:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
    4558:	e0bfff17 	ldw	r2,-4(fp)
    455c:	00c10004 	movi	r3,1024
    4560:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    4564:	e0bfff17 	ldw	r2,-4(fp)
    4568:	00c00074 	movhi	r3,1
    456c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    4570:	e0bfff17 	ldw	r2,-4(fp)
    4574:	00c00044 	movi	r3,1
    4578:	10c03215 	stw	r3,200(r2)
    457c:	00001406 	br	45d0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
    4580:	e0bfff17 	ldw	r2,-4(fp)
    4584:	10803017 	ldw	r2,192(r2)
    4588:	10803fcc 	andi	r2,r2,255
    458c:	10800858 	cmpnei	r2,r2,33
    4590:	10000d1e 	bne	r2,zero,45c8 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
    4594:	e0bfff17 	ldw	r2,-4(fp)
    4598:	00c20034 	movhi	r3,2048
    459c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
    45a0:	e0bfff17 	ldw	r2,-4(fp)
    45a4:	00c20004 	movi	r3,2048
    45a8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    45ac:	e0bfff17 	ldw	r2,-4(fp)
    45b0:	00c00074 	movhi	r3,1
    45b4:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    45b8:	e0bfff17 	ldw	r2,-4(fp)
    45bc:	00c00044 	movi	r3,1
    45c0:	10c03215 	stw	r3,200(r2)
    45c4:	00000206 	br	45d0 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    45c8:	00bffb44 	movi	r2,-19
    45cc:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    45d0:	e0bfff17 	ldw	r2,-4(fp)
    45d4:	10800e17 	ldw	r2,56(r2)
    45d8:	1007883a 	mov	r3,r2
    45dc:	e0bfff17 	ldw	r2,-4(fp)
    45e0:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
    45e4:	e0bfff17 	ldw	r2,-4(fp)
    45e8:	00c00044 	movi	r3,1
    45ec:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
    45f0:	e0bfff17 	ldw	r2,-4(fp)
    45f4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    45f8:	e0bfff17 	ldw	r2,-4(fp)
    45fc:	00c04004 	movi	r3,256
    4600:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
    4604:	e0bffe17 	ldw	r2,-8(fp)
}
    4608:	e037883a 	mov	sp,fp
    460c:	dfc00117 	ldw	ra,4(sp)
    4610:	df000017 	ldw	fp,0(sp)
    4614:	dec00204 	addi	sp,sp,8
    4618:	f800283a 	ret

0000461c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    461c:	deffee04 	addi	sp,sp,-72
    4620:	dfc01115 	stw	ra,68(sp)
    4624:	df001015 	stw	fp,64(sp)
    4628:	df001004 	addi	fp,sp,64
    462c:	e13ffc15 	stw	r4,-16(fp)
    4630:	e17ffd15 	stw	r5,-12(fp)
    4634:	e1bffe15 	stw	r6,-8(fp)
    4638:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    463c:	00800804 	movi	r2,32
    4640:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
    4644:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
    4648:	00002606 	br	46e4 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    464c:	e0bff117 	ldw	r2,-60(fp)
    4650:	e0ffff17 	ldw	r3,-4(fp)
    4654:	1880012e 	bgeu	r3,r2,465c <alt_epcs_flash_memcmp+0x40>
    4658:	1805883a 	mov	r2,r3
    465c:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    4660:	e0fffe17 	ldw	r3,-8(fp)
    4664:	e0bff017 	ldw	r2,-64(fp)
    4668:	1887883a 	add	r3,r3,r2
    466c:	e0bff404 	addi	r2,fp,-48
    4670:	e13ffc17 	ldw	r4,-16(fp)
    4674:	180b883a 	mov	r5,r3
    4678:	100d883a 	mov	r6,r2
    467c:	e1fff217 	ldw	r7,-56(fp)
    4680:	0004bf80 	call	4bf8 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    4684:	1000020e 	bge	r2,zero,4690 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    4688:	00bfffc4 	movi	r2,-1
    468c:	00001806 	br	46f0 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    4690:	e0bff017 	ldw	r2,-64(fp)
    4694:	e0fffd17 	ldw	r3,-12(fp)
    4698:	1889883a 	add	r4,r3,r2
    469c:	e0bff217 	ldw	r2,-56(fp)
    46a0:	e0fff404 	addi	r3,fp,-48
    46a4:	180b883a 	mov	r5,r3
    46a8:	100d883a 	mov	r6,r2
    46ac:	00077e80 	call	77e8 <memcmp>
    46b0:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
    46b4:	e0bff317 	ldw	r2,-52(fp)
    46b8:	10000226 	beq	r2,zero,46c4 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
    46bc:	e0bff317 	ldw	r2,-52(fp)
    46c0:	00000b06 	br	46f0 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
    46c4:	e0bff217 	ldw	r2,-56(fp)
    46c8:	e0ffff17 	ldw	r3,-4(fp)
    46cc:	1885c83a 	sub	r2,r3,r2
    46d0:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
    46d4:	e0fff017 	ldw	r3,-64(fp)
    46d8:	e0bff217 	ldw	r2,-56(fp)
    46dc:	1885883a 	add	r2,r3,r2
    46e0:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    46e4:	e0bfff17 	ldw	r2,-4(fp)
    46e8:	103fd81e 	bne	r2,zero,464c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    46ec:	0005883a 	mov	r2,zero
}
    46f0:	e037883a 	mov	sp,fp
    46f4:	dfc00117 	ldw	ra,4(sp)
    46f8:	df000017 	ldw	fp,0(sp)
    46fc:	dec00204 	addi	sp,sp,8
    4700:	f800283a 	ret

00004704 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    4704:	defff404 	addi	sp,sp,-48
    4708:	dfc00b15 	stw	ra,44(sp)
    470c:	df000a15 	stw	fp,40(sp)
    4710:	df000a04 	addi	fp,sp,40
    4714:	e13ffc15 	stw	r4,-16(fp)
    4718:	e17ffd15 	stw	r5,-12(fp)
    471c:	e1bffe15 	stw	r6,-8(fp)
    4720:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
    4724:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    4728:	e03ff815 	stw	zero,-32(fp)
    472c:	00008306 	br	493c <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    4730:	e0fffc17 	ldw	r3,-16(fp)
    4734:	e0bff817 	ldw	r2,-32(fp)
    4738:	1004913a 	slli	r2,r2,4
    473c:	10800d04 	addi	r2,r2,52
    4740:	1885883a 	add	r2,r3,r2
    4744:	10800017 	ldw	r2,0(r2)
    4748:	e0fffd17 	ldw	r3,-12(fp)
    474c:	18807816 	blt	r3,r2,4930 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
    4750:	e0fffc17 	ldw	r3,-16(fp)
    4754:	e0bff817 	ldw	r2,-32(fp)
    4758:	1004913a 	slli	r2,r2,4
    475c:	10800d04 	addi	r2,r2,52
    4760:	1885883a 	add	r2,r3,r2
    4764:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
    4768:	e13ffc17 	ldw	r4,-16(fp)
    476c:	e0bff817 	ldw	r2,-32(fp)
    4770:	1004913a 	slli	r2,r2,4
    4774:	10800e04 	addi	r2,r2,56
    4778:	2085883a 	add	r2,r4,r2
    477c:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
    4780:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    4784:	e0fffd17 	ldw	r3,-12(fp)
    4788:	1880690e 	bge	r3,r2,4930 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    478c:	e0fffc17 	ldw	r3,-16(fp)
    4790:	e0bff817 	ldw	r2,-32(fp)
    4794:	1004913a 	slli	r2,r2,4
    4798:	10800d04 	addi	r2,r2,52
    479c:	1885883a 	add	r2,r3,r2
    47a0:	10800017 	ldw	r2,0(r2)
    47a4:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    47a8:	e03ff915 	stw	zero,-28(fp)
    47ac:	00005806 	br	4910 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
    47b0:	e0fffd17 	ldw	r3,-12(fp)
    47b4:	e0bffa17 	ldw	r2,-24(fp)
    47b8:	18804916 	blt	r3,r2,48e0 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
    47bc:	e0fffc17 	ldw	r3,-16(fp)
    47c0:	e0bff817 	ldw	r2,-32(fp)
    47c4:	10800104 	addi	r2,r2,4
    47c8:	1004913a 	slli	r2,r2,4
    47cc:	1885883a 	add	r2,r3,r2
    47d0:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
    47d4:	e0bffa17 	ldw	r2,-24(fp)
    47d8:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
    47dc:	e0fffd17 	ldw	r3,-12(fp)
    47e0:	18803f0e 	bge	r3,r2,48e0 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    47e4:	e0fffc17 	ldw	r3,-16(fp)
    47e8:	e0bff817 	ldw	r2,-32(fp)
    47ec:	10800104 	addi	r2,r2,4
    47f0:	1004913a 	slli	r2,r2,4
    47f4:	1885883a 	add	r2,r3,r2
    47f8:	10c00017 	ldw	r3,0(r2)
    47fc:	e0bffa17 	ldw	r2,-24(fp)
    4800:	1887883a 	add	r3,r3,r2
    4804:	e0bffd17 	ldw	r2,-12(fp)
    4808:	1885c83a 	sub	r2,r3,r2
    480c:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    4810:	e0fffb17 	ldw	r3,-20(fp)
    4814:	e0bfff17 	ldw	r2,-4(fp)
    4818:	1880010e 	bge	r3,r2,4820 <alt_epcs_flash_write+0x11c>
    481c:	1805883a 	mov	r2,r3
    4820:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    4824:	e0bffb17 	ldw	r2,-20(fp)
    4828:	e13ffc17 	ldw	r4,-16(fp)
    482c:	e17ffe17 	ldw	r5,-8(fp)
    4830:	e1bffd17 	ldw	r6,-12(fp)
    4834:	100f883a 	mov	r7,r2
    4838:	000461c0 	call	461c <alt_epcs_flash_memcmp>
    483c:	10001226 	beq	r2,zero,4888 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    4840:	e0bffc17 	ldw	r2,-16(fp)
    4844:	10800817 	ldw	r2,32(r2)
    4848:	e13ffc17 	ldw	r4,-16(fp)
    484c:	e17ffa17 	ldw	r5,-24(fp)
    4850:	103ee83a 	callr	r2
    4854:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
    4858:	e0bff717 	ldw	r2,-36(fp)
    485c:	10000a1e 	bne	r2,zero,4888 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
    4860:	e0bffc17 	ldw	r2,-16(fp)
    4864:	10800917 	ldw	r2,36(r2)
    4868:	e0fffb17 	ldw	r3,-20(fp)
    486c:	d8c00015 	stw	r3,0(sp)
    4870:	e13ffc17 	ldw	r4,-16(fp)
    4874:	e17ffa17 	ldw	r5,-24(fp)
    4878:	e1bffd17 	ldw	r6,-12(fp)
    487c:	e1fffe17 	ldw	r7,-8(fp)
    4880:	103ee83a 	callr	r2
    4884:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    4888:	e0ffff17 	ldw	r3,-4(fp)
    488c:	e0bffb17 	ldw	r2,-20(fp)
    4890:	18802e26 	beq	r3,r2,494c <alt_epcs_flash_write+0x248>
    4894:	e0bff717 	ldw	r2,-36(fp)
    4898:	10002c1e 	bne	r2,zero,494c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
    489c:	e0ffff17 	ldw	r3,-4(fp)
    48a0:	e0bffb17 	ldw	r2,-20(fp)
    48a4:	1885c83a 	sub	r2,r3,r2
    48a8:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    48ac:	e0fffc17 	ldw	r3,-16(fp)
    48b0:	e0bff817 	ldw	r2,-32(fp)
    48b4:	10800104 	addi	r2,r2,4
    48b8:	1004913a 	slli	r2,r2,4
    48bc:	1885883a 	add	r2,r3,r2
    48c0:	10c00017 	ldw	r3,0(r2)
    48c4:	e0bffa17 	ldw	r2,-24(fp)
    48c8:	1885883a 	add	r2,r3,r2
    48cc:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    48d0:	e0bffb17 	ldw	r2,-20(fp)
    48d4:	e0fffe17 	ldw	r3,-8(fp)
    48d8:	1885883a 	add	r2,r3,r2
    48dc:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    48e0:	e0fffc17 	ldw	r3,-16(fp)
    48e4:	e0bff817 	ldw	r2,-32(fp)
    48e8:	10800104 	addi	r2,r2,4
    48ec:	1004913a 	slli	r2,r2,4
    48f0:	1885883a 	add	r2,r3,r2
    48f4:	10800017 	ldw	r2,0(r2)
    48f8:	e0fffa17 	ldw	r3,-24(fp)
    48fc:	1885883a 	add	r2,r3,r2
    4900:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    4904:	e0bff917 	ldw	r2,-28(fp)
    4908:	10800044 	addi	r2,r2,1
    490c:	e0bff915 	stw	r2,-28(fp)
    4910:	e0fffc17 	ldw	r3,-16(fp)
    4914:	e0bff817 	ldw	r2,-32(fp)
    4918:	1004913a 	slli	r2,r2,4
    491c:	10800f04 	addi	r2,r2,60
    4920:	1885883a 	add	r2,r3,r2
    4924:	10800017 	ldw	r2,0(r2)
    4928:	e0fff917 	ldw	r3,-28(fp)
    492c:	18bfa016 	blt	r3,r2,47b0 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    4930:	e0bff817 	ldw	r2,-32(fp)
    4934:	10800044 	addi	r2,r2,1
    4938:	e0bff815 	stw	r2,-32(fp)
    493c:	e0bffc17 	ldw	r2,-16(fp)
    4940:	10800c17 	ldw	r2,48(r2)
    4944:	e0fff817 	ldw	r3,-32(fp)
    4948:	18bf7916 	blt	r3,r2,4730 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    494c:	e0bff717 	ldw	r2,-36(fp)
}
    4950:	e037883a 	mov	sp,fp
    4954:	dfc00117 	ldw	ra,4(sp)
    4958:	df000017 	ldw	fp,0(sp)
    495c:	dec00204 	addi	sp,sp,8
    4960:	f800283a 	ret

00004964 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    4964:	defffa04 	addi	sp,sp,-24
    4968:	df000515 	stw	fp,20(sp)
    496c:	df000504 	addi	fp,sp,20
    4970:	e13ffd15 	stw	r4,-12(fp)
    4974:	e17ffe15 	stw	r5,-8(fp)
    4978:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    497c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    4980:	e0bffd17 	ldw	r2,-12(fp)
    4984:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
    4988:	e0bffc17 	ldw	r2,-16(fp)
    498c:	10c00c17 	ldw	r3,48(r2)
    4990:	e0bfff17 	ldw	r2,-4(fp)
    4994:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    4998:	e0bffc17 	ldw	r2,-16(fp)
    499c:	10800c17 	ldw	r2,48(r2)
    49a0:	1000031e 	bne	r2,zero,49b0 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
    49a4:	00bffec4 	movi	r2,-5
    49a8:	e0bffb15 	stw	r2,-20(fp)
    49ac:	00000b06 	br	49dc <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    49b0:	e0bffc17 	ldw	r2,-16(fp)
    49b4:	10800c17 	ldw	r2,48(r2)
    49b8:	10800250 	cmplti	r2,r2,9
    49bc:	1000031e 	bne	r2,zero,49cc <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
    49c0:	00bffd04 	movi	r2,-12
    49c4:	e0bffb15 	stw	r2,-20(fp)
    49c8:	00000406 	br	49dc <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
    49cc:	e0bffc17 	ldw	r2,-16(fp)
    49d0:	10c00d04 	addi	r3,r2,52
    49d4:	e0bffe17 	ldw	r2,-8(fp)
    49d8:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    49dc:	e0bffb17 	ldw	r2,-20(fp)
}
    49e0:	e037883a 	mov	sp,fp
    49e4:	df000017 	ldw	fp,0(sp)
    49e8:	dec00104 	addi	sp,sp,4
    49ec:	f800283a 	ret

000049f0 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    49f0:	defff904 	addi	sp,sp,-28
    49f4:	df000615 	stw	fp,24(sp)
    49f8:	df000604 	addi	fp,sp,24
    49fc:	e13ffe15 	stw	r4,-8(fp)
    4a00:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    4a04:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    4a08:	e0bffe17 	ldw	r2,-8(fp)
    4a0c:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    4a10:	e0bffb17 	ldw	r2,-20(fp)
    4a14:	10800c17 	ldw	r2,48(r2)
    4a18:	10bfffc4 	addi	r2,r2,-1
    4a1c:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    4a20:	e0fffb17 	ldw	r3,-20(fp)
    4a24:	e0bffc17 	ldw	r2,-16(fp)
    4a28:	1004913a 	slli	r2,r2,4
    4a2c:	10800d04 	addi	r2,r2,52
    4a30:	1885883a 	add	r2,r3,r2
    4a34:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    4a38:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    4a3c:	e13ffb17 	ldw	r4,-20(fp)
    4a40:	e0bffc17 	ldw	r2,-16(fp)
    4a44:	1004913a 	slli	r2,r2,4
    4a48:	10800e04 	addi	r2,r2,56
    4a4c:	2085883a 	add	r2,r4,r2
    4a50:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    4a54:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    4a58:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    4a5c:	e0bfff17 	ldw	r2,-4(fp)
    4a60:	e0fffd17 	ldw	r3,-12(fp)
    4a64:	1880022e 	bgeu	r3,r2,4a70 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    4a68:	00bffec4 	movi	r2,-5
    4a6c:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
    4a70:	e0bffa17 	ldw	r2,-24(fp)
}
    4a74:	e037883a 	mov	sp,fp
    4a78:	df000017 	ldw	fp,0(sp)
    4a7c:	dec00104 	addi	sp,sp,4
    4a80:	f800283a 	ret

00004a84 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    4a84:	defffa04 	addi	sp,sp,-24
    4a88:	dfc00515 	stw	ra,20(sp)
    4a8c:	df000415 	stw	fp,16(sp)
    4a90:	df000404 	addi	fp,sp,16
    4a94:	e13ffe15 	stw	r4,-8(fp)
    4a98:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    4a9c:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    4aa0:	e0bffe17 	ldw	r2,-8(fp)
    4aa4:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    4aa8:	e13ffe17 	ldw	r4,-8(fp)
    4aac:	e17fff17 	ldw	r5,-4(fp)
    4ab0:	00049f00 	call	49f0 <alt_epcs_test_address>
    4ab4:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
    4ab8:	e0bffc17 	ldw	r2,-16(fp)
    4abc:	10000816 	blt	r2,zero,4ae0 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    4ac0:	e0bffd17 	ldw	r2,-12(fp)
    4ac4:	11002e17 	ldw	r4,184(r2)
    4ac8:	e0ffff17 	ldw	r3,-4(fp)
    4acc:	e0bffd17 	ldw	r2,-12(fp)
    4ad0:	10803217 	ldw	r2,200(r2)
    4ad4:	180b883a 	mov	r5,r3
    4ad8:	100d883a 	mov	r6,r2
    4adc:	00061940 	call	6194 <epcs_sector_erase>
  }
  return ret_code;
    4ae0:	e0bffc17 	ldw	r2,-16(fp)
}
    4ae4:	e037883a 	mov	sp,fp
    4ae8:	dfc00117 	ldw	ra,4(sp)
    4aec:	df000017 	ldw	fp,0(sp)
    4af0:	dec00204 	addi	sp,sp,8
    4af4:	f800283a 	ret

00004af8 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    4af8:	defff404 	addi	sp,sp,-48
    4afc:	dfc00b15 	stw	ra,44(sp)
    4b00:	df000a15 	stw	fp,40(sp)
    4b04:	df000a04 	addi	fp,sp,40
    4b08:	e13ffc15 	stw	r4,-16(fp)
    4b0c:	e17ffd15 	stw	r5,-12(fp)
    4b10:	e1bffe15 	stw	r6,-8(fp)
    4b14:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    4b18:	e0bffc17 	ldw	r2,-16(fp)
    4b1c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    4b20:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    4b24:	e13ffc17 	ldw	r4,-16(fp)
    4b28:	e17ffe17 	ldw	r5,-8(fp)
    4b2c:	00049f00 	call	49f0 <alt_epcs_test_address>
    4b30:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    4b34:	e0bff917 	ldw	r2,-28(fp)
    4b38:	10002916 	blt	r2,zero,4be0 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    4b3c:	00002606 	br	4bd8 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    4b40:	e0bff817 	ldw	r2,-32(fp)
    4b44:	10c03117 	ldw	r3,196(r2)
    4b48:	e0bffe17 	ldw	r2,-8(fp)
    4b4c:	1887883a 	add	r3,r3,r2
    4b50:	e0bff817 	ldw	r2,-32(fp)
    4b54:	10803117 	ldw	r2,196(r2)
    4b58:	0085c83a 	sub	r2,zero,r2
    4b5c:	1884703a 	and	r2,r3,r2
    4b60:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    4b64:	e0fffa17 	ldw	r3,-24(fp)
    4b68:	e0bffe17 	ldw	r2,-8(fp)
    4b6c:	1885c83a 	sub	r2,r3,r2
    4b70:	e0c00217 	ldw	r3,8(fp)
    4b74:	1880010e 	bge	r3,r2,4b7c <alt_epcs_flash_write_block+0x84>
    4b78:	1805883a 	mov	r2,r3
    4b7c:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    4b80:	e0bff817 	ldw	r2,-32(fp)
    4b84:	11002e17 	ldw	r4,184(r2)
    4b88:	e0bff717 	ldw	r2,-36(fp)
    4b8c:	e0ffff17 	ldw	r3,-4(fp)
    4b90:	1887883a 	add	r3,r3,r2
    4b94:	e0bff817 	ldw	r2,-32(fp)
    4b98:	10803217 	ldw	r2,200(r2)
    4b9c:	d8800015 	stw	r2,0(sp)
    4ba0:	e17ffe17 	ldw	r5,-8(fp)
    4ba4:	180d883a 	mov	r6,r3
    4ba8:	e1fffb17 	ldw	r7,-20(fp)
    4bac:	00064380 	call	6438 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    4bb0:	e0c00217 	ldw	r3,8(fp)
    4bb4:	e0bffb17 	ldw	r2,-20(fp)
    4bb8:	1885c83a 	sub	r2,r3,r2
    4bbc:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    4bc0:	e0fff717 	ldw	r3,-36(fp)
    4bc4:	e0bffb17 	ldw	r2,-20(fp)
    4bc8:	1885883a 	add	r2,r3,r2
    4bcc:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    4bd0:	e0bffa17 	ldw	r2,-24(fp)
    4bd4:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    4bd8:	e0800217 	ldw	r2,8(fp)
    4bdc:	103fd81e 	bne	r2,zero,4b40 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    4be0:	e0bff917 	ldw	r2,-28(fp)
}
    4be4:	e037883a 	mov	sp,fp
    4be8:	dfc00117 	ldw	ra,4(sp)
    4bec:	df000017 	ldw	fp,0(sp)
    4bf0:	dec00204 	addi	sp,sp,8
    4bf4:	f800283a 	ret

00004bf8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    4bf8:	defff704 	addi	sp,sp,-36
    4bfc:	dfc00815 	stw	ra,32(sp)
    4c00:	df000715 	stw	fp,28(sp)
    4c04:	df000704 	addi	fp,sp,28
    4c08:	e13ffc15 	stw	r4,-16(fp)
    4c0c:	e17ffd15 	stw	r5,-12(fp)
    4c10:	e1bffe15 	stw	r6,-8(fp)
    4c14:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    4c18:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    4c1c:	e0bffc17 	ldw	r2,-16(fp)
    4c20:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    4c24:	e13ffc17 	ldw	r4,-16(fp)
    4c28:	e17ffd17 	ldw	r5,-12(fp)
    4c2c:	00049f00 	call	49f0 <alt_epcs_test_address>
    4c30:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
    4c34:	e0bffa17 	ldw	r2,-24(fp)
    4c38:	10000f16 	blt	r2,zero,4c78 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    4c3c:	e0bffb17 	ldw	r2,-20(fp)
    4c40:	10c02e17 	ldw	r3,184(r2)
    4c44:	e0bffb17 	ldw	r2,-20(fp)
    4c48:	10803217 	ldw	r2,200(r2)
    4c4c:	d8800015 	stw	r2,0(sp)
    4c50:	1809883a 	mov	r4,r3
    4c54:	e17ffd17 	ldw	r5,-12(fp)
    4c58:	e1bffe17 	ldw	r6,-8(fp)
    4c5c:	e1ffff17 	ldw	r7,-4(fp)
    4c60:	000628c0 	call	628c <epcs_read_buffer>
    4c64:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    4c68:	e0fffa17 	ldw	r3,-24(fp)
    4c6c:	e0bfff17 	ldw	r2,-4(fp)
    4c70:	1880011e 	bne	r3,r2,4c78 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    4c74:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
    4c78:	e0bffa17 	ldw	r2,-24(fp)
}
    4c7c:	e037883a 	mov	sp,fp
    4c80:	dfc00117 	ldw	ra,4(sp)
    4c84:	df000017 	ldw	fp,0(sp)
    4c88:	dec00204 	addi	sp,sp,8
    4c8c:	f800283a 	ret

00004c90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4c90:	defffa04 	addi	sp,sp,-24
    4c94:	dfc00515 	stw	ra,20(sp)
    4c98:	df000415 	stw	fp,16(sp)
    4c9c:	df000404 	addi	fp,sp,16
    4ca0:	e13ffd15 	stw	r4,-12(fp)
    4ca4:	e17ffe15 	stw	r5,-8(fp)
    4ca8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4cac:	e0bffd17 	ldw	r2,-12(fp)
    4cb0:	10800017 	ldw	r2,0(r2)
    4cb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4cb8:	e0bffc17 	ldw	r2,-16(fp)
    4cbc:	10c00a04 	addi	r3,r2,40
    4cc0:	e0bffd17 	ldw	r2,-12(fp)
    4cc4:	10800217 	ldw	r2,8(r2)
    4cc8:	1809883a 	mov	r4,r3
    4ccc:	e17ffe17 	ldw	r5,-8(fp)
    4cd0:	e1bfff17 	ldw	r6,-4(fp)
    4cd4:	100f883a 	mov	r7,r2
    4cd8:	00052b80 	call	52b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4cdc:	e037883a 	mov	sp,fp
    4ce0:	dfc00117 	ldw	ra,4(sp)
    4ce4:	df000017 	ldw	fp,0(sp)
    4ce8:	dec00204 	addi	sp,sp,8
    4cec:	f800283a 	ret

00004cf0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4cf0:	defffa04 	addi	sp,sp,-24
    4cf4:	dfc00515 	stw	ra,20(sp)
    4cf8:	df000415 	stw	fp,16(sp)
    4cfc:	df000404 	addi	fp,sp,16
    4d00:	e13ffd15 	stw	r4,-12(fp)
    4d04:	e17ffe15 	stw	r5,-8(fp)
    4d08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4d0c:	e0bffd17 	ldw	r2,-12(fp)
    4d10:	10800017 	ldw	r2,0(r2)
    4d14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4d18:	e0bffc17 	ldw	r2,-16(fp)
    4d1c:	10c00a04 	addi	r3,r2,40
    4d20:	e0bffd17 	ldw	r2,-12(fp)
    4d24:	10800217 	ldw	r2,8(r2)
    4d28:	1809883a 	mov	r4,r3
    4d2c:	e17ffe17 	ldw	r5,-8(fp)
    4d30:	e1bfff17 	ldw	r6,-4(fp)
    4d34:	100f883a 	mov	r7,r2
    4d38:	00054c40 	call	54c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4d3c:	e037883a 	mov	sp,fp
    4d40:	dfc00117 	ldw	ra,4(sp)
    4d44:	df000017 	ldw	fp,0(sp)
    4d48:	dec00204 	addi	sp,sp,8
    4d4c:	f800283a 	ret

00004d50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    4d50:	defffc04 	addi	sp,sp,-16
    4d54:	dfc00315 	stw	ra,12(sp)
    4d58:	df000215 	stw	fp,8(sp)
    4d5c:	df000204 	addi	fp,sp,8
    4d60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4d64:	e0bfff17 	ldw	r2,-4(fp)
    4d68:	10800017 	ldw	r2,0(r2)
    4d6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    4d70:	e0bffe17 	ldw	r2,-8(fp)
    4d74:	10c00a04 	addi	r3,r2,40
    4d78:	e0bfff17 	ldw	r2,-4(fp)
    4d7c:	10800217 	ldw	r2,8(r2)
    4d80:	1809883a 	mov	r4,r3
    4d84:	100b883a 	mov	r5,r2
    4d88:	00051640 	call	5164 <altera_avalon_jtag_uart_close>
}
    4d8c:	e037883a 	mov	sp,fp
    4d90:	dfc00117 	ldw	ra,4(sp)
    4d94:	df000017 	ldw	fp,0(sp)
    4d98:	dec00204 	addi	sp,sp,8
    4d9c:	f800283a 	ret

00004da0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4da0:	defffa04 	addi	sp,sp,-24
    4da4:	dfc00515 	stw	ra,20(sp)
    4da8:	df000415 	stw	fp,16(sp)
    4dac:	df000404 	addi	fp,sp,16
    4db0:	e13ffd15 	stw	r4,-12(fp)
    4db4:	e17ffe15 	stw	r5,-8(fp)
    4db8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    4dbc:	e0bffd17 	ldw	r2,-12(fp)
    4dc0:	10800017 	ldw	r2,0(r2)
    4dc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4dc8:	e0bffc17 	ldw	r2,-16(fp)
    4dcc:	10800a04 	addi	r2,r2,40
    4dd0:	1009883a 	mov	r4,r2
    4dd4:	e17ffe17 	ldw	r5,-8(fp)
    4dd8:	e1bfff17 	ldw	r6,-4(fp)
    4ddc:	00051cc0 	call	51cc <altera_avalon_jtag_uart_ioctl>
}
    4de0:	e037883a 	mov	sp,fp
    4de4:	dfc00117 	ldw	ra,4(sp)
    4de8:	df000017 	ldw	fp,0(sp)
    4dec:	dec00204 	addi	sp,sp,8
    4df0:	f800283a 	ret

00004df4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4df4:	defffa04 	addi	sp,sp,-24
    4df8:	dfc00515 	stw	ra,20(sp)
    4dfc:	df000415 	stw	fp,16(sp)
    4e00:	df000404 	addi	fp,sp,16
    4e04:	e13ffd15 	stw	r4,-12(fp)
    4e08:	e17ffe15 	stw	r5,-8(fp)
    4e0c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4e10:	e0bffd17 	ldw	r2,-12(fp)
    4e14:	00c00044 	movi	r3,1
    4e18:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4e1c:	e0bffd17 	ldw	r2,-12(fp)
    4e20:	10800017 	ldw	r2,0(r2)
    4e24:	10800104 	addi	r2,r2,4
    4e28:	1007883a 	mov	r3,r2
    4e2c:	e0bffd17 	ldw	r2,-12(fp)
    4e30:	10800817 	ldw	r2,32(r2)
    4e34:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    4e38:	e0fffe17 	ldw	r3,-8(fp)
    4e3c:	e0bfff17 	ldw	r2,-4(fp)
    4e40:	d8000015 	stw	zero,0(sp)
    4e44:	1809883a 	mov	r4,r3
    4e48:	100b883a 	mov	r5,r2
    4e4c:	01800034 	movhi	r6,0
    4e50:	3193ae04 	addi	r6,r6,20152
    4e54:	e1fffd17 	ldw	r7,-12(fp)
    4e58:	0006a980 	call	6a98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    4e5c:	e0bffd17 	ldw	r2,-12(fp)
    4e60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    4e64:	e0bffd17 	ldw	r2,-12(fp)
    4e68:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4e6c:	00800074 	movhi	r2,1
    4e70:	10a6d804 	addi	r2,r2,-25760
    4e74:	10800017 	ldw	r2,0(r2)
    4e78:	1809883a 	mov	r4,r3
    4e7c:	100b883a 	mov	r5,r2
    4e80:	01800034 	movhi	r6,0
    4e84:	31942f04 	addi	r6,r6,20668
    4e88:	e1fffd17 	ldw	r7,-12(fp)
    4e8c:	00066f40 	call	66f4 <alt_alarm_start>
    4e90:	1000040e 	bge	r2,zero,4ea4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    4e94:	e0fffd17 	ldw	r3,-12(fp)
    4e98:	00a00034 	movhi	r2,32768
    4e9c:	10bfffc4 	addi	r2,r2,-1
    4ea0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    4ea4:	e037883a 	mov	sp,fp
    4ea8:	dfc00117 	ldw	ra,4(sp)
    4eac:	df000017 	ldw	fp,0(sp)
    4eb0:	dec00204 	addi	sp,sp,8
    4eb4:	f800283a 	ret

00004eb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4eb8:	defff804 	addi	sp,sp,-32
    4ebc:	df000715 	stw	fp,28(sp)
    4ec0:	df000704 	addi	fp,sp,28
    4ec4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4ec8:	e0bfff17 	ldw	r2,-4(fp)
    4ecc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    4ed0:	e0bffb17 	ldw	r2,-20(fp)
    4ed4:	10800017 	ldw	r2,0(r2)
    4ed8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4edc:	e0bffc17 	ldw	r2,-16(fp)
    4ee0:	10800104 	addi	r2,r2,4
    4ee4:	10800037 	ldwio	r2,0(r2)
    4ee8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4eec:	e0bffd17 	ldw	r2,-12(fp)
    4ef0:	1080c00c 	andi	r2,r2,768
    4ef4:	1000011e 	bne	r2,zero,4efc <altera_avalon_jtag_uart_irq+0x44>
      break;
    4ef8:	00006c06 	br	50ac <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4efc:	e0bffd17 	ldw	r2,-12(fp)
    4f00:	1080400c 	andi	r2,r2,256
    4f04:	10003426 	beq	r2,zero,4fd8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    4f08:	00800074 	movhi	r2,1
    4f0c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4f10:	e0bffb17 	ldw	r2,-20(fp)
    4f14:	10800a17 	ldw	r2,40(r2)
    4f18:	10800044 	addi	r2,r2,1
    4f1c:	1081ffcc 	andi	r2,r2,2047
    4f20:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    4f24:	e0bffb17 	ldw	r2,-20(fp)
    4f28:	10c00b17 	ldw	r3,44(r2)
    4f2c:	e0bffe17 	ldw	r2,-8(fp)
    4f30:	1880011e 	bne	r3,r2,4f38 <altera_avalon_jtag_uart_irq+0x80>
          break;
    4f34:	00001606 	br	4f90 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4f38:	e0bffc17 	ldw	r2,-16(fp)
    4f3c:	10800037 	ldwio	r2,0(r2)
    4f40:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    4f44:	e0bff917 	ldw	r2,-28(fp)
    4f48:	10a0000c 	andi	r2,r2,32768
    4f4c:	1000011e 	bne	r2,zero,4f54 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    4f50:	00000f06 	br	4f90 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    4f54:	e0bffb17 	ldw	r2,-20(fp)
    4f58:	10800a17 	ldw	r2,40(r2)
    4f5c:	e0fff917 	ldw	r3,-28(fp)
    4f60:	1809883a 	mov	r4,r3
    4f64:	e0fffb17 	ldw	r3,-20(fp)
    4f68:	1885883a 	add	r2,r3,r2
    4f6c:	10800e04 	addi	r2,r2,56
    4f70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4f74:	e0bffb17 	ldw	r2,-20(fp)
    4f78:	10800a17 	ldw	r2,40(r2)
    4f7c:	10800044 	addi	r2,r2,1
    4f80:	10c1ffcc 	andi	r3,r2,2047
    4f84:	e0bffb17 	ldw	r2,-20(fp)
    4f88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4f8c:	003fe006 	br	4f10 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    4f90:	e0bff917 	ldw	r2,-28(fp)
    4f94:	10bfffec 	andhi	r2,r2,65535
    4f98:	10000f26 	beq	r2,zero,4fd8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4f9c:	e0bffb17 	ldw	r2,-20(fp)
    4fa0:	10c00817 	ldw	r3,32(r2)
    4fa4:	00bfff84 	movi	r2,-2
    4fa8:	1886703a 	and	r3,r3,r2
    4fac:	e0bffb17 	ldw	r2,-20(fp)
    4fb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4fb4:	e0bffc17 	ldw	r2,-16(fp)
    4fb8:	10800104 	addi	r2,r2,4
    4fbc:	1007883a 	mov	r3,r2
    4fc0:	e0bffb17 	ldw	r2,-20(fp)
    4fc4:	10800817 	ldw	r2,32(r2)
    4fc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4fcc:	e0bffc17 	ldw	r2,-16(fp)
    4fd0:	10800104 	addi	r2,r2,4
    4fd4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4fd8:	e0bffd17 	ldw	r2,-12(fp)
    4fdc:	1080800c 	andi	r2,r2,512
    4fe0:	10003126 	beq	r2,zero,50a8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4fe4:	e0bffd17 	ldw	r2,-12(fp)
    4fe8:	1004d43a 	srli	r2,r2,16
    4fec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    4ff0:	00001406 	br	5044 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4ff4:	e0bffc17 	ldw	r2,-16(fp)
    4ff8:	e0fffb17 	ldw	r3,-20(fp)
    4ffc:	18c00d17 	ldw	r3,52(r3)
    5000:	e13ffb17 	ldw	r4,-20(fp)
    5004:	20c7883a 	add	r3,r4,r3
    5008:	18c20e04 	addi	r3,r3,2104
    500c:	18c00003 	ldbu	r3,0(r3)
    5010:	18c03fcc 	andi	r3,r3,255
    5014:	18c0201c 	xori	r3,r3,128
    5018:	18ffe004 	addi	r3,r3,-128
    501c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5020:	e0bffb17 	ldw	r2,-20(fp)
    5024:	10800d17 	ldw	r2,52(r2)
    5028:	10800044 	addi	r2,r2,1
    502c:	10c1ffcc 	andi	r3,r2,2047
    5030:	e0bffb17 	ldw	r2,-20(fp)
    5034:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    5038:	e0bffa17 	ldw	r2,-24(fp)
    503c:	10bfffc4 	addi	r2,r2,-1
    5040:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    5044:	e0bffa17 	ldw	r2,-24(fp)
    5048:	10000526 	beq	r2,zero,5060 <altera_avalon_jtag_uart_irq+0x1a8>
    504c:	e0bffb17 	ldw	r2,-20(fp)
    5050:	10c00d17 	ldw	r3,52(r2)
    5054:	e0bffb17 	ldw	r2,-20(fp)
    5058:	10800c17 	ldw	r2,48(r2)
    505c:	18bfe51e 	bne	r3,r2,4ff4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    5060:	e0bffa17 	ldw	r2,-24(fp)
    5064:	10001026 	beq	r2,zero,50a8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    5068:	e0bffb17 	ldw	r2,-20(fp)
    506c:	10c00817 	ldw	r3,32(r2)
    5070:	00bfff44 	movi	r2,-3
    5074:	1886703a 	and	r3,r3,r2
    5078:	e0bffb17 	ldw	r2,-20(fp)
    507c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5080:	e0bffb17 	ldw	r2,-20(fp)
    5084:	10800017 	ldw	r2,0(r2)
    5088:	10800104 	addi	r2,r2,4
    508c:	1007883a 	mov	r3,r2
    5090:	e0bffb17 	ldw	r2,-20(fp)
    5094:	10800817 	ldw	r2,32(r2)
    5098:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    509c:	e0bffc17 	ldw	r2,-16(fp)
    50a0:	10800104 	addi	r2,r2,4
    50a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    50a8:	003f8c06 	br	4edc <altera_avalon_jtag_uart_irq+0x24>
}
    50ac:	e037883a 	mov	sp,fp
    50b0:	df000017 	ldw	fp,0(sp)
    50b4:	dec00104 	addi	sp,sp,4
    50b8:	f800283a 	ret

000050bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    50bc:	defff804 	addi	sp,sp,-32
    50c0:	df000715 	stw	fp,28(sp)
    50c4:	df000704 	addi	fp,sp,28
    50c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    50cc:	e0bffb17 	ldw	r2,-20(fp)
    50d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    50d4:	e0bff917 	ldw	r2,-28(fp)
    50d8:	10800017 	ldw	r2,0(r2)
    50dc:	10800104 	addi	r2,r2,4
    50e0:	10800037 	ldwio	r2,0(r2)
    50e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    50e8:	e0bffa17 	ldw	r2,-24(fp)
    50ec:	1081000c 	andi	r2,r2,1024
    50f0:	10000b26 	beq	r2,zero,5120 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    50f4:	e0bff917 	ldw	r2,-28(fp)
    50f8:	10800017 	ldw	r2,0(r2)
    50fc:	10800104 	addi	r2,r2,4
    5100:	1007883a 	mov	r3,r2
    5104:	e0bff917 	ldw	r2,-28(fp)
    5108:	10800817 	ldw	r2,32(r2)
    510c:	10810014 	ori	r2,r2,1024
    5110:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    5114:	e0bff917 	ldw	r2,-28(fp)
    5118:	10000915 	stw	zero,36(r2)
    511c:	00000a06 	br	5148 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    5120:	e0bff917 	ldw	r2,-28(fp)
    5124:	10c00917 	ldw	r3,36(r2)
    5128:	00a00034 	movhi	r2,32768
    512c:	10bfff04 	addi	r2,r2,-4
    5130:	10c00536 	bltu	r2,r3,5148 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    5134:	e0bff917 	ldw	r2,-28(fp)
    5138:	10800917 	ldw	r2,36(r2)
    513c:	10c00044 	addi	r3,r2,1
    5140:	e0bff917 	ldw	r2,-28(fp)
    5144:	10c00915 	stw	r3,36(r2)
    5148:	00800074 	movhi	r2,1
    514c:	10a6d804 	addi	r2,r2,-25760
    5150:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    5154:	e037883a 	mov	sp,fp
    5158:	df000017 	ldw	fp,0(sp)
    515c:	dec00104 	addi	sp,sp,4
    5160:	f800283a 	ret

00005164 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    5164:	defffd04 	addi	sp,sp,-12
    5168:	df000215 	stw	fp,8(sp)
    516c:	df000204 	addi	fp,sp,8
    5170:	e13ffe15 	stw	r4,-8(fp)
    5174:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    5178:	00000506 	br	5190 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    517c:	e0bfff17 	ldw	r2,-4(fp)
    5180:	1090000c 	andi	r2,r2,16384
    5184:	10000226 	beq	r2,zero,5190 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    5188:	00bffd44 	movi	r2,-11
    518c:	00000b06 	br	51bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    5190:	e0bffe17 	ldw	r2,-8(fp)
    5194:	10c00d17 	ldw	r3,52(r2)
    5198:	e0bffe17 	ldw	r2,-8(fp)
    519c:	10800c17 	ldw	r2,48(r2)
    51a0:	18800526 	beq	r3,r2,51b8 <altera_avalon_jtag_uart_close+0x54>
    51a4:	e0bffe17 	ldw	r2,-8(fp)
    51a8:	10c00917 	ldw	r3,36(r2)
    51ac:	e0bffe17 	ldw	r2,-8(fp)
    51b0:	10800117 	ldw	r2,4(r2)
    51b4:	18bff136 	bltu	r3,r2,517c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    51b8:	0005883a 	mov	r2,zero
}
    51bc:	e037883a 	mov	sp,fp
    51c0:	df000017 	ldw	fp,0(sp)
    51c4:	dec00104 	addi	sp,sp,4
    51c8:	f800283a 	ret

000051cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    51cc:	defffa04 	addi	sp,sp,-24
    51d0:	df000515 	stw	fp,20(sp)
    51d4:	df000504 	addi	fp,sp,20
    51d8:	e13ffd15 	stw	r4,-12(fp)
    51dc:	e17ffe15 	stw	r5,-8(fp)
    51e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    51e4:	00bff9c4 	movi	r2,-25
    51e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    51ec:	e0bffe17 	ldw	r2,-8(fp)
    51f0:	10da8060 	cmpeqi	r3,r2,27137
    51f4:	1800031e 	bne	r3,zero,5204 <altera_avalon_jtag_uart_ioctl+0x38>
    51f8:	109a80a0 	cmpeqi	r2,r2,27138
    51fc:	1000191e 	bne	r2,zero,5264 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    5200:	00002806 	br	52a4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    5204:	e0bffd17 	ldw	r2,-12(fp)
    5208:	10c00117 	ldw	r3,4(r2)
    520c:	00a00034 	movhi	r2,32768
    5210:	10bfffc4 	addi	r2,r2,-1
    5214:	18801226 	beq	r3,r2,5260 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    5218:	e0bfff17 	ldw	r2,-4(fp)
    521c:	10800017 	ldw	r2,0(r2)
    5220:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    5224:	e0bffc17 	ldw	r2,-16(fp)
    5228:	10800090 	cmplti	r2,r2,2
    522c:	1000061e 	bne	r2,zero,5248 <altera_avalon_jtag_uart_ioctl+0x7c>
    5230:	e0fffc17 	ldw	r3,-16(fp)
    5234:	00a00034 	movhi	r2,32768
    5238:	10bfffc4 	addi	r2,r2,-1
    523c:	18800226 	beq	r3,r2,5248 <altera_avalon_jtag_uart_ioctl+0x7c>
    5240:	e0bffc17 	ldw	r2,-16(fp)
    5244:	00000206 	br	5250 <altera_avalon_jtag_uart_ioctl+0x84>
    5248:	00a00034 	movhi	r2,32768
    524c:	10bfff84 	addi	r2,r2,-2
    5250:	e0fffd17 	ldw	r3,-12(fp)
    5254:	18800115 	stw	r2,4(r3)
      rc = 0;
    5258:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    525c:	00001106 	br	52a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    5260:	00001006 	br	52a4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    5264:	e0bffd17 	ldw	r2,-12(fp)
    5268:	10c00117 	ldw	r3,4(r2)
    526c:	00a00034 	movhi	r2,32768
    5270:	10bfffc4 	addi	r2,r2,-1
    5274:	18800a26 	beq	r3,r2,52a0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    5278:	e0bffd17 	ldw	r2,-12(fp)
    527c:	10c00917 	ldw	r3,36(r2)
    5280:	e0bffd17 	ldw	r2,-12(fp)
    5284:	10800117 	ldw	r2,4(r2)
    5288:	1885803a 	cmpltu	r2,r3,r2
    528c:	10c03fcc 	andi	r3,r2,255
    5290:	e0bfff17 	ldw	r2,-4(fp)
    5294:	10c00015 	stw	r3,0(r2)
      rc = 0;
    5298:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    529c:	00000006 	br	52a0 <altera_avalon_jtag_uart_ioctl+0xd4>
    52a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    52a4:	e0bffb17 	ldw	r2,-20(fp)
}
    52a8:	e037883a 	mov	sp,fp
    52ac:	df000017 	ldw	fp,0(sp)
    52b0:	dec00104 	addi	sp,sp,4
    52b4:	f800283a 	ret

000052b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    52b8:	defff304 	addi	sp,sp,-52
    52bc:	dfc00c15 	stw	ra,48(sp)
    52c0:	df000b15 	stw	fp,44(sp)
    52c4:	df000b04 	addi	fp,sp,44
    52c8:	e13ffc15 	stw	r4,-16(fp)
    52cc:	e17ffd15 	stw	r5,-12(fp)
    52d0:	e1bffe15 	stw	r6,-8(fp)
    52d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    52d8:	e0bffd17 	ldw	r2,-12(fp)
    52dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    52e0:	00004906 	br	5408 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    52e4:	e0bffc17 	ldw	r2,-16(fp)
    52e8:	10800a17 	ldw	r2,40(r2)
    52ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    52f0:	e0bffc17 	ldw	r2,-16(fp)
    52f4:	10800b17 	ldw	r2,44(r2)
    52f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    52fc:	e0fff717 	ldw	r3,-36(fp)
    5300:	e0bff817 	ldw	r2,-32(fp)
    5304:	18800536 	bltu	r3,r2,531c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    5308:	e0fff717 	ldw	r3,-36(fp)
    530c:	e0bff817 	ldw	r2,-32(fp)
    5310:	1885c83a 	sub	r2,r3,r2
    5314:	e0bff615 	stw	r2,-40(fp)
    5318:	00000406 	br	532c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    531c:	00c20004 	movi	r3,2048
    5320:	e0bff817 	ldw	r2,-32(fp)
    5324:	1885c83a 	sub	r2,r3,r2
    5328:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    532c:	e0bff617 	ldw	r2,-40(fp)
    5330:	1000011e 	bne	r2,zero,5338 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    5334:	00001d06 	br	53ac <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    5338:	e0fffe17 	ldw	r3,-8(fp)
    533c:	e0bff617 	ldw	r2,-40(fp)
    5340:	1880022e 	bgeu	r3,r2,534c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    5344:	e0bffe17 	ldw	r2,-8(fp)
    5348:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    534c:	e0bff817 	ldw	r2,-32(fp)
    5350:	10800e04 	addi	r2,r2,56
    5354:	e0fffc17 	ldw	r3,-16(fp)
    5358:	1885883a 	add	r2,r3,r2
    535c:	e13ff517 	ldw	r4,-44(fp)
    5360:	100b883a 	mov	r5,r2
    5364:	e1bff617 	ldw	r6,-40(fp)
    5368:	00018fc0 	call	18fc <memcpy>
      ptr   += n;
    536c:	e0fff517 	ldw	r3,-44(fp)
    5370:	e0bff617 	ldw	r2,-40(fp)
    5374:	1885883a 	add	r2,r3,r2
    5378:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    537c:	e0fffe17 	ldw	r3,-8(fp)
    5380:	e0bff617 	ldw	r2,-40(fp)
    5384:	1885c83a 	sub	r2,r3,r2
    5388:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    538c:	e0fff817 	ldw	r3,-32(fp)
    5390:	e0bff617 	ldw	r2,-40(fp)
    5394:	1885883a 	add	r2,r3,r2
    5398:	10c1ffcc 	andi	r3,r2,2047
    539c:	e0bffc17 	ldw	r2,-16(fp)
    53a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    53a4:	e0bffe17 	ldw	r2,-8(fp)
    53a8:	00bfce16 	blt	zero,r2,52e4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    53ac:	e0fff517 	ldw	r3,-44(fp)
    53b0:	e0bffd17 	ldw	r2,-12(fp)
    53b4:	18800126 	beq	r3,r2,53bc <altera_avalon_jtag_uart_read+0x104>
      break;
    53b8:	00001506 	br	5410 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    53bc:	e0bfff17 	ldw	r2,-4(fp)
    53c0:	1090000c 	andi	r2,r2,16384
    53c4:	10000126 	beq	r2,zero,53cc <altera_avalon_jtag_uart_read+0x114>
      break;
    53c8:	00001106 	br	5410 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    53cc:	0001883a 	nop
    53d0:	e0bffc17 	ldw	r2,-16(fp)
    53d4:	10c00a17 	ldw	r3,40(r2)
    53d8:	e0bff717 	ldw	r2,-36(fp)
    53dc:	1880051e 	bne	r3,r2,53f4 <altera_avalon_jtag_uart_read+0x13c>
    53e0:	e0bffc17 	ldw	r2,-16(fp)
    53e4:	10c00917 	ldw	r3,36(r2)
    53e8:	e0bffc17 	ldw	r2,-16(fp)
    53ec:	10800117 	ldw	r2,4(r2)
    53f0:	18bff736 	bltu	r3,r2,53d0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    53f4:	e0bffc17 	ldw	r2,-16(fp)
    53f8:	10c00a17 	ldw	r3,40(r2)
    53fc:	e0bff717 	ldw	r2,-36(fp)
    5400:	1880011e 	bne	r3,r2,5408 <altera_avalon_jtag_uart_read+0x150>
      break;
    5404:	00000206 	br	5410 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    5408:	e0bffe17 	ldw	r2,-8(fp)
    540c:	00bfb516 	blt	zero,r2,52e4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    5410:	e0fff517 	ldw	r3,-44(fp)
    5414:	e0bffd17 	ldw	r2,-12(fp)
    5418:	18801826 	beq	r3,r2,547c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    541c:	0005303a 	rdctl	r2,status
    5420:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5424:	e0fffa17 	ldw	r3,-24(fp)
    5428:	00bfff84 	movi	r2,-2
    542c:	1884703a 	and	r2,r3,r2
    5430:	1001703a 	wrctl	status,r2
  
  return context;
    5434:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    5438:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    543c:	e0bffc17 	ldw	r2,-16(fp)
    5440:	10800817 	ldw	r2,32(r2)
    5444:	10c00054 	ori	r3,r2,1
    5448:	e0bffc17 	ldw	r2,-16(fp)
    544c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5450:	e0bffc17 	ldw	r2,-16(fp)
    5454:	10800017 	ldw	r2,0(r2)
    5458:	10800104 	addi	r2,r2,4
    545c:	1007883a 	mov	r3,r2
    5460:	e0bffc17 	ldw	r2,-16(fp)
    5464:	10800817 	ldw	r2,32(r2)
    5468:	18800035 	stwio	r2,0(r3)
    546c:	e0bff917 	ldw	r2,-28(fp)
    5470:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5474:	e0bffb17 	ldw	r2,-20(fp)
    5478:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    547c:	e0fff517 	ldw	r3,-44(fp)
    5480:	e0bffd17 	ldw	r2,-12(fp)
    5484:	18800426 	beq	r3,r2,5498 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    5488:	e0fff517 	ldw	r3,-44(fp)
    548c:	e0bffd17 	ldw	r2,-12(fp)
    5490:	1885c83a 	sub	r2,r3,r2
    5494:	00000606 	br	54b0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    5498:	e0bfff17 	ldw	r2,-4(fp)
    549c:	1090000c 	andi	r2,r2,16384
    54a0:	10000226 	beq	r2,zero,54ac <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    54a4:	00bffd44 	movi	r2,-11
    54a8:	00000106 	br	54b0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    54ac:	00bffec4 	movi	r2,-5
}
    54b0:	e037883a 	mov	sp,fp
    54b4:	dfc00117 	ldw	ra,4(sp)
    54b8:	df000017 	ldw	fp,0(sp)
    54bc:	dec00204 	addi	sp,sp,8
    54c0:	f800283a 	ret

000054c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    54c4:	defff304 	addi	sp,sp,-52
    54c8:	dfc00c15 	stw	ra,48(sp)
    54cc:	df000b15 	stw	fp,44(sp)
    54d0:	df000b04 	addi	fp,sp,44
    54d4:	e13ffc15 	stw	r4,-16(fp)
    54d8:	e17ffd15 	stw	r5,-12(fp)
    54dc:	e1bffe15 	stw	r6,-8(fp)
    54e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    54e4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    54e8:	e0bffd17 	ldw	r2,-12(fp)
    54ec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    54f0:	00003806 	br	55d4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    54f4:	e0bffc17 	ldw	r2,-16(fp)
    54f8:	10800c17 	ldw	r2,48(r2)
    54fc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    5500:	e0bffc17 	ldw	r2,-16(fp)
    5504:	10800d17 	ldw	r2,52(r2)
    5508:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    550c:	e0fff817 	ldw	r3,-32(fp)
    5510:	e0bff517 	ldw	r2,-44(fp)
    5514:	1880062e 	bgeu	r3,r2,5530 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    5518:	e0fff517 	ldw	r3,-44(fp)
    551c:	e0bff817 	ldw	r2,-32(fp)
    5520:	1885c83a 	sub	r2,r3,r2
    5524:	10bfffc4 	addi	r2,r2,-1
    5528:	e0bff615 	stw	r2,-40(fp)
    552c:	00000b06 	br	555c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    5530:	e0bff517 	ldw	r2,-44(fp)
    5534:	10000526 	beq	r2,zero,554c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    5538:	00c20004 	movi	r3,2048
    553c:	e0bff817 	ldw	r2,-32(fp)
    5540:	1885c83a 	sub	r2,r3,r2
    5544:	e0bff615 	stw	r2,-40(fp)
    5548:	00000406 	br	555c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    554c:	00c1ffc4 	movi	r3,2047
    5550:	e0bff817 	ldw	r2,-32(fp)
    5554:	1885c83a 	sub	r2,r3,r2
    5558:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    555c:	e0bff617 	ldw	r2,-40(fp)
    5560:	1000011e 	bne	r2,zero,5568 <altera_avalon_jtag_uart_write+0xa4>
        break;
    5564:	00001d06 	br	55dc <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    5568:	e0fffe17 	ldw	r3,-8(fp)
    556c:	e0bff617 	ldw	r2,-40(fp)
    5570:	1880022e 	bgeu	r3,r2,557c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    5574:	e0bffe17 	ldw	r2,-8(fp)
    5578:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    557c:	e0bff817 	ldw	r2,-32(fp)
    5580:	10820e04 	addi	r2,r2,2104
    5584:	e0fffc17 	ldw	r3,-16(fp)
    5588:	1885883a 	add	r2,r3,r2
    558c:	1009883a 	mov	r4,r2
    5590:	e17ffd17 	ldw	r5,-12(fp)
    5594:	e1bff617 	ldw	r6,-40(fp)
    5598:	00018fc0 	call	18fc <memcpy>
      ptr   += n;
    559c:	e0fffd17 	ldw	r3,-12(fp)
    55a0:	e0bff617 	ldw	r2,-40(fp)
    55a4:	1885883a 	add	r2,r3,r2
    55a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    55ac:	e0fffe17 	ldw	r3,-8(fp)
    55b0:	e0bff617 	ldw	r2,-40(fp)
    55b4:	1885c83a 	sub	r2,r3,r2
    55b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    55bc:	e0fff817 	ldw	r3,-32(fp)
    55c0:	e0bff617 	ldw	r2,-40(fp)
    55c4:	1885883a 	add	r2,r3,r2
    55c8:	10c1ffcc 	andi	r3,r2,2047
    55cc:	e0bffc17 	ldw	r2,-16(fp)
    55d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    55d4:	e0bffe17 	ldw	r2,-8(fp)
    55d8:	00bfc616 	blt	zero,r2,54f4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55dc:	0005303a 	rdctl	r2,status
    55e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55e4:	e0fffa17 	ldw	r3,-24(fp)
    55e8:	00bfff84 	movi	r2,-2
    55ec:	1884703a 	and	r2,r3,r2
    55f0:	1001703a 	wrctl	status,r2
  
  return context;
    55f4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    55f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    55fc:	e0bffc17 	ldw	r2,-16(fp)
    5600:	10800817 	ldw	r2,32(r2)
    5604:	10c00094 	ori	r3,r2,2
    5608:	e0bffc17 	ldw	r2,-16(fp)
    560c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5610:	e0bffc17 	ldw	r2,-16(fp)
    5614:	10800017 	ldw	r2,0(r2)
    5618:	10800104 	addi	r2,r2,4
    561c:	1007883a 	mov	r3,r2
    5620:	e0bffc17 	ldw	r2,-16(fp)
    5624:	10800817 	ldw	r2,32(r2)
    5628:	18800035 	stwio	r2,0(r3)
    562c:	e0bff917 	ldw	r2,-28(fp)
    5630:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5634:	e0bffb17 	ldw	r2,-20(fp)
    5638:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    563c:	e0bffe17 	ldw	r2,-8(fp)
    5640:	0080120e 	bge	zero,r2,568c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    5644:	e0bfff17 	ldw	r2,-4(fp)
    5648:	1090000c 	andi	r2,r2,16384
    564c:	10000126 	beq	r2,zero,5654 <altera_avalon_jtag_uart_write+0x190>
        break;
    5650:	00001006 	br	5694 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    5654:	0001883a 	nop
    5658:	e0bffc17 	ldw	r2,-16(fp)
    565c:	10c00d17 	ldw	r3,52(r2)
    5660:	e0bff517 	ldw	r2,-44(fp)
    5664:	1880051e 	bne	r3,r2,567c <altera_avalon_jtag_uart_write+0x1b8>
    5668:	e0bffc17 	ldw	r2,-16(fp)
    566c:	10c00917 	ldw	r3,36(r2)
    5670:	e0bffc17 	ldw	r2,-16(fp)
    5674:	10800117 	ldw	r2,4(r2)
    5678:	18bff736 	bltu	r3,r2,5658 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    567c:	e0bffc17 	ldw	r2,-16(fp)
    5680:	10800917 	ldw	r2,36(r2)
    5684:	10000126 	beq	r2,zero,568c <altera_avalon_jtag_uart_write+0x1c8>
         break;
    5688:	00000206 	br	5694 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    568c:	e0bffe17 	ldw	r2,-8(fp)
    5690:	00bf9716 	blt	zero,r2,54f0 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    5694:	e0fffd17 	ldw	r3,-12(fp)
    5698:	e0bff717 	ldw	r2,-36(fp)
    569c:	18800426 	beq	r3,r2,56b0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    56a0:	e0fffd17 	ldw	r3,-12(fp)
    56a4:	e0bff717 	ldw	r2,-36(fp)
    56a8:	1885c83a 	sub	r2,r3,r2
    56ac:	00000606 	br	56c8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    56b0:	e0bfff17 	ldw	r2,-4(fp)
    56b4:	1090000c 	andi	r2,r2,16384
    56b8:	10000226 	beq	r2,zero,56c4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    56bc:	00bffd44 	movi	r2,-11
    56c0:	00000106 	br	56c8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    56c4:	00bffec4 	movi	r2,-5
}
    56c8:	e037883a 	mov	sp,fp
    56cc:	dfc00117 	ldw	ra,4(sp)
    56d0:	df000017 	ldw	fp,0(sp)
    56d4:	dec00204 	addi	sp,sp,8
    56d8:	f800283a 	ret

000056dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    56dc:	defffa04 	addi	sp,sp,-24
    56e0:	dfc00515 	stw	ra,20(sp)
    56e4:	df000415 	stw	fp,16(sp)
    56e8:	df000404 	addi	fp,sp,16
    56ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    56f0:	0007883a 	mov	r3,zero
    56f4:	e0bfff17 	ldw	r2,-4(fp)
    56f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    56fc:	e0bfff17 	ldw	r2,-4(fp)
    5700:	10800104 	addi	r2,r2,4
    5704:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5708:	0005303a 	rdctl	r2,status
    570c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5710:	e0fffd17 	ldw	r3,-12(fp)
    5714:	00bfff84 	movi	r2,-2
    5718:	1884703a 	and	r2,r3,r2
    571c:	1001703a 	wrctl	status,r2
  
  return context;
    5720:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    5724:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    5728:	00071fc0 	call	71fc <alt_tick>
    572c:	e0bffc17 	ldw	r2,-16(fp)
    5730:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5734:	e0bffe17 	ldw	r2,-8(fp)
    5738:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    573c:	e037883a 	mov	sp,fp
    5740:	dfc00117 	ldw	ra,4(sp)
    5744:	df000017 	ldw	fp,0(sp)
    5748:	dec00204 	addi	sp,sp,8
    574c:	f800283a 	ret

00005750 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    5750:	defff804 	addi	sp,sp,-32
    5754:	dfc00715 	stw	ra,28(sp)
    5758:	df000615 	stw	fp,24(sp)
    575c:	df000604 	addi	fp,sp,24
    5760:	e13ffc15 	stw	r4,-16(fp)
    5764:	e17ffd15 	stw	r5,-12(fp)
    5768:	e1bffe15 	stw	r6,-8(fp)
    576c:	e1ffff15 	stw	r7,-4(fp)
    5770:	e0bfff17 	ldw	r2,-4(fp)
    5774:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    5778:	00800074 	movhi	r2,1
    577c:	10a6d804 	addi	r2,r2,-25760
    5780:	10800017 	ldw	r2,0(r2)
    5784:	1000041e 	bne	r2,zero,5798 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    5788:	00800074 	movhi	r2,1
    578c:	10a6d804 	addi	r2,r2,-25760
    5790:	e0fffb17 	ldw	r3,-20(fp)
    5794:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    5798:	e0bffc17 	ldw	r2,-16(fp)
    579c:	10800104 	addi	r2,r2,4
    57a0:	00c001c4 	movi	r3,7
    57a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    57a8:	d8000015 	stw	zero,0(sp)
    57ac:	e13ffd17 	ldw	r4,-12(fp)
    57b0:	e17ffe17 	ldw	r5,-8(fp)
    57b4:	01800034 	movhi	r6,0
    57b8:	3195b704 	addi	r6,r6,22236
    57bc:	e1fffc17 	ldw	r7,-16(fp)
    57c0:	0006a980 	call	6a98 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    57c4:	e037883a 	mov	sp,fp
    57c8:	dfc00117 	ldw	ra,4(sp)
    57cc:	df000017 	ldw	fp,0(sp)
    57d0:	dec00204 	addi	sp,sp,8
    57d4:	f800283a 	ret

000057d8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    57d8:	defffa04 	addi	sp,sp,-24
    57dc:	dfc00515 	stw	ra,20(sp)
    57e0:	df000415 	stw	fp,16(sp)
    57e4:	df000404 	addi	fp,sp,16
    57e8:	e13ffd15 	stw	r4,-12(fp)
    57ec:	e17ffe15 	stw	r5,-8(fp)
    57f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    57f4:	e0bffd17 	ldw	r2,-12(fp)
    57f8:	10800017 	ldw	r2,0(r2)
    57fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    5800:	e0bffc17 	ldw	r2,-16(fp)
    5804:	10c00a04 	addi	r3,r2,40
    5808:	e0bffd17 	ldw	r2,-12(fp)
    580c:	10800217 	ldw	r2,8(r2)
    5810:	1809883a 	mov	r4,r3
    5814:	e17ffe17 	ldw	r5,-8(fp)
    5818:	e1bfff17 	ldw	r6,-4(fp)
    581c:	100f883a 	mov	r7,r2
    5820:	0005cf00 	call	5cf0 <altera_avalon_uart_read>
      fd->fd_flags);
}
    5824:	e037883a 	mov	sp,fp
    5828:	dfc00117 	ldw	ra,4(sp)
    582c:	df000017 	ldw	fp,0(sp)
    5830:	dec00204 	addi	sp,sp,8
    5834:	f800283a 	ret

00005838 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5838:	defffa04 	addi	sp,sp,-24
    583c:	dfc00515 	stw	ra,20(sp)
    5840:	df000415 	stw	fp,16(sp)
    5844:	df000404 	addi	fp,sp,16
    5848:	e13ffd15 	stw	r4,-12(fp)
    584c:	e17ffe15 	stw	r5,-8(fp)
    5850:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    5854:	e0bffd17 	ldw	r2,-12(fp)
    5858:	10800017 	ldw	r2,0(r2)
    585c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    5860:	e0bffc17 	ldw	r2,-16(fp)
    5864:	10c00a04 	addi	r3,r2,40
    5868:	e0bffd17 	ldw	r2,-12(fp)
    586c:	10800217 	ldw	r2,8(r2)
    5870:	1809883a 	mov	r4,r3
    5874:	e17ffe17 	ldw	r5,-8(fp)
    5878:	e1bfff17 	ldw	r6,-4(fp)
    587c:	100f883a 	mov	r7,r2
    5880:	0005f1c0 	call	5f1c <altera_avalon_uart_write>
      fd->fd_flags);
}
    5884:	e037883a 	mov	sp,fp
    5888:	dfc00117 	ldw	ra,4(sp)
    588c:	df000017 	ldw	fp,0(sp)
    5890:	dec00204 	addi	sp,sp,8
    5894:	f800283a 	ret

00005898 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    5898:	defffc04 	addi	sp,sp,-16
    589c:	dfc00315 	stw	ra,12(sp)
    58a0:	df000215 	stw	fp,8(sp)
    58a4:	df000204 	addi	fp,sp,8
    58a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    58ac:	e0bfff17 	ldw	r2,-4(fp)
    58b0:	10800017 	ldw	r2,0(r2)
    58b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    58b8:	e0bffe17 	ldw	r2,-8(fp)
    58bc:	10c00a04 	addi	r3,r2,40
    58c0:	e0bfff17 	ldw	r2,-4(fp)
    58c4:	10800217 	ldw	r2,8(r2)
    58c8:	1809883a 	mov	r4,r3
    58cc:	100b883a 	mov	r5,r2
    58d0:	0005c4c0 	call	5c4c <altera_avalon_uart_close>
}
    58d4:	e037883a 	mov	sp,fp
    58d8:	dfc00117 	ldw	ra,4(sp)
    58dc:	df000017 	ldw	fp,0(sp)
    58e0:	dec00204 	addi	sp,sp,8
    58e4:	f800283a 	ret

000058e8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    58e8:	defff804 	addi	sp,sp,-32
    58ec:	dfc00715 	stw	ra,28(sp)
    58f0:	df000615 	stw	fp,24(sp)
    58f4:	df000604 	addi	fp,sp,24
    58f8:	e13ffd15 	stw	r4,-12(fp)
    58fc:	e17ffe15 	stw	r5,-8(fp)
    5900:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
    5904:	e0bffd17 	ldw	r2,-12(fp)
    5908:	10800017 	ldw	r2,0(r2)
    590c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    5910:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    5914:	1000041e 	bne	r2,zero,5928 <altera_avalon_uart_init+0x40>
    5918:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    591c:	1000021e 	bne	r2,zero,5928 <altera_avalon_uart_init+0x40>
    5920:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    5924:	10000226 	beq	r2,zero,5930 <altera_avalon_uart_init+0x48>
    5928:	00800044 	movi	r2,1
    592c:	00000106 	br	5934 <altera_avalon_uart_init+0x4c>
    5930:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    5934:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    5938:	e0bffc17 	ldw	r2,-16(fp)
    593c:	10000f1e 	bne	r2,zero,597c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    5940:	e0bffd17 	ldw	r2,-12(fp)
    5944:	00c32004 	movi	r3,3200
    5948:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    594c:	e0bffb17 	ldw	r2,-20(fp)
    5950:	10800304 	addi	r2,r2,12
    5954:	e0fffd17 	ldw	r3,-12(fp)
    5958:	18c00117 	ldw	r3,4(r3)
    595c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    5960:	d8000015 	stw	zero,0(sp)
    5964:	e13ffe17 	ldw	r4,-8(fp)
    5968:	e17fff17 	ldw	r5,-4(fp)
    596c:	01800034 	movhi	r6,0
    5970:	31966404 	addi	r6,r6,22928
    5974:	e1fffd17 	ldw	r7,-12(fp)
    5978:	0006a980 	call	6a98 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    597c:	e037883a 	mov	sp,fp
    5980:	dfc00117 	ldw	ra,4(sp)
    5984:	df000017 	ldw	fp,0(sp)
    5988:	dec00204 	addi	sp,sp,8
    598c:	f800283a 	ret

00005990 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    5990:	defffa04 	addi	sp,sp,-24
    5994:	dfc00515 	stw	ra,20(sp)
    5998:	df000415 	stw	fp,16(sp)
    599c:	df000404 	addi	fp,sp,16
    59a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    59a4:	e0bfff17 	ldw	r2,-4(fp)
    59a8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
    59ac:	e0bffc17 	ldw	r2,-16(fp)
    59b0:	10800017 	ldw	r2,0(r2)
    59b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    59b8:	e0bffd17 	ldw	r2,-12(fp)
    59bc:	10800204 	addi	r2,r2,8
    59c0:	10800037 	ldwio	r2,0(r2)
    59c4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    59c8:	e0bffd17 	ldw	r2,-12(fp)
    59cc:	10800204 	addi	r2,r2,8
    59d0:	0007883a 	mov	r3,zero
    59d4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    59d8:	e0bffd17 	ldw	r2,-12(fp)
    59dc:	10800204 	addi	r2,r2,8
    59e0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    59e4:	e0bffe17 	ldw	r2,-8(fp)
    59e8:	1080200c 	andi	r2,r2,128
    59ec:	10000326 	beq	r2,zero,59fc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    59f0:	e13ffc17 	ldw	r4,-16(fp)
    59f4:	e17ffe17 	ldw	r5,-8(fp)
    59f8:	0005a280 	call	5a28 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    59fc:	e0bffe17 	ldw	r2,-8(fp)
    5a00:	1081100c 	andi	r2,r2,1088
    5a04:	10000326 	beq	r2,zero,5a14 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    5a08:	e13ffc17 	ldw	r4,-16(fp)
    5a0c:	e17ffe17 	ldw	r5,-8(fp)
    5a10:	0005b080 	call	5b08 <altera_avalon_uart_txirq>
  }
  

}
    5a14:	e037883a 	mov	sp,fp
    5a18:	dfc00117 	ldw	ra,4(sp)
    5a1c:	df000017 	ldw	fp,0(sp)
    5a20:	dec00204 	addi	sp,sp,8
    5a24:	f800283a 	ret

00005a28 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    5a28:	defffc04 	addi	sp,sp,-16
    5a2c:	df000315 	stw	fp,12(sp)
    5a30:	df000304 	addi	fp,sp,12
    5a34:	e13ffe15 	stw	r4,-8(fp)
    5a38:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    5a3c:	e0bfff17 	ldw	r2,-4(fp)
    5a40:	108000cc 	andi	r2,r2,3
    5a44:	10000126 	beq	r2,zero,5a4c <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
    5a48:	00002b06 	br	5af8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    5a4c:	e0bffe17 	ldw	r2,-8(fp)
    5a50:	10800317 	ldw	r2,12(r2)
    5a54:	e0bffe17 	ldw	r2,-8(fp)
    5a58:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    5a5c:	e0bffe17 	ldw	r2,-8(fp)
    5a60:	10800317 	ldw	r2,12(r2)
    5a64:	10800044 	addi	r2,r2,1
    5a68:	10800fcc 	andi	r2,r2,63
    5a6c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    5a70:	e0bffe17 	ldw	r2,-8(fp)
    5a74:	10800317 	ldw	r2,12(r2)
    5a78:	e0fffe17 	ldw	r3,-8(fp)
    5a7c:	18c00017 	ldw	r3,0(r3)
    5a80:	18c00037 	ldwio	r3,0(r3)
    5a84:	1809883a 	mov	r4,r3
    5a88:	e0fffe17 	ldw	r3,-8(fp)
    5a8c:	1885883a 	add	r2,r3,r2
    5a90:	10800704 	addi	r2,r2,28
    5a94:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
    5a98:	e0bffe17 	ldw	r2,-8(fp)
    5a9c:	e0fffd17 	ldw	r3,-12(fp)
    5aa0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    5aa4:	e0bffe17 	ldw	r2,-8(fp)
    5aa8:	10800317 	ldw	r2,12(r2)
    5aac:	10800044 	addi	r2,r2,1
    5ab0:	10800fcc 	andi	r2,r2,63
    5ab4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    5ab8:	e0bffe17 	ldw	r2,-8(fp)
    5abc:	10c00217 	ldw	r3,8(r2)
    5ac0:	e0bffd17 	ldw	r2,-12(fp)
    5ac4:	18800c1e 	bne	r3,r2,5af8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    5ac8:	e0bffe17 	ldw	r2,-8(fp)
    5acc:	10c00117 	ldw	r3,4(r2)
    5ad0:	00bfdfc4 	movi	r2,-129
    5ad4:	1886703a 	and	r3,r3,r2
    5ad8:	e0bffe17 	ldw	r2,-8(fp)
    5adc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    5ae0:	e0bffe17 	ldw	r2,-8(fp)
    5ae4:	10800017 	ldw	r2,0(r2)
    5ae8:	10800304 	addi	r2,r2,12
    5aec:	e0fffe17 	ldw	r3,-8(fp)
    5af0:	18c00117 	ldw	r3,4(r3)
    5af4:	10c00035 	stwio	r3,0(r2)
  }   
}
    5af8:	e037883a 	mov	sp,fp
    5afc:	df000017 	ldw	fp,0(sp)
    5b00:	dec00104 	addi	sp,sp,4
    5b04:	f800283a 	ret

00005b08 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    5b08:	defffb04 	addi	sp,sp,-20
    5b0c:	df000415 	stw	fp,16(sp)
    5b10:	df000404 	addi	fp,sp,16
    5b14:	e13ffc15 	stw	r4,-16(fp)
    5b18:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    5b1c:	e0bffc17 	ldw	r2,-16(fp)
    5b20:	10c00417 	ldw	r3,16(r2)
    5b24:	e0bffc17 	ldw	r2,-16(fp)
    5b28:	10800517 	ldw	r2,20(r2)
    5b2c:	18803226 	beq	r3,r2,5bf8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    5b30:	e0bffc17 	ldw	r2,-16(fp)
    5b34:	10800617 	ldw	r2,24(r2)
    5b38:	1080008c 	andi	r2,r2,2
    5b3c:	10000326 	beq	r2,zero,5b4c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    5b40:	e0bffd17 	ldw	r2,-12(fp)
    5b44:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    5b48:	10001d26 	beq	r2,zero,5bc0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    5b4c:	e0bffc17 	ldw	r2,-16(fp)
    5b50:	10800417 	ldw	r2,16(r2)
    5b54:	e0bffc17 	ldw	r2,-16(fp)
    5b58:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    5b5c:	e0bffc17 	ldw	r2,-16(fp)
    5b60:	10800017 	ldw	r2,0(r2)
    5b64:	10800104 	addi	r2,r2,4
    5b68:	e0fffc17 	ldw	r3,-16(fp)
    5b6c:	18c00417 	ldw	r3,16(r3)
    5b70:	e13ffc17 	ldw	r4,-16(fp)
    5b74:	20c7883a 	add	r3,r4,r3
    5b78:	18c01704 	addi	r3,r3,92
    5b7c:	18c00003 	ldbu	r3,0(r3)
    5b80:	18c03fcc 	andi	r3,r3,255
    5b84:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    5b88:	e0bffc17 	ldw	r2,-16(fp)
    5b8c:	10800417 	ldw	r2,16(r2)
    5b90:	10800044 	addi	r2,r2,1
    5b94:	e0fffc17 	ldw	r3,-16(fp)
    5b98:	18800415 	stw	r2,16(r3)
    5b9c:	10c00fcc 	andi	r3,r2,63
    5ba0:	e0bffc17 	ldw	r2,-16(fp)
    5ba4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    5ba8:	e0bffc17 	ldw	r2,-16(fp)
    5bac:	10800117 	ldw	r2,4(r2)
    5bb0:	10c01014 	ori	r3,r2,64
    5bb4:	e0bffc17 	ldw	r2,-16(fp)
    5bb8:	10c00115 	stw	r3,4(r2)
    5bbc:	00000e06 	br	5bf8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    5bc0:	e0bffc17 	ldw	r2,-16(fp)
    5bc4:	10800017 	ldw	r2,0(r2)
    5bc8:	10800204 	addi	r2,r2,8
    5bcc:	10800037 	ldwio	r2,0(r2)
    5bd0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    5bd4:	e0bffd17 	ldw	r2,-12(fp)
    5bd8:	1082000c 	andi	r2,r2,2048
    5bdc:	1000061e 	bne	r2,zero,5bf8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    5be0:	e0bffc17 	ldw	r2,-16(fp)
    5be4:	10c00117 	ldw	r3,4(r2)
    5be8:	00bfefc4 	movi	r2,-65
    5bec:	1886703a 	and	r3,r3,r2
    5bf0:	e0bffc17 	ldw	r2,-16(fp)
    5bf4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    5bf8:	e0bffc17 	ldw	r2,-16(fp)
    5bfc:	10c00417 	ldw	r3,16(r2)
    5c00:	e0bffc17 	ldw	r2,-16(fp)
    5c04:	10800517 	ldw	r2,20(r2)
    5c08:	1880061e 	bne	r3,r2,5c24 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    5c0c:	e0bffc17 	ldw	r2,-16(fp)
    5c10:	10c00117 	ldw	r3,4(r2)
    5c14:	00beefc4 	movi	r2,-1089
    5c18:	1886703a 	and	r3,r3,r2
    5c1c:	e0bffc17 	ldw	r2,-16(fp)
    5c20:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    5c24:	e0bffc17 	ldw	r2,-16(fp)
    5c28:	10800017 	ldw	r2,0(r2)
    5c2c:	10800304 	addi	r2,r2,12
    5c30:	e0fffc17 	ldw	r3,-16(fp)
    5c34:	18c00117 	ldw	r3,4(r3)
    5c38:	10c00035 	stwio	r3,0(r2)
}
    5c3c:	e037883a 	mov	sp,fp
    5c40:	df000017 	ldw	fp,0(sp)
    5c44:	dec00104 	addi	sp,sp,4
    5c48:	f800283a 	ret

00005c4c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    5c4c:	defffd04 	addi	sp,sp,-12
    5c50:	df000215 	stw	fp,8(sp)
    5c54:	df000204 	addi	fp,sp,8
    5c58:	e13ffe15 	stw	r4,-8(fp)
    5c5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    5c60:	00000506 	br	5c78 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    5c64:	e0bfff17 	ldw	r2,-4(fp)
    5c68:	1090000c 	andi	r2,r2,16384
    5c6c:	10000226 	beq	r2,zero,5c78 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
    5c70:	00bffd44 	movi	r2,-11
    5c74:	00000606 	br	5c90 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    5c78:	e0bffe17 	ldw	r2,-8(fp)
    5c7c:	10c00417 	ldw	r3,16(r2)
    5c80:	e0bffe17 	ldw	r2,-8(fp)
    5c84:	10800517 	ldw	r2,20(r2)
    5c88:	18bff61e 	bne	r3,r2,5c64 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    5c8c:	0005883a 	mov	r2,zero
}
    5c90:	e037883a 	mov	sp,fp
    5c94:	df000017 	ldw	fp,0(sp)
    5c98:	dec00104 	addi	sp,sp,4
    5c9c:	f800283a 	ret

00005ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5ca0:	defffe04 	addi	sp,sp,-8
    5ca4:	dfc00115 	stw	ra,4(sp)
    5ca8:	df000015 	stw	fp,0(sp)
    5cac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5cb0:	00800074 	movhi	r2,1
    5cb4:	10a6c904 	addi	r2,r2,-25820
    5cb8:	10800017 	ldw	r2,0(r2)
    5cbc:	10000526 	beq	r2,zero,5cd4 <alt_get_errno+0x34>
    5cc0:	00800074 	movhi	r2,1
    5cc4:	10a6c904 	addi	r2,r2,-25820
    5cc8:	10800017 	ldw	r2,0(r2)
    5ccc:	103ee83a 	callr	r2
    5cd0:	00000206 	br	5cdc <alt_get_errno+0x3c>
    5cd4:	00800074 	movhi	r2,1
    5cd8:	10a6d304 	addi	r2,r2,-25780
}
    5cdc:	e037883a 	mov	sp,fp
    5ce0:	dfc00117 	ldw	ra,4(sp)
    5ce4:	df000017 	ldw	fp,0(sp)
    5ce8:	dec00204 	addi	sp,sp,8
    5cec:	f800283a 	ret

00005cf0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    5cf0:	defff204 	addi	sp,sp,-56
    5cf4:	dfc00d15 	stw	ra,52(sp)
    5cf8:	df000c15 	stw	fp,48(sp)
    5cfc:	df000c04 	addi	fp,sp,48
    5d00:	e13ffc15 	stw	r4,-16(fp)
    5d04:	e17ffd15 	stw	r5,-12(fp)
    5d08:	e1bffe15 	stw	r6,-8(fp)
    5d0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
    5d10:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
    5d14:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    5d18:	e0bfff17 	ldw	r2,-4(fp)
    5d1c:	1090000c 	andi	r2,r2,16384
    5d20:	1005003a 	cmpeq	r2,r2,zero
    5d24:	10803fcc 	andi	r2,r2,255
    5d28:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    5d2c:	00001306 	br	5d7c <altera_avalon_uart_read+0x8c>
    {
      count++;
    5d30:	e0bff517 	ldw	r2,-44(fp)
    5d34:	10800044 	addi	r2,r2,1
    5d38:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    5d3c:	e0bffd17 	ldw	r2,-12(fp)
    5d40:	10c00044 	addi	r3,r2,1
    5d44:	e0fffd15 	stw	r3,-12(fp)
    5d48:	e0fffc17 	ldw	r3,-16(fp)
    5d4c:	18c00217 	ldw	r3,8(r3)
    5d50:	e13ffc17 	ldw	r4,-16(fp)
    5d54:	20c7883a 	add	r3,r4,r3
    5d58:	18c00704 	addi	r3,r3,28
    5d5c:	18c00003 	ldbu	r3,0(r3)
    5d60:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
    5d64:	e0bffc17 	ldw	r2,-16(fp)
    5d68:	10800217 	ldw	r2,8(r2)
    5d6c:	10800044 	addi	r2,r2,1
    5d70:	10c00fcc 	andi	r3,r2,63
    5d74:	e0bffc17 	ldw	r2,-16(fp)
    5d78:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    5d7c:	e0fff517 	ldw	r3,-44(fp)
    5d80:	e0bffe17 	ldw	r2,-8(fp)
    5d84:	1880050e 	bge	r3,r2,5d9c <altera_avalon_uart_read+0xac>
    5d88:	e0bffc17 	ldw	r2,-16(fp)
    5d8c:	10c00217 	ldw	r3,8(r2)
    5d90:	e0bffc17 	ldw	r2,-16(fp)
    5d94:	10800317 	ldw	r2,12(r2)
    5d98:	18bfe51e 	bne	r3,r2,5d30 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    5d9c:	e0bff517 	ldw	r2,-44(fp)
    5da0:	1000251e 	bne	r2,zero,5e38 <altera_avalon_uart_read+0x148>
    5da4:	e0bffc17 	ldw	r2,-16(fp)
    5da8:	10c00217 	ldw	r3,8(r2)
    5dac:	e0bffc17 	ldw	r2,-16(fp)
    5db0:	10800317 	ldw	r2,12(r2)
    5db4:	1880201e 	bne	r3,r2,5e38 <altera_avalon_uart_read+0x148>
    {
      if (!block)
    5db8:	e0bff617 	ldw	r2,-40(fp)
    5dbc:	1000071e 	bne	r2,zero,5ddc <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    5dc0:	0005ca00 	call	5ca0 <alt_get_errno>
    5dc4:	1007883a 	mov	r3,r2
    5dc8:	008002c4 	movi	r2,11
    5dcc:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
    5dd0:	00800044 	movi	r2,1
    5dd4:	e0bff405 	stb	r2,-48(fp)
        break;
    5dd8:	00001b06 	br	5e48 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ddc:	0005303a 	rdctl	r2,status
    5de0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5de4:	e0fff817 	ldw	r3,-32(fp)
    5de8:	00bfff84 	movi	r2,-2
    5dec:	1884703a 	and	r2,r3,r2
    5df0:	1001703a 	wrctl	status,r2
  
  return context;
    5df4:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    5df8:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    5dfc:	e0bffc17 	ldw	r2,-16(fp)
    5e00:	10800117 	ldw	r2,4(r2)
    5e04:	10c02014 	ori	r3,r2,128
    5e08:	e0bffc17 	ldw	r2,-16(fp)
    5e0c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    5e10:	e0bffc17 	ldw	r2,-16(fp)
    5e14:	10800017 	ldw	r2,0(r2)
    5e18:	10800304 	addi	r2,r2,12
    5e1c:	e0fffc17 	ldw	r3,-16(fp)
    5e20:	18c00117 	ldw	r3,4(r3)
    5e24:	10c00035 	stwio	r3,0(r2)
    5e28:	e0bff717 	ldw	r2,-36(fp)
    5e2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e30:	e0bff917 	ldw	r2,-28(fp)
    5e34:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    5e38:	e0bff517 	ldw	r2,-44(fp)
    5e3c:	1000021e 	bne	r2,zero,5e48 <altera_avalon_uart_read+0x158>
    5e40:	e0bffe17 	ldw	r2,-8(fp)
    5e44:	103fb91e 	bne	r2,zero,5d2c <altera_avalon_uart_read+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e48:	0005303a 	rdctl	r2,status
    5e4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e50:	e0fffa17 	ldw	r3,-24(fp)
    5e54:	00bfff84 	movi	r2,-2
    5e58:	1884703a 	and	r2,r3,r2
    5e5c:	1001703a 	wrctl	status,r2
  
  return context;
    5e60:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    5e64:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    5e68:	e0bffc17 	ldw	r2,-16(fp)
    5e6c:	10800117 	ldw	r2,4(r2)
    5e70:	10c02014 	ori	r3,r2,128
    5e74:	e0bffc17 	ldw	r2,-16(fp)
    5e78:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    5e7c:	e0bffc17 	ldw	r2,-16(fp)
    5e80:	10800017 	ldw	r2,0(r2)
    5e84:	10800304 	addi	r2,r2,12
    5e88:	e0fffc17 	ldw	r3,-16(fp)
    5e8c:	18c00117 	ldw	r3,4(r3)
    5e90:	10c00035 	stwio	r3,0(r2)
    5e94:	e0bff717 	ldw	r2,-36(fp)
    5e98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e9c:	e0bffb17 	ldw	r2,-20(fp)
    5ea0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    5ea4:	e0bff403 	ldbu	r2,-48(fp)
    5ea8:	10000226 	beq	r2,zero,5eb4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
    5eac:	00bffd44 	movi	r2,-11
    5eb0:	00000106 	br	5eb8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
    5eb4:	e0bff517 	ldw	r2,-44(fp)
  }
}
    5eb8:	e037883a 	mov	sp,fp
    5ebc:	dfc00117 	ldw	ra,4(sp)
    5ec0:	df000017 	ldw	fp,0(sp)
    5ec4:	dec00204 	addi	sp,sp,8
    5ec8:	f800283a 	ret

00005ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5ecc:	defffe04 	addi	sp,sp,-8
    5ed0:	dfc00115 	stw	ra,4(sp)
    5ed4:	df000015 	stw	fp,0(sp)
    5ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5edc:	00800074 	movhi	r2,1
    5ee0:	10a6c904 	addi	r2,r2,-25820
    5ee4:	10800017 	ldw	r2,0(r2)
    5ee8:	10000526 	beq	r2,zero,5f00 <alt_get_errno+0x34>
    5eec:	00800074 	movhi	r2,1
    5ef0:	10a6c904 	addi	r2,r2,-25820
    5ef4:	10800017 	ldw	r2,0(r2)
    5ef8:	103ee83a 	callr	r2
    5efc:	00000206 	br	5f08 <alt_get_errno+0x3c>
    5f00:	00800074 	movhi	r2,1
    5f04:	10a6d304 	addi	r2,r2,-25780
}
    5f08:	e037883a 	mov	sp,fp
    5f0c:	dfc00117 	ldw	ra,4(sp)
    5f10:	df000017 	ldw	fp,0(sp)
    5f14:	dec00204 	addi	sp,sp,8
    5f18:	f800283a 	ret

00005f1c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    5f1c:	defff204 	addi	sp,sp,-56
    5f20:	dfc00d15 	stw	ra,52(sp)
    5f24:	df000c15 	stw	fp,48(sp)
    5f28:	df000c04 	addi	fp,sp,48
    5f2c:	e13ffc15 	stw	r4,-16(fp)
    5f30:	e17ffd15 	stw	r5,-12(fp)
    5f34:	e1bffe15 	stw	r6,-8(fp)
    5f38:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    5f3c:	e0bffe17 	ldw	r2,-8(fp)
    5f40:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    5f44:	e0bfff17 	ldw	r2,-4(fp)
    5f48:	1090000c 	andi	r2,r2,16384
    5f4c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    5f50:	00003c06 	br	6044 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    5f54:	e0bffc17 	ldw	r2,-16(fp)
    5f58:	10800517 	ldw	r2,20(r2)
    5f5c:	10800044 	addi	r2,r2,1
    5f60:	10800fcc 	andi	r2,r2,63
    5f64:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    5f68:	e0bffc17 	ldw	r2,-16(fp)
    5f6c:	10c00417 	ldw	r3,16(r2)
    5f70:	e0bff617 	ldw	r2,-40(fp)
    5f74:	1880221e 	bne	r3,r2,6000 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
    5f78:	e0bff517 	ldw	r2,-44(fp)
    5f7c:	10000526 	beq	r2,zero,5f94 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    5f80:	0005ecc0 	call	5ecc <alt_get_errno>
    5f84:	1007883a 	mov	r3,r2
    5f88:	008002c4 	movi	r2,11
    5f8c:	18800015 	stw	r2,0(r3)
        break;
    5f90:	00002e06 	br	604c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f94:	0005303a 	rdctl	r2,status
    5f98:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f9c:	e0fff817 	ldw	r3,-32(fp)
    5fa0:	00bfff84 	movi	r2,-2
    5fa4:	1884703a 	and	r2,r3,r2
    5fa8:	1001703a 	wrctl	status,r2
  
  return context;
    5fac:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    5fb0:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    5fb4:	e0bffc17 	ldw	r2,-16(fp)
    5fb8:	10800117 	ldw	r2,4(r2)
    5fbc:	10c11014 	ori	r3,r2,1088
    5fc0:	e0bffc17 	ldw	r2,-16(fp)
    5fc4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    5fc8:	e0bffc17 	ldw	r2,-16(fp)
    5fcc:	10800017 	ldw	r2,0(r2)
    5fd0:	10800304 	addi	r2,r2,12
    5fd4:	e0fffc17 	ldw	r3,-16(fp)
    5fd8:	18c00117 	ldw	r3,4(r3)
    5fdc:	10c00035 	stwio	r3,0(r2)
    5fe0:	e0bff717 	ldw	r2,-36(fp)
    5fe4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5fe8:	e0bff917 	ldw	r2,-28(fp)
    5fec:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    5ff0:	e0bffc17 	ldw	r2,-16(fp)
    5ff4:	10c00417 	ldw	r3,16(r2)
    5ff8:	e0bff617 	ldw	r2,-40(fp)
    5ffc:	18bffc26 	beq	r3,r2,5ff0 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
    6000:	e0bff417 	ldw	r2,-48(fp)
    6004:	10bfffc4 	addi	r2,r2,-1
    6008:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    600c:	e0bffc17 	ldw	r2,-16(fp)
    6010:	10c00517 	ldw	r3,20(r2)
    6014:	e0bffd17 	ldw	r2,-12(fp)
    6018:	11000044 	addi	r4,r2,1
    601c:	e13ffd15 	stw	r4,-12(fp)
    6020:	10800003 	ldbu	r2,0(r2)
    6024:	1009883a 	mov	r4,r2
    6028:	e0bffc17 	ldw	r2,-16(fp)
    602c:	10c5883a 	add	r2,r2,r3
    6030:	10801704 	addi	r2,r2,92
    6034:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
    6038:	e0bffc17 	ldw	r2,-16(fp)
    603c:	e0fff617 	ldw	r3,-40(fp)
    6040:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    6044:	e0bff417 	ldw	r2,-48(fp)
    6048:	103fc21e 	bne	r2,zero,5f54 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    604c:	0005303a 	rdctl	r2,status
    6050:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6054:	e0fffa17 	ldw	r3,-24(fp)
    6058:	00bfff84 	movi	r2,-2
    605c:	1884703a 	and	r2,r3,r2
    6060:	1001703a 	wrctl	status,r2
  
  return context;
    6064:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    6068:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    606c:	e0bffc17 	ldw	r2,-16(fp)
    6070:	10800117 	ldw	r2,4(r2)
    6074:	10c11014 	ori	r3,r2,1088
    6078:	e0bffc17 	ldw	r2,-16(fp)
    607c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    6080:	e0bffc17 	ldw	r2,-16(fp)
    6084:	10800017 	ldw	r2,0(r2)
    6088:	10800304 	addi	r2,r2,12
    608c:	e0fffc17 	ldw	r3,-16(fp)
    6090:	18c00117 	ldw	r3,4(r3)
    6094:	10c00035 	stwio	r3,0(r2)
    6098:	e0bff717 	ldw	r2,-36(fp)
    609c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    60a0:	e0bffb17 	ldw	r2,-20(fp)
    60a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    60a8:	e0fffe17 	ldw	r3,-8(fp)
    60ac:	e0bff417 	ldw	r2,-48(fp)
    60b0:	1885c83a 	sub	r2,r3,r2
}
    60b4:	e037883a 	mov	sp,fp
    60b8:	dfc00117 	ldw	ra,4(sp)
    60bc:	df000017 	ldw	fp,0(sp)
    60c0:	dec00204 	addi	sp,sp,8
    60c4:	f800283a 	ret

000060c8 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    60c8:	defff904 	addi	sp,sp,-28
    60cc:	dfc00615 	stw	ra,24(sp)
    60d0:	df000515 	stw	fp,20(sp)
    60d4:	df000504 	addi	fp,sp,20
    60d8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    60dc:	00800144 	movi	r2,5
    60e0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    60e4:	00800044 	movi	r2,1
    60e8:	d8800015 	stw	r2,0(sp)
    60ec:	e0bffe44 	addi	r2,fp,-7
    60f0:	d8800115 	stw	r2,4(sp)
    60f4:	d8000215 	stw	zero,8(sp)
    60f8:	e13fff17 	ldw	r4,-4(fp)
    60fc:	000b883a 	mov	r5,zero
    6100:	01800044 	movi	r6,1
    6104:	e1fffe04 	addi	r7,fp,-8
    6108:	00073200 	call	7320 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    610c:	e0bffe43 	ldbu	r2,-7(fp)
}
    6110:	e037883a 	mov	sp,fp
    6114:	dfc00117 	ldw	ra,4(sp)
    6118:	df000017 	ldw	fp,0(sp)
    611c:	dec00204 	addi	sp,sp,8
    6120:	f800283a 	ret

00006124 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    6124:	defffd04 	addi	sp,sp,-12
    6128:	dfc00215 	stw	ra,8(sp)
    612c:	df000115 	stw	fp,4(sp)
    6130:	df000104 	addi	fp,sp,4
    6134:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    6138:	e13fff17 	ldw	r4,-4(fp)
    613c:	00060c80 	call	60c8 <epcs_read_status_register>
    6140:	10803fcc 	andi	r2,r2,255
    6144:	1080004c 	andi	r2,r2,1
}
    6148:	e037883a 	mov	sp,fp
    614c:	dfc00117 	ldw	ra,4(sp)
    6150:	df000017 	ldw	fp,0(sp)
    6154:	dec00204 	addi	sp,sp,8
    6158:	f800283a 	ret

0000615c <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    615c:	defffd04 	addi	sp,sp,-12
    6160:	dfc00215 	stw	ra,8(sp)
    6164:	df000115 	stw	fp,4(sp)
    6168:	df000104 	addi	fp,sp,4
    616c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    6170:	0001883a 	nop
    6174:	e13fff17 	ldw	r4,-4(fp)
    6178:	00061240 	call	6124 <epcs_test_wip>
    617c:	103ffd1e 	bne	r2,zero,6174 <epcs_await_wip_released+0x18>
  {
  }
}
    6180:	e037883a 	mov	sp,fp
    6184:	dfc00117 	ldw	ra,4(sp)
    6188:	df000017 	ldw	fp,0(sp)
    618c:	dec00204 	addi	sp,sp,8
    6190:	f800283a 	ret

00006194 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    6194:	defff604 	addi	sp,sp,-40
    6198:	dfc00915 	stw	ra,36(sp)
    619c:	df000815 	stw	fp,32(sp)
    61a0:	df000804 	addi	fp,sp,32
    61a4:	e13ffd15 	stw	r4,-12(fp)
    61a8:	e17ffe15 	stw	r5,-8(fp)
    61ac:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    61b0:	e0bfff17 	ldw	r2,-4(fp)
    61b4:	10001226 	beq	r2,zero,6200 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    61b8:	00bff604 	movi	r2,-40
    61bc:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    61c0:	e0bffe17 	ldw	r2,-8(fp)
    61c4:	1004d63a 	srli	r2,r2,24
    61c8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    61cc:	e0bffe17 	ldw	r2,-8(fp)
    61d0:	1004d43a 	srli	r2,r2,16
    61d4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    61d8:	e0bffe17 	ldw	r2,-8(fp)
    61dc:	1004d23a 	srli	r2,r2,8
    61e0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    61e4:	e0bffe17 	ldw	r2,-8(fp)
    61e8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    61ec:	00800144 	movi	r2,5
    61f0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    61f4:	e13ffd17 	ldw	r4,-12(fp)
    61f8:	000663c0 	call	663c <epcs_enter_4_bytes_mode>
    61fc:	00000c06 	br	6230 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
    6200:	00bff604 	movi	r2,-40
    6204:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    6208:	e0bffe17 	ldw	r2,-8(fp)
    620c:	1004d43a 	srli	r2,r2,16
    6210:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    6214:	e0bffe17 	ldw	r2,-8(fp)
    6218:	1004d23a 	srli	r2,r2,8
    621c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    6220:	e0bffe17 	ldw	r2,-8(fp)
    6224:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    6228:	00800104 	movi	r2,4
    622c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    6230:	e13ffd17 	ldw	r4,-12(fp)
    6234:	00063800 	call	6380 <epcs_write_enable>

  alt_avalon_spi_command(
    6238:	e0fffb03 	ldbu	r3,-20(fp)
    623c:	e0bffb44 	addi	r2,fp,-19
    6240:	d8000015 	stw	zero,0(sp)
    6244:	d8000115 	stw	zero,4(sp)
    6248:	d8000215 	stw	zero,8(sp)
    624c:	e13ffd17 	ldw	r4,-12(fp)
    6250:	000b883a 	mov	r5,zero
    6254:	180d883a 	mov	r6,r3
    6258:	100f883a 	mov	r7,r2
    625c:	00073200 	call	7320 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    6260:	e13ffd17 	ldw	r4,-12(fp)
    6264:	000615c0 	call	615c <epcs_await_wip_released>

  if(four_bytes_mode)
    6268:	e0bfff17 	ldw	r2,-4(fp)
    626c:	10000226 	beq	r2,zero,6278 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    6270:	e13ffd17 	ldw	r4,-12(fp)
    6274:	00066980 	call	6698 <epcs_exit_4_bytes_mode>
  }
}
    6278:	e037883a 	mov	sp,fp
    627c:	dfc00117 	ldw	ra,4(sp)
    6280:	df000017 	ldw	fp,0(sp)
    6284:	dec00204 	addi	sp,sp,8
    6288:	f800283a 	ret

0000628c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    628c:	defff404 	addi	sp,sp,-48
    6290:	dfc00b15 	stw	ra,44(sp)
    6294:	df000a15 	stw	fp,40(sp)
    6298:	df000a04 	addi	fp,sp,40
    629c:	e13ffc15 	stw	r4,-16(fp)
    62a0:	e17ffd15 	stw	r5,-12(fp)
    62a4:	e1bffe15 	stw	r6,-8(fp)
    62a8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    62ac:	008000c4 	movi	r2,3
    62b0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    62b4:	e0800217 	ldw	r2,8(fp)
    62b8:	10001026 	beq	r2,zero,62fc <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    62bc:	e0bffd17 	ldw	r2,-12(fp)
    62c0:	1004d63a 	srli	r2,r2,24
    62c4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    62c8:	e0bffd17 	ldw	r2,-12(fp)
    62cc:	1005d43a 	srai	r2,r2,16
    62d0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    62d4:	e0bffd17 	ldw	r2,-12(fp)
    62d8:	1005d23a 	srai	r2,r2,8
    62dc:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    62e0:	e0bffd17 	ldw	r2,-12(fp)
    62e4:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    62e8:	00800144 	movi	r2,5
    62ec:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    62f0:	e13ffc17 	ldw	r4,-16(fp)
    62f4:	000663c0 	call	663c <epcs_enter_4_bytes_mode>
    62f8:	00000a06 	br	6324 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    62fc:	e0bffd17 	ldw	r2,-12(fp)
    6300:	1005d43a 	srai	r2,r2,16
    6304:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    6308:	e0bffd17 	ldw	r2,-12(fp)
    630c:	1005d23a 	srai	r2,r2,8
    6310:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    6314:	e0bffd17 	ldw	r2,-12(fp)
    6318:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    631c:	00800104 	movi	r2,4
    6320:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    6324:	e13ffc17 	ldw	r4,-16(fp)
    6328:	000615c0 	call	615c <epcs_await_wip_released>

  alt_avalon_spi_command(
    632c:	e0bfff17 	ldw	r2,-4(fp)
    6330:	e0fffa04 	addi	r3,fp,-24
    6334:	d8800015 	stw	r2,0(sp)
    6338:	e0bffe17 	ldw	r2,-8(fp)
    633c:	d8800115 	stw	r2,4(sp)
    6340:	d8000215 	stw	zero,8(sp)
    6344:	e13ffc17 	ldw	r4,-16(fp)
    6348:	000b883a 	mov	r5,zero
    634c:	e1bff917 	ldw	r6,-28(fp)
    6350:	180f883a 	mov	r7,r3
    6354:	00073200 	call	7320 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    6358:	e0800217 	ldw	r2,8(fp)
    635c:	10000226 	beq	r2,zero,6368 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
    6360:	e13ffc17 	ldw	r4,-16(fp)
    6364:	00066980 	call	6698 <epcs_exit_4_bytes_mode>
  }

  return length;
    6368:	e0bfff17 	ldw	r2,-4(fp)
}
    636c:	e037883a 	mov	sp,fp
    6370:	dfc00117 	ldw	ra,4(sp)
    6374:	df000017 	ldw	fp,0(sp)
    6378:	dec00204 	addi	sp,sp,8
    637c:	f800283a 	ret

00006380 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    6380:	defff904 	addi	sp,sp,-28
    6384:	dfc00615 	stw	ra,24(sp)
    6388:	df000515 	stw	fp,20(sp)
    638c:	df000504 	addi	fp,sp,20
    6390:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    6394:	00800184 	movi	r2,6
    6398:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    639c:	d8000015 	stw	zero,0(sp)
    63a0:	d8000115 	stw	zero,4(sp)
    63a4:	d8000215 	stw	zero,8(sp)
    63a8:	e13fff17 	ldw	r4,-4(fp)
    63ac:	000b883a 	mov	r5,zero
    63b0:	01800044 	movi	r6,1
    63b4:	e1fffe04 	addi	r7,fp,-8
    63b8:	00073200 	call	7320 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    63bc:	e037883a 	mov	sp,fp
    63c0:	dfc00117 	ldw	ra,4(sp)
    63c4:	df000017 	ldw	fp,0(sp)
    63c8:	dec00204 	addi	sp,sp,8
    63cc:	f800283a 	ret

000063d0 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    63d0:	defff804 	addi	sp,sp,-32
    63d4:	dfc00715 	stw	ra,28(sp)
    63d8:	df000615 	stw	fp,24(sp)
    63dc:	df000604 	addi	fp,sp,24
    63e0:	e13ffe15 	stw	r4,-8(fp)
    63e4:	2805883a 	mov	r2,r5
    63e8:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    63ec:	00800044 	movi	r2,1
    63f0:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    63f4:	e0bfff03 	ldbu	r2,-4(fp)
    63f8:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    63fc:	d8000015 	stw	zero,0(sp)
    6400:	d8000115 	stw	zero,4(sp)
    6404:	d8000215 	stw	zero,8(sp)
    6408:	e13ffe17 	ldw	r4,-8(fp)
    640c:	000b883a 	mov	r5,zero
    6410:	01800084 	movi	r6,2
    6414:	e1fffd04 	addi	r7,fp,-12
    6418:	00073200 	call	7320 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    641c:	e13ffe17 	ldw	r4,-8(fp)
    6420:	000615c0 	call	615c <epcs_await_wip_released>
}
    6424:	e037883a 	mov	sp,fp
    6428:	dfc00117 	ldw	ra,4(sp)
    642c:	df000017 	ldw	fp,0(sp)
    6430:	dec00204 	addi	sp,sp,8
    6434:	f800283a 	ret

00006438 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    6438:	defff404 	addi	sp,sp,-48
    643c:	dfc00b15 	stw	ra,44(sp)
    6440:	df000a15 	stw	fp,40(sp)
    6444:	df000a04 	addi	fp,sp,40
    6448:	e13ffc15 	stw	r4,-16(fp)
    644c:	e17ffd15 	stw	r5,-12(fp)
    6450:	e1bffe15 	stw	r6,-8(fp)
    6454:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    6458:	00800084 	movi	r2,2
    645c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    6460:	e0800217 	ldw	r2,8(fp)
    6464:	10001026 	beq	r2,zero,64a8 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
    6468:	e0bffd17 	ldw	r2,-12(fp)
    646c:	1004d63a 	srli	r2,r2,24
    6470:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    6474:	e0bffd17 	ldw	r2,-12(fp)
    6478:	1005d43a 	srai	r2,r2,16
    647c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    6480:	e0bffd17 	ldw	r2,-12(fp)
    6484:	1005d23a 	srai	r2,r2,8
    6488:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    648c:	e0bffd17 	ldw	r2,-12(fp)
    6490:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    6494:	00800144 	movi	r2,5
    6498:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    649c:	e13ffc17 	ldw	r4,-16(fp)
    64a0:	000663c0 	call	663c <epcs_enter_4_bytes_mode>
    64a4:	00000a06 	br	64d0 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    64a8:	e0bffd17 	ldw	r2,-12(fp)
    64ac:	1005d43a 	srai	r2,r2,16
    64b0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    64b4:	e0bffd17 	ldw	r2,-12(fp)
    64b8:	1005d23a 	srai	r2,r2,8
    64bc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    64c0:	e0bffd17 	ldw	r2,-12(fp)
    64c4:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    64c8:	00800104 	movi	r2,4
    64cc:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    64d0:	e13ffc17 	ldw	r4,-16(fp)
    64d4:	00063800 	call	6380 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    64d8:	e0fffa04 	addi	r3,fp,-24
    64dc:	d8000015 	stw	zero,0(sp)
    64e0:	d8000115 	stw	zero,4(sp)
    64e4:	00800044 	movi	r2,1
    64e8:	d8800215 	stw	r2,8(sp)
    64ec:	e13ffc17 	ldw	r4,-16(fp)
    64f0:	000b883a 	mov	r5,zero
    64f4:	e1bff917 	ldw	r6,-28(fp)
    64f8:	180f883a 	mov	r7,r3
    64fc:	00073200 	call	7320 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    6500:	e0bfff17 	ldw	r2,-4(fp)
    6504:	d8000015 	stw	zero,0(sp)
    6508:	d8000115 	stw	zero,4(sp)
    650c:	d8000215 	stw	zero,8(sp)
    6510:	e13ffc17 	ldw	r4,-16(fp)
    6514:	000b883a 	mov	r5,zero
    6518:	100d883a 	mov	r6,r2
    651c:	e1fffe17 	ldw	r7,-8(fp)
    6520:	00073200 	call	7320 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    6524:	e13ffc17 	ldw	r4,-16(fp)
    6528:	000615c0 	call	615c <epcs_await_wip_released>

  if(four_bytes_mode)
    652c:	e0800217 	ldw	r2,8(fp)
    6530:	10000226 	beq	r2,zero,653c <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
    6534:	e13ffc17 	ldw	r4,-16(fp)
    6538:	00066980 	call	6698 <epcs_exit_4_bytes_mode>
  }

  return length;
    653c:	e0bfff17 	ldw	r2,-4(fp)
}
    6540:	e037883a 	mov	sp,fp
    6544:	dfc00117 	ldw	ra,4(sp)
    6548:	df000017 	ldw	fp,0(sp)
    654c:	dec00204 	addi	sp,sp,8
    6550:	f800283a 	ret

00006554 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    6554:	defff804 	addi	sp,sp,-32
    6558:	dfc00715 	stw	ra,28(sp)
    655c:	df000615 	stw	fp,24(sp)
    6560:	df000604 	addi	fp,sp,24
    6564:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    6568:	00bfeac4 	movi	r2,-85
    656c:	e0bffd05 	stb	r2,-12(fp)
    6570:	e03ffd45 	stb	zero,-11(fp)
    6574:	e03ffd85 	stb	zero,-10(fp)
    6578:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    657c:	00800044 	movi	r2,1
    6580:	d8800015 	stw	r2,0(sp)
    6584:	e0bffe04 	addi	r2,fp,-8
    6588:	d8800115 	stw	r2,4(sp)
    658c:	d8000215 	stw	zero,8(sp)
    6590:	e13fff17 	ldw	r4,-4(fp)
    6594:	000b883a 	mov	r5,zero
    6598:	01800104 	movi	r6,4
    659c:	e1fffd04 	addi	r7,fp,-12
    65a0:	00073200 	call	7320 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    65a4:	e0bffe03 	ldbu	r2,-8(fp)
}
    65a8:	e037883a 	mov	sp,fp
    65ac:	dfc00117 	ldw	ra,4(sp)
    65b0:	df000017 	ldw	fp,0(sp)
    65b4:	dec00204 	addi	sp,sp,8
    65b8:	f800283a 	ret

000065bc <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    65bc:	defff904 	addi	sp,sp,-28
    65c0:	dfc00615 	stw	ra,24(sp)
    65c4:	df000515 	stw	fp,20(sp)
    65c8:	df000504 	addi	fp,sp,20
    65cc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    65d0:	00bfe7c4 	movi	r2,-97
    65d4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    65d8:	008000c4 	movi	r2,3
    65dc:	d8800015 	stw	r2,0(sp)
    65e0:	e0bffe44 	addi	r2,fp,-7
    65e4:	d8800115 	stw	r2,4(sp)
    65e8:	d8000215 	stw	zero,8(sp)
    65ec:	e13fff17 	ldw	r4,-4(fp)
    65f0:	000b883a 	mov	r5,zero
    65f4:	01800044 	movi	r6,1
    65f8:	e1fffe04 	addi	r7,fp,-8
    65fc:	00073200 	call	7320 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    6600:	e0bffe43 	ldbu	r2,-7(fp)
    6604:	10803fcc 	andi	r2,r2,255
    6608:	1006943a 	slli	r3,r2,16
    660c:	e0bffe83 	ldbu	r2,-6(fp)
    6610:	10803fcc 	andi	r2,r2,255
    6614:	1004923a 	slli	r2,r2,8
    6618:	1886b03a 	or	r3,r3,r2
    661c:	e0bffec3 	ldbu	r2,-5(fp)
    6620:	10803fcc 	andi	r2,r2,255
    6624:	1884b03a 	or	r2,r3,r2
}
    6628:	e037883a 	mov	sp,fp
    662c:	dfc00117 	ldw	ra,4(sp)
    6630:	df000017 	ldw	fp,0(sp)
    6634:	dec00204 	addi	sp,sp,8
    6638:	f800283a 	ret

0000663c <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    663c:	defff904 	addi	sp,sp,-28
    6640:	dfc00615 	stw	ra,24(sp)
    6644:	df000515 	stw	fp,20(sp)
    6648:	df000504 	addi	fp,sp,20
    664c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    6650:	00bfedc4 	movi	r2,-73
    6654:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    6658:	e13fff17 	ldw	r4,-4(fp)
    665c:	00063800 	call	6380 <epcs_write_enable>

  alt_avalon_spi_command(
    6660:	d8000015 	stw	zero,0(sp)
    6664:	d8000115 	stw	zero,4(sp)
    6668:	d8000215 	stw	zero,8(sp)
    666c:	e13fff17 	ldw	r4,-4(fp)
    6670:	000b883a 	mov	r5,zero
    6674:	01800044 	movi	r6,1
    6678:	e1fffe04 	addi	r7,fp,-8
    667c:	00073200 	call	7320 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    6680:	0001883a 	nop
}
    6684:	e037883a 	mov	sp,fp
    6688:	dfc00117 	ldw	ra,4(sp)
    668c:	df000017 	ldw	fp,0(sp)
    6690:	dec00204 	addi	sp,sp,8
    6694:	f800283a 	ret

00006698 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    6698:	defff904 	addi	sp,sp,-28
    669c:	dfc00615 	stw	ra,24(sp)
    66a0:	df000515 	stw	fp,20(sp)
    66a4:	df000504 	addi	fp,sp,20
    66a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    66ac:	00bffa44 	movi	r2,-23
    66b0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    66b4:	e13fff17 	ldw	r4,-4(fp)
    66b8:	00063800 	call	6380 <epcs_write_enable>

  alt_avalon_spi_command(
    66bc:	d8000015 	stw	zero,0(sp)
    66c0:	d8000115 	stw	zero,4(sp)
    66c4:	d8000215 	stw	zero,8(sp)
    66c8:	e13fff17 	ldw	r4,-4(fp)
    66cc:	000b883a 	mov	r5,zero
    66d0:	01800044 	movi	r6,1
    66d4:	e1fffe04 	addi	r7,fp,-8
    66d8:	00073200 	call	7320 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    66dc:	0001883a 	nop
}
    66e0:	e037883a 	mov	sp,fp
    66e4:	dfc00117 	ldw	ra,4(sp)
    66e8:	df000017 	ldw	fp,0(sp)
    66ec:	dec00204 	addi	sp,sp,8
    66f0:	f800283a 	ret

000066f4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    66f4:	defff504 	addi	sp,sp,-44
    66f8:	df000a15 	stw	fp,40(sp)
    66fc:	df000a04 	addi	fp,sp,40
    6700:	e13ffc15 	stw	r4,-16(fp)
    6704:	e17ffd15 	stw	r5,-12(fp)
    6708:	e1bffe15 	stw	r6,-8(fp)
    670c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    6710:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    6714:	00800074 	movhi	r2,1
    6718:	10a6d804 	addi	r2,r2,-25760
    671c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    6720:	10003f26 	beq	r2,zero,6820 <alt_alarm_start+0x12c>
  {
    if (alarm)
    6724:	e0bffc17 	ldw	r2,-16(fp)
    6728:	10003b26 	beq	r2,zero,6818 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    672c:	e0bffc17 	ldw	r2,-16(fp)
    6730:	e0fffe17 	ldw	r3,-8(fp)
    6734:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    6738:	e0bffc17 	ldw	r2,-16(fp)
    673c:	e0ffff17 	ldw	r3,-4(fp)
    6740:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6744:	0005303a 	rdctl	r2,status
    6748:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    674c:	e0fff817 	ldw	r3,-32(fp)
    6750:	00bfff84 	movi	r2,-2
    6754:	1884703a 	and	r2,r3,r2
    6758:	1001703a 	wrctl	status,r2
  
  return context;
    675c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    6760:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    6764:	00800074 	movhi	r2,1
    6768:	10a6d904 	addi	r2,r2,-25756
    676c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    6770:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    6774:	e0fffd17 	ldw	r3,-12(fp)
    6778:	e0bff617 	ldw	r2,-40(fp)
    677c:	1885883a 	add	r2,r3,r2
    6780:	10c00044 	addi	r3,r2,1
    6784:	e0bffc17 	ldw	r2,-16(fp)
    6788:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    678c:	e0bffc17 	ldw	r2,-16(fp)
    6790:	10c00217 	ldw	r3,8(r2)
    6794:	e0bff617 	ldw	r2,-40(fp)
    6798:	1880042e 	bgeu	r3,r2,67ac <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    679c:	e0bffc17 	ldw	r2,-16(fp)
    67a0:	00c00044 	movi	r3,1
    67a4:	10c00405 	stb	r3,16(r2)
    67a8:	00000206 	br	67b4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    67ac:	e0bffc17 	ldw	r2,-16(fp)
    67b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    67b4:	e0fffc17 	ldw	r3,-16(fp)
    67b8:	00800074 	movhi	r2,1
    67bc:	10a6ce04 	addi	r2,r2,-25800
    67c0:	e0bff915 	stw	r2,-28(fp)
    67c4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    67c8:	e0bffa17 	ldw	r2,-24(fp)
    67cc:	e0fff917 	ldw	r3,-28(fp)
    67d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    67d4:	e0bff917 	ldw	r2,-28(fp)
    67d8:	10c00017 	ldw	r3,0(r2)
    67dc:	e0bffa17 	ldw	r2,-24(fp)
    67e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    67e4:	e0bff917 	ldw	r2,-28(fp)
    67e8:	10800017 	ldw	r2,0(r2)
    67ec:	e0fffa17 	ldw	r3,-24(fp)
    67f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    67f4:	e0bff917 	ldw	r2,-28(fp)
    67f8:	e0fffa17 	ldw	r3,-24(fp)
    67fc:	10c00015 	stw	r3,0(r2)
    6800:	e0bff717 	ldw	r2,-36(fp)
    6804:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6808:	e0bffb17 	ldw	r2,-20(fp)
    680c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    6810:	0005883a 	mov	r2,zero
    6814:	00000306 	br	6824 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    6818:	00bffa84 	movi	r2,-22
    681c:	00000106 	br	6824 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    6820:	00bfde84 	movi	r2,-134
  }
}
    6824:	e037883a 	mov	sp,fp
    6828:	df000017 	ldw	fp,0(sp)
    682c:	dec00104 	addi	sp,sp,4
    6830:	f800283a 	ret

00006834 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6834:	defffe04 	addi	sp,sp,-8
    6838:	dfc00115 	stw	ra,4(sp)
    683c:	df000015 	stw	fp,0(sp)
    6840:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6844:	00800074 	movhi	r2,1
    6848:	10a6c904 	addi	r2,r2,-25820
    684c:	10800017 	ldw	r2,0(r2)
    6850:	10000526 	beq	r2,zero,6868 <alt_get_errno+0x34>
    6854:	00800074 	movhi	r2,1
    6858:	10a6c904 	addi	r2,r2,-25820
    685c:	10800017 	ldw	r2,0(r2)
    6860:	103ee83a 	callr	r2
    6864:	00000206 	br	6870 <alt_get_errno+0x3c>
    6868:	00800074 	movhi	r2,1
    686c:	10a6d304 	addi	r2,r2,-25780
}
    6870:	e037883a 	mov	sp,fp
    6874:	dfc00117 	ldw	ra,4(sp)
    6878:	df000017 	ldw	fp,0(sp)
    687c:	dec00204 	addi	sp,sp,8
    6880:	f800283a 	ret

00006884 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    6884:	defffa04 	addi	sp,sp,-24
    6888:	dfc00515 	stw	ra,20(sp)
    688c:	df000415 	stw	fp,16(sp)
    6890:	df000404 	addi	fp,sp,16
    6894:	e13ffe15 	stw	r4,-8(fp)
    6898:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    689c:	e0bffe17 	ldw	r2,-8(fp)
    68a0:	10000326 	beq	r2,zero,68b0 <alt_dev_llist_insert+0x2c>
    68a4:	e0bffe17 	ldw	r2,-8(fp)
    68a8:	10800217 	ldw	r2,8(r2)
    68ac:	1000061e 	bne	r2,zero,68c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    68b0:	00068340 	call	6834 <alt_get_errno>
    68b4:	1007883a 	mov	r3,r2
    68b8:	00800584 	movi	r2,22
    68bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    68c0:	00bffa84 	movi	r2,-22
    68c4:	00001306 	br	6914 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    68c8:	e0bffe17 	ldw	r2,-8(fp)
    68cc:	e0ffff17 	ldw	r3,-4(fp)
    68d0:	e0fffc15 	stw	r3,-16(fp)
    68d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    68d8:	e0bffd17 	ldw	r2,-12(fp)
    68dc:	e0fffc17 	ldw	r3,-16(fp)
    68e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    68e4:	e0bffc17 	ldw	r2,-16(fp)
    68e8:	10c00017 	ldw	r3,0(r2)
    68ec:	e0bffd17 	ldw	r2,-12(fp)
    68f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    68f4:	e0bffc17 	ldw	r2,-16(fp)
    68f8:	10800017 	ldw	r2,0(r2)
    68fc:	e0fffd17 	ldw	r3,-12(fp)
    6900:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    6904:	e0bffc17 	ldw	r2,-16(fp)
    6908:	e0fffd17 	ldw	r3,-12(fp)
    690c:	10c00015 	stw	r3,0(r2)

  return 0;  
    6910:	0005883a 	mov	r2,zero
}
    6914:	e037883a 	mov	sp,fp
    6918:	dfc00117 	ldw	ra,4(sp)
    691c:	df000017 	ldw	fp,0(sp)
    6920:	dec00204 	addi	sp,sp,8
    6924:	f800283a 	ret

00006928 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    6928:	defffd04 	addi	sp,sp,-12
    692c:	dfc00215 	stw	ra,8(sp)
    6930:	df000115 	stw	fp,4(sp)
    6934:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    6938:	00800034 	movhi	r2,0
    693c:	109ecf04 	addi	r2,r2,31548
    6940:	e0bfff15 	stw	r2,-4(fp)
    6944:	00000606 	br	6960 <_do_ctors+0x38>
        (*ctor) (); 
    6948:	e0bfff17 	ldw	r2,-4(fp)
    694c:	10800017 	ldw	r2,0(r2)
    6950:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    6954:	e0bfff17 	ldw	r2,-4(fp)
    6958:	10bfff04 	addi	r2,r2,-4
    695c:	e0bfff15 	stw	r2,-4(fp)
    6960:	e0ffff17 	ldw	r3,-4(fp)
    6964:	00800034 	movhi	r2,0
    6968:	109ed004 	addi	r2,r2,31552
    696c:	18bff62e 	bgeu	r3,r2,6948 <_do_ctors+0x20>
        (*ctor) (); 
}
    6970:	e037883a 	mov	sp,fp
    6974:	dfc00117 	ldw	ra,4(sp)
    6978:	df000017 	ldw	fp,0(sp)
    697c:	dec00204 	addi	sp,sp,8
    6980:	f800283a 	ret

00006984 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    6984:	defffd04 	addi	sp,sp,-12
    6988:	dfc00215 	stw	ra,8(sp)
    698c:	df000115 	stw	fp,4(sp)
    6990:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6994:	00800034 	movhi	r2,0
    6998:	109ecf04 	addi	r2,r2,31548
    699c:	e0bfff15 	stw	r2,-4(fp)
    69a0:	00000606 	br	69bc <_do_dtors+0x38>
        (*dtor) (); 
    69a4:	e0bfff17 	ldw	r2,-4(fp)
    69a8:	10800017 	ldw	r2,0(r2)
    69ac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    69b0:	e0bfff17 	ldw	r2,-4(fp)
    69b4:	10bfff04 	addi	r2,r2,-4
    69b8:	e0bfff15 	stw	r2,-4(fp)
    69bc:	e0ffff17 	ldw	r3,-4(fp)
    69c0:	00800034 	movhi	r2,0
    69c4:	109ed004 	addi	r2,r2,31552
    69c8:	18bff62e 	bgeu	r3,r2,69a4 <_do_dtors+0x20>
        (*dtor) (); 
}
    69cc:	e037883a 	mov	sp,fp
    69d0:	dfc00117 	ldw	ra,4(sp)
    69d4:	df000017 	ldw	fp,0(sp)
    69d8:	dec00204 	addi	sp,sp,8
    69dc:	f800283a 	ret

000069e0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    69e0:	defffc04 	addi	sp,sp,-16
    69e4:	dfc00315 	stw	ra,12(sp)
    69e8:	df000215 	stw	fp,8(sp)
    69ec:	df000204 	addi	fp,sp,8
    69f0:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    69f4:	e13fff17 	ldw	r4,-4(fp)
    69f8:	d1600b04 	addi	r5,gp,-32724
    69fc:	00075240 	call	7524 <alt_find_dev>
    6a00:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
    6a04:	e0bffe17 	ldw	r2,-8(fp)
    6a08:	10000926 	beq	r2,zero,6a30 <alt_flash_open_dev+0x50>
    6a0c:	e0bffe17 	ldw	r2,-8(fp)
    6a10:	10800317 	ldw	r2,12(r2)
    6a14:	10000626 	beq	r2,zero,6a30 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
    6a18:	e0bffe17 	ldw	r2,-8(fp)
    6a1c:	10800317 	ldw	r2,12(r2)
    6a20:	e13ffe17 	ldw	r4,-8(fp)
    6a24:	e17fff17 	ldw	r5,-4(fp)
    6a28:	103ee83a 	callr	r2
    6a2c:	00000106 	br	6a34 <alt_flash_open_dev+0x54>
  }

  return dev;
    6a30:	e0bffe17 	ldw	r2,-8(fp)
}
    6a34:	e037883a 	mov	sp,fp
    6a38:	dfc00117 	ldw	ra,4(sp)
    6a3c:	df000017 	ldw	fp,0(sp)
    6a40:	dec00204 	addi	sp,sp,8
    6a44:	f800283a 	ret

00006a48 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    6a48:	defffd04 	addi	sp,sp,-12
    6a4c:	dfc00215 	stw	ra,8(sp)
    6a50:	df000115 	stw	fp,4(sp)
    6a54:	df000104 	addi	fp,sp,4
    6a58:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    6a5c:	e0bfff17 	ldw	r2,-4(fp)
    6a60:	10000726 	beq	r2,zero,6a80 <alt_flash_close_dev+0x38>
    6a64:	e0bfff17 	ldw	r2,-4(fp)
    6a68:	10800417 	ldw	r2,16(r2)
    6a6c:	10000426 	beq	r2,zero,6a80 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
    6a70:	e0bfff17 	ldw	r2,-4(fp)
    6a74:	10800417 	ldw	r2,16(r2)
    6a78:	e13fff17 	ldw	r4,-4(fp)
    6a7c:	103ee83a 	callr	r2
  }
  return;
    6a80:	0001883a 	nop
}
    6a84:	e037883a 	mov	sp,fp
    6a88:	dfc00117 	ldw	ra,4(sp)
    6a8c:	df000017 	ldw	fp,0(sp)
    6a90:	dec00204 	addi	sp,sp,8
    6a94:	f800283a 	ret

00006a98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    6a98:	defff904 	addi	sp,sp,-28
    6a9c:	dfc00615 	stw	ra,24(sp)
    6aa0:	df000515 	stw	fp,20(sp)
    6aa4:	df000504 	addi	fp,sp,20
    6aa8:	e13ffc15 	stw	r4,-16(fp)
    6aac:	e17ffd15 	stw	r5,-12(fp)
    6ab0:	e1bffe15 	stw	r6,-8(fp)
    6ab4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    6ab8:	e0800217 	ldw	r2,8(fp)
    6abc:	d8800015 	stw	r2,0(sp)
    6ac0:	e13ffc17 	ldw	r4,-16(fp)
    6ac4:	e17ffd17 	ldw	r5,-12(fp)
    6ac8:	e1bffe17 	ldw	r6,-8(fp)
    6acc:	e1ffff17 	ldw	r7,-4(fp)
    6ad0:	0006c780 	call	6c78 <alt_iic_isr_register>
}  
    6ad4:	e037883a 	mov	sp,fp
    6ad8:	dfc00117 	ldw	ra,4(sp)
    6adc:	df000017 	ldw	fp,0(sp)
    6ae0:	dec00204 	addi	sp,sp,8
    6ae4:	f800283a 	ret

00006ae8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    6ae8:	defff904 	addi	sp,sp,-28
    6aec:	df000615 	stw	fp,24(sp)
    6af0:	df000604 	addi	fp,sp,24
    6af4:	e13ffe15 	stw	r4,-8(fp)
    6af8:	e17fff15 	stw	r5,-4(fp)
    6afc:	e0bfff17 	ldw	r2,-4(fp)
    6b00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6b04:	0005303a 	rdctl	r2,status
    6b08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6b0c:	e0fffb17 	ldw	r3,-20(fp)
    6b10:	00bfff84 	movi	r2,-2
    6b14:	1884703a 	and	r2,r3,r2
    6b18:	1001703a 	wrctl	status,r2
  
  return context;
    6b1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    6b20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    6b24:	e0bffa17 	ldw	r2,-24(fp)
    6b28:	00c00044 	movi	r3,1
    6b2c:	1884983a 	sll	r2,r3,r2
    6b30:	1007883a 	mov	r3,r2
    6b34:	00800074 	movhi	r2,1
    6b38:	10a6d704 	addi	r2,r2,-25764
    6b3c:	10800017 	ldw	r2,0(r2)
    6b40:	1886b03a 	or	r3,r3,r2
    6b44:	00800074 	movhi	r2,1
    6b48:	10a6d704 	addi	r2,r2,-25764
    6b4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    6b50:	00800074 	movhi	r2,1
    6b54:	10a6d704 	addi	r2,r2,-25764
    6b58:	10800017 	ldw	r2,0(r2)
    6b5c:	100170fa 	wrctl	ienable,r2
    6b60:	e0bffc17 	ldw	r2,-16(fp)
    6b64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6b68:	e0bffd17 	ldw	r2,-12(fp)
    6b6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    6b70:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    6b74:	0001883a 	nop
}
    6b78:	e037883a 	mov	sp,fp
    6b7c:	df000017 	ldw	fp,0(sp)
    6b80:	dec00104 	addi	sp,sp,4
    6b84:	f800283a 	ret

00006b88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    6b88:	defff904 	addi	sp,sp,-28
    6b8c:	df000615 	stw	fp,24(sp)
    6b90:	df000604 	addi	fp,sp,24
    6b94:	e13ffe15 	stw	r4,-8(fp)
    6b98:	e17fff15 	stw	r5,-4(fp)
    6b9c:	e0bfff17 	ldw	r2,-4(fp)
    6ba0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6ba4:	0005303a 	rdctl	r2,status
    6ba8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6bac:	e0fffb17 	ldw	r3,-20(fp)
    6bb0:	00bfff84 	movi	r2,-2
    6bb4:	1884703a 	and	r2,r3,r2
    6bb8:	1001703a 	wrctl	status,r2
  
  return context;
    6bbc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    6bc0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    6bc4:	e0bffa17 	ldw	r2,-24(fp)
    6bc8:	00c00044 	movi	r3,1
    6bcc:	1884983a 	sll	r2,r3,r2
    6bd0:	0084303a 	nor	r2,zero,r2
    6bd4:	1007883a 	mov	r3,r2
    6bd8:	00800074 	movhi	r2,1
    6bdc:	10a6d704 	addi	r2,r2,-25764
    6be0:	10800017 	ldw	r2,0(r2)
    6be4:	1886703a 	and	r3,r3,r2
    6be8:	00800074 	movhi	r2,1
    6bec:	10a6d704 	addi	r2,r2,-25764
    6bf0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    6bf4:	00800074 	movhi	r2,1
    6bf8:	10a6d704 	addi	r2,r2,-25764
    6bfc:	10800017 	ldw	r2,0(r2)
    6c00:	100170fa 	wrctl	ienable,r2
    6c04:	e0bffc17 	ldw	r2,-16(fp)
    6c08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6c0c:	e0bffd17 	ldw	r2,-12(fp)
    6c10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    6c14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    6c18:	0001883a 	nop
}
    6c1c:	e037883a 	mov	sp,fp
    6c20:	df000017 	ldw	fp,0(sp)
    6c24:	dec00104 	addi	sp,sp,4
    6c28:	f800283a 	ret

00006c2c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    6c2c:	defffc04 	addi	sp,sp,-16
    6c30:	df000315 	stw	fp,12(sp)
    6c34:	df000304 	addi	fp,sp,12
    6c38:	e13ffe15 	stw	r4,-8(fp)
    6c3c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    6c40:	000530fa 	rdctl	r2,ienable
    6c44:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    6c48:	e0bfff17 	ldw	r2,-4(fp)
    6c4c:	00c00044 	movi	r3,1
    6c50:	1884983a 	sll	r2,r3,r2
    6c54:	1007883a 	mov	r3,r2
    6c58:	e0bffd17 	ldw	r2,-12(fp)
    6c5c:	1884703a 	and	r2,r3,r2
    6c60:	1004c03a 	cmpne	r2,r2,zero
    6c64:	10803fcc 	andi	r2,r2,255
}
    6c68:	e037883a 	mov	sp,fp
    6c6c:	df000017 	ldw	fp,0(sp)
    6c70:	dec00104 	addi	sp,sp,4
    6c74:	f800283a 	ret

00006c78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    6c78:	defff504 	addi	sp,sp,-44
    6c7c:	dfc00a15 	stw	ra,40(sp)
    6c80:	df000915 	stw	fp,36(sp)
    6c84:	df000904 	addi	fp,sp,36
    6c88:	e13ffc15 	stw	r4,-16(fp)
    6c8c:	e17ffd15 	stw	r5,-12(fp)
    6c90:	e1bffe15 	stw	r6,-8(fp)
    6c94:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    6c98:	00bffa84 	movi	r2,-22
    6c9c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    6ca0:	e0bffd17 	ldw	r2,-12(fp)
    6ca4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    6ca8:	e0bff817 	ldw	r2,-32(fp)
    6cac:	10800808 	cmpgei	r2,r2,32
    6cb0:	1000271e 	bne	r2,zero,6d50 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6cb4:	0005303a 	rdctl	r2,status
    6cb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6cbc:	e0fffa17 	ldw	r3,-24(fp)
    6cc0:	00bfff84 	movi	r2,-2
    6cc4:	1884703a 	and	r2,r3,r2
    6cc8:	1001703a 	wrctl	status,r2
  
  return context;
    6ccc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    6cd0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    6cd4:	00800074 	movhi	r2,1
    6cd8:	10a6e404 	addi	r2,r2,-25712
    6cdc:	e0fff817 	ldw	r3,-32(fp)
    6ce0:	180690fa 	slli	r3,r3,3
    6ce4:	10c5883a 	add	r2,r2,r3
    6ce8:	e0fffe17 	ldw	r3,-8(fp)
    6cec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    6cf0:	00800074 	movhi	r2,1
    6cf4:	10a6e404 	addi	r2,r2,-25712
    6cf8:	e0fff817 	ldw	r3,-32(fp)
    6cfc:	180690fa 	slli	r3,r3,3
    6d00:	18c00104 	addi	r3,r3,4
    6d04:	10c5883a 	add	r2,r2,r3
    6d08:	e0ffff17 	ldw	r3,-4(fp)
    6d0c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    6d10:	e0bffe17 	ldw	r2,-8(fp)
    6d14:	10000526 	beq	r2,zero,6d2c <alt_iic_isr_register+0xb4>
    6d18:	e0bff817 	ldw	r2,-32(fp)
    6d1c:	e13ffc17 	ldw	r4,-16(fp)
    6d20:	100b883a 	mov	r5,r2
    6d24:	0006ae80 	call	6ae8 <alt_ic_irq_enable>
    6d28:	00000406 	br	6d3c <alt_iic_isr_register+0xc4>
    6d2c:	e0bff817 	ldw	r2,-32(fp)
    6d30:	e13ffc17 	ldw	r4,-16(fp)
    6d34:	100b883a 	mov	r5,r2
    6d38:	0006b880 	call	6b88 <alt_ic_irq_disable>
    6d3c:	e0bff715 	stw	r2,-36(fp)
    6d40:	e0bff917 	ldw	r2,-28(fp)
    6d44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6d48:	e0bffb17 	ldw	r2,-20(fp)
    6d4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    6d50:	e0bff717 	ldw	r2,-36(fp)
}
    6d54:	e037883a 	mov	sp,fp
    6d58:	dfc00117 	ldw	ra,4(sp)
    6d5c:	df000017 	ldw	fp,0(sp)
    6d60:	dec00204 	addi	sp,sp,8
    6d64:	f800283a 	ret

00006d68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    6d68:	defff804 	addi	sp,sp,-32
    6d6c:	dfc00715 	stw	ra,28(sp)
    6d70:	df000615 	stw	fp,24(sp)
    6d74:	dc000515 	stw	r16,20(sp)
    6d78:	df000604 	addi	fp,sp,24
    6d7c:	e13ffb15 	stw	r4,-20(fp)
    6d80:	e17ffc15 	stw	r5,-16(fp)
    6d84:	e1bffd15 	stw	r6,-12(fp)
    6d88:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    6d8c:	e13ffc17 	ldw	r4,-16(fp)
    6d90:	e17ffd17 	ldw	r5,-12(fp)
    6d94:	e1bffe17 	ldw	r6,-8(fp)
    6d98:	00070040 	call	7004 <open>
    6d9c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    6da0:	e0bffa17 	ldw	r2,-24(fp)
    6da4:	10002216 	blt	r2,zero,6e30 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    6da8:	04000074 	movhi	r16,1
    6dac:	84212004 	addi	r16,r16,-31616
    6db0:	e0bffa17 	ldw	r2,-24(fp)
    6db4:	1009883a 	mov	r4,r2
    6db8:	01400304 	movi	r5,12
    6dbc:	00036dc0 	call	36dc <__mulsi3>
    6dc0:	8085883a 	add	r2,r16,r2
    6dc4:	10c00017 	ldw	r3,0(r2)
    6dc8:	e0bffb17 	ldw	r2,-20(fp)
    6dcc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    6dd0:	04000074 	movhi	r16,1
    6dd4:	84212004 	addi	r16,r16,-31616
    6dd8:	e0bffa17 	ldw	r2,-24(fp)
    6ddc:	1009883a 	mov	r4,r2
    6de0:	01400304 	movi	r5,12
    6de4:	00036dc0 	call	36dc <__mulsi3>
    6de8:	10800104 	addi	r2,r2,4
    6dec:	8085883a 	add	r2,r16,r2
    6df0:	10c00017 	ldw	r3,0(r2)
    6df4:	e0bffb17 	ldw	r2,-20(fp)
    6df8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    6dfc:	04000074 	movhi	r16,1
    6e00:	84212004 	addi	r16,r16,-31616
    6e04:	e0bffa17 	ldw	r2,-24(fp)
    6e08:	1009883a 	mov	r4,r2
    6e0c:	01400304 	movi	r5,12
    6e10:	00036dc0 	call	36dc <__mulsi3>
    6e14:	10800204 	addi	r2,r2,8
    6e18:	8085883a 	add	r2,r16,r2
    6e1c:	10c00017 	ldw	r3,0(r2)
    6e20:	e0bffb17 	ldw	r2,-20(fp)
    6e24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    6e28:	e13ffa17 	ldw	r4,-24(fp)
    6e2c:	0003d940 	call	3d94 <alt_release_fd>
  }
} 
    6e30:	e6ffff04 	addi	sp,fp,-4
    6e34:	dfc00217 	ldw	ra,8(sp)
    6e38:	df000117 	ldw	fp,4(sp)
    6e3c:	dc000017 	ldw	r16,0(sp)
    6e40:	dec00304 	addi	sp,sp,12
    6e44:	f800283a 	ret

00006e48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    6e48:	defffb04 	addi	sp,sp,-20
    6e4c:	dfc00415 	stw	ra,16(sp)
    6e50:	df000315 	stw	fp,12(sp)
    6e54:	df000304 	addi	fp,sp,12
    6e58:	e13ffd15 	stw	r4,-12(fp)
    6e5c:	e17ffe15 	stw	r5,-8(fp)
    6e60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6e64:	01000074 	movhi	r4,1
    6e68:	21212304 	addi	r4,r4,-31604
    6e6c:	e17ffd17 	ldw	r5,-12(fp)
    6e70:	01800044 	movi	r6,1
    6e74:	01c07fc4 	movi	r7,511
    6e78:	0006d680 	call	6d68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    6e7c:	01000074 	movhi	r4,1
    6e80:	21212004 	addi	r4,r4,-31616
    6e84:	e17ffe17 	ldw	r5,-8(fp)
    6e88:	000d883a 	mov	r6,zero
    6e8c:	01c07fc4 	movi	r7,511
    6e90:	0006d680 	call	6d68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6e94:	01000074 	movhi	r4,1
    6e98:	21212604 	addi	r4,r4,-31592
    6e9c:	e17fff17 	ldw	r5,-4(fp)
    6ea0:	01800044 	movi	r6,1
    6ea4:	01c07fc4 	movi	r7,511
    6ea8:	0006d680 	call	6d68 <alt_open_fd>
}  
    6eac:	e037883a 	mov	sp,fp
    6eb0:	dfc00117 	ldw	ra,4(sp)
    6eb4:	df000017 	ldw	fp,0(sp)
    6eb8:	dec00204 	addi	sp,sp,8
    6ebc:	f800283a 	ret

00006ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6ec0:	defffe04 	addi	sp,sp,-8
    6ec4:	dfc00115 	stw	ra,4(sp)
    6ec8:	df000015 	stw	fp,0(sp)
    6ecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6ed0:	00800074 	movhi	r2,1
    6ed4:	10a6c904 	addi	r2,r2,-25820
    6ed8:	10800017 	ldw	r2,0(r2)
    6edc:	10000526 	beq	r2,zero,6ef4 <alt_get_errno+0x34>
    6ee0:	00800074 	movhi	r2,1
    6ee4:	10a6c904 	addi	r2,r2,-25820
    6ee8:	10800017 	ldw	r2,0(r2)
    6eec:	103ee83a 	callr	r2
    6ef0:	00000206 	br	6efc <alt_get_errno+0x3c>
    6ef4:	00800074 	movhi	r2,1
    6ef8:	10a6d304 	addi	r2,r2,-25780
}
    6efc:	e037883a 	mov	sp,fp
    6f00:	dfc00117 	ldw	ra,4(sp)
    6f04:	df000017 	ldw	fp,0(sp)
    6f08:	dec00204 	addi	sp,sp,8
    6f0c:	f800283a 	ret

00006f10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6f10:	defffb04 	addi	sp,sp,-20
    6f14:	dfc00415 	stw	ra,16(sp)
    6f18:	df000315 	stw	fp,12(sp)
    6f1c:	dc000215 	stw	r16,8(sp)
    6f20:	df000304 	addi	fp,sp,12
    6f24:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6f28:	e0bffe17 	ldw	r2,-8(fp)
    6f2c:	10800217 	ldw	r2,8(r2)
    6f30:	10d00034 	orhi	r3,r2,16384
    6f34:	e0bffe17 	ldw	r2,-8(fp)
    6f38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6f3c:	e03ffd15 	stw	zero,-12(fp)
    6f40:	00002306 	br	6fd0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6f44:	04000074 	movhi	r16,1
    6f48:	84212004 	addi	r16,r16,-31616
    6f4c:	e0bffd17 	ldw	r2,-12(fp)
    6f50:	1009883a 	mov	r4,r2
    6f54:	01400304 	movi	r5,12
    6f58:	00036dc0 	call	36dc <__mulsi3>
    6f5c:	8085883a 	add	r2,r16,r2
    6f60:	10c00017 	ldw	r3,0(r2)
    6f64:	e0bffe17 	ldw	r2,-8(fp)
    6f68:	10800017 	ldw	r2,0(r2)
    6f6c:	1880151e 	bne	r3,r2,6fc4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6f70:	04000074 	movhi	r16,1
    6f74:	84212004 	addi	r16,r16,-31616
    6f78:	e0bffd17 	ldw	r2,-12(fp)
    6f7c:	1009883a 	mov	r4,r2
    6f80:	01400304 	movi	r5,12
    6f84:	00036dc0 	call	36dc <__mulsi3>
    6f88:	10800204 	addi	r2,r2,8
    6f8c:	8085883a 	add	r2,r16,r2
    6f90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6f94:	10000b0e 	bge	r2,zero,6fc4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    6f98:	e13ffd17 	ldw	r4,-12(fp)
    6f9c:	01400304 	movi	r5,12
    6fa0:	00036dc0 	call	36dc <__mulsi3>
    6fa4:	1007883a 	mov	r3,r2
    6fa8:	00800074 	movhi	r2,1
    6fac:	10a12004 	addi	r2,r2,-31616
    6fb0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6fb4:	e0bffe17 	ldw	r2,-8(fp)
    6fb8:	18800226 	beq	r3,r2,6fc4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    6fbc:	00bffcc4 	movi	r2,-13
    6fc0:	00000a06 	br	6fec <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6fc4:	e0bffd17 	ldw	r2,-12(fp)
    6fc8:	10800044 	addi	r2,r2,1
    6fcc:	e0bffd15 	stw	r2,-12(fp)
    6fd0:	00800074 	movhi	r2,1
    6fd4:	10a6c804 	addi	r2,r2,-25824
    6fd8:	10800017 	ldw	r2,0(r2)
    6fdc:	1007883a 	mov	r3,r2
    6fe0:	e0bffd17 	ldw	r2,-12(fp)
    6fe4:	18bfd72e 	bgeu	r3,r2,6f44 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6fe8:	0005883a 	mov	r2,zero
}
    6fec:	e6ffff04 	addi	sp,fp,-4
    6ff0:	dfc00217 	ldw	ra,8(sp)
    6ff4:	df000117 	ldw	fp,4(sp)
    6ff8:	dc000017 	ldw	r16,0(sp)
    6ffc:	dec00304 	addi	sp,sp,12
    7000:	f800283a 	ret

00007004 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    7004:	defff604 	addi	sp,sp,-40
    7008:	dfc00915 	stw	ra,36(sp)
    700c:	df000815 	stw	fp,32(sp)
    7010:	df000804 	addi	fp,sp,32
    7014:	e13ffd15 	stw	r4,-12(fp)
    7018:	e17ffe15 	stw	r5,-8(fp)
    701c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    7020:	00bfffc4 	movi	r2,-1
    7024:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    7028:	00bffb44 	movi	r2,-19
    702c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    7030:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    7034:	e13ffd17 	ldw	r4,-12(fp)
    7038:	01400074 	movhi	r5,1
    703c:	2966c604 	addi	r5,r5,-25832
    7040:	00075240 	call	7524 <alt_find_dev>
    7044:	e0bff815 	stw	r2,-32(fp)
    7048:	e0bff817 	ldw	r2,-32(fp)
    704c:	1000051e 	bne	r2,zero,7064 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    7050:	e13ffd17 	ldw	r4,-12(fp)
    7054:	00075b40 	call	75b4 <alt_find_file>
    7058:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    705c:	00800044 	movi	r2,1
    7060:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    7064:	e0bff817 	ldw	r2,-32(fp)
    7068:	10002b26 	beq	r2,zero,7118 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    706c:	e13ff817 	ldw	r4,-32(fp)
    7070:	00076c80 	call	76c8 <alt_get_fd>
    7074:	e0bff915 	stw	r2,-28(fp)
    7078:	e0bff917 	ldw	r2,-28(fp)
    707c:	1000030e 	bge	r2,zero,708c <open+0x88>
    {
      status = index;
    7080:	e0bff917 	ldw	r2,-28(fp)
    7084:	e0bffa15 	stw	r2,-24(fp)
    7088:	00002506 	br	7120 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    708c:	e13ff917 	ldw	r4,-28(fp)
    7090:	01400304 	movi	r5,12
    7094:	00036dc0 	call	36dc <__mulsi3>
    7098:	1007883a 	mov	r3,r2
    709c:	00800074 	movhi	r2,1
    70a0:	10a12004 	addi	r2,r2,-31616
    70a4:	1885883a 	add	r2,r3,r2
    70a8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    70ac:	e0fffe17 	ldw	r3,-8(fp)
    70b0:	00900034 	movhi	r2,16384
    70b4:	10bfffc4 	addi	r2,r2,-1
    70b8:	1886703a 	and	r3,r3,r2
    70bc:	e0bffc17 	ldw	r2,-16(fp)
    70c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    70c4:	e0bffb17 	ldw	r2,-20(fp)
    70c8:	1000051e 	bne	r2,zero,70e0 <open+0xdc>
    70cc:	e13ffc17 	ldw	r4,-16(fp)
    70d0:	0006f100 	call	6f10 <alt_file_locked>
    70d4:	e0bffa15 	stw	r2,-24(fp)
    70d8:	e0bffa17 	ldw	r2,-24(fp)
    70dc:	10001016 	blt	r2,zero,7120 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    70e0:	e0bff817 	ldw	r2,-32(fp)
    70e4:	10800317 	ldw	r2,12(r2)
    70e8:	10000826 	beq	r2,zero,710c <open+0x108>
    70ec:	e0bff817 	ldw	r2,-32(fp)
    70f0:	10800317 	ldw	r2,12(r2)
    70f4:	e13ffc17 	ldw	r4,-16(fp)
    70f8:	e17ffd17 	ldw	r5,-12(fp)
    70fc:	e1bffe17 	ldw	r6,-8(fp)
    7100:	e1ffff17 	ldw	r7,-4(fp)
    7104:	103ee83a 	callr	r2
    7108:	00000106 	br	7110 <open+0x10c>
    710c:	0005883a 	mov	r2,zero
    7110:	e0bffa15 	stw	r2,-24(fp)
    7114:	00000206 	br	7120 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    7118:	00bffb44 	movi	r2,-19
    711c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    7120:	e0bffa17 	ldw	r2,-24(fp)
    7124:	1000090e 	bge	r2,zero,714c <open+0x148>
  {
    alt_release_fd (index);  
    7128:	e13ff917 	ldw	r4,-28(fp)
    712c:	0003d940 	call	3d94 <alt_release_fd>
    ALT_ERRNO = -status;
    7130:	0006ec00 	call	6ec0 <alt_get_errno>
    7134:	1007883a 	mov	r3,r2
    7138:	e0bffa17 	ldw	r2,-24(fp)
    713c:	0085c83a 	sub	r2,zero,r2
    7140:	18800015 	stw	r2,0(r3)
    return -1;
    7144:	00bfffc4 	movi	r2,-1
    7148:	00000106 	br	7150 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    714c:	e0bff917 	ldw	r2,-28(fp)
}
    7150:	e037883a 	mov	sp,fp
    7154:	dfc00117 	ldw	ra,4(sp)
    7158:	df000017 	ldw	fp,0(sp)
    715c:	dec00204 	addi	sp,sp,8
    7160:	f800283a 	ret

00007164 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    7164:	defffa04 	addi	sp,sp,-24
    7168:	df000515 	stw	fp,20(sp)
    716c:	df000504 	addi	fp,sp,20
    7170:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7174:	0005303a 	rdctl	r2,status
    7178:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    717c:	e0fffc17 	ldw	r3,-16(fp)
    7180:	00bfff84 	movi	r2,-2
    7184:	1884703a 	and	r2,r3,r2
    7188:	1001703a 	wrctl	status,r2
  
  return context;
    718c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    7190:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    7194:	e0bfff17 	ldw	r2,-4(fp)
    7198:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    719c:	e0bffd17 	ldw	r2,-12(fp)
    71a0:	10800017 	ldw	r2,0(r2)
    71a4:	e0fffd17 	ldw	r3,-12(fp)
    71a8:	18c00117 	ldw	r3,4(r3)
    71ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    71b0:	e0bffd17 	ldw	r2,-12(fp)
    71b4:	10800117 	ldw	r2,4(r2)
    71b8:	e0fffd17 	ldw	r3,-12(fp)
    71bc:	18c00017 	ldw	r3,0(r3)
    71c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    71c4:	e0bffd17 	ldw	r2,-12(fp)
    71c8:	e0fffd17 	ldw	r3,-12(fp)
    71cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    71d0:	e0bffd17 	ldw	r2,-12(fp)
    71d4:	e0fffd17 	ldw	r3,-12(fp)
    71d8:	10c00015 	stw	r3,0(r2)
    71dc:	e0bffb17 	ldw	r2,-20(fp)
    71e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    71e4:	e0bffe17 	ldw	r2,-8(fp)
    71e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    71ec:	e037883a 	mov	sp,fp
    71f0:	df000017 	ldw	fp,0(sp)
    71f4:	dec00104 	addi	sp,sp,4
    71f8:	f800283a 	ret

000071fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    71fc:	defffb04 	addi	sp,sp,-20
    7200:	dfc00415 	stw	ra,16(sp)
    7204:	df000315 	stw	fp,12(sp)
    7208:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    720c:	d0a00e17 	ldw	r2,-32712(gp)
    7210:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    7214:	d0a01917 	ldw	r2,-32668(gp)
    7218:	10800044 	addi	r2,r2,1
    721c:	d0a01915 	stw	r2,-32668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    7220:	00002e06 	br	72dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    7224:	e0bffd17 	ldw	r2,-12(fp)
    7228:	10800017 	ldw	r2,0(r2)
    722c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    7230:	e0bffd17 	ldw	r2,-12(fp)
    7234:	10800403 	ldbu	r2,16(r2)
    7238:	10803fcc 	andi	r2,r2,255
    723c:	10000426 	beq	r2,zero,7250 <alt_tick+0x54>
    7240:	d0a01917 	ldw	r2,-32668(gp)
    7244:	1000021e 	bne	r2,zero,7250 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    7248:	e0bffd17 	ldw	r2,-12(fp)
    724c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    7250:	e0bffd17 	ldw	r2,-12(fp)
    7254:	10800217 	ldw	r2,8(r2)
    7258:	d0e01917 	ldw	r3,-32668(gp)
    725c:	18801d36 	bltu	r3,r2,72d4 <alt_tick+0xd8>
    7260:	e0bffd17 	ldw	r2,-12(fp)
    7264:	10800403 	ldbu	r2,16(r2)
    7268:	10803fcc 	andi	r2,r2,255
    726c:	1000191e 	bne	r2,zero,72d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    7270:	e0bffd17 	ldw	r2,-12(fp)
    7274:	10800317 	ldw	r2,12(r2)
    7278:	e0fffd17 	ldw	r3,-12(fp)
    727c:	18c00517 	ldw	r3,20(r3)
    7280:	1809883a 	mov	r4,r3
    7284:	103ee83a 	callr	r2
    7288:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    728c:	e0bfff17 	ldw	r2,-4(fp)
    7290:	1000031e 	bne	r2,zero,72a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    7294:	e13ffd17 	ldw	r4,-12(fp)
    7298:	00071640 	call	7164 <alt_alarm_stop>
    729c:	00000d06 	br	72d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    72a0:	e0bffd17 	ldw	r2,-12(fp)
    72a4:	10c00217 	ldw	r3,8(r2)
    72a8:	e0bfff17 	ldw	r2,-4(fp)
    72ac:	1887883a 	add	r3,r3,r2
    72b0:	e0bffd17 	ldw	r2,-12(fp)
    72b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    72b8:	e0bffd17 	ldw	r2,-12(fp)
    72bc:	10c00217 	ldw	r3,8(r2)
    72c0:	d0a01917 	ldw	r2,-32668(gp)
    72c4:	1880032e 	bgeu	r3,r2,72d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    72c8:	e0bffd17 	ldw	r2,-12(fp)
    72cc:	00c00044 	movi	r3,1
    72d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    72d4:	e0bffe17 	ldw	r2,-8(fp)
    72d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    72dc:	e0fffd17 	ldw	r3,-12(fp)
    72e0:	d0a00e04 	addi	r2,gp,-32712
    72e4:	18bfcf1e 	bne	r3,r2,7224 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    72e8:	0001883a 	nop
}
    72ec:	e037883a 	mov	sp,fp
    72f0:	dfc00117 	ldw	ra,4(sp)
    72f4:	df000017 	ldw	fp,0(sp)
    72f8:	dec00204 	addi	sp,sp,8
    72fc:	f800283a 	ret

00007300 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    7300:	deffff04 	addi	sp,sp,-4
    7304:	df000015 	stw	fp,0(sp)
    7308:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    730c:	000170fa 	wrctl	ienable,zero
}
    7310:	e037883a 	mov	sp,fp
    7314:	df000017 	ldw	fp,0(sp)
    7318:	dec00104 	addi	sp,sp,4
    731c:	f800283a 	ret

00007320 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    7320:	defff404 	addi	sp,sp,-48
    7324:	df000b15 	stw	fp,44(sp)
    7328:	df000b04 	addi	fp,sp,44
    732c:	e13ffc15 	stw	r4,-16(fp)
    7330:	e17ffd15 	stw	r5,-12(fp)
    7334:	e1bffe15 	stw	r6,-8(fp)
    7338:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    733c:	e0ffff17 	ldw	r3,-4(fp)
    7340:	e0bffe17 	ldw	r2,-8(fp)
    7344:	1885883a 	add	r2,r3,r2
    7348:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    734c:	e0c00217 	ldw	r3,8(fp)
    7350:	e0800117 	ldw	r2,4(fp)
    7354:	1885883a 	add	r2,r3,r2
    7358:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    735c:	e0800117 	ldw	r2,4(fp)
    7360:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    7364:	e0bffe17 	ldw	r2,-8(fp)
    7368:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    736c:	00800044 	movi	r2,1
    7370:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    7374:	e0bffc17 	ldw	r2,-16(fp)
    7378:	10800504 	addi	r2,r2,20
    737c:	1009883a 	mov	r4,r2
    7380:	e0bffd17 	ldw	r2,-12(fp)
    7384:	00c00044 	movi	r3,1
    7388:	1884983a 	sll	r2,r3,r2
    738c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    7390:	e0800317 	ldw	r2,12(fp)
    7394:	1080008c 	andi	r2,r2,2
    7398:	1000051e 	bne	r2,zero,73b0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    739c:	e0bffc17 	ldw	r2,-16(fp)
    73a0:	10800304 	addi	r2,r2,12
    73a4:	1007883a 	mov	r3,r2
    73a8:	00810004 	movi	r2,1024
    73ac:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    73b0:	e0bffc17 	ldw	r2,-16(fp)
    73b4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    73b8:	e0bffc17 	ldw	r2,-16(fp)
    73bc:	10800204 	addi	r2,r2,8
    73c0:	10800037 	ldwio	r2,0(r2)
    73c4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    73c8:	e0bffa17 	ldw	r2,-24(fp)
    73cc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    73d0:	10000226 	beq	r2,zero,73dc <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    73d4:	e0bff717 	ldw	r2,-36(fp)
    73d8:	1000031e 	bne	r2,zero,73e8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    73dc:	e0bffa17 	ldw	r2,-24(fp)
    73e0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    73e4:	103ff426 	beq	r2,zero,73b8 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    73e8:	e0bffa17 	ldw	r2,-24(fp)
    73ec:	1080100c 	andi	r2,r2,64
    73f0:	10001e26 	beq	r2,zero,746c <alt_avalon_spi_command+0x14c>
    73f4:	e0bff717 	ldw	r2,-36(fp)
    73f8:	00801c0e 	bge	zero,r2,746c <alt_avalon_spi_command+0x14c>
    {
      credits--;
    73fc:	e0bff717 	ldw	r2,-36(fp)
    7400:	10bfffc4 	addi	r2,r2,-1
    7404:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    7408:	e0ffff17 	ldw	r3,-4(fp)
    740c:	e0bff817 	ldw	r2,-32(fp)
    7410:	18800a2e 	bgeu	r3,r2,743c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    7414:	e0bffc17 	ldw	r2,-16(fp)
    7418:	10800104 	addi	r2,r2,4
    741c:	1009883a 	mov	r4,r2
    7420:	e0bfff17 	ldw	r2,-4(fp)
    7424:	10c00044 	addi	r3,r2,1
    7428:	e0ffff15 	stw	r3,-4(fp)
    742c:	10800003 	ldbu	r2,0(r2)
    7430:	10803fcc 	andi	r2,r2,255
    7434:	20800035 	stwio	r2,0(r4)
    7438:	00000c06 	br	746c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    743c:	e0bff517 	ldw	r2,-44(fp)
    7440:	10000826 	beq	r2,zero,7464 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    7444:	e0bff517 	ldw	r2,-44(fp)
    7448:	10bfffc4 	addi	r2,r2,-1
    744c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    7450:	e0bffc17 	ldw	r2,-16(fp)
    7454:	10800104 	addi	r2,r2,4
    7458:	0007883a 	mov	r3,zero
    745c:	10c00035 	stwio	r3,0(r2)
    7460:	00000206 	br	746c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    7464:	00bf0004 	movi	r2,-1024
    7468:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    746c:	e0bffa17 	ldw	r2,-24(fp)
    7470:	1080200c 	andi	r2,r2,128
    7474:	10001726 	beq	r2,zero,74d4 <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    7478:	e0bffc17 	ldw	r2,-16(fp)
    747c:	10800037 	ldwio	r2,0(r2)
    7480:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    7484:	e0bff617 	ldw	r2,-40(fp)
    7488:	10000426 	beq	r2,zero,749c <alt_avalon_spi_command+0x17c>
        read_ignore--;
    748c:	e0bff617 	ldw	r2,-40(fp)
    7490:	10bfffc4 	addi	r2,r2,-1
    7494:	e0bff615 	stw	r2,-40(fp)
    7498:	00000506 	br	74b0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    749c:	e0800217 	ldw	r2,8(fp)
    74a0:	10c00044 	addi	r3,r2,1
    74a4:	e0c00215 	stw	r3,8(fp)
    74a8:	e0fffb17 	ldw	r3,-20(fp)
    74ac:	10c00005 	stb	r3,0(r2)
      credits++;
    74b0:	e0bff717 	ldw	r2,-36(fp)
    74b4:	10800044 	addi	r2,r2,1
    74b8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    74bc:	e0bff617 	ldw	r2,-40(fp)
    74c0:	1000041e 	bne	r2,zero,74d4 <alt_avalon_spi_command+0x1b4>
    74c4:	e0c00217 	ldw	r3,8(fp)
    74c8:	e0bff917 	ldw	r2,-28(fp)
    74cc:	1880011e 	bne	r3,r2,74d4 <alt_avalon_spi_command+0x1b4>
        break;
    74d0:	00000106 	br	74d8 <alt_avalon_spi_command+0x1b8>
    }
    
  }
    74d4:	003fb806 	br	73b8 <alt_avalon_spi_command+0x98>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    74d8:	e0bffc17 	ldw	r2,-16(fp)
    74dc:	10800204 	addi	r2,r2,8
    74e0:	10800037 	ldwio	r2,0(r2)
    74e4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    74e8:	e0bffa17 	ldw	r2,-24(fp)
    74ec:	1080080c 	andi	r2,r2,32
    74f0:	103ff926 	beq	r2,zero,74d8 <alt_avalon_spi_command+0x1b8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    74f4:	e0800317 	ldw	r2,12(fp)
    74f8:	1080004c 	andi	r2,r2,1
    74fc:	1000041e 	bne	r2,zero,7510 <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    7500:	e0bffc17 	ldw	r2,-16(fp)
    7504:	10800304 	addi	r2,r2,12
    7508:	0007883a 	mov	r3,zero
    750c:	10c00035 	stwio	r3,0(r2)

  return read_length;
    7510:	e0800117 	ldw	r2,4(fp)
}
    7514:	e037883a 	mov	sp,fp
    7518:	df000017 	ldw	fp,0(sp)
    751c:	dec00104 	addi	sp,sp,4
    7520:	f800283a 	ret

00007524 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    7524:	defffa04 	addi	sp,sp,-24
    7528:	dfc00515 	stw	ra,20(sp)
    752c:	df000415 	stw	fp,16(sp)
    7530:	df000404 	addi	fp,sp,16
    7534:	e13ffe15 	stw	r4,-8(fp)
    7538:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    753c:	e0bfff17 	ldw	r2,-4(fp)
    7540:	10800017 	ldw	r2,0(r2)
    7544:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    7548:	e13ffe17 	ldw	r4,-8(fp)
    754c:	0000b080 	call	b08 <strlen>
    7550:	10800044 	addi	r2,r2,1
    7554:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    7558:	00000d06 	br	7590 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    755c:	e0bffc17 	ldw	r2,-16(fp)
    7560:	10c00217 	ldw	r3,8(r2)
    7564:	e0bffd17 	ldw	r2,-12(fp)
    7568:	1809883a 	mov	r4,r3
    756c:	e17ffe17 	ldw	r5,-8(fp)
    7570:	100d883a 	mov	r6,r2
    7574:	00077e80 	call	77e8 <memcmp>
    7578:	1000021e 	bne	r2,zero,7584 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    757c:	e0bffc17 	ldw	r2,-16(fp)
    7580:	00000706 	br	75a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    7584:	e0bffc17 	ldw	r2,-16(fp)
    7588:	10800017 	ldw	r2,0(r2)
    758c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    7590:	e0fffc17 	ldw	r3,-16(fp)
    7594:	e0bfff17 	ldw	r2,-4(fp)
    7598:	18bff01e 	bne	r3,r2,755c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    759c:	0005883a 	mov	r2,zero
}
    75a0:	e037883a 	mov	sp,fp
    75a4:	dfc00117 	ldw	ra,4(sp)
    75a8:	df000017 	ldw	fp,0(sp)
    75ac:	dec00204 	addi	sp,sp,8
    75b0:	f800283a 	ret

000075b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    75b4:	defffb04 	addi	sp,sp,-20
    75b8:	dfc00415 	stw	ra,16(sp)
    75bc:	df000315 	stw	fp,12(sp)
    75c0:	df000304 	addi	fp,sp,12
    75c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    75c8:	00800074 	movhi	r2,1
    75cc:	10a6c404 	addi	r2,r2,-25840
    75d0:	10800017 	ldw	r2,0(r2)
    75d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    75d8:	00003106 	br	76a0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    75dc:	e0bffd17 	ldw	r2,-12(fp)
    75e0:	10800217 	ldw	r2,8(r2)
    75e4:	1009883a 	mov	r4,r2
    75e8:	0000b080 	call	b08 <strlen>
    75ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    75f0:	e0bffd17 	ldw	r2,-12(fp)
    75f4:	10c00217 	ldw	r3,8(r2)
    75f8:	e0bffe17 	ldw	r2,-8(fp)
    75fc:	10bfffc4 	addi	r2,r2,-1
    7600:	1885883a 	add	r2,r3,r2
    7604:	10800003 	ldbu	r2,0(r2)
    7608:	10803fcc 	andi	r2,r2,255
    760c:	1080201c 	xori	r2,r2,128
    7610:	10bfe004 	addi	r2,r2,-128
    7614:	10800bd8 	cmpnei	r2,r2,47
    7618:	1000031e 	bne	r2,zero,7628 <alt_find_file+0x74>
    {
      len -= 1;
    761c:	e0bffe17 	ldw	r2,-8(fp)
    7620:	10bfffc4 	addi	r2,r2,-1
    7624:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    7628:	e0bffe17 	ldw	r2,-8(fp)
    762c:	e0ffff17 	ldw	r3,-4(fp)
    7630:	1885883a 	add	r2,r3,r2
    7634:	10800003 	ldbu	r2,0(r2)
    7638:	10803fcc 	andi	r2,r2,255
    763c:	1080201c 	xori	r2,r2,128
    7640:	10bfe004 	addi	r2,r2,-128
    7644:	10800be0 	cmpeqi	r2,r2,47
    7648:	1000081e 	bne	r2,zero,766c <alt_find_file+0xb8>
    764c:	e0bffe17 	ldw	r2,-8(fp)
    7650:	e0ffff17 	ldw	r3,-4(fp)
    7654:	1885883a 	add	r2,r3,r2
    7658:	10800003 	ldbu	r2,0(r2)
    765c:	10803fcc 	andi	r2,r2,255
    7660:	1080201c 	xori	r2,r2,128
    7664:	10bfe004 	addi	r2,r2,-128
    7668:	10000a1e 	bne	r2,zero,7694 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    766c:	e0bffd17 	ldw	r2,-12(fp)
    7670:	10c00217 	ldw	r3,8(r2)
    7674:	e0bffe17 	ldw	r2,-8(fp)
    7678:	1809883a 	mov	r4,r3
    767c:	e17fff17 	ldw	r5,-4(fp)
    7680:	100d883a 	mov	r6,r2
    7684:	00077e80 	call	77e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    7688:	1000021e 	bne	r2,zero,7694 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    768c:	e0bffd17 	ldw	r2,-12(fp)
    7690:	00000806 	br	76b4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    7694:	e0bffd17 	ldw	r2,-12(fp)
    7698:	10800017 	ldw	r2,0(r2)
    769c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    76a0:	e0fffd17 	ldw	r3,-12(fp)
    76a4:	00800074 	movhi	r2,1
    76a8:	10a6c404 	addi	r2,r2,-25840
    76ac:	18bfcb1e 	bne	r3,r2,75dc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    76b0:	0005883a 	mov	r2,zero
}
    76b4:	e037883a 	mov	sp,fp
    76b8:	dfc00117 	ldw	ra,4(sp)
    76bc:	df000017 	ldw	fp,0(sp)
    76c0:	dec00204 	addi	sp,sp,8
    76c4:	f800283a 	ret

000076c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    76c8:	defffa04 	addi	sp,sp,-24
    76cc:	dfc00515 	stw	ra,20(sp)
    76d0:	df000415 	stw	fp,16(sp)
    76d4:	dc000315 	stw	r16,12(sp)
    76d8:	df000404 	addi	fp,sp,16
    76dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    76e0:	00bffa04 	movi	r2,-24
    76e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    76e8:	e03ffc15 	stw	zero,-16(fp)
    76ec:	00002106 	br	7774 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    76f0:	04000074 	movhi	r16,1
    76f4:	84212004 	addi	r16,r16,-31616
    76f8:	e0bffc17 	ldw	r2,-16(fp)
    76fc:	1009883a 	mov	r4,r2
    7700:	01400304 	movi	r5,12
    7704:	00036dc0 	call	36dc <__mulsi3>
    7708:	8085883a 	add	r2,r16,r2
    770c:	10800017 	ldw	r2,0(r2)
    7710:	1000151e 	bne	r2,zero,7768 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    7714:	04000074 	movhi	r16,1
    7718:	84212004 	addi	r16,r16,-31616
    771c:	e0bffc17 	ldw	r2,-16(fp)
    7720:	1009883a 	mov	r4,r2
    7724:	01400304 	movi	r5,12
    7728:	00036dc0 	call	36dc <__mulsi3>
    772c:	8085883a 	add	r2,r16,r2
    7730:	e0fffe17 	ldw	r3,-8(fp)
    7734:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    7738:	00800074 	movhi	r2,1
    773c:	10a6c804 	addi	r2,r2,-25824
    7740:	10c00017 	ldw	r3,0(r2)
    7744:	e0bffc17 	ldw	r2,-16(fp)
    7748:	1880040e 	bge	r3,r2,775c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    774c:	00800074 	movhi	r2,1
    7750:	10a6c804 	addi	r2,r2,-25824
    7754:	e0fffc17 	ldw	r3,-16(fp)
    7758:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    775c:	e0bffc17 	ldw	r2,-16(fp)
    7760:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    7764:	00000606 	br	7780 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    7768:	e0bffc17 	ldw	r2,-16(fp)
    776c:	10800044 	addi	r2,r2,1
    7770:	e0bffc15 	stw	r2,-16(fp)
    7774:	e0bffc17 	ldw	r2,-16(fp)
    7778:	10800810 	cmplti	r2,r2,32
    777c:	103fdc1e 	bne	r2,zero,76f0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    7780:	e0bffd17 	ldw	r2,-12(fp)
}
    7784:	e6ffff04 	addi	sp,fp,-4
    7788:	dfc00217 	ldw	ra,8(sp)
    778c:	df000117 	ldw	fp,4(sp)
    7790:	dc000017 	ldw	r16,0(sp)
    7794:	dec00304 	addi	sp,sp,12
    7798:	f800283a 	ret

0000779c <atexit>:
    779c:	200b883a 	mov	r5,r4
    77a0:	000d883a 	mov	r6,zero
    77a4:	0009883a 	mov	r4,zero
    77a8:	000f883a 	mov	r7,zero
    77ac:	00078641 	jmpi	7864 <__register_exitproc>

000077b0 <exit>:
    77b0:	defffe04 	addi	sp,sp,-8
    77b4:	000b883a 	mov	r5,zero
    77b8:	dc000015 	stw	r16,0(sp)
    77bc:	dfc00115 	stw	ra,4(sp)
    77c0:	2021883a 	mov	r16,r4
    77c4:	00079780 	call	7978 <__call_exitprocs>
    77c8:	00800074 	movhi	r2,1
    77cc:	10a6c004 	addi	r2,r2,-25856
    77d0:	11000017 	ldw	r4,0(r2)
    77d4:	20800f17 	ldw	r2,60(r4)
    77d8:	10000126 	beq	r2,zero,77e0 <exit+0x30>
    77dc:	103ee83a 	callr	r2
    77e0:	8009883a 	mov	r4,r16
    77e4:	0007b0c0 	call	7b0c <_exit>

000077e8 <memcmp>:
    77e8:	01c000c4 	movi	r7,3
    77ec:	3980192e 	bgeu	r7,r6,7854 <memcmp+0x6c>
    77f0:	2144b03a 	or	r2,r4,r5
    77f4:	11c4703a 	and	r2,r2,r7
    77f8:	10000f26 	beq	r2,zero,7838 <memcmp+0x50>
    77fc:	20800003 	ldbu	r2,0(r4)
    7800:	28c00003 	ldbu	r3,0(r5)
    7804:	10c0151e 	bne	r2,r3,785c <memcmp+0x74>
    7808:	31bfff84 	addi	r6,r6,-2
    780c:	01ffffc4 	movi	r7,-1
    7810:	00000406 	br	7824 <memcmp+0x3c>
    7814:	20800003 	ldbu	r2,0(r4)
    7818:	28c00003 	ldbu	r3,0(r5)
    781c:	31bfffc4 	addi	r6,r6,-1
    7820:	10c00e1e 	bne	r2,r3,785c <memcmp+0x74>
    7824:	21000044 	addi	r4,r4,1
    7828:	29400044 	addi	r5,r5,1
    782c:	31fff91e 	bne	r6,r7,7814 <memcmp+0x2c>
    7830:	0005883a 	mov	r2,zero
    7834:	f800283a 	ret
    7838:	20c00017 	ldw	r3,0(r4)
    783c:	28800017 	ldw	r2,0(r5)
    7840:	1880041e 	bne	r3,r2,7854 <memcmp+0x6c>
    7844:	31bfff04 	addi	r6,r6,-4
    7848:	21000104 	addi	r4,r4,4
    784c:	29400104 	addi	r5,r5,4
    7850:	39bff936 	bltu	r7,r6,7838 <memcmp+0x50>
    7854:	303fe91e 	bne	r6,zero,77fc <memcmp+0x14>
    7858:	003ff506 	br	7830 <memcmp+0x48>
    785c:	10c5c83a 	sub	r2,r2,r3
    7860:	f800283a 	ret

00007864 <__register_exitproc>:
    7864:	00800074 	movhi	r2,1
    7868:	defffa04 	addi	sp,sp,-24
    786c:	10a6c004 	addi	r2,r2,-25856
    7870:	dc000315 	stw	r16,12(sp)
    7874:	14000017 	ldw	r16,0(r2)
    7878:	dc400415 	stw	r17,16(sp)
    787c:	dfc00515 	stw	ra,20(sp)
    7880:	80805217 	ldw	r2,328(r16)
    7884:	2023883a 	mov	r17,r4
    7888:	10003626 	beq	r2,zero,7964 <__register_exitproc+0x100>
    788c:	10c00117 	ldw	r3,4(r2)
    7890:	010007c4 	movi	r4,31
    7894:	20c00e16 	blt	r4,r3,78d0 <__register_exitproc+0x6c>
    7898:	1a400044 	addi	r9,r3,1
    789c:	8800211e 	bne	r17,zero,7924 <__register_exitproc+0xc0>
    78a0:	18c00084 	addi	r3,r3,2
    78a4:	18c7883a 	add	r3,r3,r3
    78a8:	18c7883a 	add	r3,r3,r3
    78ac:	12400115 	stw	r9,4(r2)
    78b0:	10c7883a 	add	r3,r2,r3
    78b4:	19400015 	stw	r5,0(r3)
    78b8:	0005883a 	mov	r2,zero
    78bc:	dfc00517 	ldw	ra,20(sp)
    78c0:	dc400417 	ldw	r17,16(sp)
    78c4:	dc000317 	ldw	r16,12(sp)
    78c8:	dec00604 	addi	sp,sp,24
    78cc:	f800283a 	ret
    78d0:	00800034 	movhi	r2,0
    78d4:	10800004 	addi	r2,r2,0
    78d8:	10002526 	beq	r2,zero,7970 <__register_exitproc+0x10c>
    78dc:	01006404 	movi	r4,400
    78e0:	d9400015 	stw	r5,0(sp)
    78e4:	d9800115 	stw	r6,4(sp)
    78e8:	d9c00215 	stw	r7,8(sp)
    78ec:	00000000 	call	0 <__alt_mem_sdram>
    78f0:	d9400017 	ldw	r5,0(sp)
    78f4:	d9800117 	ldw	r6,4(sp)
    78f8:	d9c00217 	ldw	r7,8(sp)
    78fc:	10001c26 	beq	r2,zero,7970 <__register_exitproc+0x10c>
    7900:	80c05217 	ldw	r3,328(r16)
    7904:	10000115 	stw	zero,4(r2)
    7908:	02400044 	movi	r9,1
    790c:	10c00015 	stw	r3,0(r2)
    7910:	80805215 	stw	r2,328(r16)
    7914:	10006215 	stw	zero,392(r2)
    7918:	10006315 	stw	zero,396(r2)
    791c:	0007883a 	mov	r3,zero
    7920:	883fdf26 	beq	r17,zero,78a0 <__register_exitproc+0x3c>
    7924:	18d1883a 	add	r8,r3,r3
    7928:	4211883a 	add	r8,r8,r8
    792c:	1211883a 	add	r8,r2,r8
    7930:	41802215 	stw	r6,136(r8)
    7934:	01000044 	movi	r4,1
    7938:	11806217 	ldw	r6,392(r2)
    793c:	20c8983a 	sll	r4,r4,r3
    7940:	310cb03a 	or	r6,r6,r4
    7944:	11806215 	stw	r6,392(r2)
    7948:	41c04215 	stw	r7,264(r8)
    794c:	01800084 	movi	r6,2
    7950:	89bfd31e 	bne	r17,r6,78a0 <__register_exitproc+0x3c>
    7954:	11806317 	ldw	r6,396(r2)
    7958:	3108b03a 	or	r4,r6,r4
    795c:	11006315 	stw	r4,396(r2)
    7960:	003fcf06 	br	78a0 <__register_exitproc+0x3c>
    7964:	80805304 	addi	r2,r16,332
    7968:	80805215 	stw	r2,328(r16)
    796c:	003fc706 	br	788c <__register_exitproc+0x28>
    7970:	00bfffc4 	movi	r2,-1
    7974:	003fd106 	br	78bc <__register_exitproc+0x58>

00007978 <__call_exitprocs>:
    7978:	00800074 	movhi	r2,1
    797c:	10a6c004 	addi	r2,r2,-25856
    7980:	10800017 	ldw	r2,0(r2)
    7984:	defff404 	addi	sp,sp,-48
    7988:	dd800815 	stw	r22,32(sp)
    798c:	d8800015 	stw	r2,0(sp)
    7990:	10805204 	addi	r2,r2,328
    7994:	dd000615 	stw	r20,24(sp)
    7998:	dc800415 	stw	r18,16(sp)
    799c:	dfc00b15 	stw	ra,44(sp)
    79a0:	df000a15 	stw	fp,40(sp)
    79a4:	ddc00915 	stw	r23,36(sp)
    79a8:	dd400715 	stw	r21,28(sp)
    79ac:	dcc00515 	stw	r19,20(sp)
    79b0:	dc400315 	stw	r17,12(sp)
    79b4:	dc000215 	stw	r16,8(sp)
    79b8:	2025883a 	mov	r18,r4
    79bc:	2829883a 	mov	r20,r5
    79c0:	d8800115 	stw	r2,4(sp)
    79c4:	05bfffc4 	movi	r22,-1
    79c8:	d8800017 	ldw	r2,0(sp)
    79cc:	14c05217 	ldw	r19,328(r2)
    79d0:	98001d26 	beq	r19,zero,7a48 <__call_exitprocs+0xd0>
    79d4:	dd400117 	ldw	r21,4(sp)
    79d8:	98800117 	ldw	r2,4(r19)
    79dc:	173fffc4 	addi	fp,r2,-1
    79e0:	e0000d16 	blt	fp,zero,7a18 <__call_exitprocs+0xa0>
    79e4:	14000044 	addi	r16,r2,1
    79e8:	8421883a 	add	r16,r16,r16
    79ec:	8421883a 	add	r16,r16,r16
    79f0:	84402004 	addi	r17,r16,128
    79f4:	9c63883a 	add	r17,r19,r17
    79f8:	9c21883a 	add	r16,r19,r16
    79fc:	a0001e26 	beq	r20,zero,7a78 <__call_exitprocs+0x100>
    7a00:	80804017 	ldw	r2,256(r16)
    7a04:	15001c26 	beq	r2,r20,7a78 <__call_exitprocs+0x100>
    7a08:	e73fffc4 	addi	fp,fp,-1
    7a0c:	843fff04 	addi	r16,r16,-4
    7a10:	8c7fff04 	addi	r17,r17,-4
    7a14:	e5bff91e 	bne	fp,r22,79fc <__call_exitprocs+0x84>
    7a18:	00800034 	movhi	r2,0
    7a1c:	10800004 	addi	r2,r2,0
    7a20:	10000926 	beq	r2,zero,7a48 <__call_exitprocs+0xd0>
    7a24:	98800117 	ldw	r2,4(r19)
    7a28:	1000311e 	bne	r2,zero,7af0 <__call_exitprocs+0x178>
    7a2c:	98800017 	ldw	r2,0(r19)
    7a30:	10003426 	beq	r2,zero,7b04 <__call_exitprocs+0x18c>
    7a34:	9809883a 	mov	r4,r19
    7a38:	a8800015 	stw	r2,0(r21)
    7a3c:	00000000 	call	0 <__alt_mem_sdram>
    7a40:	acc00017 	ldw	r19,0(r21)
    7a44:	983fe41e 	bne	r19,zero,79d8 <__call_exitprocs+0x60>
    7a48:	dfc00b17 	ldw	ra,44(sp)
    7a4c:	df000a17 	ldw	fp,40(sp)
    7a50:	ddc00917 	ldw	r23,36(sp)
    7a54:	dd800817 	ldw	r22,32(sp)
    7a58:	dd400717 	ldw	r21,28(sp)
    7a5c:	dd000617 	ldw	r20,24(sp)
    7a60:	dcc00517 	ldw	r19,20(sp)
    7a64:	dc800417 	ldw	r18,16(sp)
    7a68:	dc400317 	ldw	r17,12(sp)
    7a6c:	dc000217 	ldw	r16,8(sp)
    7a70:	dec00c04 	addi	sp,sp,48
    7a74:	f800283a 	ret
    7a78:	98800117 	ldw	r2,4(r19)
    7a7c:	80c00017 	ldw	r3,0(r16)
    7a80:	10bfffc4 	addi	r2,r2,-1
    7a84:	17001526 	beq	r2,fp,7adc <__call_exitprocs+0x164>
    7a88:	80000015 	stw	zero,0(r16)
    7a8c:	183fde26 	beq	r3,zero,7a08 <__call_exitprocs+0x90>
    7a90:	00800044 	movi	r2,1
    7a94:	1708983a 	sll	r4,r2,fp
    7a98:	98806217 	ldw	r2,392(r19)
    7a9c:	9dc00117 	ldw	r23,4(r19)
    7aa0:	2084703a 	and	r2,r4,r2
    7aa4:	1000061e 	bne	r2,zero,7ac0 <__call_exitprocs+0x148>
    7aa8:	183ee83a 	callr	r3
    7aac:	98800117 	ldw	r2,4(r19)
    7ab0:	15ffc51e 	bne	r2,r23,79c8 <__call_exitprocs+0x50>
    7ab4:	a8800017 	ldw	r2,0(r21)
    7ab8:	14ffd326 	beq	r2,r19,7a08 <__call_exitprocs+0x90>
    7abc:	003fc206 	br	79c8 <__call_exitprocs+0x50>
    7ac0:	98806317 	ldw	r2,396(r19)
    7ac4:	2084703a 	and	r2,r4,r2
    7ac8:	1000061e 	bne	r2,zero,7ae4 <__call_exitprocs+0x16c>
    7acc:	89400017 	ldw	r5,0(r17)
    7ad0:	9009883a 	mov	r4,r18
    7ad4:	183ee83a 	callr	r3
    7ad8:	003ff406 	br	7aac <__call_exitprocs+0x134>
    7adc:	9f000115 	stw	fp,4(r19)
    7ae0:	003fea06 	br	7a8c <__call_exitprocs+0x114>
    7ae4:	89000017 	ldw	r4,0(r17)
    7ae8:	183ee83a 	callr	r3
    7aec:	003fef06 	br	7aac <__call_exitprocs+0x134>
    7af0:	98800017 	ldw	r2,0(r19)
    7af4:	982b883a 	mov	r21,r19
    7af8:	1027883a 	mov	r19,r2
    7afc:	983fb61e 	bne	r19,zero,79d8 <__call_exitprocs+0x60>
    7b00:	003fd106 	br	7a48 <__call_exitprocs+0xd0>
    7b04:	0005883a 	mov	r2,zero
    7b08:	003ffa06 	br	7af4 <__call_exitprocs+0x17c>

00007b0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    7b0c:	defffd04 	addi	sp,sp,-12
    7b10:	df000215 	stw	fp,8(sp)
    7b14:	df000204 	addi	fp,sp,8
    7b18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    7b1c:	0001883a 	nop
    7b20:	e0bfff17 	ldw	r2,-4(fp)
    7b24:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    7b28:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    7b2c:	10000226 	beq	r2,zero,7b38 <_exit+0x2c>
    ALT_SIM_FAIL();
    7b30:	002af070 	cmpltui	zero,zero,43969
    7b34:	00000106 	br	7b3c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    7b38:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    7b3c:	003fff06 	br	7b3c <_exit+0x30>
