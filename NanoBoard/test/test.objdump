
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014518 memsz 0x00014674 flags rwx
    LOAD off    0x00016000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011fe0  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000408  0001219c  0001219c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f94  000125a4  000125a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00014538  00014538  00015538  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00014694  00014694  00016000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  02004000  02004000  00016000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  02009020  02009020  00016000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00016000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001058  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002651b  00000000  00000000  00017080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009f22  00000000  00000000  0003d59b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c28d  00000000  00000000  000474bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002854  00000000  00000000  0005374c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003bac  00000000  00000000  00055fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001769d  00000000  00000000  00059b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  000711ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000018a8  00000000  00000000  00071200  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000763b2  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000763b5  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000763c1  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000763c2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000763c3  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000763ce  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000763d9  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  000763e4  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000037  00000000  00000000  000763ec  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000e0f1e  00000000  00000000  00076423  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0001219c l    d  .rodata	00000000 .rodata
000125a4 l    d  .rwdata	00000000 .rwdata
00014538 l    d  .bss	00000000 .bss
00014694 l    d  .sdram	00000000 .sdram
02004000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
02009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 motor_setting.c
00000000 l    df *ABS*	00000000 pin_tests.c
00000000 l    df *ABS*	00000000 steering_setting.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 ultrasound.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001235e l     O .rodata	00000010 zeroes.4255
000036f8 l     F .text	000000bc __sbprintf
0001236e l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003908 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000054ec l     F .text	00000008 __fp_lock
000054f4 l     F .text	00000008 __fp_unlock
00005508 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000125a4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000129e8 l     O .rwdata	00000020 lc_ctype_charset
000129c8 l     O .rwdata	00000020 lc_message_charset
00012a08 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000123a0 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008a50 l     F .text	000000fc __sprint_r.part.0
000124c4 l     O .rodata	00000010 zeroes.4200
000124d4 l     O .rodata	00000010 blanks.4199
00009e78 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000b49c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000dd60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000de88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000deb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000dfbc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e0b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e29c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014520 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e520 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e670 l     F .text	00000038 alt_dev_reg
00012ff0 l     O .rwdata	000000cc epcs_flash_controller_0
000130bc l     O .rwdata	00001060 jtag_uart_0
0001411c l     O .rwdata	000000c4 New_UltraSound0
000141e0 l     O .rwdata	000000c4 New_UltraSound1
000142a4 l     O .rwdata	000000c4 New_UltraSound2
00014368 l     O .rwdata	000000c4 New_UltraSound3
0001442c l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0000e7f4 l     F .text	00000038 alt_flash_device_register
0000e880 l     F .text	000003f8 alt_epcs_flash_query
0000ec78 l     F .text	000000e8 alt_epcs_flash_memcmp
0000f04c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f514 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000f718 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fd38 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000ffec l     F .text	00000098 altera_avalon_uart_irq
00010084 l     F .text	000000e0 altera_avalon_uart_rxirq
00010164 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000102fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00010528 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
00010780 l     F .text	00000038 epcs_test_wip
000107b8 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010e90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000113c4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001151c l     F .text	00000050 alt_get_errno
0001156c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000080c8 g     F .text	00000074 _mprec_log10
0000efc0 g     F .text	0000008c alt_epcs_flash_get_info
000081b4 g     F .text	0000008c __any_on
0000a3f8 g     F .text	00000054 _isatty_r
000123ac g     O .rodata	00000028 __mprec_tinytens
0000e1e4 g     F .text	00000078 alt_main
00001528 g     F .text	000000a8 _puts_r
00014594 g     O .bss	00000100 alt_irq
0000a44c g     F .text	0000005c _lseek_r
0000c7e4 g     F .text	00000084 .hidden __eqdf2
00014694 g       *ABS*	00000000 __alt_heap_start
000014ec g     F .text	0000003c printf
0000a658 g     F .text	0000009c _wcrtomb_r
00008948 g     F .text	0000005c __sseek
0000584c g     F .text	00000010 __sinit
0000a504 g     F .text	00000138 __swbuf_r
00006304 g     F .text	0000007c _setlocale_r
000056a4 g     F .text	00000078 __sfmoreglue
0000e27c g     F .text	00000020 __malloc_unlock
00000dec g     F .text	00000450 .hidden __divsf3
00000cdc g     F .text	00000034 ultrasound_init
00006f64 g     F .text	0000015c memmove
00005834 g     F .text	00000018 _cleanup
000071e4 g     F .text	000000a8 _Balloc
0000c868 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
000107f0 g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
0000076c g     F .text	000001e4 test_motor
0000a3a0 g     F .text	00000058 _fstat_r
00014550 g     O .bss	00000004 errno
000088c4 g     F .text	00000008 __seofread
00014558 g     O .bss	00000004 alt_argv
0001c4f0 g       *ABS*	00000000 _gp
00012e70 g     O .rwdata	00000180 alt_fd_list
00010a2c g     F .text	00000068 epcs_write_status_register
00011b80 g     F .text	00000090 alt_find_dev
00006e2c g     F .text	00000138 memcpy
000054fc g     F .text	0000000c _cleanup_r
0000dbec g     F .text	000000d0 .hidden __floatsidf
000114a4 g     F .text	00000078 alt_io_redirect
0000c948 g     F .text	000000e0 .hidden __ltdf2
0001219c g       *ABS*	00000000 __DTOR_END__
000015d0 g     F .text	00000014 puts
0000f154 g     F .text	00000100 alt_epcs_flash_write_block
000087a8 g     F .text	00000074 __fpclassifyd
00008024 g     F .text	000000a4 __ratio
00009e54 g     F .text	00000024 __vfiprintf_internal
0000f914 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000014c0 g     F .text	0000002c _printf_r
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b5b8 g     F .text	00000008 .hidden __udivsi3
0000e00c g     F .text	000000ac isatty
000123fc g     O .rodata	000000c8 __mprec_tens
00006380 g     F .text	0000000c __locale_charset
0001454c g     O .bss	00000004 __malloc_top_pad
000144f8 g     O .rwdata	00000004 __mb_cur_max
000063b0 g     F .text	0000000c _localeconv_r
00007618 g     F .text	0000003c __i2b
00005cb0 g     F .text	000004cc __sfvwrite_r
0000881c g     F .text	00000054 _sbrk_r
0000a4a8 g     F .text	0000005c _read_r
00014518 g     O .rwdata	00000004 alt_max_fd
0000a0bc g     F .text	000000f0 _fclose_r
000054bc g     F .text	00000030 fflush
00014548 g     O .bss	00000004 __malloc_max_sbrked_mem
0000134c g     F .text	00000110 .hidden __extendsfdf2
0000b5c8 g     F .text	0000089c .hidden __adddf3
00000594 g     F .text	000001d8 test_stearing
0000f0e0 g     F .text	00000074 alt_epcs_flash_erase_block
00007dcc g     F .text	0000011c __b2d
0000ae80 g     F .text	0000061c .hidden __umoddi3
0000e108 g     F .text	000000dc lseek
000144f0 g     O .rwdata	00000004 _global_impure_ptr
00010cf4 g     F .text	0000005c epcs_exit_4_bytes_mode
00008240 g     F .text	00000568 _realloc_r
00014694 g       *ABS*	00000000 __bss_end
000112d4 g     F .text	000000f0 alt_iic_isr_register
00011858 g     F .text	00000104 alt_tick
0000a840 g     F .text	00000640 .hidden __udivdi3
000004b0 g     F .text	000000e4 motor_setting
0000a1c0 g     F .text	00000184 _fputwc_r
000123d4 g     O .rodata	00000028 __mprec_bigtens
000073fc g     F .text	00000104 __s2b
0000dcbc g     F .text	000000a4 .hidden __floatunsidf
00007b74 g     F .text	00000060 __mcmp
0000ff44 g     F .text	000000a8 altera_avalon_uart_init
0000586c g     F .text	00000018 __fp_lock_all
00011288 g     F .text	0000004c alt_ic_irq_enabled
000117c0 g     F .text	00000098 alt_alarm_stop
00014560 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
00012e48 g     O .rwdata	00000028 alt_dev_null
00007500 g     F .text	00000068 __hi0bits
0000db64 g     F .text	00000088 .hidden __fixdfsi
00000950 g     F .text	000000bc steering_setting
00014510 g     O .rwdata	00000008 alt_dev_list
0000e570 g     F .text	00000100 write
0000df04 g     F .text	000000b8 fstat
0000c948 g     F .text	000000e0 .hidden __ledf2
000078e4 g     F .text	00000140 __pow5mult
00008b64 g     F .text	000012f0 ___vfiprintf_internal_r
00014540 g     O .bss	00000004 __nlocale_changed
0000b5c0 g     F .text	00000008 .hidden __umodsi3
00010bb0 g     F .text	00000068 epcs_read_electronic_signature
00014694 g       *ABS*	00000000 end
00010578 g     F .text	000001ac altera_avalon_uart_write
0000f450 g     F .text	000000c4 altera_avalon_jtag_uart_init
0001219c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000fdac g     F .text	00000088 alt_avalon_timer_sc_init
0000fe94 g     F .text	00000060 altera_avalon_uart_write_fd
0000145c g     F .text	00000064 .hidden __clzsi2
00000c7c g     F .text	00000060 uart_receive_byte
0000fef4 g     F .text	00000050 altera_avalon_uart_close_fd
0000fb20 g     F .text	00000218 altera_avalon_jtag_uart_write
00000bc4 g     F .text	0000004c uart_init
0000585c g     F .text	00000004 __sfp_lock_acquire
00006d44 g     F .text	000000e8 memchr
0000167c g     F .text	00002058 ___vfprintf_internal_r
000059c0 g     F .text	000002f0 _free_r
0000638c g     F .text	00000010 __locale_mb_cur_max
00011fd4 g     F .text	00000194 __call_exitprocs
0001453c g     O .bss	00000004 __mlocale_changed
000144fc g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	00000038 _start
00014564 g     O .bss	00000004 _alt_tick_rate
00007a24 g     F .text	00000150 __lshift
0001197c g     F .text	00000204 alt_avalon_spi_command
00014568 g     O .bss	00000004 _alt_nticks
0000e2ec g     F .text	00000104 read
0000e6dc g     F .text	00000118 alt_sys_init
00011ec0 g     F .text	00000114 __register_exitproc
00007654 g     F .text	00000290 __multiply
0000f7c0 g     F .text	00000068 altera_avalon_jtag_uart_close
00000dc4 g     F .text	00000028 .hidden __mulsi3
0001456c g     O .bss	00000028 __malloc_current_mallinfo
00007ee8 g     F .text	0000013c __d2b
00010724 g     F .text	0000005c epcs_read_status_register
0000f2ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011d24 g     F .text	000000d4 alt_get_fd
00009f90 g     F .text	00000054 _close_r
00010c18 g     F .text	00000080 epcs_read_device_id
00011e44 g     F .text	0000007c memcmp
0000f3ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014694 g       *ABS*	00000000 __alt_stack_base
0000f3fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00000d10 g     F .text	000000b4 ultrasound_read
000037b4 g     F .text	00000154 __swsetup_r
0000be64 g     F .text	00000980 .hidden __divdf3
0000571c g     F .text	00000118 __sfp
0000813c g     F .text	00000078 __copybits
00012a40 g     O .rwdata	00000408 __malloc_av_
00005868 g     F .text	00000004 __sinit_lock_release
0000ca28 g     F .text	0000086c .hidden __muldf3
00008870 g     F .text	00000054 __sread
00011c10 g     F .text	00000114 alt_find_file
00010ee0 g     F .text	000000a4 alt_dev_llist_insert
0000e25c g     F .text	00000020 __malloc_lock
0000e470 g     F .text	000000b0 sbrk
00005460 g     F .text	0000005c _fflush_r
00009fe4 g     F .text	000000d8 _calloc_r
00014524 g     O .rwdata	00000008 alt_flash_dev_list
00014538 g       *ABS*	00000000 __bss_start
000070c0 g     F .text	00000124 memset
000001f4 g     F .text	000002bc main
0001455c g     O .bss	00000004 alt_envp
00014544 g     O .bss	00000004 __malloc_max_total_mem
0000f34c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a63c g     F .text	0000001c __swbuf
000089a4 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000a1ac g     F .text	00000014 fclose
00003b30 g     F .text	00001728 _dtoa_r
0000659c g     F .text	000007a8 _malloc_r
0000a7b4 g     F .text	00000030 __ascii_wctomb
0001451c g     O .rwdata	00000004 alt_errno
0000617c g     F .text	000000c4 _fwalk
0000b508 g     F .text	00000054 .hidden __divsi3
0000589c g     F .text	00000124 _malloc_trim_r
0001219c g       *ABS*	00000000 __CTOR_END__
0000ed60 g     F .text	00000260 alt_epcs_flash_write
000089ac g     F .text	000000a4 strcmp
0001219c g       *ABS*	00000000 __DTOR_LIST__
0000c7e4 g     F .text	00000084 .hidden __nedf2
0000e6a8 g     F .text	00000034 alt_irq_init
0000e3f0 g     F .text	00000080 alt_release_fd
00012218 g     O .rodata	00000100 .hidden __clz_tab
00014538 g     O .bss	00000004 _PathLocale
00011df8 g     F .text	00000014 atexit
00009f34 g     F .text	0000005c _write_r
000063bc g     F .text	0000001c setlocale
000144f4 g     O .rwdata	00000004 _impure_ptr
00014554 g     O .bss	00000004 alt_argc
00005258 g     F .text	00000208 __sflush_r
00010fe0 g     F .text	0000005c _do_dtors
000063a8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00007d6c g     F .text	00000060 __ulp
00005884 g     F .text	00000018 __fp_unlock_all
00014508 g     O .rwdata	00000008 alt_fs_list
00000c10 g     F .text	0000006c uart_send_byte
000063d8 g     F .text	0000000c localeconv
000108e8 g     F .text	000000f4 epcs_read_buffer
0000e82c g     F .text	00000054 alt_epcs_flash_init
000110f4 g     F .text	00000050 alt_ic_isr_register
00014538 g       *ABS*	00000000 _edata
0000fe34 g     F .text	00000060 altera_avalon_uart_read_fd
00014694 g       *ABS*	00000000 _end
0001103c g     F .text	00000068 alt_flash_open_dev
0000f828 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000111e4 g     F .text	000000a4 alt_ic_irq_disable
00010c98 g     F .text	0000005c epcs_enter_4_bytes_mode
000088cc g     F .text	0000007c __swrite
00014500 g     O .rwdata	00000004 __malloc_trim_threshold
0001195c g     F .text	00000020 altera_nios2_qsys_irq_init
0000639c g     F .text	0000000c __locale_msgcharset
00011e0c g     F .text	00000038 exit
00006240 g     F .text	000000c4 _fwalk_reent
0000123c g     F .text	00000110 .hidden __floatunsisf
00007bd4 g     F .text	00000198 __mdiff
000110a4 g     F .text	00000050 alt_flash_close_dev
0000b55c g     F .text	0000005c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005860 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000102a8 g     F .text	00000054 altera_avalon_uart_close
00012168 g     F .text	00000034 _exit
00010d50 g     F .text	00000140 alt_alarm_start
000063e4 g     F .text	000001b8 __smakebuf_r
00000a0c g     F .text	000001b8 steering_set_level
000015e4 g     F .text	00000098 strlen
000109dc g     F .text	00000050 epcs_write_enable
00011660 g     F .text	00000160 open
0000c868 g     F .text	000000e0 .hidden __gedf2
00014504 g     O .rwdata	00000004 __wctomb
00008b4c g     F .text	00000018 __sprint_r
0001452c g     O .rwdata	00000004 alt_priority_mask
00011144 g     F .text	000000a0 alt_ic_irq_enable
000036d4 g     F .text	00000024 __vfprintf_internal
0001034c g     F .text	000001dc altera_avalon_uart_read
0000a7e4 g     F .text	0000005c _wctomb_r
0000d294 g     F .text	000008d0 .hidden __subdf3
0000f254 g     F .text	00000098 alt_epcs_flash_read
00007568 g     F .text	000000b0 __lo0bits
00014530 g     O .rwdata	00000008 alt_alarm_list
00010f84 g     F .text	0000005c _do_ctors
0000a6f4 g     F .text	000000c0 wcrtomb
0000ddb0 g     F .text	000000d8 close
0000a344 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
00005864 g     F .text	00000004 __sinit_lock_acquire
00010a94 g     F .text	0000011c epcs_write_buffer
000072b4 g     F .text	00000148 __multadd
0000728c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10916504 	addi	r2,r2,17812
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10916504 	addi	r2,r2,17812
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	21000104 	addi	r4,r4,4
 158:	1105883a 	add	r2,r2,r4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d6b13c14 	ori	gp,gp,50416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d0:	10914e14 	ori	r2,r2,17720

    movhi r3, %hi(__bss_end)
     1d4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d8:	18d1a514 	ori	r3,r3,18068

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000e1e40 	call	e1e4 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <main>:
 */

#include "main.h"

int main()
{
     1f4:	deffe904 	addi	sp,sp,-92
     1f8:	dfc01615 	stw	ra,88(sp)
     1fc:	df001515 	stw	fp,84(sp)
     200:	df001504 	addi	fp,sp,84
	printf("Running!\n");
     204:	01000074 	movhi	r4,1
     208:	21086704 	addi	r4,r4,8604
     20c:	00015d00 	call	15d0 <puts>

	//Assign motor pins
	unsigned long m_phase1=0x0,m_phase2=0x000,m_duty1=0x0,m_duty2=0x0,m_period=0x186A,m_enable=0x3;
     210:	e03ff215 	stw	zero,-56(fp)
     214:	e03ff315 	stw	zero,-52(fp)
     218:	e03fed15 	stw	zero,-76(fp)
     21c:	e03ff415 	stw	zero,-48(fp)
     220:	00861a84 	movi	r2,6250
     224:	e0bff515 	stw	r2,-44(fp)
     228:	008000c4 	movi	r2,3
     22c:	e0bff615 	stw	r2,-40(fp)
	motor_setting(m_phase1,m_duty1,m_phase2,m_duty2,m_period,m_enable);
     230:	e0bff517 	ldw	r2,-44(fp)
     234:	d8800015 	stw	r2,0(sp)
     238:	e0bff617 	ldw	r2,-40(fp)
     23c:	d8800115 	stw	r2,4(sp)
     240:	e13ff217 	ldw	r4,-56(fp)
     244:	e17fed17 	ldw	r5,-76(fp)
     248:	e1bff317 	ldw	r6,-52(fp)
     24c:	e1fff417 	ldw	r7,-48(fp)
     250:	00004b00 	call	4b0 <motor_setting>

	//Assign steering pins
	unsigned long s_phase1=0x0,s_phase2=0x000,s_duty1=0x0,s_duty2=0x0,s_period=0x186A,s_enable=0x3;
     254:	e03ff715 	stw	zero,-36(fp)
     258:	e03ff815 	stw	zero,-32(fp)
     25c:	e03fee15 	stw	zero,-72(fp)
     260:	e03fef15 	stw	zero,-68(fp)
     264:	00861a84 	movi	r2,6250
     268:	e0bff915 	stw	r2,-28(fp)
     26c:	008000c4 	movi	r2,3
     270:	e0bffa15 	stw	r2,-24(fp)
	steering_setting(s_phase1,s_duty1,s_phase2,s_duty2,s_period,s_enable);
     274:	e0bff917 	ldw	r2,-28(fp)
     278:	d8800015 	stw	r2,0(sp)
     27c:	e0bffa17 	ldw	r2,-24(fp)
     280:	d8800115 	stw	r2,4(sp)
     284:	e13ff717 	ldw	r4,-36(fp)
     288:	e17fee17 	ldw	r5,-72(fp)
     28c:	e1bff817 	ldw	r6,-32(fp)
     290:	e1ffef17 	ldw	r7,-68(fp)
     294:	00009500 	call	950 <steering_setting>


	//Intit Ultrasound
	unsigned int distance0, distance1, distance2, i, j = 0;
     298:	e03ff115 	stw	zero,-60(fp)
	ultrasound_init(NEW_ULTRASOUND0_BASE);
     29c:	01008074 	movhi	r4,513
     2a0:	21288804 	addi	r4,r4,-24032
     2a4:	0000cdc0 	call	cdc <ultrasound_init>
	ultrasound_init(NEW_ULTRASOUND1_BASE);
     2a8:	01008074 	movhi	r4,513
     2ac:	21288004 	addi	r4,r4,-24064
     2b0:	0000cdc0 	call	cdc <ultrasound_init>
	ultrasound_init(NEW_ULTRASOUND2_BASE);
     2b4:	01008074 	movhi	r4,513
     2b8:	21287804 	addi	r4,r4,-24096
     2bc:	0000cdc0 	call	cdc <ultrasound_init>
	printf("Ultrasound initialized!\n");
     2c0:	01000074 	movhi	r4,1
     2c4:	21086a04 	addi	r4,r4,8616
     2c8:	00015d00 	call	15d0 <puts>



	while(1){
		//Get sensor values
		distance0 = ultrasound_read(NEW_ULTRASOUND0_BASE) * 170;
     2cc:	01008074 	movhi	r4,513
     2d0:	21288804 	addi	r4,r4,-24032
     2d4:	0000d100 	call	d10 <ultrasound_read>
     2d8:	1009883a 	mov	r4,r2
     2dc:	01402a84 	movi	r5,170
     2e0:	0000dc40 	call	dc4 <__mulsi3>
     2e4:	e0bffb15 	stw	r2,-20(fp)
		distance1 = ultrasound_read(NEW_ULTRASOUND1_BASE);
     2e8:	01008074 	movhi	r4,513
     2ec:	21288004 	addi	r4,r4,-24064
     2f0:	0000d100 	call	d10 <ultrasound_read>
     2f4:	e0bffc15 	stw	r2,-16(fp)
		distance2 = ultrasound_read(NEW_ULTRASOUND2_BASE);
     2f8:	01008074 	movhi	r4,513
     2fc:	21287804 	addi	r4,r4,-24096
     300:	0000d100 	call	d10 <ultrasound_read>
     304:	e0bffd15 	stw	r2,-12(fp)

		//Check for possible collision
		if(distance0>50000){
     308:	e0bffb17 	ldw	r2,-20(fp)
     30c:	10b0d470 	cmpltui	r2,r2,50001
     310:	1000031e 	bne	r2,zero,320 <main+0x12c>
			m_duty1 = 0x186A;
     314:	00861a84 	movi	r2,6250
     318:	e0bfed15 	stw	r2,-76(fp)
     31c:	00000106 	br	324 <main+0x130>
		}else{
			m_duty1 = 0x0;
     320:	e03fed15 	stw	zero,-76(fp)
		}


		if(distance1>893){ //893 is about 0,15181m
     324:	e0bffc17 	ldw	r2,-16(fp)
     328:	1080dfb0 	cmpltui	r2,r2,894
     32c:	1000021e 	bne	r2,zero,338 <main+0x144>
			s_duty1 = 0x0;
     330:	e03fee15 	stw	zero,-72(fp)
     334:	00000806 	br	358 <main+0x164>
		}else{
			//7 and 1000 are constants calculated with a period of 0x186A
			//Add 1000 to have max value at 2,5cm (will result in duty > 100%)
			s_duty1 = s_period - distance1*7 + 1000;
     338:	e13ffc17 	ldw	r4,-16(fp)
     33c:	014001c4 	movi	r5,7
     340:	0000dc40 	call	dc4 <__mulsi3>
     344:	1007883a 	mov	r3,r2
     348:	e0bff917 	ldw	r2,-28(fp)
     34c:	10c5c83a 	sub	r2,r2,r3
     350:	1080fa04 	addi	r2,r2,1000
     354:	e0bfee15 	stw	r2,-72(fp)
		}
		if(distance2>893){
     358:	e0bffd17 	ldw	r2,-12(fp)
     35c:	1080dfb0 	cmpltui	r2,r2,894
     360:	1000021e 	bne	r2,zero,36c <main+0x178>
			s_duty2 = 0x0;
     364:	e03fef15 	stw	zero,-68(fp)
     368:	00000806 	br	38c <main+0x198>
		}else{
			s_duty2 = s_period - distance2*7 + 1000;
     36c:	e13ffd17 	ldw	r4,-12(fp)
     370:	014001c4 	movi	r5,7
     374:	0000dc40 	call	dc4 <__mulsi3>
     378:	1007883a 	mov	r3,r2
     37c:	e0bff917 	ldw	r2,-28(fp)
     380:	10c5c83a 	sub	r2,r2,r3
     384:	1080fa04 	addi	r2,r2,1000
     388:	e0bfef15 	stw	r2,-68(fp)
		}

		//Set PWM-Signals
		steering_setting(s_phase1,s_duty1,s_phase2,s_duty2,s_period,s_enable);
     38c:	e0bff917 	ldw	r2,-28(fp)
     390:	d8800015 	stw	r2,0(sp)
     394:	e0bffa17 	ldw	r2,-24(fp)
     398:	d8800115 	stw	r2,4(sp)
     39c:	e13ff717 	ldw	r4,-36(fp)
     3a0:	e17fee17 	ldw	r5,-72(fp)
     3a4:	e1bff817 	ldw	r6,-32(fp)
     3a8:	e1ffef17 	ldw	r7,-68(fp)
     3ac:	00009500 	call	950 <steering_setting>
		motor_setting(m_phase1, m_duty1, m_phase2, m_duty2, m_period, m_enable);
     3b0:	e0bff517 	ldw	r2,-44(fp)
     3b4:	d8800015 	stw	r2,0(sp)
     3b8:	e0bff617 	ldw	r2,-40(fp)
     3bc:	d8800115 	stw	r2,4(sp)
     3c0:	e13ff217 	ldw	r4,-56(fp)
     3c4:	e17fed17 	ldw	r5,-76(fp)
     3c8:	e1bff317 	ldw	r6,-52(fp)
     3cc:	e1fff417 	ldw	r7,-48(fp)
     3d0:	00004b00 	call	4b0 <motor_setting>

		float duty1pr = ((float) s_duty1) / 6251.0;
     3d4:	e13fee17 	ldw	r4,-72(fp)
     3d8:	000123c0 	call	123c <__floatunsisf>
     3dc:	1007883a 	mov	r3,r2
     3e0:	1809883a 	mov	r4,r3
     3e4:	015170f4 	movhi	r5,17859
     3e8:	29560004 	addi	r5,r5,22528
     3ec:	0000dec0 	call	dec <__divsf3>
     3f0:	1007883a 	mov	r3,r2
     3f4:	e0fffe15 	stw	r3,-8(fp)
		float duty2pr = ((float) s_duty2) / 6251.0;
     3f8:	e13fef17 	ldw	r4,-68(fp)
     3fc:	000123c0 	call	123c <__floatunsisf>
     400:	1007883a 	mov	r3,r2
     404:	1809883a 	mov	r4,r3
     408:	015170f4 	movhi	r5,17859
     40c:	29560004 	addi	r5,r5,22528
     410:	0000dec0 	call	dec <__divsf3>
     414:	1007883a 	mov	r3,r2
     418:	e0ffff15 	stw	r3,-4(fp)
		printf("Steering duty1 is: %f\twith distance: %i\n", duty1pr, distance1);
     41c:	e13ffe17 	ldw	r4,-8(fp)
     420:	000134c0 	call	134c <__extendsfdf2>
     424:	100d883a 	mov	r6,r2
     428:	180f883a 	mov	r7,r3
     42c:	01000074 	movhi	r4,1
     430:	21087004 	addi	r4,r4,8640
     434:	300b883a 	mov	r5,r6
     438:	380d883a 	mov	r6,r7
     43c:	e1fffc17 	ldw	r7,-16(fp)
     440:	00014ec0 	call	14ec <printf>
		printf("Steering duty2 is: %f\twith distance: %i\n", duty2pr, distance2);
     444:	e13fff17 	ldw	r4,-4(fp)
     448:	000134c0 	call	134c <__extendsfdf2>
     44c:	100d883a 	mov	r6,r2
     450:	180f883a 	mov	r7,r3
     454:	01000074 	movhi	r4,1
     458:	21087b04 	addi	r4,r4,8684
     45c:	300b883a 	mov	r5,r6
     460:	380d883a 	mov	r6,r7
     464:	e1fffd17 	ldw	r7,-12(fp)
     468:	00014ec0 	call	14ec <printf>

		for(i = 0; i<2550; i++){
     46c:	e03ff015 	stw	zero,-64(fp)
     470:	00000b06 	br	4a0 <main+0x2ac>
			for(j = 0; j<10; j++);
     474:	e03ff115 	stw	zero,-60(fp)
     478:	00000306 	br	488 <main+0x294>
     47c:	e0bff117 	ldw	r2,-60(fp)
     480:	10800044 	addi	r2,r2,1
     484:	e0bff115 	stw	r2,-60(fp)
     488:	e0bff117 	ldw	r2,-60(fp)
     48c:	108002b0 	cmpltui	r2,r2,10
     490:	103ffa1e 	bne	r2,zero,47c <main+0x288>
		float duty1pr = ((float) s_duty1) / 6251.0;
		float duty2pr = ((float) s_duty2) / 6251.0;
		printf("Steering duty1 is: %f\twith distance: %i\n", duty1pr, distance1);
		printf("Steering duty2 is: %f\twith distance: %i\n", duty2pr, distance2);

		for(i = 0; i<2550; i++){
     494:	e0bff017 	ldw	r2,-64(fp)
     498:	10800044 	addi	r2,r2,1
     49c:	e0bff015 	stw	r2,-64(fp)
     4a0:	e0bff017 	ldw	r2,-64(fp)
     4a4:	10827db0 	cmpltui	r2,r2,2550
     4a8:	103ff21e 	bne	r2,zero,474 <main+0x280>
			for(j = 0; j<10; j++);
		} //Got delay value through testing; prevents sensors from crashing

	}
     4ac:	003f8706 	br	2cc <main+0xd8>

000004b0 <motor_setting>:
//phase1 -> forward
//phase2 -> backward
//will only set one pin greater zero
void motor_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable)
{
     4b0:	defff504 	addi	sp,sp,-44
     4b4:	df000a15 	stw	fp,40(sp)
     4b8:	df000a04 	addi	fp,sp,40
     4bc:	e13ffc15 	stw	r4,-16(fp)
     4c0:	e17ffd15 	stw	r5,-12(fp)
     4c4:	e1bffe15 	stw	r6,-8(fp)
     4c8:	e1ffff15 	stw	r7,-4(fp)
	if(phase1>0 && phase2>0){
     4cc:	e0bffc17 	ldw	r2,-16(fp)
     4d0:	10000826 	beq	r2,zero,4f4 <motor_setting+0x44>
     4d4:	e0bffe17 	ldw	r2,-8(fp)
     4d8:	10000626 	beq	r2,zero,4f4 <motor_setting+0x44>
		if(phase1>=phase2) phase2 = 0;
     4dc:	e0fffc17 	ldw	r3,-16(fp)
     4e0:	e0bffe17 	ldw	r2,-8(fp)
     4e4:	18800236 	bltu	r3,r2,4f0 <motor_setting+0x40>
     4e8:	e03ffe15 	stw	zero,-8(fp)
     4ec:	00000106 	br	4f4 <motor_setting+0x44>
		else phase1 = 0;
     4f0:	e03ffc15 	stw	zero,-16(fp)

	}

	unsigned long * pwm_en= (unsigned long *)MOTOR_PWM_EN;
     4f4:	00808074 	movhi	r2,513
     4f8:	10a8b004 	addi	r2,r2,-23872
     4fc:	e0bff615 	stw	r2,-40(fp)
	unsigned long * pwm_period=(unsigned long *)MOTOR_PWM_PERIOD;
     500:	00808074 	movhi	r2,513
     504:	10a8b104 	addi	r2,r2,-23868
     508:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_phase1=(unsigned long *)MOTOR_PWM_PHASE1;
     50c:	00808074 	movhi	r2,513
     510:	10a8b404 	addi	r2,r2,-23856
     514:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_phase2=(unsigned long *)MOTOR_PWM_PHASE2;
     518:	00808074 	movhi	r2,513
     51c:	10a8b504 	addi	r2,r2,-23852
     520:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_duty1=(unsigned long *)MOTOR_PWM_DUTY1;
     524:	00808074 	movhi	r2,513
     528:	10a8b204 	addi	r2,r2,-23864
     52c:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_duty2=(unsigned long *)MOTOR_PWM_DUTY2;
     530:	00808074 	movhi	r2,513
     534:	10a8b304 	addi	r2,r2,-23860
     538:	e0bffb15 	stw	r2,-20(fp)

	* pwm_en=enable;
     53c:	e0bff617 	ldw	r2,-40(fp)
     540:	e0c00217 	ldw	r3,8(fp)
     544:	10c00015 	stw	r3,0(r2)
	* pwm_period=period;
     548:	e0bff717 	ldw	r2,-36(fp)
     54c:	e0c00117 	ldw	r3,4(fp)
     550:	10c00015 	stw	r3,0(r2)
	* pwm_phase1=phase1;
     554:	e0bff817 	ldw	r2,-32(fp)
     558:	e0fffc17 	ldw	r3,-16(fp)
     55c:	10c00015 	stw	r3,0(r2)
	* pwm_phase2=phase2;
     560:	e0bff917 	ldw	r2,-28(fp)
     564:	e0fffe17 	ldw	r3,-8(fp)
     568:	10c00015 	stw	r3,0(r2)
	* pwm_duty1=duty1;
     56c:	e0bffa17 	ldw	r2,-24(fp)
     570:	e0fffd17 	ldw	r3,-12(fp)
     574:	10c00015 	stw	r3,0(r2)
	* pwm_duty2=duty2;
     578:	e0bffb17 	ldw	r2,-20(fp)
     57c:	e0ffff17 	ldw	r3,-4(fp)
     580:	10c00015 	stw	r3,0(r2)

}
     584:	e037883a 	mov	sp,fp
     588:	df000017 	ldw	fp,0(sp)
     58c:	dec00104 	addi	sp,sp,4
     590:	f800283a 	ret

00000594 <test_stearing>:
#include "pin_tests.h"

//function to test stearing pins (will not terminate!)
//type 1: alternate on pin 1; sets pin 2 to zero
//type 2: alternate on pin 2; sets pin 1 to zero
void test_stearing(unsigned int test_type, unsigned long s_period){
     594:	defff604 	addi	sp,sp,-40
     598:	dfc00915 	stw	ra,36(sp)
     59c:	df000815 	stw	fp,32(sp)
     5a0:	df000804 	addi	fp,sp,32
     5a4:	e13ffe15 	stw	r4,-8(fp)
     5a8:	e17fff15 	stw	r5,-4(fp)

	if(test_type==1){ //test 1
     5ac:	e0bffe17 	ldw	r2,-8(fp)
     5b0:	10800058 	cmpnei	r2,r2,1
     5b4:	1000321e 	bne	r2,zero,680 <test_stearing+0xec>
		unsigned long s_duty1 = 0;
     5b8:	e03ffa15 	stw	zero,-24(fp)
		unsigned int i = 0;
     5bc:	e03ffb15 	stw	zero,-20(fp)
		while(1){
			while(s_duty1<s_period){
     5c0:	00001406 	br	614 <test_stearing+0x80>
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
     5c4:	e0bfff17 	ldw	r2,-4(fp)
     5c8:	d8800015 	stw	r2,0(sp)
     5cc:	00800044 	movi	r2,1
     5d0:	d8800115 	stw	r2,4(sp)
     5d4:	0009883a 	mov	r4,zero
     5d8:	e17ffa17 	ldw	r5,-24(fp)
     5dc:	000d883a 	mov	r6,zero
     5e0:	000f883a 	mov	r7,zero
     5e4:	00009500 	call	950 <steering_setting>
				s_duty1 += 10;
     5e8:	e0bffa17 	ldw	r2,-24(fp)
     5ec:	10800284 	addi	r2,r2,10
     5f0:	e0bffa15 	stw	r2,-24(fp)
				for(i=0;i<2550;i++); //delay
     5f4:	e03ffb15 	stw	zero,-20(fp)
     5f8:	00000306 	br	608 <test_stearing+0x74>
     5fc:	e0bffb17 	ldw	r2,-20(fp)
     600:	10800044 	addi	r2,r2,1
     604:	e0bffb15 	stw	r2,-20(fp)
     608:	e0bffb17 	ldw	r2,-20(fp)
     60c:	10827db0 	cmpltui	r2,r2,2550
     610:	103ffa1e 	bne	r2,zero,5fc <test_stearing+0x68>

	if(test_type==1){ //test 1
		unsigned long s_duty1 = 0;
		unsigned int i = 0;
		while(1){
			while(s_duty1<s_period){
     614:	e0fffa17 	ldw	r3,-24(fp)
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	18bfe936 	bltu	r3,r2,5c4 <test_stearing+0x30>
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty1>0){
     620:	00001406 	br	674 <test_stearing+0xe0>
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
     624:	e0bfff17 	ldw	r2,-4(fp)
     628:	d8800015 	stw	r2,0(sp)
     62c:	00800044 	movi	r2,1
     630:	d8800115 	stw	r2,4(sp)
     634:	0009883a 	mov	r4,zero
     638:	e17ffa17 	ldw	r5,-24(fp)
     63c:	000d883a 	mov	r6,zero
     640:	000f883a 	mov	r7,zero
     644:	00009500 	call	950 <steering_setting>
				s_duty1 -= 10;
     648:	e0bffa17 	ldw	r2,-24(fp)
     64c:	10bffd84 	addi	r2,r2,-10
     650:	e0bffa15 	stw	r2,-24(fp)
				for(i=0;i<2550;i++); //delay
     654:	e03ffb15 	stw	zero,-20(fp)
     658:	00000306 	br	668 <test_stearing+0xd4>
     65c:	e0bffb17 	ldw	r2,-20(fp)
     660:	10800044 	addi	r2,r2,1
     664:	e0bffb15 	stw	r2,-20(fp)
     668:	e0bffb17 	ldw	r2,-20(fp)
     66c:	10827db0 	cmpltui	r2,r2,2550
     670:	103ffa1e 	bne	r2,zero,65c <test_stearing+0xc8>
			while(s_duty1<s_period){
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty1>0){
     674:	e0bffa17 	ldw	r2,-24(fp)
     678:	103fea1e 	bne	r2,zero,624 <test_stearing+0x90>
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 -= 10;
				for(i=0;i<2550;i++); //delay
			}
		}
     67c:	003fd006 	br	5c0 <test_stearing+0x2c>
	}else if(test_type==2){ //test 2
     680:	e0bffe17 	ldw	r2,-8(fp)
     684:	10800098 	cmpnei	r2,r2,2
     688:	1000321e 	bne	r2,zero,754 <test_stearing+0x1c0>
		unsigned long s_duty2 = 0;
     68c:	e03ffc15 	stw	zero,-16(fp)
		unsigned int i = 0;
     690:	e03ffd15 	stw	zero,-12(fp)
		while(1){
			while(s_duty2<s_period){
     694:	00001406 	br	6e8 <test_stearing+0x154>
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
     698:	e0bfff17 	ldw	r2,-4(fp)
     69c:	d8800015 	stw	r2,0(sp)
     6a0:	00800084 	movi	r2,2
     6a4:	d8800115 	stw	r2,4(sp)
     6a8:	0009883a 	mov	r4,zero
     6ac:	000b883a 	mov	r5,zero
     6b0:	000d883a 	mov	r6,zero
     6b4:	e1fffc17 	ldw	r7,-16(fp)
     6b8:	00009500 	call	950 <steering_setting>
				s_duty2 += 10;
     6bc:	e0bffc17 	ldw	r2,-16(fp)
     6c0:	10800284 	addi	r2,r2,10
     6c4:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     6c8:	e03ffd15 	stw	zero,-12(fp)
     6cc:	00000306 	br	6dc <test_stearing+0x148>
     6d0:	e0bffd17 	ldw	r2,-12(fp)
     6d4:	10800044 	addi	r2,r2,1
     6d8:	e0bffd15 	stw	r2,-12(fp)
     6dc:	e0bffd17 	ldw	r2,-12(fp)
     6e0:	10827db0 	cmpltui	r2,r2,2550
     6e4:	103ffa1e 	bne	r2,zero,6d0 <test_stearing+0x13c>
		}
	}else if(test_type==2){ //test 2
		unsigned long s_duty2 = 0;
		unsigned int i = 0;
		while(1){
			while(s_duty2<s_period){
     6e8:	e0fffc17 	ldw	r3,-16(fp)
     6ec:	e0bfff17 	ldw	r2,-4(fp)
     6f0:	18bfe936 	bltu	r3,r2,698 <test_stearing+0x104>
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty2>0){
     6f4:	00001406 	br	748 <test_stearing+0x1b4>
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
     6f8:	e0bfff17 	ldw	r2,-4(fp)
     6fc:	d8800015 	stw	r2,0(sp)
     700:	00800084 	movi	r2,2
     704:	d8800115 	stw	r2,4(sp)
     708:	0009883a 	mov	r4,zero
     70c:	000b883a 	mov	r5,zero
     710:	000d883a 	mov	r6,zero
     714:	e1fffc17 	ldw	r7,-16(fp)
     718:	00009500 	call	950 <steering_setting>
				s_duty2 -= 10;
     71c:	e0bffc17 	ldw	r2,-16(fp)
     720:	10bffd84 	addi	r2,r2,-10
     724:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     728:	e03ffd15 	stw	zero,-12(fp)
     72c:	00000306 	br	73c <test_stearing+0x1a8>
     730:	e0bffd17 	ldw	r2,-12(fp)
     734:	10800044 	addi	r2,r2,1
     738:	e0bffd15 	stw	r2,-12(fp)
     73c:	e0bffd17 	ldw	r2,-12(fp)
     740:	10827db0 	cmpltui	r2,r2,2550
     744:	103ffa1e 	bne	r2,zero,730 <test_stearing+0x19c>
			while(s_duty2<s_period){
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty2>0){
     748:	e0bffc17 	ldw	r2,-16(fp)
     74c:	103fea1e 	bne	r2,zero,6f8 <test_stearing+0x164>
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 -= 10;
				for(i=0;i<2550;i++); //delay
			}
		}
     750:	003fd006 	br	694 <test_stearing+0x100>
	}
	return;
     754:	0001883a 	nop
}
     758:	e037883a 	mov	sp,fp
     75c:	dfc00117 	ldw	ra,4(sp)
     760:	df000017 	ldw	fp,0(sp)
     764:	dec00204 	addi	sp,sp,8
     768:	f800283a 	ret

0000076c <test_motor>:

//function to test motor pin (will not terminate)
//test 1: TODO
//test 2: TODO
//test 3: alternate between max value on pin 1 and on pin 2
void test_motor(unsigned int test_type, unsigned long m_period){
     76c:	defff704 	addi	sp,sp,-36
     770:	dfc00815 	stw	ra,32(sp)
     774:	df000715 	stw	fp,28(sp)
     778:	df000704 	addi	fp,sp,28
     77c:	e13ffe15 	stw	r4,-8(fp)
     780:	e17fff15 	stw	r5,-4(fp)
	if(test_type==1){ //test 1
     784:	e0bffe17 	ldw	r2,-8(fp)
     788:	10800060 	cmpeqi	r2,r2,1
     78c:	10006a1e 	bne	r2,zero,938 <test_motor+0x1cc>

	}else if(test_type==2){//test 2
     790:	e0bffe17 	ldw	r2,-8(fp)
     794:	108000a0 	cmpeqi	r2,r2,2
     798:	1000671e 	bne	r2,zero,938 <test_motor+0x1cc>

	}else if(test_type==3){//test 3
     79c:	e0bffe17 	ldw	r2,-8(fp)
     7a0:	108000d8 	cmpnei	r2,r2,3
     7a4:	1000641e 	bne	r2,zero,938 <test_motor+0x1cc>
		unsigned long m_duty1 = 0;
     7a8:	e03ffb15 	stw	zero,-20(fp)
		unsigned long m_duty2 = 0;
     7ac:	e03ffc15 	stw	zero,-16(fp)
		unsigned int i = 0;
     7b0:	e03ffd15 	stw	zero,-12(fp)
		while(1){
			//drive forward
			while(m_duty1<m_period){
     7b4:	00001406 	br	808 <test_motor+0x9c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     7b8:	e0bfff17 	ldw	r2,-4(fp)
     7bc:	d8800015 	stw	r2,0(sp)
     7c0:	008000c4 	movi	r2,3
     7c4:	d8800115 	stw	r2,4(sp)
     7c8:	0009883a 	mov	r4,zero
     7cc:	e17ffb17 	ldw	r5,-20(fp)
     7d0:	000d883a 	mov	r6,zero
     7d4:	e1fffc17 	ldw	r7,-16(fp)
     7d8:	00004b00 	call	4b0 <motor_setting>
				m_duty1 += 10;
     7dc:	e0bffb17 	ldw	r2,-20(fp)
     7e0:	10800284 	addi	r2,r2,10
     7e4:	e0bffb15 	stw	r2,-20(fp)
				for(i=0;i<2550;i++); //delay
     7e8:	e03ffd15 	stw	zero,-12(fp)
     7ec:	00000306 	br	7fc <test_motor+0x90>
     7f0:	e0bffd17 	ldw	r2,-12(fp)
     7f4:	10800044 	addi	r2,r2,1
     7f8:	e0bffd15 	stw	r2,-12(fp)
     7fc:	e0bffd17 	ldw	r2,-12(fp)
     800:	10827db0 	cmpltui	r2,r2,2550
     804:	103ffa1e 	bne	r2,zero,7f0 <test_motor+0x84>
		unsigned long m_duty1 = 0;
		unsigned long m_duty2 = 0;
		unsigned int i = 0;
		while(1){
			//drive forward
			while(m_duty1<m_period){
     808:	e0fffb17 	ldw	r3,-20(fp)
     80c:	e0bfff17 	ldw	r2,-4(fp)
     810:	18bfe936 	bltu	r3,r2,7b8 <test_motor+0x4c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty1>0){
     814:	00001406 	br	868 <test_motor+0xfc>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     818:	e0bfff17 	ldw	r2,-4(fp)
     81c:	d8800015 	stw	r2,0(sp)
     820:	008000c4 	movi	r2,3
     824:	d8800115 	stw	r2,4(sp)
     828:	0009883a 	mov	r4,zero
     82c:	e17ffb17 	ldw	r5,-20(fp)
     830:	000d883a 	mov	r6,zero
     834:	e1fffc17 	ldw	r7,-16(fp)
     838:	00004b00 	call	4b0 <motor_setting>
				m_duty1 -= 10;
     83c:	e0bffb17 	ldw	r2,-20(fp)
     840:	10bffd84 	addi	r2,r2,-10
     844:	e0bffb15 	stw	r2,-20(fp)
				for(i=0;i<2550;i++); //delay
     848:	e03ffd15 	stw	zero,-12(fp)
     84c:	00000306 	br	85c <test_motor+0xf0>
     850:	e0bffd17 	ldw	r2,-12(fp)
     854:	10800044 	addi	r2,r2,1
     858:	e0bffd15 	stw	r2,-12(fp)
     85c:	e0bffd17 	ldw	r2,-12(fp)
     860:	10827db0 	cmpltui	r2,r2,2550
     864:	103ffa1e 	bne	r2,zero,850 <test_motor+0xe4>
			while(m_duty1<m_period){
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty1>0){
     868:	e0bffb17 	ldw	r2,-20(fp)
     86c:	103fea1e 	bne	r2,zero,818 <test_motor+0xac>
				m_duty1 -= 10;
				for(i=0;i<2550;i++); //delay
			}

			//drive backwards
			m_duty1 = 0;
     870:	e03ffb15 	stw	zero,-20(fp)
			while(m_duty2<m_period){
     874:	00001406 	br	8c8 <test_motor+0x15c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     878:	e0bfff17 	ldw	r2,-4(fp)
     87c:	d8800015 	stw	r2,0(sp)
     880:	008000c4 	movi	r2,3
     884:	d8800115 	stw	r2,4(sp)
     888:	0009883a 	mov	r4,zero
     88c:	e17ffb17 	ldw	r5,-20(fp)
     890:	000d883a 	mov	r6,zero
     894:	e1fffc17 	ldw	r7,-16(fp)
     898:	00004b00 	call	4b0 <motor_setting>
				m_duty2 += 10;
     89c:	e0bffc17 	ldw	r2,-16(fp)
     8a0:	10800284 	addi	r2,r2,10
     8a4:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     8a8:	e03ffd15 	stw	zero,-12(fp)
     8ac:	00000306 	br	8bc <test_motor+0x150>
     8b0:	e0bffd17 	ldw	r2,-12(fp)
     8b4:	10800044 	addi	r2,r2,1
     8b8:	e0bffd15 	stw	r2,-12(fp)
     8bc:	e0bffd17 	ldw	r2,-12(fp)
     8c0:	10827db0 	cmpltui	r2,r2,2550
     8c4:	103ffa1e 	bne	r2,zero,8b0 <test_motor+0x144>
				for(i=0;i<2550;i++); //delay
			}

			//drive backwards
			m_duty1 = 0;
			while(m_duty2<m_period){
     8c8:	e0fffc17 	ldw	r3,-16(fp)
     8cc:	e0bfff17 	ldw	r2,-4(fp)
     8d0:	18bfe936 	bltu	r3,r2,878 <test_motor+0x10c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty2>0){
     8d4:	00001406 	br	928 <test_motor+0x1bc>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     8d8:	e0bfff17 	ldw	r2,-4(fp)
     8dc:	d8800015 	stw	r2,0(sp)
     8e0:	008000c4 	movi	r2,3
     8e4:	d8800115 	stw	r2,4(sp)
     8e8:	0009883a 	mov	r4,zero
     8ec:	e17ffb17 	ldw	r5,-20(fp)
     8f0:	000d883a 	mov	r6,zero
     8f4:	e1fffc17 	ldw	r7,-16(fp)
     8f8:	00004b00 	call	4b0 <motor_setting>
				m_duty2 -= 10;
     8fc:	e0bffc17 	ldw	r2,-16(fp)
     900:	10bffd84 	addi	r2,r2,-10
     904:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     908:	e03ffd15 	stw	zero,-12(fp)
     90c:	00000306 	br	91c <test_motor+0x1b0>
     910:	e0bffd17 	ldw	r2,-12(fp)
     914:	10800044 	addi	r2,r2,1
     918:	e0bffd15 	stw	r2,-12(fp)
     91c:	e0bffd17 	ldw	r2,-12(fp)
     920:	10827db0 	cmpltui	r2,r2,2550
     924:	103ffa1e 	bne	r2,zero,910 <test_motor+0x1a4>
			while(m_duty2<m_period){
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty2>0){
     928:	e0bffc17 	ldw	r2,-16(fp)
     92c:	103fea1e 	bne	r2,zero,8d8 <test_motor+0x16c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 -= 10;
				for(i=0;i<2550;i++); //delay
			}
			m_duty2 = 0;
     930:	e03ffc15 	stw	zero,-16(fp)
		}
     934:	003f9f06 	br	7b4 <test_motor+0x48>
	}
	return;
     938:	0001883a 	nop
}
     93c:	e037883a 	mov	sp,fp
     940:	dfc00117 	ldw	ra,4(sp)
     944:	df000017 	ldw	fp,0(sp)
     948:	dec00204 	addi	sp,sp,8
     94c:	f800283a 	ret

00000950 <steering_setting>:
 */

#include "steering_setting.h"

void steering_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable){
     950:	defff504 	addi	sp,sp,-44
     954:	df000a15 	stw	fp,40(sp)
     958:	df000a04 	addi	fp,sp,40
     95c:	e13ffc15 	stw	r4,-16(fp)
     960:	e17ffd15 	stw	r5,-12(fp)
     964:	e1bffe15 	stw	r6,-8(fp)
     968:	e1ffff15 	stw	r7,-4(fp)

	unsigned long * pwm_en= (unsigned long *)STEERING_PWM_EN;
     96c:	00808074 	movhi	r2,513
     970:	10a8a804 	addi	r2,r2,-23904
     974:	e0bff615 	stw	r2,-40(fp)
	unsigned long * pwm_period=(unsigned long *)STEERING_PWM_PERIOD;
     978:	00808074 	movhi	r2,513
     97c:	10a8a904 	addi	r2,r2,-23900
     980:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_phase1=(unsigned long *)STEERING_PWM_PHASE1;
     984:	00808074 	movhi	r2,513
     988:	10a8ac04 	addi	r2,r2,-23888
     98c:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_phase2=(unsigned long *)STEERING_PWM_PHASE2;
     990:	00808074 	movhi	r2,513
     994:	10a8ad04 	addi	r2,r2,-23884
     998:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_duty1=(unsigned long *)STEERING_PWM_DUTY1;
     99c:	00808074 	movhi	r2,513
     9a0:	10a8aa04 	addi	r2,r2,-23896
     9a4:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_duty2=(unsigned long *)STEERING_PWM_DUTY2;
     9a8:	00808074 	movhi	r2,513
     9ac:	10a8ab04 	addi	r2,r2,-23892
     9b0:	e0bffb15 	stw	r2,-20(fp)

	* pwm_en=enable;
     9b4:	e0bff617 	ldw	r2,-40(fp)
     9b8:	e0c00217 	ldw	r3,8(fp)
     9bc:	10c00015 	stw	r3,0(r2)
	* pwm_period=period;
     9c0:	e0bff717 	ldw	r2,-36(fp)
     9c4:	e0c00117 	ldw	r3,4(fp)
     9c8:	10c00015 	stw	r3,0(r2)
	* pwm_phase1=phase1;
     9cc:	e0bff817 	ldw	r2,-32(fp)
     9d0:	e0fffc17 	ldw	r3,-16(fp)
     9d4:	10c00015 	stw	r3,0(r2)
	* pwm_phase2=phase2;
     9d8:	e0bff917 	ldw	r2,-28(fp)
     9dc:	e0fffe17 	ldw	r3,-8(fp)
     9e0:	10c00015 	stw	r3,0(r2)
	* pwm_duty1=duty1;
     9e4:	e0bffa17 	ldw	r2,-24(fp)
     9e8:	e0fffd17 	ldw	r3,-12(fp)
     9ec:	10c00015 	stw	r3,0(r2)
	* pwm_duty2=duty2;
     9f0:	e0bffb17 	ldw	r2,-20(fp)
     9f4:	e0ffff17 	ldw	r3,-4(fp)
     9f8:	10c00015 	stw	r3,0(r2)
}
     9fc:	e037883a 	mov	sp,fp
     a00:	df000017 	ldw	fp,0(sp)
     a04:	dec00104 	addi	sp,sp,4
     a08:	f800283a 	ret

00000a0c <steering_set_level>:

//possible levels are from -7 to 7
void steering_set_level(char level){
     a0c:	defff804 	addi	sp,sp,-32
     a10:	dfc00715 	stw	ra,28(sp)
     a14:	df000615 	stw	fp,24(sp)
     a18:	df000604 	addi	fp,sp,24
     a1c:	2005883a 	mov	r2,r4
     a20:	e0bfff05 	stb	r2,-4(fp)
	unsigned long period = 0x186A;
     a24:	00861a84 	movi	r2,6250
     a28:	e0bffe15 	stw	r2,-8(fp)
	unsigned long phase1 = 0;
     a2c:	e03ffc15 	stw	zero,-16(fp)
	unsigned long phase2 = 0;
     a30:	e03ffd15 	stw	zero,-12(fp)
	switch(level){
     a34:	e0bfff07 	ldb	r2,-4(fp)
     a38:	108001c4 	addi	r2,r2,7
     a3c:	10c003e8 	cmpgeui	r3,r2,15
     a40:	1800501e 	bne	r3,zero,b84 <steering_set_level+0x178>
     a44:	100690ba 	slli	r3,r2,2
     a48:	00800034 	movhi	r2,0
     a4c:	10829704 	addi	r2,r2,2652
     a50:	1885883a 	add	r2,r3,r2
     a54:	10800017 	ldw	r2,0(r2)
     a58:	1000683a 	jmp	r2
     a5c:	00000a98 	cmpnei	zero,zero,42
     a60:	00000aa8 	cmpgeui	zero,zero,42
     a64:	00000ab8 	rdprs	zero,zero,42
     a68:	00000ac8 	cmpgei	zero,zero,43
     a6c:	00000ad8 	cmpnei	zero,zero,43
     a70:	00000ae8 	cmpgeui	zero,zero,43
     a74:	00000af8 	rdprs	zero,zero,43
     a78:	00000b08 	cmpgei	zero,zero,44
     a7c:	00000b74 	movhi	zero,45
     a80:	00000b64 	muli	zero,zero,45
     a84:	00000b54 	movui	zero,45
     a88:	00000b44 	movi	zero,45
     a8c:	00000b34 	movhi	zero,44
     a90:	00000b24 	muli	zero,zero,44
     a94:	00000b14 	movui	zero,44
	case -7:phase1 = 0x186A;
     a98:	00861a84 	movi	r2,6250
     a9c:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     aa0:	e03ffd15 	stw	zero,-12(fp)
     aa4:	00003906 	br	b8c <steering_set_level+0x180>
	case -6:phase1 = 5357;
     aa8:	00853b44 	movi	r2,5357
     aac:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     ab0:	e03ffd15 	stw	zero,-12(fp)
     ab4:	00003506 	br	b8c <steering_set_level+0x180>
	case -5:phase1 = 4464;
     ab8:	00845c04 	movi	r2,4464
     abc:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     ac0:	e03ffd15 	stw	zero,-12(fp)
     ac4:	00003106 	br	b8c <steering_set_level+0x180>
	case -4:phase1 = 3571;
     ac8:	00837cc4 	movi	r2,3571
     acc:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     ad0:	e03ffd15 	stw	zero,-12(fp)
     ad4:	00002d06 	br	b8c <steering_set_level+0x180>
	case -3:phase1 = 2679;
     ad8:	00829dc4 	movi	r2,2679
     adc:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     ae0:	e03ffd15 	stw	zero,-12(fp)
     ae4:	00002906 	br	b8c <steering_set_level+0x180>
	case -2:phase1 = 1786;
     ae8:	0081be84 	movi	r2,1786
     aec:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     af0:	e03ffd15 	stw	zero,-12(fp)
     af4:	00002506 	br	b8c <steering_set_level+0x180>
	case -1:phase1 = 893;
     af8:	0080df44 	movi	r2,893
     afc:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     b00:	e03ffd15 	stw	zero,-12(fp)
     b04:	00002106 	br	b8c <steering_set_level+0x180>
	case 0: phase1 = 0;
     b08:	e03ffc15 	stw	zero,-16(fp)
			phase2 = 0; break;
     b0c:	e03ffd15 	stw	zero,-12(fp)
     b10:	00001e06 	br	b8c <steering_set_level+0x180>
	case 7: phase2 = 0x186A;
     b14:	00861a84 	movi	r2,6250
     b18:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     b1c:	e03ffc15 	stw	zero,-16(fp)
     b20:	00001a06 	br	b8c <steering_set_level+0x180>
	case 6: phase2 = 5357;
     b24:	00853b44 	movi	r2,5357
     b28:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     b2c:	e03ffc15 	stw	zero,-16(fp)
     b30:	00001606 	br	b8c <steering_set_level+0x180>
	case 5: phase2 = 4464;
     b34:	00845c04 	movi	r2,4464
     b38:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     b3c:	e03ffc15 	stw	zero,-16(fp)
     b40:	00001206 	br	b8c <steering_set_level+0x180>
	case 4: phase2 = 3571;
     b44:	00837cc4 	movi	r2,3571
     b48:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     b4c:	e03ffc15 	stw	zero,-16(fp)
     b50:	00000e06 	br	b8c <steering_set_level+0x180>
	case 3: phase2 = 2679;
     b54:	00829dc4 	movi	r2,2679
     b58:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     b5c:	e03ffc15 	stw	zero,-16(fp)
     b60:	00000a06 	br	b8c <steering_set_level+0x180>
	case 2: phase2 = 1786;
     b64:	0081be84 	movi	r2,1786
     b68:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     b6c:	e03ffc15 	stw	zero,-16(fp)
     b70:	00000606 	br	b8c <steering_set_level+0x180>
	case 1: phase2 = 893;
     b74:	0080df44 	movi	r2,893
     b78:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     b7c:	e03ffc15 	stw	zero,-16(fp)
     b80:	00000206 	br	b8c <steering_set_level+0x180>
	default:phase1 = 0;
     b84:	e03ffc15 	stw	zero,-16(fp)
			phase2 = 0;
     b88:	e03ffd15 	stw	zero,-12(fp)
	}
	steering_setting(0, phase1, 0, phase2, period, 3);
     b8c:	e0bffe17 	ldw	r2,-8(fp)
     b90:	d8800015 	stw	r2,0(sp)
     b94:	008000c4 	movi	r2,3
     b98:	d8800115 	stw	r2,4(sp)
     b9c:	0009883a 	mov	r4,zero
     ba0:	e17ffc17 	ldw	r5,-16(fp)
     ba4:	000d883a 	mov	r6,zero
     ba8:	e1fffd17 	ldw	r7,-12(fp)
     bac:	00009500 	call	950 <steering_setting>
}
     bb0:	e037883a 	mov	sp,fp
     bb4:	dfc00117 	ldw	ra,4(sp)
     bb8:	df000017 	ldw	fp,0(sp)
     bbc:	dec00204 	addi	sp,sp,8
     bc0:	f800283a 	ret

00000bc4 <uart_init>:

  Remarks:
    None
  ***************************************************************************/
void uart_init(long Address, unsigned char flag)
{
     bc4:	defffd04 	addi	sp,sp,-12
     bc8:	df000215 	stw	fp,8(sp)
     bcc:	df000204 	addi	fp,sp,8
     bd0:	e13ffe15 	stw	r4,-8(fp)
     bd4:	2805883a 	mov	r2,r5
     bd8:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL(Address, flag);
     bdc:	e0bffe17 	ldw	r2,-8(fp)
     be0:	10800304 	addi	r2,r2,12
     be4:	1007883a 	mov	r3,r2
     be8:	e0bfff03 	ldbu	r2,-4(fp)
     bec:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_UART_STATUS(Address, 0x00);
     bf0:	e0bffe17 	ldw	r2,-8(fp)
     bf4:	10800204 	addi	r2,r2,8
     bf8:	0007883a 	mov	r3,zero
     bfc:	10c00035 	stwio	r3,0(r2)
}
     c00:	e037883a 	mov	sp,fp
     c04:	df000017 	ldw	fp,0(sp)
     c08:	dec00104 	addi	sp,sp,4
     c0c:	f800283a 	ret

00000c10 <uart_send_byte>:

  Remarks:
    None
  ***************************************************************************/
void uart_send_byte(long Address, unsigned char data)
{
     c10:	defffc04 	addi	sp,sp,-16
     c14:	df000315 	stw	fp,12(sp)
     c18:	df000304 	addi	fp,sp,12
     c1c:	e13ffe15 	stw	r4,-8(fp)
     c20:	2805883a 	mov	r2,r5
     c24:	e0bfff05 	stb	r2,-4(fp)
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
     c28:	e0bffe17 	ldw	r2,-8(fp)
     c2c:	10800104 	addi	r2,r2,4
     c30:	1007883a 	mov	r3,r2
     c34:	e0bfff03 	ldbu	r2,-4(fp)
     c38:	18800035 	stwio	r2,0(r3)
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     c3c:	e0bffe17 	ldw	r2,-8(fp)
     c40:	10800204 	addi	r2,r2,8
     c44:	10800037 	ldwio	r2,0(r2)
     c48:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0040))
     c4c:	00000406 	br	c60 <uart_send_byte+0x50>
    {
    	//printf("Status in send is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     c50:	e0bffe17 	ldw	r2,-8(fp)
     c54:	10800204 	addi	r2,r2,8
     c58:	10800037 	ldwio	r2,0(r2)
     c5c:	e0bffd15 	stw	r2,-12(fp)
void uart_send_byte(long Address, unsigned char data)
{
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0040))
     c60:	e0bffd17 	ldw	r2,-12(fp)
     c64:	1080100c 	andi	r2,r2,64
     c68:	103ff926 	beq	r2,zero,c50 <uart_send_byte+0x40>
    {
    	//printf("Status in send is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
}
     c6c:	e037883a 	mov	sp,fp
     c70:	df000017 	ldw	fp,0(sp)
     c74:	dec00104 	addi	sp,sp,4
     c78:	f800283a 	ret

00000c7c <uart_receive_byte>:

  Remarks:
    None
  ***************************************************************************/
unsigned char uart_receive_byte(long Address)
{
     c7c:	defffc04 	addi	sp,sp,-16
     c80:	df000315 	stw	fp,12(sp)
     c84:	df000304 	addi	fp,sp,12
     c88:	e13fff15 	stw	r4,-4(fp)
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     c8c:	e0bfff17 	ldw	r2,-4(fp)
     c90:	10800204 	addi	r2,r2,8
     c94:	10800037 	ldwio	r2,0(r2)
     c98:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0080))
     c9c:	00000406 	br	cb0 <uart_receive_byte+0x34>
    {
    	//printf("Status in receive is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     ca0:	e0bfff17 	ldw	r2,-4(fp)
     ca4:	10800204 	addi	r2,r2,8
     ca8:	10800037 	ldwio	r2,0(r2)
     cac:	e0bffd15 	stw	r2,-12(fp)
unsigned char uart_receive_byte(long Address)
{
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0080))
     cb0:	e0bffd17 	ldw	r2,-12(fp)
     cb4:	1080200c 	andi	r2,r2,128
     cb8:	103ff926 	beq	r2,zero,ca0 <uart_receive_byte+0x24>
    {
    	//printf("Status in receive is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
    res=IORD_ALTERA_AVALON_UART_RXDATA(Address);
     cbc:	e0bfff17 	ldw	r2,-4(fp)
     cc0:	10800037 	ldwio	r2,0(r2)
     cc4:	e0bffe05 	stb	r2,-8(fp)
    return res;
     cc8:	e0bffe03 	ldbu	r2,-8(fp)
}
     ccc:	e037883a 	mov	sp,fp
     cd0:	df000017 	ldw	fp,0(sp)
     cd4:	dec00104 	addi	sp,sp,4
     cd8:	f800283a 	ret

00000cdc <ultrasound_init>:

  Remarks:
    None
  ***************************************************************************/
void ultrasound_init(long Address)
{
     cdc:	defffd04 	addi	sp,sp,-12
     ce0:	dfc00215 	stw	ra,8(sp)
     ce4:	df000115 	stw	fp,4(sp)
     ce8:	df000104 	addi	fp,sp,4
     cec:	e13fff15 	stw	r4,-4(fp)
	uart_init(Address, 0x00);
     cf0:	e13fff17 	ldw	r4,-4(fp)
     cf4:	000b883a 	mov	r5,zero
     cf8:	0000bc40 	call	bc4 <uart_init>
}
     cfc:	e037883a 	mov	sp,fp
     d00:	dfc00117 	ldw	ra,4(sp)
     d04:	df000017 	ldw	fp,0(sp)
     d08:	dec00204 	addi	sp,sp,8
     d0c:	f800283a 	ret

00000d10 <ultrasound_read>:

  Remarks:
    Distance in meter
  ***************************************************************************/
unsigned int ultrasound_read(long Address)
{
     d10:	defffb04 	addi	sp,sp,-20
     d14:	dfc00415 	stw	ra,16(sp)
     d18:	df000315 	stw	fp,12(sp)
     d1c:	df000304 	addi	fp,sp,12
     d20:	e13fff15 	stw	r4,-4(fp)
	unsigned int i;
	unsigned char res_l, res_h;
	uart_send_byte(Address, 0xe8);
     d24:	e13fff17 	ldw	r4,-4(fp)
     d28:	01403a04 	movi	r5,232
     d2c:	0000c100 	call	c10 <uart_send_byte>

	for (i = 0; i < 2000; i++); //delay
     d30:	e03ffd15 	stw	zero,-12(fp)
     d34:	00000306 	br	d44 <ultrasound_read+0x34>
     d38:	e0bffd17 	ldw	r2,-12(fp)
     d3c:	10800044 	addi	r2,r2,1
     d40:	e0bffd15 	stw	r2,-12(fp)
     d44:	e0bffd17 	ldw	r2,-12(fp)
     d48:	1081f430 	cmpltui	r2,r2,2000
     d4c:	103ffa1e 	bne	r2,zero,d38 <ultrasound_read+0x28>

	uart_send_byte(Address, 0x02);
     d50:	e13fff17 	ldw	r4,-4(fp)
     d54:	01400084 	movi	r5,2
     d58:	0000c100 	call	c10 <uart_send_byte>

	for (i = 0; i < 2000; i++); //delay
     d5c:	e03ffd15 	stw	zero,-12(fp)
     d60:	00000306 	br	d70 <ultrasound_read+0x60>
     d64:	e0bffd17 	ldw	r2,-12(fp)
     d68:	10800044 	addi	r2,r2,1
     d6c:	e0bffd15 	stw	r2,-12(fp)
     d70:	e0bffd17 	ldw	r2,-12(fp)
     d74:	1081f430 	cmpltui	r2,r2,2000
     d78:	103ffa1e 	bne	r2,zero,d64 <ultrasound_read+0x54>

	uart_send_byte(Address, 0x0a); //0x0a -> range (0m-1m)
     d7c:	e13fff17 	ldw	r4,-4(fp)
     d80:	01400284 	movi	r5,10
     d84:	0000c100 	call	c10 <uart_send_byte>

	res_h = uart_receive_byte(Address);
     d88:	e13fff17 	ldw	r4,-4(fp)
     d8c:	0000c7c0 	call	c7c <uart_receive_byte>
     d90:	e0bffe05 	stb	r2,-8(fp)

	//for (i = 0; i < 1000; i++); //delay

	res_l = uart_receive_byte(Address);
     d94:	e13fff17 	ldw	r4,-4(fp)
     d98:	0000c7c0 	call	c7c <uart_receive_byte>
     d9c:	e0bffe45 	stb	r2,-7(fp)

	//printf("res_h is %x, res_l is %x.\n", res_h, res_l);

	return (((unsigned int) res_h) << 8) + res_l;
     da0:	e0bffe03 	ldbu	r2,-8(fp)
     da4:	1006923a 	slli	r3,r2,8
     da8:	e0bffe43 	ldbu	r2,-7(fp)
     dac:	1885883a 	add	r2,r3,r2
}
     db0:	e037883a 	mov	sp,fp
     db4:	dfc00117 	ldw	ra,4(sp)
     db8:	df000017 	ldw	fp,0(sp)
     dbc:	dec00204 	addi	sp,sp,8
     dc0:	f800283a 	ret

00000dc4 <__mulsi3>:
     dc4:	0005883a 	mov	r2,zero
     dc8:	20000726 	beq	r4,zero,de8 <__mulsi3+0x24>
     dcc:	20c0004c 	andi	r3,r4,1
     dd0:	2008d07a 	srli	r4,r4,1
     dd4:	18000126 	beq	r3,zero,ddc <__mulsi3+0x18>
     dd8:	1145883a 	add	r2,r2,r5
     ddc:	294b883a 	add	r5,r5,r5
     de0:	203ffa1e 	bne	r4,zero,dcc <__mulsi3+0x8>
     de4:	f800283a 	ret
     de8:	f800283a 	ret

00000dec <__divsf3>:
     dec:	defff504 	addi	sp,sp,-44
     df0:	dd000515 	stw	r20,20(sp)
     df4:	2028d5fa 	srli	r20,r4,23
     df8:	dd400615 	stw	r21,24(sp)
     dfc:	202ad7fa 	srli	r21,r4,31
     e00:	00c02034 	movhi	r3,128
     e04:	dcc00415 	stw	r19,16(sp)
     e08:	dc800315 	stw	r18,12(sp)
     e0c:	18ffffc4 	addi	r3,r3,-1
     e10:	dfc00a15 	stw	ra,40(sp)
     e14:	df000915 	stw	fp,36(sp)
     e18:	ddc00815 	stw	r23,32(sp)
     e1c:	dd800715 	stw	r22,28(sp)
     e20:	dc400215 	stw	r17,8(sp)
     e24:	dc000115 	stw	r16,4(sp)
     e28:	a5003fcc 	andi	r20,r20,255
     e2c:	1924703a 	and	r18,r3,r4
     e30:	acc03fcc 	andi	r19,r21,255
     e34:	a0004d26 	beq	r20,zero,f6c <__divsf3+0x180>
     e38:	00803fc4 	movi	r2,255
     e3c:	a0802e26 	beq	r20,r2,ef8 <__divsf3+0x10c>
     e40:	91002034 	orhi	r4,r18,128
     e44:	202490fa 	slli	r18,r4,3
     e48:	a53fe044 	addi	r20,r20,-127
     e4c:	0021883a 	mov	r16,zero
     e50:	002f883a 	mov	r23,zero
     e54:	2804d5fa 	srli	r2,r5,23
     e58:	282cd7fa 	srli	r22,r5,31
     e5c:	00c02034 	movhi	r3,128
     e60:	18ffffc4 	addi	r3,r3,-1
     e64:	10803fcc 	andi	r2,r2,255
     e68:	1962703a 	and	r17,r3,r5
     e6c:	b7003fcc 	andi	fp,r22,255
     e70:	10004526 	beq	r2,zero,f88 <__divsf3+0x19c>
     e74:	00c03fc4 	movi	r3,255
     e78:	10c04026 	beq	r2,r3,f7c <__divsf3+0x190>
     e7c:	88c02034 	orhi	r3,r17,128
     e80:	182290fa 	slli	r17,r3,3
     e84:	10bfe044 	addi	r2,r2,-127
     e88:	0009883a 	mov	r4,zero
     e8c:	2420b03a 	or	r16,r4,r16
     e90:	802090ba 	slli	r16,r16,2
     e94:	01c00034 	movhi	r7,0
     e98:	39c3ae04 	addi	r7,r7,3768
     e9c:	81e1883a 	add	r16,r16,r7
     ea0:	80c00017 	ldw	r3,0(r16)
     ea4:	ad8af03a 	xor	r5,r21,r22
     ea8:	280d883a 	mov	r6,r5
     eac:	a085c83a 	sub	r2,r20,r2
     eb0:	29403fcc 	andi	r5,r5,255
     eb4:	1800683a 	jmp	r3
     eb8:	000010c4 	movi	zero,67
     ebc:	0000106c 	andhi	zero,zero,65
     ec0:	00001090 	cmplti	zero,zero,66
     ec4:	00001058 	cmpnei	zero,zero,65
     ec8:	00001090 	cmplti	zero,zero,66
     ecc:	00000f08 	cmpgei	zero,zero,60
     ed0:	00001090 	cmplti	zero,zero,66
     ed4:	00001058 	cmpnei	zero,zero,65
     ed8:	0000106c 	andhi	zero,zero,65
     edc:	0000106c 	andhi	zero,zero,65
     ee0:	00000f08 	cmpgei	zero,zero,60
     ee4:	00001058 	cmpnei	zero,zero,65
     ee8:	0000115c 	xori	zero,zero,69
     eec:	0000115c 	xori	zero,zero,69
     ef0:	0000115c 	xori	zero,zero,69
     ef4:	0000109c 	xori	zero,zero,66
     ef8:	9000531e 	bne	r18,zero,1048 <__divsf3+0x25c>
     efc:	04000204 	movi	r16,8
     f00:	05c00084 	movi	r23,2
     f04:	003fd306 	br	e54 <__divsf3+0x68>
     f08:	00c02034 	movhi	r3,128
     f0c:	000d883a 	mov	r6,zero
     f10:	18ffffc4 	addi	r3,r3,-1
     f14:	013fffc4 	movi	r4,-1
     f18:	21003fcc 	andi	r4,r4,255
     f1c:	200895fa 	slli	r4,r4,23
     f20:	30803fcc 	andi	r2,r6,255
     f24:	01802034 	movhi	r6,128
     f28:	31bfffc4 	addi	r6,r6,-1
     f2c:	100497fa 	slli	r2,r2,31
     f30:	1986703a 	and	r3,r3,r6
     f34:	1906b03a 	or	r3,r3,r4
     f38:	1884b03a 	or	r2,r3,r2
     f3c:	dfc00a17 	ldw	ra,40(sp)
     f40:	df000917 	ldw	fp,36(sp)
     f44:	ddc00817 	ldw	r23,32(sp)
     f48:	dd800717 	ldw	r22,28(sp)
     f4c:	dd400617 	ldw	r21,24(sp)
     f50:	dd000517 	ldw	r20,20(sp)
     f54:	dcc00417 	ldw	r19,16(sp)
     f58:	dc800317 	ldw	r18,12(sp)
     f5c:	dc400217 	ldw	r17,8(sp)
     f60:	dc000117 	ldw	r16,4(sp)
     f64:	dec00b04 	addi	sp,sp,44
     f68:	f800283a 	ret
     f6c:	90002b1e 	bne	r18,zero,101c <__divsf3+0x230>
     f70:	04000104 	movi	r16,4
     f74:	05c00044 	movi	r23,1
     f78:	003fb606 	br	e54 <__divsf3+0x68>
     f7c:	8800251e 	bne	r17,zero,1014 <__divsf3+0x228>
     f80:	01000084 	movi	r4,2
     f84:	00000206 	br	f90 <__divsf3+0x1a4>
     f88:	88001a1e 	bne	r17,zero,ff4 <__divsf3+0x208>
     f8c:	01000044 	movi	r4,1
     f90:	2420b03a 	or	r16,r4,r16
     f94:	802090ba 	slli	r16,r16,2
     f98:	00c00034 	movhi	r3,0
     f9c:	18c3ed04 	addi	r3,r3,4020
     fa0:	80e1883a 	add	r16,r16,r3
     fa4:	80c00017 	ldw	r3,0(r16)
     fa8:	ad8af03a 	xor	r5,r21,r22
     fac:	a085c83a 	sub	r2,r20,r2
     fb0:	1800683a 	jmp	r3
     fb4:	0000106c 	andhi	zero,zero,65
     fb8:	0000106c 	andhi	zero,zero,65
     fbc:	000011bc 	xorhi	zero,zero,70
     fc0:	00001054 	movui	zero,65
     fc4:	000011bc 	xorhi	zero,zero,70
     fc8:	00000f08 	cmpgei	zero,zero,60
     fcc:	000011bc 	xorhi	zero,zero,70
     fd0:	00001054 	movui	zero,65
     fd4:	0000106c 	andhi	zero,zero,65
     fd8:	0000106c 	andhi	zero,zero,65
     fdc:	00000f08 	cmpgei	zero,zero,60
     fe0:	00001054 	movui	zero,65
     fe4:	0000115c 	xori	zero,zero,69
     fe8:	0000115c 	xori	zero,zero,69
     fec:	0000115c 	xori	zero,zero,69
     ff0:	00001188 	cmpgei	zero,zero,70
     ff4:	8809883a 	mov	r4,r17
     ff8:	000145c0 	call	145c <__clzsi2>
     ffc:	10fffec4 	addi	r3,r2,-5
    1000:	88e2983a 	sll	r17,r17,r3
    1004:	00ffe284 	movi	r3,-118
    1008:	1885c83a 	sub	r2,r3,r2
    100c:	0009883a 	mov	r4,zero
    1010:	003f9e06 	br	e8c <__divsf3+0xa0>
    1014:	010000c4 	movi	r4,3
    1018:	003f9c06 	br	e8c <__divsf3+0xa0>
    101c:	9009883a 	mov	r4,r18
    1020:	d9400015 	stw	r5,0(sp)
    1024:	000145c0 	call	145c <__clzsi2>
    1028:	10fffec4 	addi	r3,r2,-5
    102c:	053fe284 	movi	r20,-118
    1030:	90e4983a 	sll	r18,r18,r3
    1034:	a0a9c83a 	sub	r20,r20,r2
    1038:	0021883a 	mov	r16,zero
    103c:	002f883a 	mov	r23,zero
    1040:	d9400017 	ldw	r5,0(sp)
    1044:	003f8306 	br	e54 <__divsf3+0x68>
    1048:	04000304 	movi	r16,12
    104c:	05c000c4 	movi	r23,3
    1050:	003f8006 	br	e54 <__divsf3+0x68>
    1054:	0023883a 	mov	r17,zero
    1058:	e027883a 	mov	r19,fp
    105c:	202f883a 	mov	r23,r4
    1060:	00c00084 	movi	r3,2
    1064:	980b883a 	mov	r5,r19
    1068:	b8c0501e 	bne	r23,r3,11ac <__divsf3+0x3c0>
    106c:	2980004c 	andi	r6,r5,1
    1070:	013fffc4 	movi	r4,-1
    1074:	0007883a 	mov	r3,zero
    1078:	003fa706 	br	f18 <__divsf3+0x12c>
    107c:	013fe084 	movi	r4,-126
    1080:	2089c83a 	sub	r4,r4,r2
    1084:	00c006c4 	movi	r3,27
    1088:	1900500e 	bge	r3,r4,11cc <__divsf3+0x3e0>
    108c:	9980004c 	andi	r6,r19,1
    1090:	0009883a 	mov	r4,zero
    1094:	0007883a 	mov	r3,zero
    1098:	003f9f06 	br	f18 <__divsf3+0x12c>
    109c:	9080102c 	andhi	r2,r18,64
    10a0:	10000226 	beq	r2,zero,10ac <__divsf3+0x2c0>
    10a4:	8880102c 	andhi	r2,r17,64
    10a8:	10003a26 	beq	r2,zero,1194 <__divsf3+0x3a8>
    10ac:	00802034 	movhi	r2,128
    10b0:	90c01034 	orhi	r3,r18,64
    10b4:	10bfffc4 	addi	r2,r2,-1
    10b8:	a80d883a 	mov	r6,r21
    10bc:	1886703a 	and	r3,r3,r2
    10c0:	003f9406 	br	f14 <__divsf3+0x128>
    10c4:	9006917a 	slli	r3,r18,5
    10c8:	8822917a 	slli	r17,r17,5
    10cc:	1c402936 	bltu	r3,r17,1174 <__divsf3+0x388>
    10d0:	1c47c83a 	sub	r3,r3,r17
    10d4:	2827883a 	mov	r19,r5
    10d8:	01800684 	movi	r6,26
    10dc:	01000044 	movi	r4,1
    10e0:	180f883a 	mov	r7,r3
    10e4:	2109883a 	add	r4,r4,r4
    10e8:	18c7883a 	add	r3,r3,r3
    10ec:	38000116 	blt	r7,zero,10f4 <__divsf3+0x308>
    10f0:	1c400236 	bltu	r3,r17,10fc <__divsf3+0x310>
    10f4:	1c47c83a 	sub	r3,r3,r17
    10f8:	21000054 	ori	r4,r4,1
    10fc:	31bfffc4 	addi	r6,r6,-1
    1100:	303ff71e 	bne	r6,zero,10e0 <__divsf3+0x2f4>
    1104:	1806c03a 	cmpne	r3,r3,zero
    1108:	1922b03a 	or	r17,r3,r4
    110c:	11001fc4 	addi	r4,r2,127
    1110:	013fda0e 	bge	zero,r4,107c <__divsf3+0x290>
    1114:	88c001cc 	andi	r3,r17,7
    1118:	18000426 	beq	r3,zero,112c <__divsf3+0x340>
    111c:	894003cc 	andi	r5,r17,15
    1120:	00c00104 	movi	r3,4
    1124:	28c00126 	beq	r5,r3,112c <__divsf3+0x340>
    1128:	88e3883a 	add	r17,r17,r3
    112c:	88c2002c 	andhi	r3,r17,2048
    1130:	18000426 	beq	r3,zero,1144 <__divsf3+0x358>
    1134:	11002004 	addi	r4,r2,128
    1138:	00be0034 	movhi	r2,63488
    113c:	10bfffc4 	addi	r2,r2,-1
    1140:	88a2703a 	and	r17,r17,r2
    1144:	00803f84 	movi	r2,254
    1148:	1100060e 	bge	r2,r4,1164 <__divsf3+0x378>
    114c:	9980004c 	andi	r6,r19,1
    1150:	013fffc4 	movi	r4,-1
    1154:	0007883a 	mov	r3,zero
    1158:	003f6f06 	br	f18 <__divsf3+0x12c>
    115c:	9023883a 	mov	r17,r18
    1160:	003fbf06 	br	1060 <__divsf3+0x274>
    1164:	880691ba 	slli	r3,r17,6
    1168:	9980004c 	andi	r6,r19,1
    116c:	1806d27a 	srli	r3,r3,9
    1170:	003f6906 	br	f18 <__divsf3+0x12c>
    1174:	10bfffc4 	addi	r2,r2,-1
    1178:	2827883a 	mov	r19,r5
    117c:	018006c4 	movi	r6,27
    1180:	0009883a 	mov	r4,zero
    1184:	003fd606 	br	10e0 <__divsf3+0x2f4>
    1188:	9080102c 	andhi	r2,r18,64
    118c:	0023883a 	mov	r17,zero
    1190:	103fc626 	beq	r2,zero,10ac <__divsf3+0x2c0>
    1194:	00802034 	movhi	r2,128
    1198:	88c01034 	orhi	r3,r17,64
    119c:	10bfffc4 	addi	r2,r2,-1
    11a0:	b00d883a 	mov	r6,r22
    11a4:	1886703a 	and	r3,r3,r2
    11a8:	003f5a06 	br	f14 <__divsf3+0x128>
    11ac:	00c000c4 	movi	r3,3
    11b0:	b8c01c26 	beq	r23,r3,1224 <__divsf3+0x438>
    11b4:	00c00044 	movi	r3,1
    11b8:	b8ffd41e 	bne	r23,r3,110c <__divsf3+0x320>
    11bc:	2980004c 	andi	r6,r5,1
    11c0:	0009883a 	mov	r4,zero
    11c4:	0007883a 	mov	r3,zero
    11c8:	003f5306 	br	f18 <__divsf3+0x12c>
    11cc:	10802784 	addi	r2,r2,158
    11d0:	8884983a 	sll	r2,r17,r2
    11d4:	8908d83a 	srl	r4,r17,r4
    11d8:	1022c03a 	cmpne	r17,r2,zero
    11dc:	8908b03a 	or	r4,r17,r4
    11e0:	208001cc 	andi	r2,r4,7
    11e4:	10000426 	beq	r2,zero,11f8 <__divsf3+0x40c>
    11e8:	20c003cc 	andi	r3,r4,15
    11ec:	00800104 	movi	r2,4
    11f0:	18800126 	beq	r3,r2,11f8 <__divsf3+0x40c>
    11f4:	2089883a 	add	r4,r4,r2
    11f8:	2081002c 	andhi	r2,r4,1024
    11fc:	10000426 	beq	r2,zero,1210 <__divsf3+0x424>
    1200:	9980004c 	andi	r6,r19,1
    1204:	01000044 	movi	r4,1
    1208:	0007883a 	mov	r3,zero
    120c:	003f4206 	br	f18 <__divsf3+0x12c>
    1210:	200691ba 	slli	r3,r4,6
    1214:	9980004c 	andi	r6,r19,1
    1218:	0009883a 	mov	r4,zero
    121c:	1806d27a 	srli	r3,r3,9
    1220:	003f3d06 	br	f18 <__divsf3+0x12c>
    1224:	00802034 	movhi	r2,128
    1228:	88c01034 	orhi	r3,r17,64
    122c:	10bfffc4 	addi	r2,r2,-1
    1230:	9980004c 	andi	r6,r19,1
    1234:	1886703a 	and	r3,r3,r2
    1238:	003f3606 	br	f14 <__divsf3+0x128>

0000123c <__floatunsisf>:
    123c:	defffe04 	addi	sp,sp,-8
    1240:	dc000015 	stw	r16,0(sp)
    1244:	dfc00115 	stw	ra,4(sp)
    1248:	2021883a 	mov	r16,r4
    124c:	20002626 	beq	r4,zero,12e8 <__floatunsisf+0xac>
    1250:	000145c0 	call	145c <__clzsi2>
    1254:	00c02784 	movi	r3,158
    1258:	1887c83a 	sub	r3,r3,r2
    125c:	01002584 	movi	r4,150
    1260:	20c00816 	blt	r4,r3,1284 <__floatunsisf+0x48>
    1264:	01000204 	movi	r4,8
    1268:	2080340e 	bge	r4,r2,133c <__floatunsisf+0x100>
    126c:	10bffe04 	addi	r2,r2,-8
    1270:	8088983a 	sll	r4,r16,r2
    1274:	00802034 	movhi	r2,128
    1278:	10bfffc4 	addi	r2,r2,-1
    127c:	2088703a 	and	r4,r4,r2
    1280:	00001b06 	br	12f0 <__floatunsisf+0xb4>
    1284:	01002644 	movi	r4,153
    1288:	20c02316 	blt	r4,r3,1318 <__floatunsisf+0xdc>
    128c:	01000144 	movi	r4,5
    1290:	2080020e 	bge	r4,r2,129c <__floatunsisf+0x60>
    1294:	113ffec4 	addi	r4,r2,-5
    1298:	8120983a 	sll	r16,r16,r4
    129c:	017f0034 	movhi	r5,64512
    12a0:	297fffc4 	addi	r5,r5,-1
    12a4:	810001cc 	andi	r4,r16,7
    12a8:	814a703a 	and	r5,r16,r5
    12ac:	20000426 	beq	r4,zero,12c0 <__floatunsisf+0x84>
    12b0:	840003cc 	andi	r16,r16,15
    12b4:	01000104 	movi	r4,4
    12b8:	81000126 	beq	r16,r4,12c0 <__floatunsisf+0x84>
    12bc:	290b883a 	add	r5,r5,r4
    12c0:	2901002c 	andhi	r4,r5,1024
    12c4:	20000526 	beq	r4,zero,12dc <__floatunsisf+0xa0>
    12c8:	00c027c4 	movi	r3,159
    12cc:	1887c83a 	sub	r3,r3,r2
    12d0:	00bf0034 	movhi	r2,64512
    12d4:	10bfffc4 	addi	r2,r2,-1
    12d8:	288a703a 	and	r5,r5,r2
    12dc:	280891ba 	slli	r4,r5,6
    12e0:	2008d27a 	srli	r4,r4,9
    12e4:	00000206 	br	12f0 <__floatunsisf+0xb4>
    12e8:	0007883a 	mov	r3,zero
    12ec:	0009883a 	mov	r4,zero
    12f0:	18c03fcc 	andi	r3,r3,255
    12f4:	180695fa 	slli	r3,r3,23
    12f8:	00802034 	movhi	r2,128
    12fc:	10bfffc4 	addi	r2,r2,-1
    1300:	2084703a 	and	r2,r4,r2
    1304:	10c4b03a 	or	r2,r2,r3
    1308:	dfc00117 	ldw	ra,4(sp)
    130c:	dc000017 	ldw	r16,0(sp)
    1310:	dec00204 	addi	sp,sp,8
    1314:	f800283a 	ret
    1318:	01400144 	movi	r5,5
    131c:	110006c4 	addi	r4,r2,27
    1320:	8108983a 	sll	r4,r16,r4
    1324:	288dc83a 	sub	r6,r5,r2
    1328:	81a0d83a 	srl	r16,r16,r6
    132c:	2008c03a 	cmpne	r4,r4,zero
    1330:	2420b03a 	or	r16,r4,r16
    1334:	28bfd90e 	bge	r5,r2,129c <__floatunsisf+0x60>
    1338:	003fd606 	br	1294 <__floatunsisf+0x58>
    133c:	01402034 	movhi	r5,128
    1340:	297fffc4 	addi	r5,r5,-1
    1344:	8148703a 	and	r4,r16,r5
    1348:	003fe906 	br	12f0 <__floatunsisf+0xb4>

0000134c <__extendsfdf2>:
    134c:	200ad5fa 	srli	r5,r4,23
    1350:	defffd04 	addi	sp,sp,-12
    1354:	dc400115 	stw	r17,4(sp)
    1358:	29403fcc 	andi	r5,r5,255
    135c:	29800044 	addi	r6,r5,1
    1360:	04402034 	movhi	r17,128
    1364:	dc000015 	stw	r16,0(sp)
    1368:	8c7fffc4 	addi	r17,r17,-1
    136c:	dfc00215 	stw	ra,8(sp)
    1370:	31803fcc 	andi	r6,r6,255
    1374:	00800044 	movi	r2,1
    1378:	8922703a 	and	r17,r17,r4
    137c:	2020d7fa 	srli	r16,r4,31
    1380:	1180110e 	bge	r2,r6,13c8 <__extendsfdf2+0x7c>
    1384:	880ed0fa 	srli	r7,r17,3
    1388:	8822977a 	slli	r17,r17,29
    138c:	2940e004 	addi	r5,r5,896
    1390:	2941ffcc 	andi	r5,r5,2047
    1394:	280c953a 	slli	r6,r5,20
    1398:	01400434 	movhi	r5,16
    139c:	800697fa 	slli	r3,r16,31
    13a0:	297fffc4 	addi	r5,r5,-1
    13a4:	394a703a 	and	r5,r7,r5
    13a8:	298ab03a 	or	r5,r5,r6
    13ac:	8805883a 	mov	r2,r17
    13b0:	28c6b03a 	or	r3,r5,r3
    13b4:	dfc00217 	ldw	ra,8(sp)
    13b8:	dc400117 	ldw	r17,4(sp)
    13bc:	dc000017 	ldw	r16,0(sp)
    13c0:	dec00304 	addi	sp,sp,12
    13c4:	f800283a 	ret
    13c8:	2800111e 	bne	r5,zero,1410 <__extendsfdf2+0xc4>
    13cc:	88001c26 	beq	r17,zero,1440 <__extendsfdf2+0xf4>
    13d0:	8809883a 	mov	r4,r17
    13d4:	000145c0 	call	145c <__clzsi2>
    13d8:	00c00284 	movi	r3,10
    13dc:	18801b16 	blt	r3,r2,144c <__extendsfdf2+0x100>
    13e0:	01c002c4 	movi	r7,11
    13e4:	388fc83a 	sub	r7,r7,r2
    13e8:	10c00544 	addi	r3,r2,21
    13ec:	89ced83a 	srl	r7,r17,r7
    13f0:	88e2983a 	sll	r17,r17,r3
    13f4:	0180e244 	movi	r6,905
    13f8:	308bc83a 	sub	r5,r6,r2
    13fc:	01800434 	movhi	r6,16
    1400:	31bfffc4 	addi	r6,r6,-1
    1404:	398e703a 	and	r7,r7,r6
    1408:	2941ffcc 	andi	r5,r5,2047
    140c:	003fe006 	br	1390 <__extendsfdf2+0x44>
    1410:	88000826 	beq	r17,zero,1434 <__extendsfdf2+0xe8>
    1414:	880ed0fa 	srli	r7,r17,3
    1418:	00800434 	movhi	r2,16
    141c:	10bfffc4 	addi	r2,r2,-1
    1420:	39c00234 	orhi	r7,r7,8
    1424:	8822977a 	slli	r17,r17,29
    1428:	388e703a 	and	r7,r7,r2
    142c:	0141ffc4 	movi	r5,2047
    1430:	003fd706 	br	1390 <__extendsfdf2+0x44>
    1434:	0141ffc4 	movi	r5,2047
    1438:	000f883a 	mov	r7,zero
    143c:	003fd406 	br	1390 <__extendsfdf2+0x44>
    1440:	000b883a 	mov	r5,zero
    1444:	000f883a 	mov	r7,zero
    1448:	003fd106 	br	1390 <__extendsfdf2+0x44>
    144c:	11fffd44 	addi	r7,r2,-11
    1450:	89ce983a 	sll	r7,r17,r7
    1454:	0023883a 	mov	r17,zero
    1458:	003fe606 	br	13f4 <__extendsfdf2+0xa8>

0000145c <__clzsi2>:
    145c:	00bfffd4 	movui	r2,65535
    1460:	11000b36 	bltu	r2,r4,1490 <__clzsi2+0x34>
    1464:	00803fc4 	movi	r2,255
    1468:	1100122e 	bgeu	r2,r4,14b4 <__clzsi2+0x58>
    146c:	00c00204 	movi	r3,8
    1470:	01400604 	movi	r5,24
    1474:	20c8d83a 	srl	r4,r4,r3
    1478:	00800074 	movhi	r2,1
    147c:	10888604 	addi	r2,r2,8728
    1480:	1109883a 	add	r4,r2,r4
    1484:	20800003 	ldbu	r2,0(r4)
    1488:	2885c83a 	sub	r2,r5,r2
    148c:	f800283a 	ret
    1490:	00804034 	movhi	r2,256
    1494:	10bfffc4 	addi	r2,r2,-1
    1498:	11000336 	bltu	r2,r4,14a8 <__clzsi2+0x4c>
    149c:	00c00404 	movi	r3,16
    14a0:	180b883a 	mov	r5,r3
    14a4:	003ff306 	br	1474 <__clzsi2+0x18>
    14a8:	00c00604 	movi	r3,24
    14ac:	01400204 	movi	r5,8
    14b0:	003ff006 	br	1474 <__clzsi2+0x18>
    14b4:	0007883a 	mov	r3,zero
    14b8:	01400804 	movi	r5,32
    14bc:	003fed06 	br	1474 <__clzsi2+0x18>

000014c0 <_printf_r>:
    14c0:	defffd04 	addi	sp,sp,-12
    14c4:	dfc00015 	stw	ra,0(sp)
    14c8:	d9800115 	stw	r6,4(sp)
    14cc:	d9c00215 	stw	r7,8(sp)
    14d0:	280d883a 	mov	r6,r5
    14d4:	21400217 	ldw	r5,8(r4)
    14d8:	d9c00104 	addi	r7,sp,4
    14dc:	000167c0 	call	167c <___vfprintf_internal_r>
    14e0:	dfc00017 	ldw	ra,0(sp)
    14e4:	dec00304 	addi	sp,sp,12
    14e8:	f800283a 	ret

000014ec <printf>:
    14ec:	defffc04 	addi	sp,sp,-16
    14f0:	dfc00015 	stw	ra,0(sp)
    14f4:	d9400115 	stw	r5,4(sp)
    14f8:	d9800215 	stw	r6,8(sp)
    14fc:	d9c00315 	stw	r7,12(sp)
    1500:	00800074 	movhi	r2,1
    1504:	10913d04 	addi	r2,r2,17652
    1508:	10800017 	ldw	r2,0(r2)
    150c:	200b883a 	mov	r5,r4
    1510:	d9800104 	addi	r6,sp,4
    1514:	11000217 	ldw	r4,8(r2)
    1518:	00036d40 	call	36d4 <__vfprintf_internal>
    151c:	dfc00017 	ldw	ra,0(sp)
    1520:	dec00404 	addi	sp,sp,16
    1524:	f800283a 	ret

00001528 <_puts_r>:
    1528:	defff604 	addi	sp,sp,-40
    152c:	dc000715 	stw	r16,28(sp)
    1530:	2021883a 	mov	r16,r4
    1534:	2809883a 	mov	r4,r5
    1538:	dc400815 	stw	r17,32(sp)
    153c:	dfc00915 	stw	ra,36(sp)
    1540:	2823883a 	mov	r17,r5
    1544:	00015e40 	call	15e4 <strlen>
    1548:	81400217 	ldw	r5,8(r16)
    154c:	11000044 	addi	r4,r2,1
    1550:	d8800115 	stw	r2,4(sp)
    1554:	00800074 	movhi	r2,1
    1558:	2980030b 	ldhu	r6,12(r5)
    155c:	1088c604 	addi	r2,r2,8984
    1560:	d8800215 	stw	r2,8(sp)
    1564:	00800044 	movi	r2,1
    1568:	d8800315 	stw	r2,12(sp)
    156c:	00800084 	movi	r2,2
    1570:	d8800515 	stw	r2,20(sp)
    1574:	dc400015 	stw	r17,0(sp)
    1578:	d9000615 	stw	r4,24(sp)
    157c:	dec00415 	stw	sp,16(sp)
    1580:	3088000c 	andi	r2,r6,8192
    1584:	1000061e 	bne	r2,zero,15a0 <_puts_r+0x78>
    1588:	29001917 	ldw	r4,100(r5)
    158c:	00b7ffc4 	movi	r2,-8193
    1590:	31880014 	ori	r6,r6,8192
    1594:	2084703a 	and	r2,r4,r2
    1598:	2980030d 	sth	r6,12(r5)
    159c:	28801915 	stw	r2,100(r5)
    15a0:	8009883a 	mov	r4,r16
    15a4:	d9800404 	addi	r6,sp,16
    15a8:	0005cb00 	call	5cb0 <__sfvwrite_r>
    15ac:	1000061e 	bne	r2,zero,15c8 <_puts_r+0xa0>
    15b0:	00800284 	movi	r2,10
    15b4:	dfc00917 	ldw	ra,36(sp)
    15b8:	dc400817 	ldw	r17,32(sp)
    15bc:	dc000717 	ldw	r16,28(sp)
    15c0:	dec00a04 	addi	sp,sp,40
    15c4:	f800283a 	ret
    15c8:	00bfffc4 	movi	r2,-1
    15cc:	003ff906 	br	15b4 <_puts_r+0x8c>

000015d0 <puts>:
    15d0:	00800074 	movhi	r2,1
    15d4:	10913d04 	addi	r2,r2,17652
    15d8:	200b883a 	mov	r5,r4
    15dc:	11000017 	ldw	r4,0(r2)
    15e0:	00015281 	jmpi	1528 <_puts_r>

000015e4 <strlen>:
    15e4:	208000cc 	andi	r2,r4,3
    15e8:	10002026 	beq	r2,zero,166c <strlen+0x88>
    15ec:	20800007 	ldb	r2,0(r4)
    15f0:	10002026 	beq	r2,zero,1674 <strlen+0x90>
    15f4:	2005883a 	mov	r2,r4
    15f8:	00000206 	br	1604 <strlen+0x20>
    15fc:	10c00007 	ldb	r3,0(r2)
    1600:	18001826 	beq	r3,zero,1664 <strlen+0x80>
    1604:	10800044 	addi	r2,r2,1
    1608:	10c000cc 	andi	r3,r2,3
    160c:	183ffb1e 	bne	r3,zero,15fc <strlen+0x18>
    1610:	10c00017 	ldw	r3,0(r2)
    1614:	01ffbff4 	movhi	r7,65279
    1618:	39ffbfc4 	addi	r7,r7,-257
    161c:	00ca303a 	nor	r5,zero,r3
    1620:	01a02074 	movhi	r6,32897
    1624:	19c7883a 	add	r3,r3,r7
    1628:	31a02004 	addi	r6,r6,-32640
    162c:	1946703a 	and	r3,r3,r5
    1630:	1986703a 	and	r3,r3,r6
    1634:	1800091e 	bne	r3,zero,165c <strlen+0x78>
    1638:	10800104 	addi	r2,r2,4
    163c:	10c00017 	ldw	r3,0(r2)
    1640:	19cb883a 	add	r5,r3,r7
    1644:	00c6303a 	nor	r3,zero,r3
    1648:	28c6703a 	and	r3,r5,r3
    164c:	1986703a 	and	r3,r3,r6
    1650:	183ff926 	beq	r3,zero,1638 <strlen+0x54>
    1654:	00000106 	br	165c <strlen+0x78>
    1658:	10800044 	addi	r2,r2,1
    165c:	10c00007 	ldb	r3,0(r2)
    1660:	183ffd1e 	bne	r3,zero,1658 <strlen+0x74>
    1664:	1105c83a 	sub	r2,r2,r4
    1668:	f800283a 	ret
    166c:	2005883a 	mov	r2,r4
    1670:	003fe706 	br	1610 <strlen+0x2c>
    1674:	0005883a 	mov	r2,zero
    1678:	f800283a 	ret

0000167c <___vfprintf_internal_r>:
    167c:	deffb604 	addi	sp,sp,-296
    1680:	dfc04915 	stw	ra,292(sp)
    1684:	ddc04715 	stw	r23,284(sp)
    1688:	dd804615 	stw	r22,280(sp)
    168c:	202f883a 	mov	r23,r4
    1690:	282d883a 	mov	r22,r5
    1694:	d9802a15 	stw	r6,168(sp)
    1698:	d9c02d15 	stw	r7,180(sp)
    169c:	df004815 	stw	fp,288(sp)
    16a0:	dd404515 	stw	r21,276(sp)
    16a4:	dd004415 	stw	r20,272(sp)
    16a8:	dcc04315 	stw	r19,268(sp)
    16ac:	dc804215 	stw	r18,264(sp)
    16b0:	dc404115 	stw	r17,260(sp)
    16b4:	dc004015 	stw	r16,256(sp)
    16b8:	00063b00 	call	63b0 <_localeconv_r>
    16bc:	10800017 	ldw	r2,0(r2)
    16c0:	1009883a 	mov	r4,r2
    16c4:	d8803515 	stw	r2,212(sp)
    16c8:	00015e40 	call	15e4 <strlen>
    16cc:	d8803815 	stw	r2,224(sp)
    16d0:	b8000226 	beq	r23,zero,16dc <___vfprintf_internal_r+0x60>
    16d4:	b8800e17 	ldw	r2,56(r23)
    16d8:	1000e226 	beq	r2,zero,1a64 <___vfprintf_internal_r+0x3e8>
    16dc:	b080030b 	ldhu	r2,12(r22)
    16e0:	10c8000c 	andi	r3,r2,8192
    16e4:	1800061e 	bne	r3,zero,1700 <___vfprintf_internal_r+0x84>
    16e8:	b1001917 	ldw	r4,100(r22)
    16ec:	00f7ffc4 	movi	r3,-8193
    16f0:	10880014 	ori	r2,r2,8192
    16f4:	20c6703a 	and	r3,r4,r3
    16f8:	b080030d 	sth	r2,12(r22)
    16fc:	b0c01915 	stw	r3,100(r22)
    1700:	10c0020c 	andi	r3,r2,8
    1704:	1800a826 	beq	r3,zero,19a8 <___vfprintf_internal_r+0x32c>
    1708:	b0c00417 	ldw	r3,16(r22)
    170c:	1800a626 	beq	r3,zero,19a8 <___vfprintf_internal_r+0x32c>
    1710:	1080068c 	andi	r2,r2,26
    1714:	00c00284 	movi	r3,10
    1718:	10c0ab26 	beq	r2,r3,19c8 <___vfprintf_internal_r+0x34c>
    171c:	d8801e04 	addi	r2,sp,120
    1720:	d8c01dc4 	addi	r3,sp,119
    1724:	d9000404 	addi	r4,sp,16
    1728:	05000074 	movhi	r20,1
    172c:	10cbc83a 	sub	r5,r2,r3
    1730:	a508d784 	addi	r20,r20,9054
    1734:	d8802815 	stw	r2,160(sp)
    1738:	d8c02915 	stw	r3,164(sp)
    173c:	d9001e15 	stw	r4,120(sp)
    1740:	d8002015 	stw	zero,128(sp)
    1744:	d8001f15 	stw	zero,124(sp)
    1748:	d8003315 	stw	zero,204(sp)
    174c:	d8003715 	stw	zero,220(sp)
    1750:	d8003915 	stw	zero,228(sp)
    1754:	2011883a 	mov	r8,r4
    1758:	d8003b15 	stw	zero,236(sp)
    175c:	d8003a15 	stw	zero,232(sp)
    1760:	d8002f15 	stw	zero,188(sp)
    1764:	d9403c15 	stw	r5,240(sp)
    1768:	d8c02a17 	ldw	r3,168(sp)
    176c:	18800007 	ldb	r2,0(r3)
    1770:	1001f226 	beq	r2,zero,1f3c <___vfprintf_internal_r+0x8c0>
    1774:	00c00944 	movi	r3,37
    1778:	dc002a17 	ldw	r16,168(sp)
    177c:	10c0021e 	bne	r2,r3,1788 <___vfprintf_internal_r+0x10c>
    1780:	00001606 	br	17dc <___vfprintf_internal_r+0x160>
    1784:	10c08526 	beq	r2,r3,199c <___vfprintf_internal_r+0x320>
    1788:	84000044 	addi	r16,r16,1
    178c:	80800007 	ldb	r2,0(r16)
    1790:	103ffc1e 	bne	r2,zero,1784 <___vfprintf_internal_r+0x108>
    1794:	d9002a17 	ldw	r4,168(sp)
    1798:	8123c83a 	sub	r17,r16,r4
    179c:	88000f26 	beq	r17,zero,17dc <___vfprintf_internal_r+0x160>
    17a0:	d8802a17 	ldw	r2,168(sp)
    17a4:	d8c02017 	ldw	r3,128(sp)
    17a8:	44400115 	stw	r17,4(r8)
    17ac:	40800015 	stw	r2,0(r8)
    17b0:	d8801f17 	ldw	r2,124(sp)
    17b4:	1c47883a 	add	r3,r3,r17
    17b8:	d8c02015 	stw	r3,128(sp)
    17bc:	10800044 	addi	r2,r2,1
    17c0:	d8801f15 	stw	r2,124(sp)
    17c4:	00c001c4 	movi	r3,7
    17c8:	18809416 	blt	r3,r2,1a1c <___vfprintf_internal_r+0x3a0>
    17cc:	42000204 	addi	r8,r8,8
    17d0:	d8c02f17 	ldw	r3,188(sp)
    17d4:	1c47883a 	add	r3,r3,r17
    17d8:	d8c02f15 	stw	r3,188(sp)
    17dc:	80800007 	ldb	r2,0(r16)
    17e0:	10009526 	beq	r2,zero,1a38 <___vfprintf_internal_r+0x3bc>
    17e4:	80800044 	addi	r2,r16,1
    17e8:	84000047 	ldb	r16,1(r16)
    17ec:	0027883a 	mov	r19,zero
    17f0:	0039883a 	mov	fp,zero
    17f4:	dcc02b05 	stb	r19,172(sp)
    17f8:	d8002785 	stb	zero,158(sp)
    17fc:	027fffc4 	movi	r9,-1
    1800:	d8002e15 	stw	zero,184(sp)
    1804:	04401604 	movi	r17,88
    1808:	04800244 	movi	r18,9
    180c:	da002a15 	stw	r8,168(sp)
    1810:	e027883a 	mov	r19,fp
    1814:	17000044 	addi	fp,r2,1
    1818:	80bff804 	addi	r2,r16,-32
    181c:	8882ed36 	bltu	r17,r2,23d4 <___vfprintf_internal_r+0xd58>
    1820:	100490ba 	slli	r2,r2,2
    1824:	01000034 	movhi	r4,0
    1828:	21060e04 	addi	r4,r4,6200
    182c:	1105883a 	add	r2,r2,r4
    1830:	10800017 	ldw	r2,0(r2)
    1834:	1000683a 	jmp	r2
    1838:	0000221c 	xori	zero,zero,136
    183c:	000023d4 	movui	zero,143
    1840:	000023d4 	movui	zero,143
    1844:	00002238 	rdprs	zero,zero,136
    1848:	000023d4 	movui	zero,143
    184c:	000023d4 	movui	zero,143
    1850:	000023d4 	movui	zero,143
    1854:	000023d4 	movui	zero,143
    1858:	000023d4 	movui	zero,143
    185c:	000023d4 	movui	zero,143
    1860:	00002248 	cmpgei	zero,zero,137
    1864:	00002270 	cmpltui	zero,zero,137
    1868:	000023d4 	movui	zero,143
    186c:	00001a70 	cmpltui	zero,zero,105
    1870:	00001a80 	call	1a8 <alt_irq_handler+0xbc>
    1874:	000023d4 	movui	zero,143
    1878:	00001ad0 	cmplti	zero,zero,107
    187c:	00001ae0 	cmpeqi	zero,zero,107
    1880:	00001ae0 	cmpeqi	zero,zero,107
    1884:	00001ae0 	cmpeqi	zero,zero,107
    1888:	00001ae0 	cmpeqi	zero,zero,107
    188c:	00001ae0 	cmpeqi	zero,zero,107
    1890:	00001ae0 	cmpeqi	zero,zero,107
    1894:	00001ae0 	cmpeqi	zero,zero,107
    1898:	00001ae0 	cmpeqi	zero,zero,107
    189c:	00001ae0 	cmpeqi	zero,zero,107
    18a0:	000023d4 	movui	zero,143
    18a4:	000023d4 	movui	zero,143
    18a8:	000023d4 	movui	zero,143
    18ac:	000023d4 	movui	zero,143
    18b0:	000023d4 	movui	zero,143
    18b4:	000023d4 	movui	zero,143
    18b8:	000023d4 	movui	zero,143
    18bc:	000023d4 	movui	zero,143
    18c0:	000023d4 	movui	zero,143
    18c4:	000023d4 	movui	zero,143
    18c8:	00001b24 	muli	zero,zero,108
    18cc:	00001f44 	movi	zero,125
    18d0:	000023d4 	movui	zero,143
    18d4:	00001f44 	movi	zero,125
    18d8:	000023d4 	movui	zero,143
    18dc:	000023d4 	movui	zero,143
    18e0:	000023d4 	movui	zero,143
    18e4:	000023d4 	movui	zero,143
    18e8:	00001fec 	andhi	zero,zero,127
    18ec:	000023d4 	movui	zero,143
    18f0:	000023d4 	movui	zero,143
    18f4:	00001ffc 	xorhi	zero,zero,127
    18f8:	000023d4 	movui	zero,143
    18fc:	000023d4 	movui	zero,143
    1900:	000023d4 	movui	zero,143
    1904:	000023d4 	movui	zero,143
    1908:	000023d4 	movui	zero,143
    190c:	0000203c 	xorhi	zero,zero,128
    1910:	000023d4 	movui	zero,143
    1914:	000023d4 	movui	zero,143
    1918:	00002168 	cmpgeui	zero,zero,133
    191c:	000023d4 	movui	zero,143
    1920:	000023d4 	movui	zero,143
    1924:	000023d4 	movui	zero,143
    1928:	000023d4 	movui	zero,143
    192c:	000023d4 	movui	zero,143
    1930:	000023d4 	movui	zero,143
    1934:	000023d4 	movui	zero,143
    1938:	000023d4 	movui	zero,143
    193c:	000023d4 	movui	zero,143
    1940:	000023d4 	movui	zero,143
    1944:	000021d0 	cmplti	zero,zero,135
    1948:	000020bc 	xorhi	zero,zero,130
    194c:	00001f44 	movi	zero,125
    1950:	00001f44 	movi	zero,125
    1954:	00001f44 	movi	zero,125
    1958:	00002100 	call	210 <main+0x1c>
    195c:	000020bc 	xorhi	zero,zero,130
    1960:	000023d4 	movui	zero,143
    1964:	000023d4 	movui	zero,143
    1968:	00002110 	cmplti	zero,zero,132
    196c:	000023d4 	movui	zero,143
    1970:	00002128 	cmpgeui	zero,zero,132
    1974:	00002398 	cmpnei	zero,zero,142
    1978:	00002070 	cmpltui	zero,zero,129
    197c:	0000234c 	andi	zero,zero,141
    1980:	000023d4 	movui	zero,143
    1984:	00002284 	movi	zero,138
    1988:	000023d4 	movui	zero,143
    198c:	0000235c 	xori	zero,zero,141
    1990:	000023d4 	movui	zero,143
    1994:	000023d4 	movui	zero,143
    1998:	00002300 	call	230 <main+0x3c>
    199c:	d9402a17 	ldw	r5,168(sp)
    19a0:	8163c83a 	sub	r17,r16,r5
    19a4:	003f7d06 	br	179c <___vfprintf_internal_r+0x120>
    19a8:	b809883a 	mov	r4,r23
    19ac:	b00b883a 	mov	r5,r22
    19b0:	00037b40 	call	37b4 <__swsetup_r>
    19b4:	10000c1e 	bne	r2,zero,19e8 <___vfprintf_internal_r+0x36c>
    19b8:	b080030b 	ldhu	r2,12(r22)
    19bc:	00c00284 	movi	r3,10
    19c0:	1080068c 	andi	r2,r2,26
    19c4:	10ff551e 	bne	r2,r3,171c <___vfprintf_internal_r+0xa0>
    19c8:	b080038f 	ldh	r2,14(r22)
    19cc:	103f5316 	blt	r2,zero,171c <___vfprintf_internal_r+0xa0>
    19d0:	d9802a17 	ldw	r6,168(sp)
    19d4:	d9c02d17 	ldw	r7,180(sp)
    19d8:	b809883a 	mov	r4,r23
    19dc:	b00b883a 	mov	r5,r22
    19e0:	00036f80 	call	36f8 <__sbprintf>
    19e4:	00000106 	br	19ec <___vfprintf_internal_r+0x370>
    19e8:	00bfffc4 	movi	r2,-1
    19ec:	dfc04917 	ldw	ra,292(sp)
    19f0:	df004817 	ldw	fp,288(sp)
    19f4:	ddc04717 	ldw	r23,284(sp)
    19f8:	dd804617 	ldw	r22,280(sp)
    19fc:	dd404517 	ldw	r21,276(sp)
    1a00:	dd004417 	ldw	r20,272(sp)
    1a04:	dcc04317 	ldw	r19,268(sp)
    1a08:	dc804217 	ldw	r18,264(sp)
    1a0c:	dc404117 	ldw	r17,260(sp)
    1a10:	dc004017 	ldw	r16,256(sp)
    1a14:	dec04a04 	addi	sp,sp,296
    1a18:	f800283a 	ret
    1a1c:	b809883a 	mov	r4,r23
    1a20:	b00b883a 	mov	r5,r22
    1a24:	d9801e04 	addi	r6,sp,120
    1a28:	0008b4c0 	call	8b4c <__sprint_r>
    1a2c:	1000081e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    1a30:	da000404 	addi	r8,sp,16
    1a34:	003f6606 	br	17d0 <___vfprintf_internal_r+0x154>
    1a38:	d8802017 	ldw	r2,128(sp)
    1a3c:	10000426 	beq	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    1a40:	b809883a 	mov	r4,r23
    1a44:	b00b883a 	mov	r5,r22
    1a48:	d9801e04 	addi	r6,sp,120
    1a4c:	0008b4c0 	call	8b4c <__sprint_r>
    1a50:	b080030b 	ldhu	r2,12(r22)
    1a54:	1080100c 	andi	r2,r2,64
    1a58:	103fe31e 	bne	r2,zero,19e8 <___vfprintf_internal_r+0x36c>
    1a5c:	d8802f17 	ldw	r2,188(sp)
    1a60:	003fe206 	br	19ec <___vfprintf_internal_r+0x370>
    1a64:	b809883a 	mov	r4,r23
    1a68:	000584c0 	call	584c <__sinit>
    1a6c:	003f1b06 	br	16dc <___vfprintf_internal_r+0x60>
    1a70:	e005883a 	mov	r2,fp
    1a74:	9cc00114 	ori	r19,r19,4
    1a78:	e4000007 	ldb	r16,0(fp)
    1a7c:	003f6506 	br	1814 <___vfprintf_internal_r+0x198>
    1a80:	e4000007 	ldb	r16,0(fp)
    1a84:	01000a84 	movi	r4,42
    1a88:	e0800044 	addi	r2,fp,1
    1a8c:	8106ff26 	beq	r16,r4,368c <___vfprintf_internal_r+0x2010>
    1a90:	857ff404 	addi	r21,r16,-48
    1a94:	1039883a 	mov	fp,r2
    1a98:	0013883a 	mov	r9,zero
    1a9c:	957f5e36 	bltu	r18,r21,1818 <___vfprintf_internal_r+0x19c>
    1aa0:	0009883a 	mov	r4,zero
    1aa4:	01400284 	movi	r5,10
    1aa8:	0000dc40 	call	dc4 <__mulsi3>
    1aac:	e4000007 	ldb	r16,0(fp)
    1ab0:	a889883a 	add	r4,r21,r2
    1ab4:	e7000044 	addi	fp,fp,1
    1ab8:	857ff404 	addi	r21,r16,-48
    1abc:	957ff92e 	bgeu	r18,r21,1aa4 <___vfprintf_internal_r+0x428>
    1ac0:	2013883a 	mov	r9,r4
    1ac4:	203f540e 	bge	r4,zero,1818 <___vfprintf_internal_r+0x19c>
    1ac8:	027fffc4 	movi	r9,-1
    1acc:	003f5206 	br	1818 <___vfprintf_internal_r+0x19c>
    1ad0:	9cc02014 	ori	r19,r19,128
    1ad4:	e005883a 	mov	r2,fp
    1ad8:	e4000007 	ldb	r16,0(fp)
    1adc:	003f4d06 	br	1814 <___vfprintf_internal_r+0x198>
    1ae0:	857ff404 	addi	r21,r16,-48
    1ae4:	d8002e15 	stw	zero,184(sp)
    1ae8:	0009883a 	mov	r4,zero
    1aec:	da402c15 	stw	r9,176(sp)
    1af0:	e021883a 	mov	r16,fp
    1af4:	01400284 	movi	r5,10
    1af8:	0000dc40 	call	dc4 <__mulsi3>
    1afc:	81400007 	ldb	r5,0(r16)
    1b00:	1549883a 	add	r4,r2,r21
    1b04:	e7000044 	addi	fp,fp,1
    1b08:	2d7ff404 	addi	r21,r5,-48
    1b0c:	e021883a 	mov	r16,fp
    1b10:	957ff82e 	bgeu	r18,r21,1af4 <___vfprintf_internal_r+0x478>
    1b14:	2821883a 	mov	r16,r5
    1b18:	d9002e15 	stw	r4,184(sp)
    1b1c:	da402c17 	ldw	r9,176(sp)
    1b20:	003f3d06 	br	1818 <___vfprintf_internal_r+0x19c>
    1b24:	da002a17 	ldw	r8,168(sp)
    1b28:	df002a15 	stw	fp,168(sp)
    1b2c:	9839883a 	mov	fp,r19
    1b30:	dcc02b03 	ldbu	r19,172(sp)
    1b34:	e7000414 	ori	fp,fp,16
    1b38:	e080080c 	andi	r2,fp,32
    1b3c:	dcc02785 	stb	r19,158(sp)
    1b40:	d8c02d17 	ldw	r3,180(sp)
    1b44:	10016526 	beq	r2,zero,20dc <___vfprintf_internal_r+0xa60>
    1b48:	d9002d17 	ldw	r4,180(sp)
    1b4c:	18800117 	ldw	r2,4(r3)
    1b50:	1c800017 	ldw	r18,0(r3)
    1b54:	21000204 	addi	r4,r4,8
    1b58:	d9002d15 	stw	r4,180(sp)
    1b5c:	102b883a 	mov	r21,r2
    1b60:	10044516 	blt	r2,zero,2c78 <___vfprintf_internal_r+0x15fc>
    1b64:	dcc02783 	ldbu	r19,158(sp)
    1b68:	da403215 	stw	r9,200(sp)
    1b6c:	00800044 	movi	r2,1
    1b70:	9546b03a 	or	r3,r18,r21
    1b74:	48000216 	blt	r9,zero,1b80 <___vfprintf_internal_r+0x504>
    1b78:	013fdfc4 	movi	r4,-129
    1b7c:	e138703a 	and	fp,fp,r4
    1b80:	1802211e 	bne	r3,zero,2408 <___vfprintf_internal_r+0xd8c>
    1b84:	48031326 	beq	r9,zero,27d4 <___vfprintf_internal_r+0x1158>
    1b88:	10803fcc 	andi	r2,r2,255
    1b8c:	00c00044 	movi	r3,1
    1b90:	10c24126 	beq	r2,r3,2498 <___vfprintf_internal_r+0xe1c>
    1b94:	00c00084 	movi	r3,2
    1b98:	10c33426 	beq	r2,r3,286c <___vfprintf_internal_r+0x11f0>
    1b9c:	d8c01e04 	addi	r3,sp,120
    1ba0:	9008d0fa 	srli	r4,r18,3
    1ba4:	a80a977a 	slli	r5,r21,29
    1ba8:	a82ad0fa 	srli	r21,r21,3
    1bac:	948001cc 	andi	r18,r18,7
    1bb0:	90800c04 	addi	r2,r18,48
    1bb4:	18ffffc4 	addi	r3,r3,-1
    1bb8:	2924b03a 	or	r18,r5,r4
    1bbc:	18800005 	stb	r2,0(r3)
    1bc0:	9548b03a 	or	r4,r18,r21
    1bc4:	203ff61e 	bne	r4,zero,1ba0 <___vfprintf_internal_r+0x524>
    1bc8:	e100004c 	andi	r4,fp,1
    1bcc:	d8c03115 	stw	r3,196(sp)
    1bd0:	2003961e 	bne	r4,zero,2a2c <___vfprintf_internal_r+0x13b0>
    1bd4:	d8802817 	ldw	r2,160(sp)
    1bd8:	10e3c83a 	sub	r17,r2,r3
    1bdc:	8805883a 	mov	r2,r17
    1be0:	8a40010e 	bge	r17,r9,1be8 <___vfprintf_internal_r+0x56c>
    1be4:	4805883a 	mov	r2,r9
    1be8:	d8802b15 	stw	r2,172(sp)
    1bec:	d8003415 	stw	zero,208(sp)
    1bf0:	98803fcc 	andi	r2,r19,255
    1bf4:	1080201c 	xori	r2,r2,128
    1bf8:	10bfe004 	addi	r2,r2,-128
    1bfc:	10000326 	beq	r2,zero,1c0c <___vfprintf_internal_r+0x590>
    1c00:	d8c02b17 	ldw	r3,172(sp)
    1c04:	18c00044 	addi	r3,r3,1
    1c08:	d8c02b15 	stw	r3,172(sp)
    1c0c:	e0c0008c 	andi	r3,fp,2
    1c10:	d8c02c15 	stw	r3,176(sp)
    1c14:	18000326 	beq	r3,zero,1c24 <___vfprintf_internal_r+0x5a8>
    1c18:	d8c02b17 	ldw	r3,172(sp)
    1c1c:	18c00084 	addi	r3,r3,2
    1c20:	d8c02b15 	stw	r3,172(sp)
    1c24:	e0c0210c 	andi	r3,fp,132
    1c28:	d8c03015 	stw	r3,192(sp)
    1c2c:	1801f41e 	bne	r3,zero,2400 <___vfprintf_internal_r+0xd84>
    1c30:	d9002e17 	ldw	r4,184(sp)
    1c34:	d8c02b17 	ldw	r3,172(sp)
    1c38:	20ebc83a 	sub	r21,r4,r3
    1c3c:	0541f00e 	bge	zero,r21,2400 <___vfprintf_internal_r+0xd84>
    1c40:	02400404 	movi	r9,16
    1c44:	d8c02017 	ldw	r3,128(sp)
    1c48:	d8801f17 	ldw	r2,124(sp)
    1c4c:	4d45710e 	bge	r9,r21,3214 <___vfprintf_internal_r+0x1b98>
    1c50:	01400074 	movhi	r5,1
    1c54:	2948db84 	addi	r5,r5,9070
    1c58:	d9403615 	stw	r5,216(sp)
    1c5c:	4827883a 	mov	r19,r9
    1c60:	048001c4 	movi	r18,7
    1c64:	00000306 	br	1c74 <___vfprintf_internal_r+0x5f8>
    1c68:	ad7ffc04 	addi	r21,r21,-16
    1c6c:	42000204 	addi	r8,r8,8
    1c70:	9d40130e 	bge	r19,r21,1cc0 <___vfprintf_internal_r+0x644>
    1c74:	01000074 	movhi	r4,1
    1c78:	18c00404 	addi	r3,r3,16
    1c7c:	10800044 	addi	r2,r2,1
    1c80:	2108db84 	addi	r4,r4,9070
    1c84:	41000015 	stw	r4,0(r8)
    1c88:	44c00115 	stw	r19,4(r8)
    1c8c:	d8c02015 	stw	r3,128(sp)
    1c90:	d8801f15 	stw	r2,124(sp)
    1c94:	90bff40e 	bge	r18,r2,1c68 <___vfprintf_internal_r+0x5ec>
    1c98:	b809883a 	mov	r4,r23
    1c9c:	b00b883a 	mov	r5,r22
    1ca0:	d9801e04 	addi	r6,sp,120
    1ca4:	0008b4c0 	call	8b4c <__sprint_r>
    1ca8:	103f691e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    1cac:	ad7ffc04 	addi	r21,r21,-16
    1cb0:	d8c02017 	ldw	r3,128(sp)
    1cb4:	d8801f17 	ldw	r2,124(sp)
    1cb8:	da000404 	addi	r8,sp,16
    1cbc:	9d7fed16 	blt	r19,r21,1c74 <___vfprintf_internal_r+0x5f8>
    1cc0:	d9403617 	ldw	r5,216(sp)
    1cc4:	a8c7883a 	add	r3,r21,r3
    1cc8:	10800044 	addi	r2,r2,1
    1ccc:	41400015 	stw	r5,0(r8)
    1cd0:	45400115 	stw	r21,4(r8)
    1cd4:	d8c02015 	stw	r3,128(sp)
    1cd8:	d8801f15 	stw	r2,124(sp)
    1cdc:	010001c4 	movi	r4,7
    1ce0:	20832716 	blt	r4,r2,2980 <___vfprintf_internal_r+0x1304>
    1ce4:	d8802787 	ldb	r2,158(sp)
    1ce8:	42000204 	addi	r8,r8,8
    1cec:	10000c26 	beq	r2,zero,1d20 <___vfprintf_internal_r+0x6a4>
    1cf0:	d8801f17 	ldw	r2,124(sp)
    1cf4:	d9002784 	addi	r4,sp,158
    1cf8:	18c00044 	addi	r3,r3,1
    1cfc:	10800044 	addi	r2,r2,1
    1d00:	41000015 	stw	r4,0(r8)
    1d04:	01000044 	movi	r4,1
    1d08:	41000115 	stw	r4,4(r8)
    1d0c:	d8c02015 	stw	r3,128(sp)
    1d10:	d8801f15 	stw	r2,124(sp)
    1d14:	010001c4 	movi	r4,7
    1d18:	2082c016 	blt	r4,r2,281c <___vfprintf_internal_r+0x11a0>
    1d1c:	42000204 	addi	r8,r8,8
    1d20:	d8802c17 	ldw	r2,176(sp)
    1d24:	10000c26 	beq	r2,zero,1d58 <___vfprintf_internal_r+0x6dc>
    1d28:	d8801f17 	ldw	r2,124(sp)
    1d2c:	d9002704 	addi	r4,sp,156
    1d30:	18c00084 	addi	r3,r3,2
    1d34:	10800044 	addi	r2,r2,1
    1d38:	41000015 	stw	r4,0(r8)
    1d3c:	01000084 	movi	r4,2
    1d40:	41000115 	stw	r4,4(r8)
    1d44:	d8c02015 	stw	r3,128(sp)
    1d48:	d8801f15 	stw	r2,124(sp)
    1d4c:	010001c4 	movi	r4,7
    1d50:	2082ba16 	blt	r4,r2,283c <___vfprintf_internal_r+0x11c0>
    1d54:	42000204 	addi	r8,r8,8
    1d58:	d9003017 	ldw	r4,192(sp)
    1d5c:	00802004 	movi	r2,128
    1d60:	20821c26 	beq	r4,r2,25d4 <___vfprintf_internal_r+0xf58>
    1d64:	d9403217 	ldw	r5,200(sp)
    1d68:	2c67c83a 	sub	r19,r5,r17
    1d6c:	04c0260e 	bge	zero,r19,1e08 <___vfprintf_internal_r+0x78c>
    1d70:	05400404 	movi	r21,16
    1d74:	d8801f17 	ldw	r2,124(sp)
    1d78:	acc46e0e 	bge	r21,r19,2f34 <___vfprintf_internal_r+0x18b8>
    1d7c:	01400074 	movhi	r5,1
    1d80:	2948d784 	addi	r5,r5,9054
    1d84:	d9402c15 	stw	r5,176(sp)
    1d88:	048001c4 	movi	r18,7
    1d8c:	00000306 	br	1d9c <___vfprintf_internal_r+0x720>
    1d90:	9cfffc04 	addi	r19,r19,-16
    1d94:	42000204 	addi	r8,r8,8
    1d98:	acc0110e 	bge	r21,r19,1de0 <___vfprintf_internal_r+0x764>
    1d9c:	18c00404 	addi	r3,r3,16
    1da0:	10800044 	addi	r2,r2,1
    1da4:	45000015 	stw	r20,0(r8)
    1da8:	45400115 	stw	r21,4(r8)
    1dac:	d8c02015 	stw	r3,128(sp)
    1db0:	d8801f15 	stw	r2,124(sp)
    1db4:	90bff60e 	bge	r18,r2,1d90 <___vfprintf_internal_r+0x714>
    1db8:	b809883a 	mov	r4,r23
    1dbc:	b00b883a 	mov	r5,r22
    1dc0:	d9801e04 	addi	r6,sp,120
    1dc4:	0008b4c0 	call	8b4c <__sprint_r>
    1dc8:	103f211e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    1dcc:	9cfffc04 	addi	r19,r19,-16
    1dd0:	d8c02017 	ldw	r3,128(sp)
    1dd4:	d8801f17 	ldw	r2,124(sp)
    1dd8:	da000404 	addi	r8,sp,16
    1ddc:	acffef16 	blt	r21,r19,1d9c <___vfprintf_internal_r+0x720>
    1de0:	d9002c17 	ldw	r4,176(sp)
    1de4:	1cc7883a 	add	r3,r3,r19
    1de8:	10800044 	addi	r2,r2,1
    1dec:	41000015 	stw	r4,0(r8)
    1df0:	44c00115 	stw	r19,4(r8)
    1df4:	d8c02015 	stw	r3,128(sp)
    1df8:	d8801f15 	stw	r2,124(sp)
    1dfc:	010001c4 	movi	r4,7
    1e00:	20827e16 	blt	r4,r2,27fc <___vfprintf_internal_r+0x1180>
    1e04:	42000204 	addi	r8,r8,8
    1e08:	e080400c 	andi	r2,fp,256
    1e0c:	1001a81e 	bne	r2,zero,24b0 <___vfprintf_internal_r+0xe34>
    1e10:	d8801f17 	ldw	r2,124(sp)
    1e14:	d9403117 	ldw	r5,196(sp)
    1e18:	1c47883a 	add	r3,r3,r17
    1e1c:	10800044 	addi	r2,r2,1
    1e20:	41400015 	stw	r5,0(r8)
    1e24:	44400115 	stw	r17,4(r8)
    1e28:	d8c02015 	stw	r3,128(sp)
    1e2c:	d8801f15 	stw	r2,124(sp)
    1e30:	010001c4 	movi	r4,7
    1e34:	20825916 	blt	r4,r2,279c <___vfprintf_internal_r+0x1120>
    1e38:	42000204 	addi	r8,r8,8
    1e3c:	e080010c 	andi	r2,fp,4
    1e40:	10003126 	beq	r2,zero,1f08 <___vfprintf_internal_r+0x88c>
    1e44:	d8802e17 	ldw	r2,184(sp)
    1e48:	d9002b17 	ldw	r4,172(sp)
    1e4c:	1121c83a 	sub	r16,r2,r4
    1e50:	04002d0e 	bge	zero,r16,1f08 <___vfprintf_internal_r+0x88c>
    1e54:	04400404 	movi	r17,16
    1e58:	d8801f17 	ldw	r2,124(sp)
    1e5c:	8c053f0e 	bge	r17,r16,335c <___vfprintf_internal_r+0x1ce0>
    1e60:	01000074 	movhi	r4,1
    1e64:	2108db84 	addi	r4,r4,9070
    1e68:	d9003615 	stw	r4,216(sp)
    1e6c:	048001c4 	movi	r18,7
    1e70:	00000306 	br	1e80 <___vfprintf_internal_r+0x804>
    1e74:	843ffc04 	addi	r16,r16,-16
    1e78:	42000204 	addi	r8,r8,8
    1e7c:	8c00130e 	bge	r17,r16,1ecc <___vfprintf_internal_r+0x850>
    1e80:	01400074 	movhi	r5,1
    1e84:	18c00404 	addi	r3,r3,16
    1e88:	10800044 	addi	r2,r2,1
    1e8c:	2948db84 	addi	r5,r5,9070
    1e90:	41400015 	stw	r5,0(r8)
    1e94:	44400115 	stw	r17,4(r8)
    1e98:	d8c02015 	stw	r3,128(sp)
    1e9c:	d8801f15 	stw	r2,124(sp)
    1ea0:	90bff40e 	bge	r18,r2,1e74 <___vfprintf_internal_r+0x7f8>
    1ea4:	b809883a 	mov	r4,r23
    1ea8:	b00b883a 	mov	r5,r22
    1eac:	d9801e04 	addi	r6,sp,120
    1eb0:	0008b4c0 	call	8b4c <__sprint_r>
    1eb4:	103ee61e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    1eb8:	843ffc04 	addi	r16,r16,-16
    1ebc:	d8c02017 	ldw	r3,128(sp)
    1ec0:	d8801f17 	ldw	r2,124(sp)
    1ec4:	da000404 	addi	r8,sp,16
    1ec8:	8c3fed16 	blt	r17,r16,1e80 <___vfprintf_internal_r+0x804>
    1ecc:	d9003617 	ldw	r4,216(sp)
    1ed0:	1c07883a 	add	r3,r3,r16
    1ed4:	10800044 	addi	r2,r2,1
    1ed8:	41000015 	stw	r4,0(r8)
    1edc:	44000115 	stw	r16,4(r8)
    1ee0:	d8c02015 	stw	r3,128(sp)
    1ee4:	d8801f15 	stw	r2,124(sp)
    1ee8:	010001c4 	movi	r4,7
    1eec:	2080060e 	bge	r4,r2,1f08 <___vfprintf_internal_r+0x88c>
    1ef0:	b809883a 	mov	r4,r23
    1ef4:	b00b883a 	mov	r5,r22
    1ef8:	d9801e04 	addi	r6,sp,120
    1efc:	0008b4c0 	call	8b4c <__sprint_r>
    1f00:	103ed31e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    1f04:	d8c02017 	ldw	r3,128(sp)
    1f08:	df002b17 	ldw	fp,172(sp)
    1f0c:	d9402e17 	ldw	r5,184(sp)
    1f10:	e140010e 	bge	fp,r5,1f18 <___vfprintf_internal_r+0x89c>
    1f14:	2839883a 	mov	fp,r5
    1f18:	d8802f17 	ldw	r2,188(sp)
    1f1c:	1705883a 	add	r2,r2,fp
    1f20:	d8802f15 	stw	r2,188(sp)
    1f24:	1802251e 	bne	r3,zero,27bc <___vfprintf_internal_r+0x1140>
    1f28:	d8c02a17 	ldw	r3,168(sp)
    1f2c:	d8001f15 	stw	zero,124(sp)
    1f30:	da000404 	addi	r8,sp,16
    1f34:	18800007 	ldb	r2,0(r3)
    1f38:	103e0e1e 	bne	r2,zero,1774 <___vfprintf_internal_r+0xf8>
    1f3c:	dc002a17 	ldw	r16,168(sp)
    1f40:	003e2606 	br	17dc <___vfprintf_internal_r+0x160>
    1f44:	d9002d17 	ldw	r4,180(sp)
    1f48:	d9402d17 	ldw	r5,180(sp)
    1f4c:	da002a17 	ldw	r8,168(sp)
    1f50:	21000017 	ldw	r4,0(r4)
    1f54:	29400117 	ldw	r5,4(r5)
    1f58:	df002a15 	stw	fp,168(sp)
    1f5c:	9839883a 	mov	fp,r19
    1f60:	dcc02b03 	ldbu	r19,172(sp)
    1f64:	d9003715 	stw	r4,220(sp)
    1f68:	d9403915 	stw	r5,228(sp)
    1f6c:	da003f15 	stw	r8,252(sp)
    1f70:	da403e15 	stw	r9,248(sp)
    1f74:	dcc02785 	stb	r19,158(sp)
    1f78:	00087a80 	call	87a8 <__fpclassifyd>
    1f7c:	d8c02d17 	ldw	r3,180(sp)
    1f80:	04400044 	movi	r17,1
    1f84:	da003f17 	ldw	r8,252(sp)
    1f88:	1c800204 	addi	r18,r3,8
    1f8c:	da403e17 	ldw	r9,248(sp)
    1f90:	d9003717 	ldw	r4,220(sp)
    1f94:	d9403917 	ldw	r5,228(sp)
    1f98:	1443411e 	bne	r2,r17,2ca0 <___vfprintf_internal_r+0x1624>
    1f9c:	000d883a 	mov	r6,zero
    1fa0:	000f883a 	mov	r7,zero
    1fa4:	000c9480 	call	c948 <__ledf2>
    1fa8:	da003f17 	ldw	r8,252(sp)
    1fac:	10050d16 	blt	r2,zero,33e4 <___vfprintf_internal_r+0x1d68>
    1fb0:	dcc02783 	ldbu	r19,158(sp)
    1fb4:	008011c4 	movi	r2,71
    1fb8:	1404590e 	bge	r2,r16,3120 <___vfprintf_internal_r+0x1aa4>
    1fbc:	01400074 	movhi	r5,1
    1fc0:	2948c804 	addi	r5,r5,8992
    1fc4:	d9403115 	stw	r5,196(sp)
    1fc8:	00c000c4 	movi	r3,3
    1fcc:	00bfdfc4 	movi	r2,-129
    1fd0:	d8c02b15 	stw	r3,172(sp)
    1fd4:	e0b8703a 	and	fp,fp,r2
    1fd8:	dc802d15 	stw	r18,180(sp)
    1fdc:	1823883a 	mov	r17,r3
    1fe0:	d8003215 	stw	zero,200(sp)
    1fe4:	d8003415 	stw	zero,208(sp)
    1fe8:	003f0106 	br	1bf0 <___vfprintf_internal_r+0x574>
    1fec:	9cc00214 	ori	r19,r19,8
    1ff0:	e005883a 	mov	r2,fp
    1ff4:	e4000007 	ldb	r16,0(fp)
    1ff8:	003e0606 	br	1814 <___vfprintf_internal_r+0x198>
    1ffc:	da002a17 	ldw	r8,168(sp)
    2000:	df002a15 	stw	fp,168(sp)
    2004:	9f000414 	ori	fp,r19,16
    2008:	e080080c 	andi	r2,fp,32
    200c:	1000e726 	beq	r2,zero,23ac <___vfprintf_internal_r+0xd30>
    2010:	d9402d17 	ldw	r5,180(sp)
    2014:	0005883a 	mov	r2,zero
    2018:	2c800017 	ldw	r18,0(r5)
    201c:	2d400117 	ldw	r21,4(r5)
    2020:	29400204 	addi	r5,r5,8
    2024:	d9402d15 	stw	r5,180(sp)
    2028:	9546b03a 	or	r3,r18,r21
    202c:	d8002785 	stb	zero,158(sp)
    2030:	da403215 	stw	r9,200(sp)
    2034:	0027883a 	mov	r19,zero
    2038:	003ece06 	br	1b74 <___vfprintf_internal_r+0x4f8>
    203c:	da002a17 	ldw	r8,168(sp)
    2040:	df002a15 	stw	fp,168(sp)
    2044:	9f000414 	ori	fp,r19,16
    2048:	e080080c 	andi	r2,fp,32
    204c:	1000c826 	beq	r2,zero,2370 <___vfprintf_internal_r+0xcf4>
    2050:	d9002d17 	ldw	r4,180(sp)
    2054:	00800044 	movi	r2,1
    2058:	24800017 	ldw	r18,0(r4)
    205c:	25400117 	ldw	r21,4(r4)
    2060:	21000204 	addi	r4,r4,8
    2064:	d9002d15 	stw	r4,180(sp)
    2068:	9546b03a 	or	r3,r18,r21
    206c:	003fef06 	br	202c <___vfprintf_internal_r+0x9b0>
    2070:	d9402d17 	ldw	r5,180(sp)
    2074:	00800c04 	movi	r2,48
    2078:	d8802705 	stb	r2,156(sp)
    207c:	2c800017 	ldw	r18,0(r5)
    2080:	00801e04 	movi	r2,120
    2084:	d8802745 	stb	r2,157(sp)
    2088:	00800074 	movhi	r2,1
    208c:	1088d004 	addi	r2,r2,9024
    2090:	29400104 	addi	r5,r5,4
    2094:	da002a17 	ldw	r8,168(sp)
    2098:	d8803b15 	stw	r2,236(sp)
    209c:	df002a15 	stw	fp,168(sp)
    20a0:	002b883a 	mov	r21,zero
    20a4:	9f000094 	ori	fp,r19,2
    20a8:	d9402d15 	stw	r5,180(sp)
    20ac:	00800084 	movi	r2,2
    20b0:	04001e04 	movi	r16,120
    20b4:	9007883a 	mov	r3,r18
    20b8:	003fdc06 	br	202c <___vfprintf_internal_r+0x9b0>
    20bc:	da002a17 	ldw	r8,168(sp)
    20c0:	df002a15 	stw	fp,168(sp)
    20c4:	9839883a 	mov	fp,r19
    20c8:	dcc02b03 	ldbu	r19,172(sp)
    20cc:	e080080c 	andi	r2,fp,32
    20d0:	d8c02d17 	ldw	r3,180(sp)
    20d4:	dcc02785 	stb	r19,158(sp)
    20d8:	103e9b1e 	bne	r2,zero,1b48 <___vfprintf_internal_r+0x4cc>
    20dc:	e080040c 	andi	r2,fp,16
    20e0:	10036626 	beq	r2,zero,2e7c <___vfprintf_internal_r+0x1800>
    20e4:	1c800017 	ldw	r18,0(r3)
    20e8:	d9402d17 	ldw	r5,180(sp)
    20ec:	902bd7fa 	srai	r21,r18,31
    20f0:	29400104 	addi	r5,r5,4
    20f4:	d9402d15 	stw	r5,180(sp)
    20f8:	a805883a 	mov	r2,r21
    20fc:	003e9806 	br	1b60 <___vfprintf_internal_r+0x4e4>
    2100:	9cc01014 	ori	r19,r19,64
    2104:	e005883a 	mov	r2,fp
    2108:	e4000007 	ldb	r16,0(fp)
    210c:	003dc106 	br	1814 <___vfprintf_internal_r+0x198>
    2110:	e4000007 	ldb	r16,0(fp)
    2114:	00801b04 	movi	r2,108
    2118:	80841426 	beq	r16,r2,316c <___vfprintf_internal_r+0x1af0>
    211c:	9cc00414 	ori	r19,r19,16
    2120:	e005883a 	mov	r2,fp
    2124:	003dbb06 	br	1814 <___vfprintf_internal_r+0x198>
    2128:	da002a17 	ldw	r8,168(sp)
    212c:	df002a15 	stw	fp,168(sp)
    2130:	9839883a 	mov	fp,r19
    2134:	dcc02b03 	ldbu	r19,172(sp)
    2138:	e080080c 	andi	r2,fp,32
    213c:	dcc02785 	stb	r19,158(sp)
    2140:	10036126 	beq	r2,zero,2ec8 <___vfprintf_internal_r+0x184c>
    2144:	d9402d17 	ldw	r5,180(sp)
    2148:	d9002f17 	ldw	r4,188(sp)
    214c:	28800017 	ldw	r2,0(r5)
    2150:	2007d7fa 	srai	r3,r4,31
    2154:	29400104 	addi	r5,r5,4
    2158:	d9402d15 	stw	r5,180(sp)
    215c:	11000015 	stw	r4,0(r2)
    2160:	10c00115 	stw	r3,4(r2)
    2164:	003d8006 	br	1768 <___vfprintf_internal_r+0xec>
    2168:	da002a17 	ldw	r8,168(sp)
    216c:	df002a15 	stw	fp,168(sp)
    2170:	9839883a 	mov	fp,r19
    2174:	dcc02b03 	ldbu	r19,172(sp)
    2178:	01400074 	movhi	r5,1
    217c:	2948cb04 	addi	r5,r5,9004
    2180:	dcc02785 	stb	r19,158(sp)
    2184:	d9403b15 	stw	r5,236(sp)
    2188:	e0c0080c 	andi	r3,fp,32
    218c:	d8802d17 	ldw	r2,180(sp)
    2190:	18006626 	beq	r3,zero,232c <___vfprintf_internal_r+0xcb0>
    2194:	d9402d17 	ldw	r5,180(sp)
    2198:	14800017 	ldw	r18,0(r2)
    219c:	15400117 	ldw	r21,4(r2)
    21a0:	29400204 	addi	r5,r5,8
    21a4:	d9402d15 	stw	r5,180(sp)
    21a8:	e080004c 	andi	r2,fp,1
    21ac:	1001fd26 	beq	r2,zero,29a4 <___vfprintf_internal_r+0x1328>
    21b0:	9546b03a 	or	r3,r18,r21
    21b4:	18034f26 	beq	r3,zero,2ef4 <___vfprintf_internal_r+0x1878>
    21b8:	00800c04 	movi	r2,48
    21bc:	d8802705 	stb	r2,156(sp)
    21c0:	dc002745 	stb	r16,157(sp)
    21c4:	e7000094 	ori	fp,fp,2
    21c8:	00800084 	movi	r2,2
    21cc:	003f9706 	br	202c <___vfprintf_internal_r+0x9b0>
    21d0:	d8c02d17 	ldw	r3,180(sp)
    21d4:	d9002d17 	ldw	r4,180(sp)
    21d8:	da002a17 	ldw	r8,168(sp)
    21dc:	18800017 	ldw	r2,0(r3)
    21e0:	21000104 	addi	r4,r4,4
    21e4:	00c00044 	movi	r3,1
    21e8:	df002a15 	stw	fp,168(sp)
    21ec:	d8c02b15 	stw	r3,172(sp)
    21f0:	9839883a 	mov	fp,r19
    21f4:	d8002785 	stb	zero,158(sp)
    21f8:	d8801405 	stb	r2,80(sp)
    21fc:	d9002d15 	stw	r4,180(sp)
    2200:	1823883a 	mov	r17,r3
    2204:	d8c01404 	addi	r3,sp,80
    2208:	d8003215 	stw	zero,200(sp)
    220c:	d8003415 	stw	zero,208(sp)
    2210:	d8c03115 	stw	r3,196(sp)
    2214:	0005883a 	mov	r2,zero
    2218:	003e7c06 	br	1c0c <___vfprintf_internal_r+0x590>
    221c:	d8802b07 	ldb	r2,172(sp)
    2220:	1003011e 	bne	r2,zero,2e28 <___vfprintf_internal_r+0x17ac>
    2224:	00c00804 	movi	r3,32
    2228:	d8c02b05 	stb	r3,172(sp)
    222c:	e005883a 	mov	r2,fp
    2230:	e4000007 	ldb	r16,0(fp)
    2234:	003d7706 	br	1814 <___vfprintf_internal_r+0x198>
    2238:	9cc00054 	ori	r19,r19,1
    223c:	e005883a 	mov	r2,fp
    2240:	e4000007 	ldb	r16,0(fp)
    2244:	003d7306 	br	1814 <___vfprintf_internal_r+0x198>
    2248:	d9002d17 	ldw	r4,180(sp)
    224c:	d9402d17 	ldw	r5,180(sp)
    2250:	21000017 	ldw	r4,0(r4)
    2254:	28c00104 	addi	r3,r5,4
    2258:	d9002e15 	stw	r4,184(sp)
    225c:	2003bd16 	blt	r4,zero,3154 <___vfprintf_internal_r+0x1ad8>
    2260:	d8c02d15 	stw	r3,180(sp)
    2264:	e005883a 	mov	r2,fp
    2268:	e4000007 	ldb	r16,0(fp)
    226c:	003d6906 	br	1814 <___vfprintf_internal_r+0x198>
    2270:	00c00ac4 	movi	r3,43
    2274:	d8c02b05 	stb	r3,172(sp)
    2278:	e005883a 	mov	r2,fp
    227c:	e4000007 	ldb	r16,0(fp)
    2280:	003d6406 	br	1814 <___vfprintf_internal_r+0x198>
    2284:	d8c02d17 	ldw	r3,180(sp)
    2288:	d9002d17 	ldw	r4,180(sp)
    228c:	da002a17 	ldw	r8,168(sp)
    2290:	18c00017 	ldw	r3,0(r3)
    2294:	df002a15 	stw	fp,168(sp)
    2298:	d8002785 	stb	zero,158(sp)
    229c:	d8c03115 	stw	r3,196(sp)
    22a0:	9839883a 	mov	fp,r19
    22a4:	24800104 	addi	r18,r4,4
    22a8:	18041b26 	beq	r3,zero,3318 <___vfprintf_internal_r+0x1c9c>
    22ac:	d9003117 	ldw	r4,196(sp)
    22b0:	4803be16 	blt	r9,zero,31ac <___vfprintf_internal_r+0x1b30>
    22b4:	480d883a 	mov	r6,r9
    22b8:	000b883a 	mov	r5,zero
    22bc:	da003f15 	stw	r8,252(sp)
    22c0:	da403e15 	stw	r9,248(sp)
    22c4:	0006d440 	call	6d44 <memchr>
    22c8:	da003f17 	ldw	r8,252(sp)
    22cc:	da403e17 	ldw	r9,248(sp)
    22d0:	10045426 	beq	r2,zero,3424 <___vfprintf_internal_r+0x1da8>
    22d4:	d8c03117 	ldw	r3,196(sp)
    22d8:	10e3c83a 	sub	r17,r2,r3
    22dc:	4c436a16 	blt	r9,r17,3088 <___vfprintf_internal_r+0x1a0c>
    22e0:	8805883a 	mov	r2,r17
    22e4:	8803b616 	blt	r17,zero,31c0 <___vfprintf_internal_r+0x1b44>
    22e8:	dcc02783 	ldbu	r19,158(sp)
    22ec:	d8802b15 	stw	r2,172(sp)
    22f0:	dc802d15 	stw	r18,180(sp)
    22f4:	d8003215 	stw	zero,200(sp)
    22f8:	d8003415 	stw	zero,208(sp)
    22fc:	003e3c06 	br	1bf0 <___vfprintf_internal_r+0x574>
    2300:	da002a17 	ldw	r8,168(sp)
    2304:	df002a15 	stw	fp,168(sp)
    2308:	9839883a 	mov	fp,r19
    230c:	dcc02b03 	ldbu	r19,172(sp)
    2310:	01000074 	movhi	r4,1
    2314:	2108d004 	addi	r4,r4,9024
    2318:	d9003b15 	stw	r4,236(sp)
    231c:	dcc02785 	stb	r19,158(sp)
    2320:	e0c0080c 	andi	r3,fp,32
    2324:	d8802d17 	ldw	r2,180(sp)
    2328:	183f9a1e 	bne	r3,zero,2194 <___vfprintf_internal_r+0xb18>
    232c:	e0c0040c 	andi	r3,fp,16
    2330:	1802c026 	beq	r3,zero,2e34 <___vfprintf_internal_r+0x17b8>
    2334:	d8c02d17 	ldw	r3,180(sp)
    2338:	14800017 	ldw	r18,0(r2)
    233c:	002b883a 	mov	r21,zero
    2340:	18c00104 	addi	r3,r3,4
    2344:	d8c02d15 	stw	r3,180(sp)
    2348:	003f9706 	br	21a8 <___vfprintf_internal_r+0xb2c>
    234c:	9cc00814 	ori	r19,r19,32
    2350:	e005883a 	mov	r2,fp
    2354:	e4000007 	ldb	r16,0(fp)
    2358:	003d2e06 	br	1814 <___vfprintf_internal_r+0x198>
    235c:	da002a17 	ldw	r8,168(sp)
    2360:	df002a15 	stw	fp,168(sp)
    2364:	9839883a 	mov	fp,r19
    2368:	e080080c 	andi	r2,fp,32
    236c:	103f381e 	bne	r2,zero,2050 <___vfprintf_internal_r+0x9d4>
    2370:	e080040c 	andi	r2,fp,16
    2374:	1002b726 	beq	r2,zero,2e54 <___vfprintf_internal_r+0x17d8>
    2378:	d9402d17 	ldw	r5,180(sp)
    237c:	002b883a 	mov	r21,zero
    2380:	00800044 	movi	r2,1
    2384:	2c800017 	ldw	r18,0(r5)
    2388:	29400104 	addi	r5,r5,4
    238c:	d9402d15 	stw	r5,180(sp)
    2390:	9007883a 	mov	r3,r18
    2394:	003f2506 	br	202c <___vfprintf_internal_r+0x9b0>
    2398:	da002a17 	ldw	r8,168(sp)
    239c:	df002a15 	stw	fp,168(sp)
    23a0:	9839883a 	mov	fp,r19
    23a4:	e080080c 	andi	r2,fp,32
    23a8:	103f191e 	bne	r2,zero,2010 <___vfprintf_internal_r+0x994>
    23ac:	e080040c 	andi	r2,fp,16
    23b0:	1002bb26 	beq	r2,zero,2ea0 <___vfprintf_internal_r+0x1824>
    23b4:	d8802d17 	ldw	r2,180(sp)
    23b8:	002b883a 	mov	r21,zero
    23bc:	14800017 	ldw	r18,0(r2)
    23c0:	10800104 	addi	r2,r2,4
    23c4:	d8802d15 	stw	r2,180(sp)
    23c8:	9007883a 	mov	r3,r18
    23cc:	0005883a 	mov	r2,zero
    23d0:	003f1606 	br	202c <___vfprintf_internal_r+0x9b0>
    23d4:	da002a17 	ldw	r8,168(sp)
    23d8:	df002a15 	stw	fp,168(sp)
    23dc:	9839883a 	mov	fp,r19
    23e0:	dcc02b03 	ldbu	r19,172(sp)
    23e4:	dcc02785 	stb	r19,158(sp)
    23e8:	803d9326 	beq	r16,zero,1a38 <___vfprintf_internal_r+0x3bc>
    23ec:	00c00044 	movi	r3,1
    23f0:	d8c02b15 	stw	r3,172(sp)
    23f4:	dc001405 	stb	r16,80(sp)
    23f8:	d8002785 	stb	zero,158(sp)
    23fc:	003f8006 	br	2200 <___vfprintf_internal_r+0xb84>
    2400:	d8c02017 	ldw	r3,128(sp)
    2404:	003e3906 	br	1cec <___vfprintf_internal_r+0x670>
    2408:	10803fcc 	andi	r2,r2,255
    240c:	00c00044 	movi	r3,1
    2410:	10fde01e 	bne	r2,r3,1b94 <___vfprintf_internal_r+0x518>
    2414:	a800021e 	bne	r21,zero,2420 <___vfprintf_internal_r+0xda4>
    2418:	00800244 	movi	r2,9
    241c:	14801e2e 	bgeu	r2,r18,2498 <___vfprintf_internal_r+0xe1c>
    2420:	dc002b15 	stw	r16,172(sp)
    2424:	dc401e04 	addi	r17,sp,120
    2428:	9021883a 	mov	r16,r18
    242c:	da402c15 	stw	r9,176(sp)
    2430:	a825883a 	mov	r18,r21
    2434:	402b883a 	mov	r21,r8
    2438:	8009883a 	mov	r4,r16
    243c:	900b883a 	mov	r5,r18
    2440:	01800284 	movi	r6,10
    2444:	000f883a 	mov	r7,zero
    2448:	000ae800 	call	ae80 <__umoddi3>
    244c:	10800c04 	addi	r2,r2,48
    2450:	8c7fffc4 	addi	r17,r17,-1
    2454:	8009883a 	mov	r4,r16
    2458:	900b883a 	mov	r5,r18
    245c:	01800284 	movi	r6,10
    2460:	000f883a 	mov	r7,zero
    2464:	88800005 	stb	r2,0(r17)
    2468:	000a8400 	call	a840 <__udivdi3>
    246c:	1021883a 	mov	r16,r2
    2470:	10c4b03a 	or	r2,r2,r3
    2474:	1825883a 	mov	r18,r3
    2478:	103fef1e 	bne	r2,zero,2438 <___vfprintf_internal_r+0xdbc>
    247c:	d9002817 	ldw	r4,160(sp)
    2480:	dc403115 	stw	r17,196(sp)
    2484:	dc002b17 	ldw	r16,172(sp)
    2488:	da402c17 	ldw	r9,176(sp)
    248c:	a811883a 	mov	r8,r21
    2490:	2463c83a 	sub	r17,r4,r17
    2494:	003dd106 	br	1bdc <___vfprintf_internal_r+0x560>
    2498:	94800c04 	addi	r18,r18,48
    249c:	d8c01dc4 	addi	r3,sp,119
    24a0:	dc801dc5 	stb	r18,119(sp)
    24a4:	dc403c17 	ldw	r17,240(sp)
    24a8:	d8c03115 	stw	r3,196(sp)
    24ac:	003dcb06 	br	1bdc <___vfprintf_internal_r+0x560>
    24b0:	00801944 	movi	r2,101
    24b4:	1400720e 	bge	r2,r16,2680 <___vfprintf_internal_r+0x1004>
    24b8:	d9003717 	ldw	r4,220(sp)
    24bc:	d9403917 	ldw	r5,228(sp)
    24c0:	000d883a 	mov	r6,zero
    24c4:	000f883a 	mov	r7,zero
    24c8:	d8c03d15 	stw	r3,244(sp)
    24cc:	da003f15 	stw	r8,252(sp)
    24d0:	000c7e40 	call	c7e4 <__eqdf2>
    24d4:	d8c03d17 	ldw	r3,244(sp)
    24d8:	da003f17 	ldw	r8,252(sp)
    24dc:	1000f41e 	bne	r2,zero,28b0 <___vfprintf_internal_r+0x1234>
    24e0:	d8801f17 	ldw	r2,124(sp)
    24e4:	01000074 	movhi	r4,1
    24e8:	2108d704 	addi	r4,r4,9052
    24ec:	18c00044 	addi	r3,r3,1
    24f0:	10800044 	addi	r2,r2,1
    24f4:	41000015 	stw	r4,0(r8)
    24f8:	01000044 	movi	r4,1
    24fc:	41000115 	stw	r4,4(r8)
    2500:	d8c02015 	stw	r3,128(sp)
    2504:	d8801f15 	stw	r2,124(sp)
    2508:	010001c4 	movi	r4,7
    250c:	20828d16 	blt	r4,r2,2f44 <___vfprintf_internal_r+0x18c8>
    2510:	42000204 	addi	r8,r8,8
    2514:	d8802617 	ldw	r2,152(sp)
    2518:	d9403317 	ldw	r5,204(sp)
    251c:	11400216 	blt	r2,r5,2528 <___vfprintf_internal_r+0xeac>
    2520:	e080004c 	andi	r2,fp,1
    2524:	103e4526 	beq	r2,zero,1e3c <___vfprintf_internal_r+0x7c0>
    2528:	d8803817 	ldw	r2,224(sp)
    252c:	d9003517 	ldw	r4,212(sp)
    2530:	d9403817 	ldw	r5,224(sp)
    2534:	1887883a 	add	r3,r3,r2
    2538:	d8801f17 	ldw	r2,124(sp)
    253c:	41000015 	stw	r4,0(r8)
    2540:	41400115 	stw	r5,4(r8)
    2544:	10800044 	addi	r2,r2,1
    2548:	d8c02015 	stw	r3,128(sp)
    254c:	d8801f15 	stw	r2,124(sp)
    2550:	010001c4 	movi	r4,7
    2554:	20830916 	blt	r4,r2,317c <___vfprintf_internal_r+0x1b00>
    2558:	42000204 	addi	r8,r8,8
    255c:	d8803317 	ldw	r2,204(sp)
    2560:	143fffc4 	addi	r16,r2,-1
    2564:	043e350e 	bge	zero,r16,1e3c <___vfprintf_internal_r+0x7c0>
    2568:	04400404 	movi	r17,16
    256c:	d8801f17 	ldw	r2,124(sp)
    2570:	8c007e0e 	bge	r17,r16,276c <___vfprintf_internal_r+0x10f0>
    2574:	01400074 	movhi	r5,1
    2578:	2948d784 	addi	r5,r5,9054
    257c:	d9402c15 	stw	r5,176(sp)
    2580:	04c001c4 	movi	r19,7
    2584:	00000306 	br	2594 <___vfprintf_internal_r+0xf18>
    2588:	42000204 	addi	r8,r8,8
    258c:	843ffc04 	addi	r16,r16,-16
    2590:	8c00790e 	bge	r17,r16,2778 <___vfprintf_internal_r+0x10fc>
    2594:	18c00404 	addi	r3,r3,16
    2598:	10800044 	addi	r2,r2,1
    259c:	45000015 	stw	r20,0(r8)
    25a0:	44400115 	stw	r17,4(r8)
    25a4:	d8c02015 	stw	r3,128(sp)
    25a8:	d8801f15 	stw	r2,124(sp)
    25ac:	98bff60e 	bge	r19,r2,2588 <___vfprintf_internal_r+0xf0c>
    25b0:	b809883a 	mov	r4,r23
    25b4:	b00b883a 	mov	r5,r22
    25b8:	d9801e04 	addi	r6,sp,120
    25bc:	0008b4c0 	call	8b4c <__sprint_r>
    25c0:	103d231e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    25c4:	d8c02017 	ldw	r3,128(sp)
    25c8:	d8801f17 	ldw	r2,124(sp)
    25cc:	da000404 	addi	r8,sp,16
    25d0:	003fee06 	br	258c <___vfprintf_internal_r+0xf10>
    25d4:	d9402e17 	ldw	r5,184(sp)
    25d8:	d8802b17 	ldw	r2,172(sp)
    25dc:	28a7c83a 	sub	r19,r5,r2
    25e0:	04fde00e 	bge	zero,r19,1d64 <___vfprintf_internal_r+0x6e8>
    25e4:	05400404 	movi	r21,16
    25e8:	d8801f17 	ldw	r2,124(sp)
    25ec:	acc3870e 	bge	r21,r19,340c <___vfprintf_internal_r+0x1d90>
    25f0:	01400074 	movhi	r5,1
    25f4:	2948d784 	addi	r5,r5,9054
    25f8:	d9402c15 	stw	r5,176(sp)
    25fc:	048001c4 	movi	r18,7
    2600:	00000306 	br	2610 <___vfprintf_internal_r+0xf94>
    2604:	9cfffc04 	addi	r19,r19,-16
    2608:	42000204 	addi	r8,r8,8
    260c:	acc0110e 	bge	r21,r19,2654 <___vfprintf_internal_r+0xfd8>
    2610:	18c00404 	addi	r3,r3,16
    2614:	10800044 	addi	r2,r2,1
    2618:	45000015 	stw	r20,0(r8)
    261c:	45400115 	stw	r21,4(r8)
    2620:	d8c02015 	stw	r3,128(sp)
    2624:	d8801f15 	stw	r2,124(sp)
    2628:	90bff60e 	bge	r18,r2,2604 <___vfprintf_internal_r+0xf88>
    262c:	b809883a 	mov	r4,r23
    2630:	b00b883a 	mov	r5,r22
    2634:	d9801e04 	addi	r6,sp,120
    2638:	0008b4c0 	call	8b4c <__sprint_r>
    263c:	103d041e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2640:	9cfffc04 	addi	r19,r19,-16
    2644:	d8c02017 	ldw	r3,128(sp)
    2648:	d8801f17 	ldw	r2,124(sp)
    264c:	da000404 	addi	r8,sp,16
    2650:	acffef16 	blt	r21,r19,2610 <___vfprintf_internal_r+0xf94>
    2654:	d9002c17 	ldw	r4,176(sp)
    2658:	1cc7883a 	add	r3,r3,r19
    265c:	10800044 	addi	r2,r2,1
    2660:	41000015 	stw	r4,0(r8)
    2664:	44c00115 	stw	r19,4(r8)
    2668:	d8c02015 	stw	r3,128(sp)
    266c:	d8801f15 	stw	r2,124(sp)
    2670:	010001c4 	movi	r4,7
    2674:	20817816 	blt	r4,r2,2c58 <___vfprintf_internal_r+0x15dc>
    2678:	42000204 	addi	r8,r8,8
    267c:	003db906 	br	1d64 <___vfprintf_internal_r+0x6e8>
    2680:	d9403317 	ldw	r5,204(sp)
    2684:	00800044 	movi	r2,1
    2688:	18c00044 	addi	r3,r3,1
    268c:	11413e0e 	bge	r2,r5,2b88 <___vfprintf_internal_r+0x150c>
    2690:	dc001f17 	ldw	r16,124(sp)
    2694:	d8803117 	ldw	r2,196(sp)
    2698:	d8c02015 	stw	r3,128(sp)
    269c:	84000044 	addi	r16,r16,1
    26a0:	40800015 	stw	r2,0(r8)
    26a4:	00800044 	movi	r2,1
    26a8:	40800115 	stw	r2,4(r8)
    26ac:	dc001f15 	stw	r16,124(sp)
    26b0:	008001c4 	movi	r2,7
    26b4:	14015616 	blt	r2,r16,2c10 <___vfprintf_internal_r+0x1594>
    26b8:	42000204 	addi	r8,r8,8
    26bc:	d9003817 	ldw	r4,224(sp)
    26c0:	d9403517 	ldw	r5,212(sp)
    26c4:	84000044 	addi	r16,r16,1
    26c8:	1907883a 	add	r3,r3,r4
    26cc:	41400015 	stw	r5,0(r8)
    26d0:	41000115 	stw	r4,4(r8)
    26d4:	d8c02015 	stw	r3,128(sp)
    26d8:	dc001f15 	stw	r16,124(sp)
    26dc:	008001c4 	movi	r2,7
    26e0:	14015416 	blt	r2,r16,2c34 <___vfprintf_internal_r+0x15b8>
    26e4:	44400204 	addi	r17,r8,8
    26e8:	d9003717 	ldw	r4,220(sp)
    26ec:	d9403917 	ldw	r5,228(sp)
    26f0:	000d883a 	mov	r6,zero
    26f4:	000f883a 	mov	r7,zero
    26f8:	d8c03d15 	stw	r3,244(sp)
    26fc:	000c7e40 	call	c7e4 <__eqdf2>
    2700:	d8c03d17 	ldw	r3,244(sp)
    2704:	1000aa26 	beq	r2,zero,29b0 <___vfprintf_internal_r+0x1334>
    2708:	d9003317 	ldw	r4,204(sp)
    270c:	d9403117 	ldw	r5,196(sp)
    2710:	84000044 	addi	r16,r16,1
    2714:	20bfffc4 	addi	r2,r4,-1
    2718:	1887883a 	add	r3,r3,r2
    271c:	29000044 	addi	r4,r5,1
    2720:	88800115 	stw	r2,4(r17)
    2724:	89000015 	stw	r4,0(r17)
    2728:	d8c02015 	stw	r3,128(sp)
    272c:	dc001f15 	stw	r16,124(sp)
    2730:	008001c4 	movi	r2,7
    2734:	14012d16 	blt	r2,r16,2bec <___vfprintf_internal_r+0x1570>
    2738:	8c400204 	addi	r17,r17,8
    273c:	d9403a17 	ldw	r5,232(sp)
    2740:	dcc022c4 	addi	r19,sp,139
    2744:	84000044 	addi	r16,r16,1
    2748:	1947883a 	add	r3,r3,r5
    274c:	8cc00015 	stw	r19,0(r17)
    2750:	89400115 	stw	r5,4(r17)
    2754:	d8c02015 	stw	r3,128(sp)
    2758:	dc001f15 	stw	r16,124(sp)
    275c:	008001c4 	movi	r2,7
    2760:	14000e16 	blt	r2,r16,279c <___vfprintf_internal_r+0x1120>
    2764:	8a000204 	addi	r8,r17,8
    2768:	003db406 	br	1e3c <___vfprintf_internal_r+0x7c0>
    276c:	01000074 	movhi	r4,1
    2770:	2108d784 	addi	r4,r4,9054
    2774:	d9002c15 	stw	r4,176(sp)
    2778:	d9002c17 	ldw	r4,176(sp)
    277c:	1c07883a 	add	r3,r3,r16
    2780:	44000115 	stw	r16,4(r8)
    2784:	41000015 	stw	r4,0(r8)
    2788:	10800044 	addi	r2,r2,1
    278c:	d8c02015 	stw	r3,128(sp)
    2790:	d8801f15 	stw	r2,124(sp)
    2794:	010001c4 	movi	r4,7
    2798:	20bda70e 	bge	r4,r2,1e38 <___vfprintf_internal_r+0x7bc>
    279c:	b809883a 	mov	r4,r23
    27a0:	b00b883a 	mov	r5,r22
    27a4:	d9801e04 	addi	r6,sp,120
    27a8:	0008b4c0 	call	8b4c <__sprint_r>
    27ac:	103ca81e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    27b0:	d8c02017 	ldw	r3,128(sp)
    27b4:	da000404 	addi	r8,sp,16
    27b8:	003da006 	br	1e3c <___vfprintf_internal_r+0x7c0>
    27bc:	b809883a 	mov	r4,r23
    27c0:	b00b883a 	mov	r5,r22
    27c4:	d9801e04 	addi	r6,sp,120
    27c8:	0008b4c0 	call	8b4c <__sprint_r>
    27cc:	103dd626 	beq	r2,zero,1f28 <___vfprintf_internal_r+0x8ac>
    27d0:	003c9f06 	br	1a50 <___vfprintf_internal_r+0x3d4>
    27d4:	10803fcc 	andi	r2,r2,255
    27d8:	1000201e 	bne	r2,zero,285c <___vfprintf_internal_r+0x11e0>
    27dc:	e080004c 	andi	r2,fp,1
    27e0:	10001e26 	beq	r2,zero,285c <___vfprintf_internal_r+0x11e0>
    27e4:	00800c04 	movi	r2,48
    27e8:	d8c01dc4 	addi	r3,sp,119
    27ec:	d8801dc5 	stb	r2,119(sp)
    27f0:	dc403c17 	ldw	r17,240(sp)
    27f4:	d8c03115 	stw	r3,196(sp)
    27f8:	003cf806 	br	1bdc <___vfprintf_internal_r+0x560>
    27fc:	b809883a 	mov	r4,r23
    2800:	b00b883a 	mov	r5,r22
    2804:	d9801e04 	addi	r6,sp,120
    2808:	0008b4c0 	call	8b4c <__sprint_r>
    280c:	103c901e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2810:	d8c02017 	ldw	r3,128(sp)
    2814:	da000404 	addi	r8,sp,16
    2818:	003d7b06 	br	1e08 <___vfprintf_internal_r+0x78c>
    281c:	b809883a 	mov	r4,r23
    2820:	b00b883a 	mov	r5,r22
    2824:	d9801e04 	addi	r6,sp,120
    2828:	0008b4c0 	call	8b4c <__sprint_r>
    282c:	103c881e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2830:	d8c02017 	ldw	r3,128(sp)
    2834:	da000404 	addi	r8,sp,16
    2838:	003d3906 	br	1d20 <___vfprintf_internal_r+0x6a4>
    283c:	b809883a 	mov	r4,r23
    2840:	b00b883a 	mov	r5,r22
    2844:	d9801e04 	addi	r6,sp,120
    2848:	0008b4c0 	call	8b4c <__sprint_r>
    284c:	103c801e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2850:	d8c02017 	ldw	r3,128(sp)
    2854:	da000404 	addi	r8,sp,16
    2858:	003d3f06 	br	1d58 <___vfprintf_internal_r+0x6dc>
    285c:	d8c01e04 	addi	r3,sp,120
    2860:	0023883a 	mov	r17,zero
    2864:	d8c03115 	stw	r3,196(sp)
    2868:	003cdc06 	br	1bdc <___vfprintf_internal_r+0x560>
    286c:	d9403b17 	ldw	r5,236(sp)
    2870:	d8c01e04 	addi	r3,sp,120
    2874:	908003cc 	andi	r2,r18,15
    2878:	a808973a 	slli	r4,r21,28
    287c:	2885883a 	add	r2,r5,r2
    2880:	9024d13a 	srli	r18,r18,4
    2884:	10800003 	ldbu	r2,0(r2)
    2888:	a82ad13a 	srli	r21,r21,4
    288c:	18ffffc4 	addi	r3,r3,-1
    2890:	24a4b03a 	or	r18,r4,r18
    2894:	18800005 	stb	r2,0(r3)
    2898:	9544b03a 	or	r2,r18,r21
    289c:	103ff51e 	bne	r2,zero,2874 <___vfprintf_internal_r+0x11f8>
    28a0:	d9402817 	ldw	r5,160(sp)
    28a4:	d8c03115 	stw	r3,196(sp)
    28a8:	28e3c83a 	sub	r17,r5,r3
    28ac:	003ccb06 	br	1bdc <___vfprintf_internal_r+0x560>
    28b0:	dc002617 	ldw	r16,152(sp)
    28b4:	0401ab0e 	bge	zero,r16,2f64 <___vfprintf_internal_r+0x18e8>
    28b8:	d8803317 	ldw	r2,204(sp)
    28bc:	d9403117 	ldw	r5,196(sp)
    28c0:	d9003417 	ldw	r4,208(sp)
    28c4:	1023883a 	mov	r17,r2
    28c8:	28a1883a 	add	r16,r5,r2
    28cc:	2080010e 	bge	r4,r2,28d4 <___vfprintf_internal_r+0x1258>
    28d0:	2023883a 	mov	r17,r4
    28d4:	04400b0e 	bge	zero,r17,2904 <___vfprintf_internal_r+0x1288>
    28d8:	d8801f17 	ldw	r2,124(sp)
    28dc:	d9403117 	ldw	r5,196(sp)
    28e0:	1c47883a 	add	r3,r3,r17
    28e4:	10800044 	addi	r2,r2,1
    28e8:	41400015 	stw	r5,0(r8)
    28ec:	44400115 	stw	r17,4(r8)
    28f0:	d8c02015 	stw	r3,128(sp)
    28f4:	d8801f15 	stw	r2,124(sp)
    28f8:	010001c4 	movi	r4,7
    28fc:	20826716 	blt	r4,r2,329c <___vfprintf_internal_r+0x1c20>
    2900:	42000204 	addi	r8,r8,8
    2904:	88026316 	blt	r17,zero,3294 <___vfprintf_internal_r+0x1c18>
    2908:	d8803417 	ldw	r2,208(sp)
    290c:	1463c83a 	sub	r17,r2,r17
    2910:	0440590e 	bge	zero,r17,2a78 <___vfprintf_internal_r+0x13fc>
    2914:	04c00404 	movi	r19,16
    2918:	d8801f17 	ldw	r2,124(sp)
    291c:	9c41770e 	bge	r19,r17,2efc <___vfprintf_internal_r+0x1880>
    2920:	01400074 	movhi	r5,1
    2924:	2948d784 	addi	r5,r5,9054
    2928:	d9402c15 	stw	r5,176(sp)
    292c:	054001c4 	movi	r21,7
    2930:	00000306 	br	2940 <___vfprintf_internal_r+0x12c4>
    2934:	42000204 	addi	r8,r8,8
    2938:	8c7ffc04 	addi	r17,r17,-16
    293c:	9c41720e 	bge	r19,r17,2f08 <___vfprintf_internal_r+0x188c>
    2940:	18c00404 	addi	r3,r3,16
    2944:	10800044 	addi	r2,r2,1
    2948:	45000015 	stw	r20,0(r8)
    294c:	44c00115 	stw	r19,4(r8)
    2950:	d8c02015 	stw	r3,128(sp)
    2954:	d8801f15 	stw	r2,124(sp)
    2958:	a8bff60e 	bge	r21,r2,2934 <___vfprintf_internal_r+0x12b8>
    295c:	b809883a 	mov	r4,r23
    2960:	b00b883a 	mov	r5,r22
    2964:	d9801e04 	addi	r6,sp,120
    2968:	0008b4c0 	call	8b4c <__sprint_r>
    296c:	103c381e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2970:	d8c02017 	ldw	r3,128(sp)
    2974:	d8801f17 	ldw	r2,124(sp)
    2978:	da000404 	addi	r8,sp,16
    297c:	003fee06 	br	2938 <___vfprintf_internal_r+0x12bc>
    2980:	b809883a 	mov	r4,r23
    2984:	b00b883a 	mov	r5,r22
    2988:	d9801e04 	addi	r6,sp,120
    298c:	0008b4c0 	call	8b4c <__sprint_r>
    2990:	103c2f1e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2994:	d8c02017 	ldw	r3,128(sp)
    2998:	d8802787 	ldb	r2,158(sp)
    299c:	da000404 	addi	r8,sp,16
    29a0:	003cd206 	br	1cec <___vfprintf_internal_r+0x670>
    29a4:	00800084 	movi	r2,2
    29a8:	9546b03a 	or	r3,r18,r21
    29ac:	003d9f06 	br	202c <___vfprintf_internal_r+0x9b0>
    29b0:	d8803317 	ldw	r2,204(sp)
    29b4:	14ffffc4 	addi	r19,r2,-1
    29b8:	04ff600e 	bge	zero,r19,273c <___vfprintf_internal_r+0x10c0>
    29bc:	05400404 	movi	r21,16
    29c0:	acc07e0e 	bge	r21,r19,2bbc <___vfprintf_internal_r+0x1540>
    29c4:	01400074 	movhi	r5,1
    29c8:	2948d784 	addi	r5,r5,9054
    29cc:	d9402c15 	stw	r5,176(sp)
    29d0:	01c001c4 	movi	r7,7
    29d4:	00000306 	br	29e4 <___vfprintf_internal_r+0x1368>
    29d8:	8c400204 	addi	r17,r17,8
    29dc:	9cfffc04 	addi	r19,r19,-16
    29e0:	acc0790e 	bge	r21,r19,2bc8 <___vfprintf_internal_r+0x154c>
    29e4:	18c00404 	addi	r3,r3,16
    29e8:	84000044 	addi	r16,r16,1
    29ec:	8d000015 	stw	r20,0(r17)
    29f0:	8d400115 	stw	r21,4(r17)
    29f4:	d8c02015 	stw	r3,128(sp)
    29f8:	dc001f15 	stw	r16,124(sp)
    29fc:	3c3ff60e 	bge	r7,r16,29d8 <___vfprintf_internal_r+0x135c>
    2a00:	b809883a 	mov	r4,r23
    2a04:	b00b883a 	mov	r5,r22
    2a08:	d9801e04 	addi	r6,sp,120
    2a0c:	d9c03d15 	stw	r7,244(sp)
    2a10:	0008b4c0 	call	8b4c <__sprint_r>
    2a14:	d9c03d17 	ldw	r7,244(sp)
    2a18:	103c0d1e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2a1c:	d8c02017 	ldw	r3,128(sp)
    2a20:	dc001f17 	ldw	r16,124(sp)
    2a24:	dc400404 	addi	r17,sp,16
    2a28:	003fec06 	br	29dc <___vfprintf_internal_r+0x1360>
    2a2c:	10803fcc 	andi	r2,r2,255
    2a30:	1080201c 	xori	r2,r2,128
    2a34:	10bfe004 	addi	r2,r2,-128
    2a38:	01000c04 	movi	r4,48
    2a3c:	1101d726 	beq	r2,r4,319c <___vfprintf_internal_r+0x1b20>
    2a40:	d9403117 	ldw	r5,196(sp)
    2a44:	d8802817 	ldw	r2,160(sp)
    2a48:	193fffc5 	stb	r4,-1(r3)
    2a4c:	297fffc4 	addi	r5,r5,-1
    2a50:	d9403115 	stw	r5,196(sp)
    2a54:	1163c83a 	sub	r17,r2,r5
    2a58:	003c6006 	br	1bdc <___vfprintf_internal_r+0x560>
    2a5c:	b809883a 	mov	r4,r23
    2a60:	b00b883a 	mov	r5,r22
    2a64:	d9801e04 	addi	r6,sp,120
    2a68:	0008b4c0 	call	8b4c <__sprint_r>
    2a6c:	103bf81e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2a70:	d8c02017 	ldw	r3,128(sp)
    2a74:	da000404 	addi	r8,sp,16
    2a78:	d9403117 	ldw	r5,196(sp)
    2a7c:	d9003417 	ldw	r4,208(sp)
    2a80:	d8802617 	ldw	r2,152(sp)
    2a84:	2923883a 	add	r17,r5,r4
    2a88:	d9403317 	ldw	r5,204(sp)
    2a8c:	11400216 	blt	r2,r5,2a98 <___vfprintf_internal_r+0x141c>
    2a90:	e100004c 	andi	r4,fp,1
    2a94:	20000d26 	beq	r4,zero,2acc <___vfprintf_internal_r+0x1450>
    2a98:	d9003817 	ldw	r4,224(sp)
    2a9c:	d9403517 	ldw	r5,212(sp)
    2aa0:	1907883a 	add	r3,r3,r4
    2aa4:	d9001f17 	ldw	r4,124(sp)
    2aa8:	41400015 	stw	r5,0(r8)
    2aac:	d9403817 	ldw	r5,224(sp)
    2ab0:	21000044 	addi	r4,r4,1
    2ab4:	d8c02015 	stw	r3,128(sp)
    2ab8:	41400115 	stw	r5,4(r8)
    2abc:	d9001f15 	stw	r4,124(sp)
    2ac0:	014001c4 	movi	r5,7
    2ac4:	2901fd16 	blt	r5,r4,32bc <___vfprintf_internal_r+0x1c40>
    2ac8:	42000204 	addi	r8,r8,8
    2acc:	d9003317 	ldw	r4,204(sp)
    2ad0:	2085c83a 	sub	r2,r4,r2
    2ad4:	8449c83a 	sub	r4,r16,r17
    2ad8:	1021883a 	mov	r16,r2
    2adc:	2080010e 	bge	r4,r2,2ae4 <___vfprintf_internal_r+0x1468>
    2ae0:	2021883a 	mov	r16,r4
    2ae4:	04000a0e 	bge	zero,r16,2b10 <___vfprintf_internal_r+0x1494>
    2ae8:	d9001f17 	ldw	r4,124(sp)
    2aec:	1c07883a 	add	r3,r3,r16
    2af0:	44400015 	stw	r17,0(r8)
    2af4:	21000044 	addi	r4,r4,1
    2af8:	44000115 	stw	r16,4(r8)
    2afc:	d8c02015 	stw	r3,128(sp)
    2b00:	d9001f15 	stw	r4,124(sp)
    2b04:	014001c4 	movi	r5,7
    2b08:	29021816 	blt	r5,r4,336c <___vfprintf_internal_r+0x1cf0>
    2b0c:	42000204 	addi	r8,r8,8
    2b10:	80021016 	blt	r16,zero,3354 <___vfprintf_internal_r+0x1cd8>
    2b14:	1421c83a 	sub	r16,r2,r16
    2b18:	043cc80e 	bge	zero,r16,1e3c <___vfprintf_internal_r+0x7c0>
    2b1c:	04400404 	movi	r17,16
    2b20:	d8801f17 	ldw	r2,124(sp)
    2b24:	8c3f110e 	bge	r17,r16,276c <___vfprintf_internal_r+0x10f0>
    2b28:	01400074 	movhi	r5,1
    2b2c:	2948d784 	addi	r5,r5,9054
    2b30:	d9402c15 	stw	r5,176(sp)
    2b34:	04c001c4 	movi	r19,7
    2b38:	00000306 	br	2b48 <___vfprintf_internal_r+0x14cc>
    2b3c:	42000204 	addi	r8,r8,8
    2b40:	843ffc04 	addi	r16,r16,-16
    2b44:	8c3f0c0e 	bge	r17,r16,2778 <___vfprintf_internal_r+0x10fc>
    2b48:	18c00404 	addi	r3,r3,16
    2b4c:	10800044 	addi	r2,r2,1
    2b50:	45000015 	stw	r20,0(r8)
    2b54:	44400115 	stw	r17,4(r8)
    2b58:	d8c02015 	stw	r3,128(sp)
    2b5c:	d8801f15 	stw	r2,124(sp)
    2b60:	98bff60e 	bge	r19,r2,2b3c <___vfprintf_internal_r+0x14c0>
    2b64:	b809883a 	mov	r4,r23
    2b68:	b00b883a 	mov	r5,r22
    2b6c:	d9801e04 	addi	r6,sp,120
    2b70:	0008b4c0 	call	8b4c <__sprint_r>
    2b74:	103bb61e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2b78:	d8c02017 	ldw	r3,128(sp)
    2b7c:	d8801f17 	ldw	r2,124(sp)
    2b80:	da000404 	addi	r8,sp,16
    2b84:	003fee06 	br	2b40 <___vfprintf_internal_r+0x14c4>
    2b88:	e088703a 	and	r4,fp,r2
    2b8c:	203ec01e 	bne	r4,zero,2690 <___vfprintf_internal_r+0x1014>
    2b90:	dc001f17 	ldw	r16,124(sp)
    2b94:	d9003117 	ldw	r4,196(sp)
    2b98:	40800115 	stw	r2,4(r8)
    2b9c:	84000044 	addi	r16,r16,1
    2ba0:	41000015 	stw	r4,0(r8)
    2ba4:	d8c02015 	stw	r3,128(sp)
    2ba8:	dc001f15 	stw	r16,124(sp)
    2bac:	008001c4 	movi	r2,7
    2bb0:	14000e16 	blt	r2,r16,2bec <___vfprintf_internal_r+0x1570>
    2bb4:	44400204 	addi	r17,r8,8
    2bb8:	003ee006 	br	273c <___vfprintf_internal_r+0x10c0>
    2bbc:	01000074 	movhi	r4,1
    2bc0:	2108d784 	addi	r4,r4,9054
    2bc4:	d9002c15 	stw	r4,176(sp)
    2bc8:	d8802c17 	ldw	r2,176(sp)
    2bcc:	1cc7883a 	add	r3,r3,r19
    2bd0:	84000044 	addi	r16,r16,1
    2bd4:	88800015 	stw	r2,0(r17)
    2bd8:	8cc00115 	stw	r19,4(r17)
    2bdc:	d8c02015 	stw	r3,128(sp)
    2be0:	dc001f15 	stw	r16,124(sp)
    2be4:	008001c4 	movi	r2,7
    2be8:	143ed30e 	bge	r2,r16,2738 <___vfprintf_internal_r+0x10bc>
    2bec:	b809883a 	mov	r4,r23
    2bf0:	b00b883a 	mov	r5,r22
    2bf4:	d9801e04 	addi	r6,sp,120
    2bf8:	0008b4c0 	call	8b4c <__sprint_r>
    2bfc:	103b941e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2c00:	d8c02017 	ldw	r3,128(sp)
    2c04:	dc001f17 	ldw	r16,124(sp)
    2c08:	dc400404 	addi	r17,sp,16
    2c0c:	003ecb06 	br	273c <___vfprintf_internal_r+0x10c0>
    2c10:	b809883a 	mov	r4,r23
    2c14:	b00b883a 	mov	r5,r22
    2c18:	d9801e04 	addi	r6,sp,120
    2c1c:	0008b4c0 	call	8b4c <__sprint_r>
    2c20:	103b8b1e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2c24:	d8c02017 	ldw	r3,128(sp)
    2c28:	dc001f17 	ldw	r16,124(sp)
    2c2c:	da000404 	addi	r8,sp,16
    2c30:	003ea206 	br	26bc <___vfprintf_internal_r+0x1040>
    2c34:	b809883a 	mov	r4,r23
    2c38:	b00b883a 	mov	r5,r22
    2c3c:	d9801e04 	addi	r6,sp,120
    2c40:	0008b4c0 	call	8b4c <__sprint_r>
    2c44:	103b821e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2c48:	d8c02017 	ldw	r3,128(sp)
    2c4c:	dc001f17 	ldw	r16,124(sp)
    2c50:	dc400404 	addi	r17,sp,16
    2c54:	003ea406 	br	26e8 <___vfprintf_internal_r+0x106c>
    2c58:	b809883a 	mov	r4,r23
    2c5c:	b00b883a 	mov	r5,r22
    2c60:	d9801e04 	addi	r6,sp,120
    2c64:	0008b4c0 	call	8b4c <__sprint_r>
    2c68:	103b791e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2c6c:	d8c02017 	ldw	r3,128(sp)
    2c70:	da000404 	addi	r8,sp,16
    2c74:	003c3b06 	br	1d64 <___vfprintf_internal_r+0x6e8>
    2c78:	04a5c83a 	sub	r18,zero,r18
    2c7c:	9004c03a 	cmpne	r2,r18,zero
    2c80:	056bc83a 	sub	r21,zero,r21
    2c84:	a8abc83a 	sub	r21,r21,r2
    2c88:	04c00b44 	movi	r19,45
    2c8c:	dcc02785 	stb	r19,158(sp)
    2c90:	da403215 	stw	r9,200(sp)
    2c94:	00800044 	movi	r2,1
    2c98:	9546b03a 	or	r3,r18,r21
    2c9c:	003bb506 	br	1b74 <___vfprintf_internal_r+0x4f8>
    2ca0:	da003f15 	stw	r8,252(sp)
    2ca4:	da403e15 	stw	r9,248(sp)
    2ca8:	00087a80 	call	87a8 <__fpclassifyd>
    2cac:	da003f17 	ldw	r8,252(sp)
    2cb0:	da403e17 	ldw	r9,248(sp)
    2cb4:	1000e526 	beq	r2,zero,304c <___vfprintf_internal_r+0x19d0>
    2cb8:	04fff7c4 	movi	r19,-33
    2cbc:	00bfffc4 	movi	r2,-1
    2cc0:	84e6703a 	and	r19,r16,r19
    2cc4:	48822526 	beq	r9,r2,355c <___vfprintf_internal_r+0x1ee0>
    2cc8:	008011c4 	movi	r2,71
    2ccc:	98821626 	beq	r19,r2,3528 <___vfprintf_internal_r+0x1eac>
    2cd0:	d9003917 	ldw	r4,228(sp)
    2cd4:	e0c04014 	ori	r3,fp,256
    2cd8:	d8c02d15 	stw	r3,180(sp)
    2cdc:	20022116 	blt	r4,zero,3564 <___vfprintf_internal_r+0x1ee8>
    2ce0:	dc403917 	ldw	r17,228(sp)
    2ce4:	d8002b05 	stb	zero,172(sp)
    2ce8:	00801984 	movi	r2,102
    2cec:	80814d26 	beq	r16,r2,3224 <___vfprintf_internal_r+0x1ba8>
    2cf0:	00801184 	movi	r2,70
    2cf4:	80814b26 	beq	r16,r2,3224 <___vfprintf_internal_r+0x1ba8>
    2cf8:	00801144 	movi	r2,69
    2cfc:	98822626 	beq	r19,r2,3598 <___vfprintf_internal_r+0x1f1c>
    2d00:	482b883a 	mov	r21,r9
    2d04:	d8802604 	addi	r2,sp,152
    2d08:	d8800115 	stw	r2,4(sp)
    2d0c:	d9403717 	ldw	r5,220(sp)
    2d10:	d8802504 	addi	r2,sp,148
    2d14:	d8800215 	stw	r2,8(sp)
    2d18:	d8802104 	addi	r2,sp,132
    2d1c:	dd400015 	stw	r21,0(sp)
    2d20:	d8800315 	stw	r2,12(sp)
    2d24:	b809883a 	mov	r4,r23
    2d28:	880d883a 	mov	r6,r17
    2d2c:	01c00084 	movi	r7,2
    2d30:	da003f15 	stw	r8,252(sp)
    2d34:	da403e15 	stw	r9,248(sp)
    2d38:	0003b300 	call	3b30 <_dtoa_r>
    2d3c:	d8803115 	stw	r2,196(sp)
    2d40:	008019c4 	movi	r2,103
    2d44:	da003f17 	ldw	r8,252(sp)
    2d48:	da403e17 	ldw	r9,248(sp)
    2d4c:	80800226 	beq	r16,r2,2d58 <___vfprintf_internal_r+0x16dc>
    2d50:	008011c4 	movi	r2,71
    2d54:	8081451e 	bne	r16,r2,326c <___vfprintf_internal_r+0x1bf0>
    2d58:	e080004c 	andi	r2,fp,1
    2d5c:	10021e26 	beq	r2,zero,35d8 <___vfprintf_internal_r+0x1f5c>
    2d60:	d8c03117 	ldw	r3,196(sp)
    2d64:	1d55883a 	add	r10,r3,r21
    2d68:	d9003717 	ldw	r4,220(sp)
    2d6c:	880b883a 	mov	r5,r17
    2d70:	000d883a 	mov	r6,zero
    2d74:	000f883a 	mov	r7,zero
    2d78:	da003f15 	stw	r8,252(sp)
    2d7c:	da403e15 	stw	r9,248(sp)
    2d80:	da803d15 	stw	r10,244(sp)
    2d84:	000c7e40 	call	c7e4 <__eqdf2>
    2d88:	da003f17 	ldw	r8,252(sp)
    2d8c:	da403e17 	ldw	r9,248(sp)
    2d90:	da803d17 	ldw	r10,244(sp)
    2d94:	1001a126 	beq	r2,zero,341c <___vfprintf_internal_r+0x1da0>
    2d98:	d8802117 	ldw	r2,132(sp)
    2d9c:	1280062e 	bgeu	r2,r10,2db8 <___vfprintf_internal_r+0x173c>
    2da0:	01000c04 	movi	r4,48
    2da4:	10c00044 	addi	r3,r2,1
    2da8:	d8c02115 	stw	r3,132(sp)
    2dac:	11000005 	stb	r4,0(r2)
    2db0:	d8802117 	ldw	r2,132(sp)
    2db4:	12bffb36 	bltu	r2,r10,2da4 <___vfprintf_internal_r+0x1728>
    2db8:	d8c03117 	ldw	r3,196(sp)
    2dbc:	10c5c83a 	sub	r2,r2,r3
    2dc0:	d8803315 	stw	r2,204(sp)
    2dc4:	008011c4 	movi	r2,71
    2dc8:	98817f26 	beq	r19,r2,33c8 <___vfprintf_internal_r+0x1d4c>
    2dcc:	00801944 	movi	r2,101
    2dd0:	14023e0e 	bge	r2,r16,36cc <___vfprintf_internal_r+0x2050>
    2dd4:	d8c02617 	ldw	r3,152(sp)
    2dd8:	00801984 	movi	r2,102
    2ddc:	d8c03415 	stw	r3,208(sp)
    2de0:	8081f326 	beq	r16,r2,35b0 <___vfprintf_internal_r+0x1f34>
    2de4:	d8c03417 	ldw	r3,208(sp)
    2de8:	d9003317 	ldw	r4,204(sp)
    2dec:	1901e116 	blt	r3,r4,3574 <___vfprintf_internal_r+0x1ef8>
    2df0:	e080004c 	andi	r2,fp,1
    2df4:	1001ea26 	beq	r2,zero,35a0 <___vfprintf_internal_r+0x1f24>
    2df8:	d8c03417 	ldw	r3,208(sp)
    2dfc:	1c400044 	addi	r17,r3,1
    2e00:	8839883a 	mov	fp,r17
    2e04:	8801e216 	blt	r17,zero,3590 <___vfprintf_internal_r+0x1f14>
    2e08:	dd402b07 	ldb	r21,172(sp)
    2e0c:	a801661e 	bne	r21,zero,33a8 <___vfprintf_internal_r+0x1d2c>
    2e10:	df002b15 	stw	fp,172(sp)
    2e14:	dcc02783 	ldbu	r19,158(sp)
    2e18:	df002d17 	ldw	fp,180(sp)
    2e1c:	d8003215 	stw	zero,200(sp)
    2e20:	dc802d15 	stw	r18,180(sp)
    2e24:	003b7206 	br	1bf0 <___vfprintf_internal_r+0x574>
    2e28:	e4000007 	ldb	r16,0(fp)
    2e2c:	e005883a 	mov	r2,fp
    2e30:	003a7806 	br	1814 <___vfprintf_internal_r+0x198>
    2e34:	e0c0100c 	andi	r3,fp,64
    2e38:	1800b326 	beq	r3,zero,3108 <___vfprintf_internal_r+0x1a8c>
    2e3c:	d9002d17 	ldw	r4,180(sp)
    2e40:	1480000b 	ldhu	r18,0(r2)
    2e44:	002b883a 	mov	r21,zero
    2e48:	21000104 	addi	r4,r4,4
    2e4c:	d9002d15 	stw	r4,180(sp)
    2e50:	003cd506 	br	21a8 <___vfprintf_internal_r+0xb2c>
    2e54:	e080100c 	andi	r2,fp,64
    2e58:	1000a326 	beq	r2,zero,30e8 <___vfprintf_internal_r+0x1a6c>
    2e5c:	d8802d17 	ldw	r2,180(sp)
    2e60:	002b883a 	mov	r21,zero
    2e64:	1480000b 	ldhu	r18,0(r2)
    2e68:	10800104 	addi	r2,r2,4
    2e6c:	d8802d15 	stw	r2,180(sp)
    2e70:	9007883a 	mov	r3,r18
    2e74:	00800044 	movi	r2,1
    2e78:	003c6c06 	br	202c <___vfprintf_internal_r+0x9b0>
    2e7c:	e080100c 	andi	r2,fp,64
    2e80:	10009226 	beq	r2,zero,30cc <___vfprintf_internal_r+0x1a50>
    2e84:	1c80000f 	ldh	r18,0(r3)
    2e88:	d8802d17 	ldw	r2,180(sp)
    2e8c:	902bd7fa 	srai	r21,r18,31
    2e90:	10800104 	addi	r2,r2,4
    2e94:	d8802d15 	stw	r2,180(sp)
    2e98:	a805883a 	mov	r2,r21
    2e9c:	003b3006 	br	1b60 <___vfprintf_internal_r+0x4e4>
    2ea0:	e080100c 	andi	r2,fp,64
    2ea4:	10008126 	beq	r2,zero,30ac <___vfprintf_internal_r+0x1a30>
    2ea8:	d8c02d17 	ldw	r3,180(sp)
    2eac:	002b883a 	mov	r21,zero
    2eb0:	0005883a 	mov	r2,zero
    2eb4:	1c80000b 	ldhu	r18,0(r3)
    2eb8:	18c00104 	addi	r3,r3,4
    2ebc:	d8c02d15 	stw	r3,180(sp)
    2ec0:	9007883a 	mov	r3,r18
    2ec4:	003c5906 	br	202c <___vfprintf_internal_r+0x9b0>
    2ec8:	e080040c 	andi	r2,fp,16
    2ecc:	1000701e 	bne	r2,zero,3090 <___vfprintf_internal_r+0x1a14>
    2ed0:	e080100c 	andi	r2,fp,64
    2ed4:	10014626 	beq	r2,zero,33f0 <___vfprintf_internal_r+0x1d74>
    2ed8:	d9002d17 	ldw	r4,180(sp)
    2edc:	d9402f17 	ldw	r5,188(sp)
    2ee0:	20800017 	ldw	r2,0(r4)
    2ee4:	21000104 	addi	r4,r4,4
    2ee8:	d9002d15 	stw	r4,180(sp)
    2eec:	1140000d 	sth	r5,0(r2)
    2ef0:	003a1d06 	br	1768 <___vfprintf_internal_r+0xec>
    2ef4:	00800084 	movi	r2,2
    2ef8:	003c4c06 	br	202c <___vfprintf_internal_r+0x9b0>
    2efc:	01000074 	movhi	r4,1
    2f00:	2108d784 	addi	r4,r4,9054
    2f04:	d9002c15 	stw	r4,176(sp)
    2f08:	d9002c17 	ldw	r4,176(sp)
    2f0c:	1c47883a 	add	r3,r3,r17
    2f10:	10800044 	addi	r2,r2,1
    2f14:	41000015 	stw	r4,0(r8)
    2f18:	44400115 	stw	r17,4(r8)
    2f1c:	d8c02015 	stw	r3,128(sp)
    2f20:	d8801f15 	stw	r2,124(sp)
    2f24:	010001c4 	movi	r4,7
    2f28:	20becc16 	blt	r4,r2,2a5c <___vfprintf_internal_r+0x13e0>
    2f2c:	42000204 	addi	r8,r8,8
    2f30:	003ed106 	br	2a78 <___vfprintf_internal_r+0x13fc>
    2f34:	01000074 	movhi	r4,1
    2f38:	2108d784 	addi	r4,r4,9054
    2f3c:	d9002c15 	stw	r4,176(sp)
    2f40:	003ba706 	br	1de0 <___vfprintf_internal_r+0x764>
    2f44:	b809883a 	mov	r4,r23
    2f48:	b00b883a 	mov	r5,r22
    2f4c:	d9801e04 	addi	r6,sp,120
    2f50:	0008b4c0 	call	8b4c <__sprint_r>
    2f54:	103abe1e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    2f58:	d8c02017 	ldw	r3,128(sp)
    2f5c:	da000404 	addi	r8,sp,16
    2f60:	003d6c06 	br	2514 <___vfprintf_internal_r+0xe98>
    2f64:	d8801f17 	ldw	r2,124(sp)
    2f68:	01400074 	movhi	r5,1
    2f6c:	01000044 	movi	r4,1
    2f70:	18c00044 	addi	r3,r3,1
    2f74:	10800044 	addi	r2,r2,1
    2f78:	2948d704 	addi	r5,r5,9052
    2f7c:	41000115 	stw	r4,4(r8)
    2f80:	41400015 	stw	r5,0(r8)
    2f84:	d8c02015 	stw	r3,128(sp)
    2f88:	d8801f15 	stw	r2,124(sp)
    2f8c:	010001c4 	movi	r4,7
    2f90:	20806716 	blt	r4,r2,3130 <___vfprintf_internal_r+0x1ab4>
    2f94:	42000204 	addi	r8,r8,8
    2f98:	8000041e 	bne	r16,zero,2fac <___vfprintf_internal_r+0x1930>
    2f9c:	d8803317 	ldw	r2,204(sp)
    2fa0:	1000021e 	bne	r2,zero,2fac <___vfprintf_internal_r+0x1930>
    2fa4:	e080004c 	andi	r2,fp,1
    2fa8:	103ba426 	beq	r2,zero,1e3c <___vfprintf_internal_r+0x7c0>
    2fac:	d9003817 	ldw	r4,224(sp)
    2fb0:	d8801f17 	ldw	r2,124(sp)
    2fb4:	d9403517 	ldw	r5,212(sp)
    2fb8:	1907883a 	add	r3,r3,r4
    2fbc:	10800044 	addi	r2,r2,1
    2fc0:	41000115 	stw	r4,4(r8)
    2fc4:	41400015 	stw	r5,0(r8)
    2fc8:	d8c02015 	stw	r3,128(sp)
    2fcc:	d8801f15 	stw	r2,124(sp)
    2fd0:	010001c4 	movi	r4,7
    2fd4:	20815716 	blt	r4,r2,3534 <___vfprintf_internal_r+0x1eb8>
    2fd8:	42000204 	addi	r8,r8,8
    2fdc:	0421c83a 	sub	r16,zero,r16
    2fe0:	0400810e 	bge	zero,r16,31e8 <___vfprintf_internal_r+0x1b6c>
    2fe4:	04400404 	movi	r17,16
    2fe8:	8c00bd0e 	bge	r17,r16,32e0 <___vfprintf_internal_r+0x1c64>
    2fec:	01400074 	movhi	r5,1
    2ff0:	2948d784 	addi	r5,r5,9054
    2ff4:	d9402c15 	stw	r5,176(sp)
    2ff8:	04c001c4 	movi	r19,7
    2ffc:	00000306 	br	300c <___vfprintf_internal_r+0x1990>
    3000:	42000204 	addi	r8,r8,8
    3004:	843ffc04 	addi	r16,r16,-16
    3008:	8c00b80e 	bge	r17,r16,32ec <___vfprintf_internal_r+0x1c70>
    300c:	18c00404 	addi	r3,r3,16
    3010:	10800044 	addi	r2,r2,1
    3014:	45000015 	stw	r20,0(r8)
    3018:	44400115 	stw	r17,4(r8)
    301c:	d8c02015 	stw	r3,128(sp)
    3020:	d8801f15 	stw	r2,124(sp)
    3024:	98bff60e 	bge	r19,r2,3000 <___vfprintf_internal_r+0x1984>
    3028:	b809883a 	mov	r4,r23
    302c:	b00b883a 	mov	r5,r22
    3030:	d9801e04 	addi	r6,sp,120
    3034:	0008b4c0 	call	8b4c <__sprint_r>
    3038:	103a851e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    303c:	d8c02017 	ldw	r3,128(sp)
    3040:	d8801f17 	ldw	r2,124(sp)
    3044:	da000404 	addi	r8,sp,16
    3048:	003fee06 	br	3004 <___vfprintf_internal_r+0x1988>
    304c:	008011c4 	movi	r2,71
    3050:	1400d116 	blt	r2,r16,3398 <___vfprintf_internal_r+0x1d1c>
    3054:	01000074 	movhi	r4,1
    3058:	2108c904 	addi	r4,r4,8996
    305c:	d9003115 	stw	r4,196(sp)
    3060:	00c000c4 	movi	r3,3
    3064:	00bfdfc4 	movi	r2,-129
    3068:	d8c02b15 	stw	r3,172(sp)
    306c:	e0b8703a 	and	fp,fp,r2
    3070:	dcc02783 	ldbu	r19,158(sp)
    3074:	dc802d15 	stw	r18,180(sp)
    3078:	1823883a 	mov	r17,r3
    307c:	d8003215 	stw	zero,200(sp)
    3080:	d8003415 	stw	zero,208(sp)
    3084:	003ada06 	br	1bf0 <___vfprintf_internal_r+0x574>
    3088:	4823883a 	mov	r17,r9
    308c:	003c9406 	br	22e0 <___vfprintf_internal_r+0xc64>
    3090:	d9402d17 	ldw	r5,180(sp)
    3094:	d8c02f17 	ldw	r3,188(sp)
    3098:	28800017 	ldw	r2,0(r5)
    309c:	29400104 	addi	r5,r5,4
    30a0:	d9402d15 	stw	r5,180(sp)
    30a4:	10c00015 	stw	r3,0(r2)
    30a8:	0039af06 	br	1768 <___vfprintf_internal_r+0xec>
    30ac:	d9002d17 	ldw	r4,180(sp)
    30b0:	002b883a 	mov	r21,zero
    30b4:	0005883a 	mov	r2,zero
    30b8:	24800017 	ldw	r18,0(r4)
    30bc:	21000104 	addi	r4,r4,4
    30c0:	d9002d15 	stw	r4,180(sp)
    30c4:	9007883a 	mov	r3,r18
    30c8:	003bd806 	br	202c <___vfprintf_internal_r+0x9b0>
    30cc:	1c800017 	ldw	r18,0(r3)
    30d0:	d8c02d17 	ldw	r3,180(sp)
    30d4:	902bd7fa 	srai	r21,r18,31
    30d8:	18c00104 	addi	r3,r3,4
    30dc:	d8c02d15 	stw	r3,180(sp)
    30e0:	a805883a 	mov	r2,r21
    30e4:	003a9e06 	br	1b60 <___vfprintf_internal_r+0x4e4>
    30e8:	d8c02d17 	ldw	r3,180(sp)
    30ec:	002b883a 	mov	r21,zero
    30f0:	00800044 	movi	r2,1
    30f4:	1c800017 	ldw	r18,0(r3)
    30f8:	18c00104 	addi	r3,r3,4
    30fc:	d8c02d15 	stw	r3,180(sp)
    3100:	9007883a 	mov	r3,r18
    3104:	003bc906 	br	202c <___vfprintf_internal_r+0x9b0>
    3108:	d9402d17 	ldw	r5,180(sp)
    310c:	14800017 	ldw	r18,0(r2)
    3110:	002b883a 	mov	r21,zero
    3114:	29400104 	addi	r5,r5,4
    3118:	d9402d15 	stw	r5,180(sp)
    311c:	003c2206 	br	21a8 <___vfprintf_internal_r+0xb2c>
    3120:	01000074 	movhi	r4,1
    3124:	2108c704 	addi	r4,r4,8988
    3128:	d9003115 	stw	r4,196(sp)
    312c:	003ba606 	br	1fc8 <___vfprintf_internal_r+0x94c>
    3130:	b809883a 	mov	r4,r23
    3134:	b00b883a 	mov	r5,r22
    3138:	d9801e04 	addi	r6,sp,120
    313c:	0008b4c0 	call	8b4c <__sprint_r>
    3140:	103a431e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    3144:	dc002617 	ldw	r16,152(sp)
    3148:	d8c02017 	ldw	r3,128(sp)
    314c:	da000404 	addi	r8,sp,16
    3150:	003f9106 	br	2f98 <___vfprintf_internal_r+0x191c>
    3154:	d8802e17 	ldw	r2,184(sp)
    3158:	d8c02d15 	stw	r3,180(sp)
    315c:	0085c83a 	sub	r2,zero,r2
    3160:	d8802e15 	stw	r2,184(sp)
    3164:	e005883a 	mov	r2,fp
    3168:	003a4206 	br	1a74 <___vfprintf_internal_r+0x3f8>
    316c:	e0800044 	addi	r2,fp,1
    3170:	9cc00814 	ori	r19,r19,32
    3174:	e4000047 	ldb	r16,1(fp)
    3178:	0039a606 	br	1814 <___vfprintf_internal_r+0x198>
    317c:	b809883a 	mov	r4,r23
    3180:	b00b883a 	mov	r5,r22
    3184:	d9801e04 	addi	r6,sp,120
    3188:	0008b4c0 	call	8b4c <__sprint_r>
    318c:	103a301e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    3190:	d8c02017 	ldw	r3,128(sp)
    3194:	da000404 	addi	r8,sp,16
    3198:	003cf006 	br	255c <___vfprintf_internal_r+0xee0>
    319c:	d8c02817 	ldw	r3,160(sp)
    31a0:	d9003117 	ldw	r4,196(sp)
    31a4:	1923c83a 	sub	r17,r3,r4
    31a8:	003a8c06 	br	1bdc <___vfprintf_internal_r+0x560>
    31ac:	da003f15 	stw	r8,252(sp)
    31b0:	00015e40 	call	15e4 <strlen>
    31b4:	1023883a 	mov	r17,r2
    31b8:	da003f17 	ldw	r8,252(sp)
    31bc:	883c4a0e 	bge	r17,zero,22e8 <___vfprintf_internal_r+0xc6c>
    31c0:	0005883a 	mov	r2,zero
    31c4:	003c4806 	br	22e8 <___vfprintf_internal_r+0xc6c>
    31c8:	b809883a 	mov	r4,r23
    31cc:	b00b883a 	mov	r5,r22
    31d0:	d9801e04 	addi	r6,sp,120
    31d4:	0008b4c0 	call	8b4c <__sprint_r>
    31d8:	103a1d1e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    31dc:	d8c02017 	ldw	r3,128(sp)
    31e0:	d8801f17 	ldw	r2,124(sp)
    31e4:	da000404 	addi	r8,sp,16
    31e8:	d9403317 	ldw	r5,204(sp)
    31ec:	d9003117 	ldw	r4,196(sp)
    31f0:	10800044 	addi	r2,r2,1
    31f4:	1947883a 	add	r3,r3,r5
    31f8:	41000015 	stw	r4,0(r8)
    31fc:	41400115 	stw	r5,4(r8)
    3200:	d8c02015 	stw	r3,128(sp)
    3204:	d8801f15 	stw	r2,124(sp)
    3208:	010001c4 	movi	r4,7
    320c:	20bb0a0e 	bge	r4,r2,1e38 <___vfprintf_internal_r+0x7bc>
    3210:	003d6206 	br	279c <___vfprintf_internal_r+0x1120>
    3214:	01000074 	movhi	r4,1
    3218:	2108db84 	addi	r4,r4,9070
    321c:	d9003615 	stw	r4,216(sp)
    3220:	003aa706 	br	1cc0 <___vfprintf_internal_r+0x644>
    3224:	d8802604 	addi	r2,sp,152
    3228:	d8800115 	stw	r2,4(sp)
    322c:	d9403717 	ldw	r5,220(sp)
    3230:	d8802504 	addi	r2,sp,148
    3234:	d8800215 	stw	r2,8(sp)
    3238:	d8802104 	addi	r2,sp,132
    323c:	da400015 	stw	r9,0(sp)
    3240:	d8800315 	stw	r2,12(sp)
    3244:	b809883a 	mov	r4,r23
    3248:	880d883a 	mov	r6,r17
    324c:	01c000c4 	movi	r7,3
    3250:	da003f15 	stw	r8,252(sp)
    3254:	da403e15 	stw	r9,248(sp)
    3258:	0003b300 	call	3b30 <_dtoa_r>
    325c:	da403e17 	ldw	r9,248(sp)
    3260:	da003f17 	ldw	r8,252(sp)
    3264:	d8803115 	stw	r2,196(sp)
    3268:	482b883a 	mov	r21,r9
    326c:	d8c03117 	ldw	r3,196(sp)
    3270:	00801184 	movi	r2,70
    3274:	1d55883a 	add	r10,r3,r21
    3278:	98bebb1e 	bne	r19,r2,2d68 <___vfprintf_internal_r+0x16ec>
    327c:	19000007 	ldb	r4,0(r3)
    3280:	00800c04 	movi	r2,48
    3284:	2080df26 	beq	r4,r2,3604 <___vfprintf_internal_r+0x1f88>
    3288:	d8c02617 	ldw	r3,152(sp)
    328c:	50d5883a 	add	r10,r10,r3
    3290:	003eb506 	br	2d68 <___vfprintf_internal_r+0x16ec>
    3294:	0023883a 	mov	r17,zero
    3298:	003d9b06 	br	2908 <___vfprintf_internal_r+0x128c>
    329c:	b809883a 	mov	r4,r23
    32a0:	b00b883a 	mov	r5,r22
    32a4:	d9801e04 	addi	r6,sp,120
    32a8:	0008b4c0 	call	8b4c <__sprint_r>
    32ac:	1039e81e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    32b0:	d8c02017 	ldw	r3,128(sp)
    32b4:	da000404 	addi	r8,sp,16
    32b8:	003d9206 	br	2904 <___vfprintf_internal_r+0x1288>
    32bc:	b809883a 	mov	r4,r23
    32c0:	b00b883a 	mov	r5,r22
    32c4:	d9801e04 	addi	r6,sp,120
    32c8:	0008b4c0 	call	8b4c <__sprint_r>
    32cc:	1039e01e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    32d0:	d8802617 	ldw	r2,152(sp)
    32d4:	d8c02017 	ldw	r3,128(sp)
    32d8:	da000404 	addi	r8,sp,16
    32dc:	003dfb06 	br	2acc <___vfprintf_internal_r+0x1450>
    32e0:	01000074 	movhi	r4,1
    32e4:	2108d784 	addi	r4,r4,9054
    32e8:	d9002c15 	stw	r4,176(sp)
    32ec:	d9002c17 	ldw	r4,176(sp)
    32f0:	1c07883a 	add	r3,r3,r16
    32f4:	10800044 	addi	r2,r2,1
    32f8:	41000015 	stw	r4,0(r8)
    32fc:	44000115 	stw	r16,4(r8)
    3300:	d8c02015 	stw	r3,128(sp)
    3304:	d8801f15 	stw	r2,124(sp)
    3308:	010001c4 	movi	r4,7
    330c:	20bfae16 	blt	r4,r2,31c8 <___vfprintf_internal_r+0x1b4c>
    3310:	42000204 	addi	r8,r8,8
    3314:	003fb406 	br	31e8 <___vfprintf_internal_r+0x1b6c>
    3318:	00800184 	movi	r2,6
    331c:	1240012e 	bgeu	r2,r9,3324 <___vfprintf_internal_r+0x1ca8>
    3320:	1013883a 	mov	r9,r2
    3324:	4823883a 	mov	r17,r9
    3328:	4805883a 	mov	r2,r9
    332c:	4800ac16 	blt	r9,zero,35e0 <___vfprintf_internal_r+0x1f64>
    3330:	01400074 	movhi	r5,1
    3334:	2948d504 	addi	r5,r5,9044
    3338:	d8802b15 	stw	r2,172(sp)
    333c:	dc802d15 	stw	r18,180(sp)
    3340:	d8003215 	stw	zero,200(sp)
    3344:	d8003415 	stw	zero,208(sp)
    3348:	d9403115 	stw	r5,196(sp)
    334c:	0005883a 	mov	r2,zero
    3350:	003a2e06 	br	1c0c <___vfprintf_internal_r+0x590>
    3354:	0021883a 	mov	r16,zero
    3358:	003dee06 	br	2b14 <___vfprintf_internal_r+0x1498>
    335c:	01400074 	movhi	r5,1
    3360:	2948db84 	addi	r5,r5,9070
    3364:	d9403615 	stw	r5,216(sp)
    3368:	003ad806 	br	1ecc <___vfprintf_internal_r+0x850>
    336c:	b809883a 	mov	r4,r23
    3370:	b00b883a 	mov	r5,r22
    3374:	d9801e04 	addi	r6,sp,120
    3378:	0008b4c0 	call	8b4c <__sprint_r>
    337c:	1039b41e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    3380:	d8802617 	ldw	r2,152(sp)
    3384:	d9403317 	ldw	r5,204(sp)
    3388:	d8c02017 	ldw	r3,128(sp)
    338c:	da000404 	addi	r8,sp,16
    3390:	2885c83a 	sub	r2,r5,r2
    3394:	003dde06 	br	2b10 <___vfprintf_internal_r+0x1494>
    3398:	01400074 	movhi	r5,1
    339c:	2948ca04 	addi	r5,r5,9000
    33a0:	d9403115 	stw	r5,196(sp)
    33a4:	003f2e06 	br	3060 <___vfprintf_internal_r+0x19e4>
    33a8:	00800b44 	movi	r2,45
    33ac:	d8802785 	stb	r2,158(sp)
    33b0:	df002b15 	stw	fp,172(sp)
    33b4:	d8003215 	stw	zero,200(sp)
    33b8:	df002d17 	ldw	fp,180(sp)
    33bc:	00800b44 	movi	r2,45
    33c0:	dc802d15 	stw	r18,180(sp)
    33c4:	003a0e06 	br	1c00 <___vfprintf_internal_r+0x584>
    33c8:	d8c02617 	ldw	r3,152(sp)
    33cc:	00bfff44 	movi	r2,-3
    33d0:	18801b16 	blt	r3,r2,3440 <___vfprintf_internal_r+0x1dc4>
    33d4:	48c01a16 	blt	r9,r3,3440 <___vfprintf_internal_r+0x1dc4>
    33d8:	d8c03415 	stw	r3,208(sp)
    33dc:	040019c4 	movi	r16,103
    33e0:	003e8006 	br	2de4 <___vfprintf_internal_r+0x1768>
    33e4:	04c00b44 	movi	r19,45
    33e8:	dcc02785 	stb	r19,158(sp)
    33ec:	003af106 	br	1fb4 <___vfprintf_internal_r+0x938>
    33f0:	d8c02d17 	ldw	r3,180(sp)
    33f4:	d9002f17 	ldw	r4,188(sp)
    33f8:	18800017 	ldw	r2,0(r3)
    33fc:	18c00104 	addi	r3,r3,4
    3400:	d8c02d15 	stw	r3,180(sp)
    3404:	11000015 	stw	r4,0(r2)
    3408:	0038d706 	br	1768 <___vfprintf_internal_r+0xec>
    340c:	01000074 	movhi	r4,1
    3410:	2108d784 	addi	r4,r4,9054
    3414:	d9002c15 	stw	r4,176(sp)
    3418:	003c8e06 	br	2654 <___vfprintf_internal_r+0xfd8>
    341c:	5005883a 	mov	r2,r10
    3420:	003e6506 	br	2db8 <___vfprintf_internal_r+0x173c>
    3424:	da402b15 	stw	r9,172(sp)
    3428:	dcc02783 	ldbu	r19,158(sp)
    342c:	4823883a 	mov	r17,r9
    3430:	dc802d15 	stw	r18,180(sp)
    3434:	d8003215 	stw	zero,200(sp)
    3438:	d8003415 	stw	zero,208(sp)
    343c:	0039ec06 	br	1bf0 <___vfprintf_internal_r+0x574>
    3440:	843fff84 	addi	r16,r16,-2
    3444:	1d7fffc4 	addi	r21,r3,-1
    3448:	dd402615 	stw	r21,152(sp)
    344c:	dc0022c5 	stb	r16,139(sp)
    3450:	a8009616 	blt	r21,zero,36ac <___vfprintf_internal_r+0x2030>
    3454:	00800ac4 	movi	r2,43
    3458:	d8802305 	stb	r2,140(sp)
    345c:	00800244 	movi	r2,9
    3460:	1540610e 	bge	r2,r21,35e8 <___vfprintf_internal_r+0x1f6c>
    3464:	dcc022c4 	addi	r19,sp,139
    3468:	dc002c15 	stw	r16,176(sp)
    346c:	4023883a 	mov	r17,r8
    3470:	9821883a 	mov	r16,r19
    3474:	a809883a 	mov	r4,r21
    3478:	01400284 	movi	r5,10
    347c:	000b55c0 	call	b55c <__modsi3>
    3480:	10800c04 	addi	r2,r2,48
    3484:	843fffc4 	addi	r16,r16,-1
    3488:	a809883a 	mov	r4,r21
    348c:	01400284 	movi	r5,10
    3490:	80800005 	stb	r2,0(r16)
    3494:	000b5080 	call	b508 <__divsi3>
    3498:	01000244 	movi	r4,9
    349c:	102b883a 	mov	r21,r2
    34a0:	20bff416 	blt	r4,r2,3474 <___vfprintf_internal_r+0x1df8>
    34a4:	8811883a 	mov	r8,r17
    34a8:	10800c04 	addi	r2,r2,48
    34ac:	8023883a 	mov	r17,r16
    34b0:	897fffc4 	addi	r5,r17,-1
    34b4:	88bfffc5 	stb	r2,-1(r17)
    34b8:	dc002c17 	ldw	r16,176(sp)
    34bc:	2cc07f2e 	bgeu	r5,r19,36bc <___vfprintf_internal_r+0x2040>
    34c0:	d9802384 	addi	r6,sp,142
    34c4:	344dc83a 	sub	r6,r6,r17
    34c8:	d9002344 	addi	r4,sp,141
    34cc:	998d883a 	add	r6,r19,r6
    34d0:	00000106 	br	34d8 <___vfprintf_internal_r+0x1e5c>
    34d4:	28800003 	ldbu	r2,0(r5)
    34d8:	20800005 	stb	r2,0(r4)
    34dc:	21000044 	addi	r4,r4,1
    34e0:	29400044 	addi	r5,r5,1
    34e4:	21bffb1e 	bne	r4,r6,34d4 <___vfprintf_internal_r+0x1e58>
    34e8:	d8802304 	addi	r2,sp,140
    34ec:	1445c83a 	sub	r2,r2,r17
    34f0:	d9402344 	addi	r5,sp,141
    34f4:	2885883a 	add	r2,r5,r2
    34f8:	14e7c83a 	sub	r19,r2,r19
    34fc:	d8803317 	ldw	r2,204(sp)
    3500:	d8c03317 	ldw	r3,204(sp)
    3504:	dcc03a15 	stw	r19,232(sp)
    3508:	14e3883a 	add	r17,r2,r19
    350c:	00800044 	movi	r2,1
    3510:	10c04e0e 	bge	r2,r3,364c <___vfprintf_internal_r+0x1fd0>
    3514:	8c400044 	addi	r17,r17,1
    3518:	8839883a 	mov	fp,r17
    351c:	88004916 	blt	r17,zero,3644 <___vfprintf_internal_r+0x1fc8>
    3520:	d8003415 	stw	zero,208(sp)
    3524:	003e3806 	br	2e08 <___vfprintf_internal_r+0x178c>
    3528:	483de91e 	bne	r9,zero,2cd0 <___vfprintf_internal_r+0x1654>
    352c:	8813883a 	mov	r9,r17
    3530:	003de706 	br	2cd0 <___vfprintf_internal_r+0x1654>
    3534:	b809883a 	mov	r4,r23
    3538:	b00b883a 	mov	r5,r22
    353c:	d9801e04 	addi	r6,sp,120
    3540:	0008b4c0 	call	8b4c <__sprint_r>
    3544:	1039421e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0x3d4>
    3548:	dc002617 	ldw	r16,152(sp)
    354c:	d8c02017 	ldw	r3,128(sp)
    3550:	d8801f17 	ldw	r2,124(sp)
    3554:	da000404 	addi	r8,sp,16
    3558:	003ea006 	br	2fdc <___vfprintf_internal_r+0x1960>
    355c:	02400184 	movi	r9,6
    3560:	003ddb06 	br	2cd0 <___vfprintf_internal_r+0x1654>
    3564:	00c00b44 	movi	r3,45
    3568:	2460003c 	xorhi	r17,r4,32768
    356c:	d8c02b05 	stb	r3,172(sp)
    3570:	003ddd06 	br	2ce8 <___vfprintf_internal_r+0x166c>
    3574:	d8c03417 	ldw	r3,208(sp)
    3578:	00c03d0e 	bge	zero,r3,3670 <___vfprintf_internal_r+0x1ff4>
    357c:	04400044 	movi	r17,1
    3580:	d9003317 	ldw	r4,204(sp)
    3584:	8923883a 	add	r17,r17,r4
    3588:	8839883a 	mov	fp,r17
    358c:	883e1e0e 	bge	r17,zero,2e08 <___vfprintf_internal_r+0x178c>
    3590:	0039883a 	mov	fp,zero
    3594:	003e1c06 	br	2e08 <___vfprintf_internal_r+0x178c>
    3598:	4d400044 	addi	r21,r9,1
    359c:	003dd906 	br	2d04 <___vfprintf_internal_r+0x1688>
    35a0:	1839883a 	mov	fp,r3
    35a4:	18004716 	blt	r3,zero,36c4 <___vfprintf_internal_r+0x2048>
    35a8:	dc403417 	ldw	r17,208(sp)
    35ac:	003e1606 	br	2e08 <___vfprintf_internal_r+0x178c>
    35b0:	00c0290e 	bge	zero,r3,3658 <___vfprintf_internal_r+0x1fdc>
    35b4:	4800021e 	bne	r9,zero,35c0 <___vfprintf_internal_r+0x1f44>
    35b8:	e080004c 	andi	r2,fp,1
    35bc:	103ff826 	beq	r2,zero,35a0 <___vfprintf_internal_r+0x1f24>
    35c0:	d8c03417 	ldw	r3,208(sp)
    35c4:	4a400044 	addi	r9,r9,1
    35c8:	1a63883a 	add	r17,r3,r9
    35cc:	8839883a 	mov	fp,r17
    35d0:	883e0d0e 	bge	r17,zero,2e08 <___vfprintf_internal_r+0x178c>
    35d4:	003fee06 	br	3590 <___vfprintf_internal_r+0x1f14>
    35d8:	d8802117 	ldw	r2,132(sp)
    35dc:	003df606 	br	2db8 <___vfprintf_internal_r+0x173c>
    35e0:	0005883a 	mov	r2,zero
    35e4:	003f5206 	br	3330 <___vfprintf_internal_r+0x1cb4>
    35e8:	00800c04 	movi	r2,48
    35ec:	a8c00c04 	addi	r3,r21,48
    35f0:	d8802345 	stb	r2,141(sp)
    35f4:	d8c02385 	stb	r3,142(sp)
    35f8:	d88023c4 	addi	r2,sp,143
    35fc:	dcc022c4 	addi	r19,sp,139
    3600:	003fbd06 	br	34f8 <___vfprintf_internal_r+0x1e7c>
    3604:	d9003717 	ldw	r4,220(sp)
    3608:	880b883a 	mov	r5,r17
    360c:	000d883a 	mov	r6,zero
    3610:	000f883a 	mov	r7,zero
    3614:	da003f15 	stw	r8,252(sp)
    3618:	da403e15 	stw	r9,248(sp)
    361c:	da803d15 	stw	r10,244(sp)
    3620:	000c7e40 	call	c7e4 <__eqdf2>
    3624:	da003f17 	ldw	r8,252(sp)
    3628:	da403e17 	ldw	r9,248(sp)
    362c:	da803d17 	ldw	r10,244(sp)
    3630:	103f1526 	beq	r2,zero,3288 <___vfprintf_internal_r+0x1c0c>
    3634:	00800044 	movi	r2,1
    3638:	1547c83a 	sub	r3,r2,r21
    363c:	d8c02615 	stw	r3,152(sp)
    3640:	003f1206 	br	328c <___vfprintf_internal_r+0x1c10>
    3644:	0039883a 	mov	fp,zero
    3648:	003fb506 	br	3520 <___vfprintf_internal_r+0x1ea4>
    364c:	e084703a 	and	r2,fp,r2
    3650:	103fb126 	beq	r2,zero,3518 <___vfprintf_internal_r+0x1e9c>
    3654:	003faf06 	br	3514 <___vfprintf_internal_r+0x1e98>
    3658:	4800081e 	bne	r9,zero,367c <___vfprintf_internal_r+0x2000>
    365c:	e080004c 	andi	r2,fp,1
    3660:	1000061e 	bne	r2,zero,367c <___vfprintf_internal_r+0x2000>
    3664:	07000044 	movi	fp,1
    3668:	e023883a 	mov	r17,fp
    366c:	003de606 	br	2e08 <___vfprintf_internal_r+0x178c>
    3670:	04400084 	movi	r17,2
    3674:	88e3c83a 	sub	r17,r17,r3
    3678:	003fc106 	br	3580 <___vfprintf_internal_r+0x1f04>
    367c:	4c400084 	addi	r17,r9,2
    3680:	8839883a 	mov	fp,r17
    3684:	883de00e 	bge	r17,zero,2e08 <___vfprintf_internal_r+0x178c>
    3688:	003fc106 	br	3590 <___vfprintf_internal_r+0x1f14>
    368c:	d9402d17 	ldw	r5,180(sp)
    3690:	2a400017 	ldw	r9,0(r5)
    3694:	28c00104 	addi	r3,r5,4
    3698:	d8c02d15 	stw	r3,180(sp)
    369c:	483eb50e 	bge	r9,zero,3174 <___vfprintf_internal_r+0x1af8>
    36a0:	027fffc4 	movi	r9,-1
    36a4:	e4000047 	ldb	r16,1(fp)
    36a8:	00385a06 	br	1814 <___vfprintf_internal_r+0x198>
    36ac:	00800b44 	movi	r2,45
    36b0:	056bc83a 	sub	r21,zero,r21
    36b4:	d8802305 	stb	r2,140(sp)
    36b8:	003f6806 	br	345c <___vfprintf_internal_r+0x1de0>
    36bc:	d8802344 	addi	r2,sp,141
    36c0:	003f8d06 	br	34f8 <___vfprintf_internal_r+0x1e7c>
    36c4:	0039883a 	mov	fp,zero
    36c8:	003fb706 	br	35a8 <___vfprintf_internal_r+0x1f2c>
    36cc:	d8c02617 	ldw	r3,152(sp)
    36d0:	003f5c06 	br	3444 <___vfprintf_internal_r+0x1dc8>

000036d4 <__vfprintf_internal>:
    36d4:	2007883a 	mov	r3,r4
    36d8:	01000074 	movhi	r4,1
    36dc:	21113d04 	addi	r4,r4,17652
    36e0:	21000017 	ldw	r4,0(r4)
    36e4:	2805883a 	mov	r2,r5
    36e8:	300f883a 	mov	r7,r6
    36ec:	180b883a 	mov	r5,r3
    36f0:	100d883a 	mov	r6,r2
    36f4:	000167c1 	jmpi	167c <___vfprintf_internal_r>

000036f8 <__sbprintf>:
    36f8:	2880030b 	ldhu	r2,12(r5)
    36fc:	2ac01917 	ldw	r11,100(r5)
    3700:	2a80038b 	ldhu	r10,14(r5)
    3704:	2a400717 	ldw	r9,28(r5)
    3708:	2a000917 	ldw	r8,36(r5)
    370c:	defee204 	addi	sp,sp,-1144
    3710:	00c10004 	movi	r3,1024
    3714:	dc011a15 	stw	r16,1128(sp)
    3718:	10bfff4c 	andi	r2,r2,65533
    371c:	2821883a 	mov	r16,r5
    3720:	d8cb883a 	add	r5,sp,r3
    3724:	dc811c15 	stw	r18,1136(sp)
    3728:	dc411b15 	stw	r17,1132(sp)
    372c:	dfc11d15 	stw	ra,1140(sp)
    3730:	2025883a 	mov	r18,r4
    3734:	d881030d 	sth	r2,1036(sp)
    3738:	dac11915 	stw	r11,1124(sp)
    373c:	da81038d 	sth	r10,1038(sp)
    3740:	da410715 	stw	r9,1052(sp)
    3744:	da010915 	stw	r8,1060(sp)
    3748:	dec10015 	stw	sp,1024(sp)
    374c:	dec10415 	stw	sp,1040(sp)
    3750:	d8c10215 	stw	r3,1032(sp)
    3754:	d8c10515 	stw	r3,1044(sp)
    3758:	d8010615 	stw	zero,1048(sp)
    375c:	000167c0 	call	167c <___vfprintf_internal_r>
    3760:	1023883a 	mov	r17,r2
    3764:	10000416 	blt	r2,zero,3778 <__sbprintf+0x80>
    3768:	9009883a 	mov	r4,r18
    376c:	d9410004 	addi	r5,sp,1024
    3770:	00054600 	call	5460 <_fflush_r>
    3774:	10000d1e 	bne	r2,zero,37ac <__sbprintf+0xb4>
    3778:	d8c1030b 	ldhu	r3,1036(sp)
    377c:	18c0100c 	andi	r3,r3,64
    3780:	18000326 	beq	r3,zero,3790 <__sbprintf+0x98>
    3784:	8080030b 	ldhu	r2,12(r16)
    3788:	10801014 	ori	r2,r2,64
    378c:	8080030d 	sth	r2,12(r16)
    3790:	8805883a 	mov	r2,r17
    3794:	dfc11d17 	ldw	ra,1140(sp)
    3798:	dc811c17 	ldw	r18,1136(sp)
    379c:	dc411b17 	ldw	r17,1132(sp)
    37a0:	dc011a17 	ldw	r16,1128(sp)
    37a4:	dec11e04 	addi	sp,sp,1144
    37a8:	f800283a 	ret
    37ac:	047fffc4 	movi	r17,-1
    37b0:	003ff106 	br	3778 <__sbprintf+0x80>

000037b4 <__swsetup_r>:
    37b4:	00800074 	movhi	r2,1
    37b8:	defffd04 	addi	sp,sp,-12
    37bc:	10913d04 	addi	r2,r2,17652
    37c0:	dc400115 	stw	r17,4(sp)
    37c4:	2023883a 	mov	r17,r4
    37c8:	11000017 	ldw	r4,0(r2)
    37cc:	dc000015 	stw	r16,0(sp)
    37d0:	dfc00215 	stw	ra,8(sp)
    37d4:	2821883a 	mov	r16,r5
    37d8:	20000226 	beq	r4,zero,37e4 <__swsetup_r+0x30>
    37dc:	20c00e17 	ldw	r3,56(r4)
    37e0:	18003126 	beq	r3,zero,38a8 <__swsetup_r+0xf4>
    37e4:	8080030b 	ldhu	r2,12(r16)
    37e8:	10c0020c 	andi	r3,r2,8
    37ec:	100d883a 	mov	r6,r2
    37f0:	18000f26 	beq	r3,zero,3830 <__swsetup_r+0x7c>
    37f4:	80c00417 	ldw	r3,16(r16)
    37f8:	18001526 	beq	r3,zero,3850 <__swsetup_r+0x9c>
    37fc:	1100004c 	andi	r4,r2,1
    3800:	20001c1e 	bne	r4,zero,3874 <__swsetup_r+0xc0>
    3804:	1080008c 	andi	r2,r2,2
    3808:	1000291e 	bne	r2,zero,38b0 <__swsetup_r+0xfc>
    380c:	80800517 	ldw	r2,20(r16)
    3810:	80800215 	stw	r2,8(r16)
    3814:	18001c26 	beq	r3,zero,3888 <__swsetup_r+0xd4>
    3818:	0005883a 	mov	r2,zero
    381c:	dfc00217 	ldw	ra,8(sp)
    3820:	dc400117 	ldw	r17,4(sp)
    3824:	dc000017 	ldw	r16,0(sp)
    3828:	dec00304 	addi	sp,sp,12
    382c:	f800283a 	ret
    3830:	3080040c 	andi	r2,r6,16
    3834:	10002e26 	beq	r2,zero,38f0 <__swsetup_r+0x13c>
    3838:	3080010c 	andi	r2,r6,4
    383c:	10001e1e 	bne	r2,zero,38b8 <__swsetup_r+0x104>
    3840:	80c00417 	ldw	r3,16(r16)
    3844:	30800214 	ori	r2,r6,8
    3848:	8080030d 	sth	r2,12(r16)
    384c:	183feb1e 	bne	r3,zero,37fc <__swsetup_r+0x48>
    3850:	1140a00c 	andi	r5,r2,640
    3854:	01008004 	movi	r4,512
    3858:	293fe826 	beq	r5,r4,37fc <__swsetup_r+0x48>
    385c:	8809883a 	mov	r4,r17
    3860:	800b883a 	mov	r5,r16
    3864:	00063e40 	call	63e4 <__smakebuf_r>
    3868:	8080030b 	ldhu	r2,12(r16)
    386c:	80c00417 	ldw	r3,16(r16)
    3870:	003fe206 	br	37fc <__swsetup_r+0x48>
    3874:	80800517 	ldw	r2,20(r16)
    3878:	80000215 	stw	zero,8(r16)
    387c:	0085c83a 	sub	r2,zero,r2
    3880:	80800615 	stw	r2,24(r16)
    3884:	183fe41e 	bne	r3,zero,3818 <__swsetup_r+0x64>
    3888:	80c0030b 	ldhu	r3,12(r16)
    388c:	0005883a 	mov	r2,zero
    3890:	1900200c 	andi	r4,r3,128
    3894:	203fe126 	beq	r4,zero,381c <__swsetup_r+0x68>
    3898:	18c01014 	ori	r3,r3,64
    389c:	80c0030d 	sth	r3,12(r16)
    38a0:	00bfffc4 	movi	r2,-1
    38a4:	003fdd06 	br	381c <__swsetup_r+0x68>
    38a8:	000584c0 	call	584c <__sinit>
    38ac:	003fcd06 	br	37e4 <__swsetup_r+0x30>
    38b0:	0005883a 	mov	r2,zero
    38b4:	003fd606 	br	3810 <__swsetup_r+0x5c>
    38b8:	81400c17 	ldw	r5,48(r16)
    38bc:	28000626 	beq	r5,zero,38d8 <__swsetup_r+0x124>
    38c0:	80801004 	addi	r2,r16,64
    38c4:	28800326 	beq	r5,r2,38d4 <__swsetup_r+0x120>
    38c8:	8809883a 	mov	r4,r17
    38cc:	00059c00 	call	59c0 <_free_r>
    38d0:	8180030b 	ldhu	r6,12(r16)
    38d4:	80000c15 	stw	zero,48(r16)
    38d8:	80c00417 	ldw	r3,16(r16)
    38dc:	00bff6c4 	movi	r2,-37
    38e0:	118c703a 	and	r6,r2,r6
    38e4:	80000115 	stw	zero,4(r16)
    38e8:	80c00015 	stw	r3,0(r16)
    38ec:	003fd506 	br	3844 <__swsetup_r+0x90>
    38f0:	00800244 	movi	r2,9
    38f4:	88800015 	stw	r2,0(r17)
    38f8:	30801014 	ori	r2,r6,64
    38fc:	8080030d 	sth	r2,12(r16)
    3900:	00bfffc4 	movi	r2,-1
    3904:	003fc506 	br	381c <__swsetup_r+0x68>

00003908 <quorem>:
    3908:	defff204 	addi	sp,sp,-56
    390c:	ddc00b15 	stw	r23,44(sp)
    3910:	20800417 	ldw	r2,16(r4)
    3914:	2dc00417 	ldw	r23,16(r5)
    3918:	dfc00d15 	stw	ra,52(sp)
    391c:	df000c15 	stw	fp,48(sp)
    3920:	dd800a15 	stw	r22,40(sp)
    3924:	dd400915 	stw	r21,36(sp)
    3928:	dd000815 	stw	r20,32(sp)
    392c:	dcc00715 	stw	r19,28(sp)
    3930:	dc800615 	stw	r18,24(sp)
    3934:	dc400515 	stw	r17,20(sp)
    3938:	dc000415 	stw	r16,16(sp)
    393c:	15c07a16 	blt	r2,r23,3b28 <quorem+0x220>
    3940:	bdffffc4 	addi	r23,r23,-1
    3944:	bde9883a 	add	r20,r23,r23
    3948:	28c00504 	addi	r3,r5,20
    394c:	a529883a 	add	r20,r20,r20
    3950:	1d39883a 	add	fp,r3,r20
    3954:	24c00504 	addi	r19,r4,20
    3958:	d9400215 	stw	r5,8(sp)
    395c:	9d29883a 	add	r20,r19,r20
    3960:	e1400017 	ldw	r5,0(fp)
    3964:	d9000015 	stw	r4,0(sp)
    3968:	a1000017 	ldw	r4,0(r20)
    396c:	29400044 	addi	r5,r5,1
    3970:	d8c00115 	stw	r3,4(sp)
    3974:	dd000315 	stw	r20,12(sp)
    3978:	000b5b80 	call	b5b8 <__udivsi3>
    397c:	1025883a 	mov	r18,r2
    3980:	10003026 	beq	r2,zero,3a44 <quorem+0x13c>
    3984:	dc400117 	ldw	r17,4(sp)
    3988:	9829883a 	mov	r20,r19
    398c:	002d883a 	mov	r22,zero
    3990:	0021883a 	mov	r16,zero
    3994:	8d400017 	ldw	r21,0(r17)
    3998:	900b883a 	mov	r5,r18
    399c:	8c400104 	addi	r17,r17,4
    39a0:	a93fffcc 	andi	r4,r21,65535
    39a4:	0000dc40 	call	dc4 <__mulsi3>
    39a8:	a808d43a 	srli	r4,r21,16
    39ac:	900b883a 	mov	r5,r18
    39b0:	b0ad883a 	add	r22,r22,r2
    39b4:	0000dc40 	call	dc4 <__mulsi3>
    39b8:	a1000017 	ldw	r4,0(r20)
    39bc:	b00cd43a 	srli	r6,r22,16
    39c0:	b0ffffcc 	andi	r3,r22,65535
    39c4:	217fffcc 	andi	r5,r4,65535
    39c8:	2c21883a 	add	r16,r5,r16
    39cc:	80c7c83a 	sub	r3,r16,r3
    39d0:	2008d43a 	srli	r4,r4,16
    39d4:	3085883a 	add	r2,r6,r2
    39d8:	1821d43a 	srai	r16,r3,16
    39dc:	117fffcc 	andi	r5,r2,65535
    39e0:	2149c83a 	sub	r4,r4,r5
    39e4:	2421883a 	add	r16,r4,r16
    39e8:	8008943a 	slli	r4,r16,16
    39ec:	18ffffcc 	andi	r3,r3,65535
    39f0:	102cd43a 	srli	r22,r2,16
    39f4:	20c8b03a 	or	r4,r4,r3
    39f8:	a1000015 	stw	r4,0(r20)
    39fc:	8021d43a 	srai	r16,r16,16
    3a00:	a5000104 	addi	r20,r20,4
    3a04:	e47fe32e 	bgeu	fp,r17,3994 <quorem+0x8c>
    3a08:	d8c00317 	ldw	r3,12(sp)
    3a0c:	18800017 	ldw	r2,0(r3)
    3a10:	10000c1e 	bne	r2,zero,3a44 <quorem+0x13c>
    3a14:	18bfff04 	addi	r2,r3,-4
    3a18:	9880082e 	bgeu	r19,r2,3a3c <quorem+0x134>
    3a1c:	18ffff17 	ldw	r3,-4(r3)
    3a20:	18000326 	beq	r3,zero,3a30 <quorem+0x128>
    3a24:	00000506 	br	3a3c <quorem+0x134>
    3a28:	10c00017 	ldw	r3,0(r2)
    3a2c:	1800031e 	bne	r3,zero,3a3c <quorem+0x134>
    3a30:	10bfff04 	addi	r2,r2,-4
    3a34:	bdffffc4 	addi	r23,r23,-1
    3a38:	98bffb36 	bltu	r19,r2,3a28 <quorem+0x120>
    3a3c:	d8c00017 	ldw	r3,0(sp)
    3a40:	1dc00415 	stw	r23,16(r3)
    3a44:	d9000017 	ldw	r4,0(sp)
    3a48:	d9400217 	ldw	r5,8(sp)
    3a4c:	0007b740 	call	7b74 <__mcmp>
    3a50:	10002816 	blt	r2,zero,3af4 <quorem+0x1ec>
    3a54:	dc400117 	ldw	r17,4(sp)
    3a58:	94800044 	addi	r18,r18,1
    3a5c:	980d883a 	mov	r6,r19
    3a60:	0007883a 	mov	r3,zero
    3a64:	31000017 	ldw	r4,0(r6)
    3a68:	89400017 	ldw	r5,0(r17)
    3a6c:	31800104 	addi	r6,r6,4
    3a70:	20bfffcc 	andi	r2,r4,65535
    3a74:	10c7883a 	add	r3,r2,r3
    3a78:	28bfffcc 	andi	r2,r5,65535
    3a7c:	1885c83a 	sub	r2,r3,r2
    3a80:	280ad43a 	srli	r5,r5,16
    3a84:	2008d43a 	srli	r4,r4,16
    3a88:	1007d43a 	srai	r3,r2,16
    3a8c:	10bfffcc 	andi	r2,r2,65535
    3a90:	2149c83a 	sub	r4,r4,r5
    3a94:	20c9883a 	add	r4,r4,r3
    3a98:	200a943a 	slli	r5,r4,16
    3a9c:	8c400104 	addi	r17,r17,4
    3aa0:	2007d43a 	srai	r3,r4,16
    3aa4:	2884b03a 	or	r2,r5,r2
    3aa8:	30bfff15 	stw	r2,-4(r6)
    3aac:	e47fed2e 	bgeu	fp,r17,3a64 <quorem+0x15c>
    3ab0:	bdc5883a 	add	r2,r23,r23
    3ab4:	1085883a 	add	r2,r2,r2
    3ab8:	9887883a 	add	r3,r19,r2
    3abc:	18800017 	ldw	r2,0(r3)
    3ac0:	10000c1e 	bne	r2,zero,3af4 <quorem+0x1ec>
    3ac4:	18bfff04 	addi	r2,r3,-4
    3ac8:	9880082e 	bgeu	r19,r2,3aec <quorem+0x1e4>
    3acc:	18ffff17 	ldw	r3,-4(r3)
    3ad0:	18000326 	beq	r3,zero,3ae0 <quorem+0x1d8>
    3ad4:	00000506 	br	3aec <quorem+0x1e4>
    3ad8:	10c00017 	ldw	r3,0(r2)
    3adc:	1800031e 	bne	r3,zero,3aec <quorem+0x1e4>
    3ae0:	10bfff04 	addi	r2,r2,-4
    3ae4:	bdffffc4 	addi	r23,r23,-1
    3ae8:	98bffb36 	bltu	r19,r2,3ad8 <quorem+0x1d0>
    3aec:	d8c00017 	ldw	r3,0(sp)
    3af0:	1dc00415 	stw	r23,16(r3)
    3af4:	9005883a 	mov	r2,r18
    3af8:	dfc00d17 	ldw	ra,52(sp)
    3afc:	df000c17 	ldw	fp,48(sp)
    3b00:	ddc00b17 	ldw	r23,44(sp)
    3b04:	dd800a17 	ldw	r22,40(sp)
    3b08:	dd400917 	ldw	r21,36(sp)
    3b0c:	dd000817 	ldw	r20,32(sp)
    3b10:	dcc00717 	ldw	r19,28(sp)
    3b14:	dc800617 	ldw	r18,24(sp)
    3b18:	dc400517 	ldw	r17,20(sp)
    3b1c:	dc000417 	ldw	r16,16(sp)
    3b20:	dec00e04 	addi	sp,sp,56
    3b24:	f800283a 	ret
    3b28:	0005883a 	mov	r2,zero
    3b2c:	003ff206 	br	3af8 <quorem+0x1f0>

00003b30 <_dtoa_r>:
    3b30:	20801017 	ldw	r2,64(r4)
    3b34:	deffde04 	addi	sp,sp,-136
    3b38:	dd401d15 	stw	r21,116(sp)
    3b3c:	dcc01b15 	stw	r19,108(sp)
    3b40:	dc801a15 	stw	r18,104(sp)
    3b44:	dc401915 	stw	r17,100(sp)
    3b48:	dc001815 	stw	r16,96(sp)
    3b4c:	dfc02115 	stw	ra,132(sp)
    3b50:	df002015 	stw	fp,128(sp)
    3b54:	ddc01f15 	stw	r23,124(sp)
    3b58:	dd801e15 	stw	r22,120(sp)
    3b5c:	dd001c15 	stw	r20,112(sp)
    3b60:	d9c00315 	stw	r7,12(sp)
    3b64:	2021883a 	mov	r16,r4
    3b68:	302b883a 	mov	r21,r6
    3b6c:	2825883a 	mov	r18,r5
    3b70:	dc402417 	ldw	r17,144(sp)
    3b74:	3027883a 	mov	r19,r6
    3b78:	10000826 	beq	r2,zero,3b9c <_dtoa_r+0x6c>
    3b7c:	21801117 	ldw	r6,68(r4)
    3b80:	00c00044 	movi	r3,1
    3b84:	100b883a 	mov	r5,r2
    3b88:	1986983a 	sll	r3,r3,r6
    3b8c:	11800115 	stw	r6,4(r2)
    3b90:	10c00215 	stw	r3,8(r2)
    3b94:	000728c0 	call	728c <_Bfree>
    3b98:	80001015 	stw	zero,64(r16)
    3b9c:	a8002d16 	blt	r21,zero,3c54 <_dtoa_r+0x124>
    3ba0:	88000015 	stw	zero,0(r17)
    3ba4:	a8dffc2c 	andhi	r3,r21,32752
    3ba8:	009ffc34 	movhi	r2,32752
    3bac:	18801b26 	beq	r3,r2,3c1c <_dtoa_r+0xec>
    3bb0:	9009883a 	mov	r4,r18
    3bb4:	980b883a 	mov	r5,r19
    3bb8:	000d883a 	mov	r6,zero
    3bbc:	000f883a 	mov	r7,zero
    3bc0:	000c7e40 	call	c7e4 <__eqdf2>
    3bc4:	10002a1e 	bne	r2,zero,3c70 <_dtoa_r+0x140>
    3bc8:	d8c02317 	ldw	r3,140(sp)
    3bcc:	d9002517 	ldw	r4,148(sp)
    3bd0:	00800044 	movi	r2,1
    3bd4:	18800015 	stw	r2,0(r3)
    3bd8:	2001a226 	beq	r4,zero,4264 <_dtoa_r+0x734>
    3bdc:	00800074 	movhi	r2,1
    3be0:	1088d744 	addi	r2,r2,9053
    3be4:	20800015 	stw	r2,0(r4)
    3be8:	10bfffc4 	addi	r2,r2,-1
    3bec:	dfc02117 	ldw	ra,132(sp)
    3bf0:	df002017 	ldw	fp,128(sp)
    3bf4:	ddc01f17 	ldw	r23,124(sp)
    3bf8:	dd801e17 	ldw	r22,120(sp)
    3bfc:	dd401d17 	ldw	r21,116(sp)
    3c00:	dd001c17 	ldw	r20,112(sp)
    3c04:	dcc01b17 	ldw	r19,108(sp)
    3c08:	dc801a17 	ldw	r18,104(sp)
    3c0c:	dc401917 	ldw	r17,100(sp)
    3c10:	dc001817 	ldw	r16,96(sp)
    3c14:	dec02204 	addi	sp,sp,136
    3c18:	f800283a 	ret
    3c1c:	d8c02317 	ldw	r3,140(sp)
    3c20:	0089c3c4 	movi	r2,9999
    3c24:	18800015 	stw	r2,0(r3)
    3c28:	90017c26 	beq	r18,zero,421c <_dtoa_r+0x6ec>
    3c2c:	00800074 	movhi	r2,1
    3c30:	1088e304 	addi	r2,r2,9100
    3c34:	d9002517 	ldw	r4,148(sp)
    3c38:	203fec26 	beq	r4,zero,3bec <_dtoa_r+0xbc>
    3c3c:	10c000c7 	ldb	r3,3(r2)
    3c40:	18017d1e 	bne	r3,zero,4238 <_dtoa_r+0x708>
    3c44:	10c000c4 	addi	r3,r2,3
    3c48:	d9802517 	ldw	r6,148(sp)
    3c4c:	30c00015 	stw	r3,0(r6)
    3c50:	003fe606 	br	3bec <_dtoa_r+0xbc>
    3c54:	04e00034 	movhi	r19,32768
    3c58:	9cffffc4 	addi	r19,r19,-1
    3c5c:	00800044 	movi	r2,1
    3c60:	ace6703a 	and	r19,r21,r19
    3c64:	88800015 	stw	r2,0(r17)
    3c68:	982b883a 	mov	r21,r19
    3c6c:	003fcd06 	br	3ba4 <_dtoa_r+0x74>
    3c70:	d8800204 	addi	r2,sp,8
    3c74:	a822d53a 	srli	r17,r21,20
    3c78:	d8800015 	stw	r2,0(sp)
    3c7c:	8009883a 	mov	r4,r16
    3c80:	900b883a 	mov	r5,r18
    3c84:	980d883a 	mov	r6,r19
    3c88:	d9c00104 	addi	r7,sp,4
    3c8c:	0007ee80 	call	7ee8 <__d2b>
    3c90:	1039883a 	mov	fp,r2
    3c94:	88016a1e 	bne	r17,zero,4240 <_dtoa_r+0x710>
    3c98:	dd000217 	ldw	r20,8(sp)
    3c9c:	dc400117 	ldw	r17,4(sp)
    3ca0:	00befbc4 	movi	r2,-1041
    3ca4:	a463883a 	add	r17,r20,r17
    3ca8:	8882ea16 	blt	r17,r2,4854 <_dtoa_r+0xd24>
    3cac:	00bf0384 	movi	r2,-1010
    3cb0:	1445c83a 	sub	r2,r2,r17
    3cb4:	89010484 	addi	r4,r17,1042
    3cb8:	a8aa983a 	sll	r21,r21,r2
    3cbc:	9108d83a 	srl	r4,r18,r4
    3cc0:	a908b03a 	or	r4,r21,r4
    3cc4:	000dcbc0 	call	dcbc <__floatunsidf>
    3cc8:	017f8434 	movhi	r5,65040
    3ccc:	01800044 	movi	r6,1
    3cd0:	1009883a 	mov	r4,r2
    3cd4:	194b883a 	add	r5,r3,r5
    3cd8:	8c7fffc4 	addi	r17,r17,-1
    3cdc:	d9800f15 	stw	r6,60(sp)
    3ce0:	000d883a 	mov	r6,zero
    3ce4:	01cffe34 	movhi	r7,16376
    3ce8:	000d2940 	call	d294 <__subdf3>
    3cec:	0198dbf4 	movhi	r6,25455
    3cf0:	01cff4f4 	movhi	r7,16339
    3cf4:	1009883a 	mov	r4,r2
    3cf8:	180b883a 	mov	r5,r3
    3cfc:	3190d844 	addi	r6,r6,17249
    3d00:	39e1e9c4 	addi	r7,r7,-30809
    3d04:	000ca280 	call	ca28 <__muldf3>
    3d08:	01a2d874 	movhi	r6,35681
    3d0c:	01cff1f4 	movhi	r7,16327
    3d10:	180b883a 	mov	r5,r3
    3d14:	31b22cc4 	addi	r6,r6,-14157
    3d18:	39e28a04 	addi	r7,r7,-30168
    3d1c:	1009883a 	mov	r4,r2
    3d20:	000b5c80 	call	b5c8 <__adddf3>
    3d24:	8809883a 	mov	r4,r17
    3d28:	102d883a 	mov	r22,r2
    3d2c:	182b883a 	mov	r21,r3
    3d30:	000dbec0 	call	dbec <__floatsidf>
    3d34:	019427f4 	movhi	r6,20639
    3d38:	01cff4f4 	movhi	r7,16339
    3d3c:	1009883a 	mov	r4,r2
    3d40:	180b883a 	mov	r5,r3
    3d44:	319e7ec4 	addi	r6,r6,31227
    3d48:	39d104c4 	addi	r7,r7,17427
    3d4c:	000ca280 	call	ca28 <__muldf3>
    3d50:	b009883a 	mov	r4,r22
    3d54:	a80b883a 	mov	r5,r21
    3d58:	100d883a 	mov	r6,r2
    3d5c:	180f883a 	mov	r7,r3
    3d60:	000b5c80 	call	b5c8 <__adddf3>
    3d64:	1009883a 	mov	r4,r2
    3d68:	180b883a 	mov	r5,r3
    3d6c:	102d883a 	mov	r22,r2
    3d70:	182b883a 	mov	r21,r3
    3d74:	000db640 	call	db64 <__fixdfsi>
    3d78:	b009883a 	mov	r4,r22
    3d7c:	a80b883a 	mov	r5,r21
    3d80:	000d883a 	mov	r6,zero
    3d84:	000f883a 	mov	r7,zero
    3d88:	d8800515 	stw	r2,20(sp)
    3d8c:	000c9480 	call	c948 <__ledf2>
    3d90:	10023116 	blt	r2,zero,4658 <_dtoa_r+0xb28>
    3d94:	d8c00517 	ldw	r3,20(sp)
    3d98:	00800584 	movi	r2,22
    3d9c:	10c21f36 	bltu	r2,r3,461c <_dtoa_r+0xaec>
    3da0:	180490fa 	slli	r2,r3,3
    3da4:	00c00074 	movhi	r3,1
    3da8:	18c8ff04 	addi	r3,r3,9212
    3dac:	1885883a 	add	r2,r3,r2
    3db0:	11000017 	ldw	r4,0(r2)
    3db4:	11400117 	ldw	r5,4(r2)
    3db8:	900d883a 	mov	r6,r18
    3dbc:	980f883a 	mov	r7,r19
    3dc0:	000c8680 	call	c868 <__gedf2>
    3dc4:	0082a70e 	bge	zero,r2,4864 <_dtoa_r+0xd34>
    3dc8:	d9000517 	ldw	r4,20(sp)
    3dcc:	d8000d15 	stw	zero,52(sp)
    3dd0:	213fffc4 	addi	r4,r4,-1
    3dd4:	d9000515 	stw	r4,20(sp)
    3dd8:	a463c83a 	sub	r17,r20,r17
    3ddc:	8dbfffc4 	addi	r22,r17,-1
    3de0:	b0021916 	blt	r22,zero,4648 <_dtoa_r+0xb18>
    3de4:	d8000815 	stw	zero,32(sp)
    3de8:	d8800517 	ldw	r2,20(sp)
    3dec:	10020e16 	blt	r2,zero,4628 <_dtoa_r+0xaf8>
    3df0:	b0ad883a 	add	r22,r22,r2
    3df4:	d8800a15 	stw	r2,40(sp)
    3df8:	d8000915 	stw	zero,36(sp)
    3dfc:	d8c00317 	ldw	r3,12(sp)
    3e00:	00800244 	movi	r2,9
    3e04:	10c11a36 	bltu	r2,r3,4270 <_dtoa_r+0x740>
    3e08:	00800144 	movi	r2,5
    3e0c:	10c4fc0e 	bge	r2,r3,5200 <_dtoa_r+0x16d0>
    3e10:	18ffff04 	addi	r3,r3,-4
    3e14:	d8c00315 	stw	r3,12(sp)
    3e18:	0029883a 	mov	r20,zero
    3e1c:	d9800317 	ldw	r6,12(sp)
    3e20:	008000c4 	movi	r2,3
    3e24:	3083bd26 	beq	r6,r2,4d1c <_dtoa_r+0x11ec>
    3e28:	1183670e 	bge	r2,r6,4bc8 <_dtoa_r+0x1098>
    3e2c:	d8c00317 	ldw	r3,12(sp)
    3e30:	00800104 	movi	r2,4
    3e34:	1882e726 	beq	r3,r2,49d4 <_dtoa_r+0xea4>
    3e38:	00800144 	movi	r2,5
    3e3c:	1884f21e 	bne	r3,r2,5208 <_dtoa_r+0x16d8>
    3e40:	00800044 	movi	r2,1
    3e44:	d8800b15 	stw	r2,44(sp)
    3e48:	d8c02217 	ldw	r3,136(sp)
    3e4c:	d9000517 	ldw	r4,20(sp)
    3e50:	1907883a 	add	r3,r3,r4
    3e54:	19800044 	addi	r6,r3,1
    3e58:	d8c00c15 	stw	r3,48(sp)
    3e5c:	d9800615 	stw	r6,24(sp)
    3e60:	0183c30e 	bge	zero,r6,4d70 <_dtoa_r+0x1240>
    3e64:	d9800617 	ldw	r6,24(sp)
    3e68:	3023883a 	mov	r17,r6
    3e6c:	80001115 	stw	zero,68(r16)
    3e70:	008005c4 	movi	r2,23
    3e74:	1184f62e 	bgeu	r2,r6,5250 <_dtoa_r+0x1720>
    3e78:	00c00044 	movi	r3,1
    3e7c:	00800104 	movi	r2,4
    3e80:	1085883a 	add	r2,r2,r2
    3e84:	11000504 	addi	r4,r2,20
    3e88:	180b883a 	mov	r5,r3
    3e8c:	18c00044 	addi	r3,r3,1
    3e90:	313ffb2e 	bgeu	r6,r4,3e80 <_dtoa_r+0x350>
    3e94:	81401115 	stw	r5,68(r16)
    3e98:	8009883a 	mov	r4,r16
    3e9c:	00071e40 	call	71e4 <_Balloc>
    3ea0:	d8800715 	stw	r2,28(sp)
    3ea4:	80801015 	stw	r2,64(r16)
    3ea8:	00800384 	movi	r2,14
    3eac:	1440fd36 	bltu	r2,r17,42a4 <_dtoa_r+0x774>
    3eb0:	a000fc26 	beq	r20,zero,42a4 <_dtoa_r+0x774>
    3eb4:	d8800517 	ldw	r2,20(sp)
    3eb8:	0083b90e 	bge	zero,r2,4da0 <_dtoa_r+0x1270>
    3ebc:	d8c00517 	ldw	r3,20(sp)
    3ec0:	108003cc 	andi	r2,r2,15
    3ec4:	100490fa 	slli	r2,r2,3
    3ec8:	182fd13a 	srai	r23,r3,4
    3ecc:	00c00074 	movhi	r3,1
    3ed0:	18c8ff04 	addi	r3,r3,9212
    3ed4:	1885883a 	add	r2,r3,r2
    3ed8:	b8c0040c 	andi	r3,r23,16
    3edc:	12c00017 	ldw	r11,0(r2)
    3ee0:	12800117 	ldw	r10,4(r2)
    3ee4:	18039726 	beq	r3,zero,4d44 <_dtoa_r+0x1214>
    3ee8:	00800074 	movhi	r2,1
    3eec:	1088f504 	addi	r2,r2,9172
    3ef0:	11800817 	ldw	r6,32(r2)
    3ef4:	11c00917 	ldw	r7,36(r2)
    3ef8:	9009883a 	mov	r4,r18
    3efc:	980b883a 	mov	r5,r19
    3f00:	da801615 	stw	r10,88(sp)
    3f04:	dac01515 	stw	r11,84(sp)
    3f08:	000be640 	call	be64 <__divdf3>
    3f0c:	da801617 	ldw	r10,88(sp)
    3f10:	dac01517 	ldw	r11,84(sp)
    3f14:	bdc003cc 	andi	r23,r23,15
    3f18:	044000c4 	movi	r17,3
    3f1c:	d8800e15 	stw	r2,56(sp)
    3f20:	182b883a 	mov	r21,r3
    3f24:	b8001126 	beq	r23,zero,3f6c <_dtoa_r+0x43c>
    3f28:	05000074 	movhi	r20,1
    3f2c:	a508f504 	addi	r20,r20,9172
    3f30:	5805883a 	mov	r2,r11
    3f34:	5007883a 	mov	r3,r10
    3f38:	b980004c 	andi	r6,r23,1
    3f3c:	1009883a 	mov	r4,r2
    3f40:	b82fd07a 	srai	r23,r23,1
    3f44:	180b883a 	mov	r5,r3
    3f48:	30000426 	beq	r6,zero,3f5c <_dtoa_r+0x42c>
    3f4c:	a1800017 	ldw	r6,0(r20)
    3f50:	a1c00117 	ldw	r7,4(r20)
    3f54:	8c400044 	addi	r17,r17,1
    3f58:	000ca280 	call	ca28 <__muldf3>
    3f5c:	a5000204 	addi	r20,r20,8
    3f60:	b83ff51e 	bne	r23,zero,3f38 <_dtoa_r+0x408>
    3f64:	1017883a 	mov	r11,r2
    3f68:	1815883a 	mov	r10,r3
    3f6c:	d9000e17 	ldw	r4,56(sp)
    3f70:	a80b883a 	mov	r5,r21
    3f74:	580d883a 	mov	r6,r11
    3f78:	500f883a 	mov	r7,r10
    3f7c:	000be640 	call	be64 <__divdf3>
    3f80:	1029883a 	mov	r20,r2
    3f84:	182b883a 	mov	r21,r3
    3f88:	d9800d17 	ldw	r6,52(sp)
    3f8c:	30000626 	beq	r6,zero,3fa8 <_dtoa_r+0x478>
    3f90:	a009883a 	mov	r4,r20
    3f94:	a80b883a 	mov	r5,r21
    3f98:	000d883a 	mov	r6,zero
    3f9c:	01cffc34 	movhi	r7,16368
    3fa0:	000c9480 	call	c948 <__ledf2>
    3fa4:	10043216 	blt	r2,zero,5070 <_dtoa_r+0x1540>
    3fa8:	8809883a 	mov	r4,r17
    3fac:	000dbec0 	call	dbec <__floatsidf>
    3fb0:	1009883a 	mov	r4,r2
    3fb4:	180b883a 	mov	r5,r3
    3fb8:	a00d883a 	mov	r6,r20
    3fbc:	a80f883a 	mov	r7,r21
    3fc0:	000ca280 	call	ca28 <__muldf3>
    3fc4:	000d883a 	mov	r6,zero
    3fc8:	1009883a 	mov	r4,r2
    3fcc:	180b883a 	mov	r5,r3
    3fd0:	01d00734 	movhi	r7,16412
    3fd4:	000b5c80 	call	b5c8 <__adddf3>
    3fd8:	1023883a 	mov	r17,r2
    3fdc:	d9800617 	ldw	r6,24(sp)
    3fe0:	00bf3034 	movhi	r2,64704
    3fe4:	1885883a 	add	r2,r3,r2
    3fe8:	d8800e15 	stw	r2,56(sp)
    3fec:	30032e26 	beq	r6,zero,4ca8 <_dtoa_r+0x1178>
    3ff0:	d8c00517 	ldw	r3,20(sp)
    3ff4:	da800617 	ldw	r10,24(sp)
    3ff8:	d8c01215 	stw	r3,72(sp)
    3ffc:	d9000b17 	ldw	r4,44(sp)
    4000:	2003b026 	beq	r4,zero,4ec4 <_dtoa_r+0x1394>
    4004:	50bfffc4 	addi	r2,r10,-1
    4008:	100490fa 	slli	r2,r2,3
    400c:	00c00074 	movhi	r3,1
    4010:	18c8ff04 	addi	r3,r3,9212
    4014:	1885883a 	add	r2,r3,r2
    4018:	11800017 	ldw	r6,0(r2)
    401c:	11c00117 	ldw	r7,4(r2)
    4020:	d8800717 	ldw	r2,28(sp)
    4024:	0009883a 	mov	r4,zero
    4028:	014ff834 	movhi	r5,16352
    402c:	da801615 	stw	r10,88(sp)
    4030:	15c00044 	addi	r23,r2,1
    4034:	000be640 	call	be64 <__divdf3>
    4038:	d9c00e17 	ldw	r7,56(sp)
    403c:	880d883a 	mov	r6,r17
    4040:	1009883a 	mov	r4,r2
    4044:	180b883a 	mov	r5,r3
    4048:	000d2940 	call	d294 <__subdf3>
    404c:	a80b883a 	mov	r5,r21
    4050:	a009883a 	mov	r4,r20
    4054:	d8c01015 	stw	r3,64(sp)
    4058:	d8800e15 	stw	r2,56(sp)
    405c:	000db640 	call	db64 <__fixdfsi>
    4060:	1009883a 	mov	r4,r2
    4064:	d8801715 	stw	r2,92(sp)
    4068:	000dbec0 	call	dbec <__floatsidf>
    406c:	a009883a 	mov	r4,r20
    4070:	a80b883a 	mov	r5,r21
    4074:	100d883a 	mov	r6,r2
    4078:	180f883a 	mov	r7,r3
    407c:	000d2940 	call	d294 <__subdf3>
    4080:	da001717 	ldw	r8,92(sp)
    4084:	1829883a 	mov	r20,r3
    4088:	d8c00717 	ldw	r3,28(sp)
    408c:	d9000e17 	ldw	r4,56(sp)
    4090:	d9401017 	ldw	r5,64(sp)
    4094:	42000c04 	addi	r8,r8,48
    4098:	1023883a 	mov	r17,r2
    409c:	1a000005 	stb	r8,0(r3)
    40a0:	880d883a 	mov	r6,r17
    40a4:	a00f883a 	mov	r7,r20
    40a8:	402b883a 	mov	r21,r8
    40ac:	000c8680 	call	c868 <__gedf2>
    40b0:	00844516 	blt	zero,r2,51c8 <_dtoa_r+0x1698>
    40b4:	0009883a 	mov	r4,zero
    40b8:	014ffc34 	movhi	r5,16368
    40bc:	880d883a 	mov	r6,r17
    40c0:	a00f883a 	mov	r7,r20
    40c4:	000d2940 	call	d294 <__subdf3>
    40c8:	d9000e17 	ldw	r4,56(sp)
    40cc:	d9401017 	ldw	r5,64(sp)
    40d0:	100d883a 	mov	r6,r2
    40d4:	180f883a 	mov	r7,r3
    40d8:	000c8680 	call	c868 <__gedf2>
    40dc:	da801617 	ldw	r10,88(sp)
    40e0:	00843616 	blt	zero,r2,51bc <_dtoa_r+0x168c>
    40e4:	00800044 	movi	r2,1
    40e8:	12806e0e 	bge	r2,r10,42a4 <_dtoa_r+0x774>
    40ec:	d9000717 	ldw	r4,28(sp)
    40f0:	dd801315 	stw	r22,76(sp)
    40f4:	dc001115 	stw	r16,68(sp)
    40f8:	2295883a 	add	r10,r4,r10
    40fc:	dcc01415 	stw	r19,80(sp)
    4100:	502d883a 	mov	r22,r10
    4104:	dcc01017 	ldw	r19,64(sp)
    4108:	b821883a 	mov	r16,r23
    410c:	dc801015 	stw	r18,64(sp)
    4110:	dc800e17 	ldw	r18,56(sp)
    4114:	00000906 	br	413c <_dtoa_r+0x60c>
    4118:	000d2940 	call	d294 <__subdf3>
    411c:	1009883a 	mov	r4,r2
    4120:	180b883a 	mov	r5,r3
    4124:	900d883a 	mov	r6,r18
    4128:	980f883a 	mov	r7,r19
    412c:	000c9480 	call	c948 <__ledf2>
    4130:	10040e16 	blt	r2,zero,516c <_dtoa_r+0x163c>
    4134:	b821883a 	mov	r16,r23
    4138:	bd841026 	beq	r23,r22,517c <_dtoa_r+0x164c>
    413c:	9009883a 	mov	r4,r18
    4140:	980b883a 	mov	r5,r19
    4144:	000d883a 	mov	r6,zero
    4148:	01d00934 	movhi	r7,16420
    414c:	000ca280 	call	ca28 <__muldf3>
    4150:	000d883a 	mov	r6,zero
    4154:	01d00934 	movhi	r7,16420
    4158:	8809883a 	mov	r4,r17
    415c:	a00b883a 	mov	r5,r20
    4160:	1025883a 	mov	r18,r2
    4164:	1827883a 	mov	r19,r3
    4168:	000ca280 	call	ca28 <__muldf3>
    416c:	180b883a 	mov	r5,r3
    4170:	1009883a 	mov	r4,r2
    4174:	1823883a 	mov	r17,r3
    4178:	1029883a 	mov	r20,r2
    417c:	000db640 	call	db64 <__fixdfsi>
    4180:	1009883a 	mov	r4,r2
    4184:	102b883a 	mov	r21,r2
    4188:	000dbec0 	call	dbec <__floatsidf>
    418c:	a009883a 	mov	r4,r20
    4190:	880b883a 	mov	r5,r17
    4194:	100d883a 	mov	r6,r2
    4198:	180f883a 	mov	r7,r3
    419c:	000d2940 	call	d294 <__subdf3>
    41a0:	ad400c04 	addi	r21,r21,48
    41a4:	1009883a 	mov	r4,r2
    41a8:	180b883a 	mov	r5,r3
    41ac:	900d883a 	mov	r6,r18
    41b0:	980f883a 	mov	r7,r19
    41b4:	85400005 	stb	r21,0(r16)
    41b8:	1023883a 	mov	r17,r2
    41bc:	1829883a 	mov	r20,r3
    41c0:	000c9480 	call	c948 <__ledf2>
    41c4:	bdc00044 	addi	r23,r23,1
    41c8:	0009883a 	mov	r4,zero
    41cc:	014ffc34 	movhi	r5,16368
    41d0:	880d883a 	mov	r6,r17
    41d4:	a00f883a 	mov	r7,r20
    41d8:	103fcf0e 	bge	r2,zero,4118 <_dtoa_r+0x5e8>
    41dc:	d9801217 	ldw	r6,72(sp)
    41e0:	dc001117 	ldw	r16,68(sp)
    41e4:	d9800515 	stw	r6,20(sp)
    41e8:	8009883a 	mov	r4,r16
    41ec:	e00b883a 	mov	r5,fp
    41f0:	000728c0 	call	728c <_Bfree>
    41f4:	d8c00517 	ldw	r3,20(sp)
    41f8:	d9002317 	ldw	r4,140(sp)
    41fc:	d9802517 	ldw	r6,148(sp)
    4200:	b8000005 	stb	zero,0(r23)
    4204:	18800044 	addi	r2,r3,1
    4208:	20800015 	stw	r2,0(r4)
    420c:	30027226 	beq	r6,zero,4bd8 <_dtoa_r+0x10a8>
    4210:	35c00015 	stw	r23,0(r6)
    4214:	d8800717 	ldw	r2,28(sp)
    4218:	003e7406 	br	3bec <_dtoa_r+0xbc>
    421c:	00800434 	movhi	r2,16
    4220:	10bfffc4 	addi	r2,r2,-1
    4224:	a8aa703a 	and	r21,r21,r2
    4228:	a83e801e 	bne	r21,zero,3c2c <_dtoa_r+0xfc>
    422c:	00800074 	movhi	r2,1
    4230:	1088e004 	addi	r2,r2,9088
    4234:	003e7f06 	br	3c34 <_dtoa_r+0x104>
    4238:	10c00204 	addi	r3,r2,8
    423c:	003e8206 	br	3c48 <_dtoa_r+0x118>
    4240:	01400434 	movhi	r5,16
    4244:	297fffc4 	addi	r5,r5,-1
    4248:	994a703a 	and	r5,r19,r5
    424c:	9009883a 	mov	r4,r18
    4250:	8c7f0044 	addi	r17,r17,-1023
    4254:	294ffc34 	orhi	r5,r5,16368
    4258:	dd000217 	ldw	r20,8(sp)
    425c:	d8000f15 	stw	zero,60(sp)
    4260:	003e9f06 	br	3ce0 <_dtoa_r+0x1b0>
    4264:	00800074 	movhi	r2,1
    4268:	1088d704 	addi	r2,r2,9052
    426c:	003e5f06 	br	3bec <_dtoa_r+0xbc>
    4270:	80001115 	stw	zero,68(r16)
    4274:	8009883a 	mov	r4,r16
    4278:	000b883a 	mov	r5,zero
    427c:	00071e40 	call	71e4 <_Balloc>
    4280:	01bfffc4 	movi	r6,-1
    4284:	d8800715 	stw	r2,28(sp)
    4288:	80801015 	stw	r2,64(r16)
    428c:	00800044 	movi	r2,1
    4290:	d9800c15 	stw	r6,48(sp)
    4294:	d8800b15 	stw	r2,44(sp)
    4298:	d9800615 	stw	r6,24(sp)
    429c:	d8002215 	stw	zero,136(sp)
    42a0:	d8000315 	stw	zero,12(sp)
    42a4:	d8800117 	ldw	r2,4(sp)
    42a8:	10008e16 	blt	r2,zero,44e4 <_dtoa_r+0x9b4>
    42ac:	d9000517 	ldw	r4,20(sp)
    42b0:	00c00384 	movi	r3,14
    42b4:	19008b16 	blt	r3,r4,44e4 <_dtoa_r+0x9b4>
    42b8:	200490fa 	slli	r2,r4,3
    42bc:	00c00074 	movhi	r3,1
    42c0:	d9802217 	ldw	r6,136(sp)
    42c4:	18c8ff04 	addi	r3,r3,9212
    42c8:	1885883a 	add	r2,r3,r2
    42cc:	14400017 	ldw	r17,0(r2)
    42d0:	15000117 	ldw	r20,4(r2)
    42d4:	3001c716 	blt	r6,zero,49f4 <_dtoa_r+0xec4>
    42d8:	880d883a 	mov	r6,r17
    42dc:	a00f883a 	mov	r7,r20
    42e0:	9009883a 	mov	r4,r18
    42e4:	980b883a 	mov	r5,r19
    42e8:	000be640 	call	be64 <__divdf3>
    42ec:	180b883a 	mov	r5,r3
    42f0:	1009883a 	mov	r4,r2
    42f4:	000db640 	call	db64 <__fixdfsi>
    42f8:	1009883a 	mov	r4,r2
    42fc:	102d883a 	mov	r22,r2
    4300:	000dbec0 	call	dbec <__floatsidf>
    4304:	1009883a 	mov	r4,r2
    4308:	180b883a 	mov	r5,r3
    430c:	880d883a 	mov	r6,r17
    4310:	a00f883a 	mov	r7,r20
    4314:	000ca280 	call	ca28 <__muldf3>
    4318:	9009883a 	mov	r4,r18
    431c:	980b883a 	mov	r5,r19
    4320:	100d883a 	mov	r6,r2
    4324:	180f883a 	mov	r7,r3
    4328:	000d2940 	call	d294 <__subdf3>
    432c:	d9000717 	ldw	r4,28(sp)
    4330:	d9800617 	ldw	r6,24(sp)
    4334:	180b883a 	mov	r5,r3
    4338:	b0c00c04 	addi	r3,r22,48
    433c:	20c00005 	stb	r3,0(r4)
    4340:	25c00044 	addi	r23,r4,1
    4344:	01000044 	movi	r4,1
    4348:	1011883a 	mov	r8,r2
    434c:	2807883a 	mov	r3,r5
    4350:	31003d26 	beq	r6,r4,4448 <_dtoa_r+0x918>
    4354:	000d883a 	mov	r6,zero
    4358:	01d00934 	movhi	r7,16420
    435c:	1009883a 	mov	r4,r2
    4360:	000ca280 	call	ca28 <__muldf3>
    4364:	1009883a 	mov	r4,r2
    4368:	180b883a 	mov	r5,r3
    436c:	000d883a 	mov	r6,zero
    4370:	000f883a 	mov	r7,zero
    4374:	1027883a 	mov	r19,r2
    4378:	182b883a 	mov	r21,r3
    437c:	000c7e40 	call	c7e4 <__eqdf2>
    4380:	103f9926 	beq	r2,zero,41e8 <_dtoa_r+0x6b8>
    4384:	d8c00617 	ldw	r3,24(sp)
    4388:	d9000717 	ldw	r4,28(sp)
    438c:	b825883a 	mov	r18,r23
    4390:	18bfffc4 	addi	r2,r3,-1
    4394:	20ad883a 	add	r22,r4,r2
    4398:	dc000315 	stw	r16,12(sp)
    439c:	00000a06 	br	43c8 <_dtoa_r+0x898>
    43a0:	000ca280 	call	ca28 <__muldf3>
    43a4:	1009883a 	mov	r4,r2
    43a8:	180b883a 	mov	r5,r3
    43ac:	000d883a 	mov	r6,zero
    43b0:	000f883a 	mov	r7,zero
    43b4:	1027883a 	mov	r19,r2
    43b8:	182b883a 	mov	r21,r3
    43bc:	b825883a 	mov	r18,r23
    43c0:	000c7e40 	call	c7e4 <__eqdf2>
    43c4:	10022626 	beq	r2,zero,4c60 <_dtoa_r+0x1130>
    43c8:	880d883a 	mov	r6,r17
    43cc:	a00f883a 	mov	r7,r20
    43d0:	9809883a 	mov	r4,r19
    43d4:	a80b883a 	mov	r5,r21
    43d8:	000be640 	call	be64 <__divdf3>
    43dc:	180b883a 	mov	r5,r3
    43e0:	1009883a 	mov	r4,r2
    43e4:	000db640 	call	db64 <__fixdfsi>
    43e8:	1009883a 	mov	r4,r2
    43ec:	1021883a 	mov	r16,r2
    43f0:	000dbec0 	call	dbec <__floatsidf>
    43f4:	1009883a 	mov	r4,r2
    43f8:	180b883a 	mov	r5,r3
    43fc:	880d883a 	mov	r6,r17
    4400:	a00f883a 	mov	r7,r20
    4404:	000ca280 	call	ca28 <__muldf3>
    4408:	9809883a 	mov	r4,r19
    440c:	a80b883a 	mov	r5,r21
    4410:	100d883a 	mov	r6,r2
    4414:	180f883a 	mov	r7,r3
    4418:	000d2940 	call	d294 <__subdf3>
    441c:	82000c04 	addi	r8,r16,48
    4420:	92000005 	stb	r8,0(r18)
    4424:	1009883a 	mov	r4,r2
    4428:	180b883a 	mov	r5,r3
    442c:	000d883a 	mov	r6,zero
    4430:	01d00934 	movhi	r7,16420
    4434:	1011883a 	mov	r8,r2
    4438:	bdc00044 	addi	r23,r23,1
    443c:	95bfd81e 	bne	r18,r22,43a0 <_dtoa_r+0x870>
    4440:	802d883a 	mov	r22,r16
    4444:	dc000317 	ldw	r16,12(sp)
    4448:	4009883a 	mov	r4,r8
    444c:	180b883a 	mov	r5,r3
    4450:	400d883a 	mov	r6,r8
    4454:	180f883a 	mov	r7,r3
    4458:	000b5c80 	call	b5c8 <__adddf3>
    445c:	8809883a 	mov	r4,r17
    4460:	a00b883a 	mov	r5,r20
    4464:	100d883a 	mov	r6,r2
    4468:	180f883a 	mov	r7,r3
    446c:	1027883a 	mov	r19,r2
    4470:	1825883a 	mov	r18,r3
    4474:	000c9480 	call	c948 <__ledf2>
    4478:	10000816 	blt	r2,zero,449c <_dtoa_r+0x96c>
    447c:	8809883a 	mov	r4,r17
    4480:	a00b883a 	mov	r5,r20
    4484:	980d883a 	mov	r6,r19
    4488:	900f883a 	mov	r7,r18
    448c:	000c7e40 	call	c7e4 <__eqdf2>
    4490:	103f551e 	bne	r2,zero,41e8 <_dtoa_r+0x6b8>
    4494:	b580004c 	andi	r22,r22,1
    4498:	b03f5326 	beq	r22,zero,41e8 <_dtoa_r+0x6b8>
    449c:	bd7fffc3 	ldbu	r21,-1(r23)
    44a0:	b8bfffc4 	addi	r2,r23,-1
    44a4:	1007883a 	mov	r3,r2
    44a8:	01400e44 	movi	r5,57
    44ac:	d9800717 	ldw	r6,28(sp)
    44b0:	00000506 	br	44c8 <_dtoa_r+0x998>
    44b4:	18ffffc4 	addi	r3,r3,-1
    44b8:	30825e26 	beq	r6,r2,4e34 <_dtoa_r+0x1304>
    44bc:	1d400003 	ldbu	r21,0(r3)
    44c0:	102f883a 	mov	r23,r2
    44c4:	10bfffc4 	addi	r2,r2,-1
    44c8:	a9003fcc 	andi	r4,r21,255
    44cc:	2100201c 	xori	r4,r4,128
    44d0:	213fe004 	addi	r4,r4,-128
    44d4:	217ff726 	beq	r4,r5,44b4 <_dtoa_r+0x984>
    44d8:	aa000044 	addi	r8,r21,1
    44dc:	12000005 	stb	r8,0(r2)
    44e0:	003f4106 	br	41e8 <_dtoa_r+0x6b8>
    44e4:	d8c00b17 	ldw	r3,44(sp)
    44e8:	18006726 	beq	r3,zero,4688 <_dtoa_r+0xb58>
    44ec:	d9000317 	ldw	r4,12(sp)
    44f0:	00c00044 	movi	r3,1
    44f4:	19016a0e 	bge	r3,r4,4aa0 <_dtoa_r+0xf70>
    44f8:	d8800617 	ldw	r2,24(sp)
    44fc:	d8c00917 	ldw	r3,36(sp)
    4500:	157fffc4 	addi	r21,r2,-1
    4504:	1d420716 	blt	r3,r21,4d24 <_dtoa_r+0x11f4>
    4508:	1d6bc83a 	sub	r21,r3,r21
    450c:	d8800617 	ldw	r2,24(sp)
    4510:	1002c716 	blt	r2,zero,5030 <_dtoa_r+0x1500>
    4514:	dd000817 	ldw	r20,32(sp)
    4518:	d8800617 	ldw	r2,24(sp)
    451c:	d9800817 	ldw	r6,32(sp)
    4520:	8009883a 	mov	r4,r16
    4524:	01400044 	movi	r5,1
    4528:	308d883a 	add	r6,r6,r2
    452c:	d9800815 	stw	r6,32(sp)
    4530:	b0ad883a 	add	r22,r22,r2
    4534:	00076180 	call	7618 <__i2b>
    4538:	1023883a 	mov	r17,r2
    453c:	a0000826 	beq	r20,zero,4560 <_dtoa_r+0xa30>
    4540:	0580070e 	bge	zero,r22,4560 <_dtoa_r+0xa30>
    4544:	b005883a 	mov	r2,r22
    4548:	a5812016 	blt	r20,r22,49cc <_dtoa_r+0xe9c>
    454c:	d8c00817 	ldw	r3,32(sp)
    4550:	a0a9c83a 	sub	r20,r20,r2
    4554:	b0adc83a 	sub	r22,r22,r2
    4558:	1887c83a 	sub	r3,r3,r2
    455c:	d8c00815 	stw	r3,32(sp)
    4560:	d9000917 	ldw	r4,36(sp)
    4564:	0100140e 	bge	zero,r4,45b8 <_dtoa_r+0xa88>
    4568:	d9800b17 	ldw	r6,44(sp)
    456c:	3001e526 	beq	r6,zero,4d04 <_dtoa_r+0x11d4>
    4570:	05400e0e 	bge	zero,r21,45ac <_dtoa_r+0xa7c>
    4574:	880b883a 	mov	r5,r17
    4578:	8009883a 	mov	r4,r16
    457c:	a80d883a 	mov	r6,r21
    4580:	00078e40 	call	78e4 <__pow5mult>
    4584:	e00d883a 	mov	r6,fp
    4588:	8009883a 	mov	r4,r16
    458c:	100b883a 	mov	r5,r2
    4590:	1023883a 	mov	r17,r2
    4594:	00076540 	call	7654 <__multiply>
    4598:	102f883a 	mov	r23,r2
    459c:	e00b883a 	mov	r5,fp
    45a0:	8009883a 	mov	r4,r16
    45a4:	000728c0 	call	728c <_Bfree>
    45a8:	b839883a 	mov	fp,r23
    45ac:	d8800917 	ldw	r2,36(sp)
    45b0:	154dc83a 	sub	r6,r2,r21
    45b4:	3001281e 	bne	r6,zero,4a58 <_dtoa_r+0xf28>
    45b8:	05c00044 	movi	r23,1
    45bc:	8009883a 	mov	r4,r16
    45c0:	b80b883a 	mov	r5,r23
    45c4:	00076180 	call	7618 <__i2b>
    45c8:	d8c00a17 	ldw	r3,40(sp)
    45cc:	102b883a 	mov	r21,r2
    45d0:	00c0310e 	bge	zero,r3,4698 <_dtoa_r+0xb68>
    45d4:	8009883a 	mov	r4,r16
    45d8:	100b883a 	mov	r5,r2
    45dc:	180d883a 	mov	r6,r3
    45e0:	00078e40 	call	78e4 <__pow5mult>
    45e4:	d9000317 	ldw	r4,12(sp)
    45e8:	102b883a 	mov	r21,r2
    45ec:	b9011f0e 	bge	r23,r4,4a6c <_dtoa_r+0xf3c>
    45f0:	0027883a 	mov	r19,zero
    45f4:	a8800417 	ldw	r2,16(r21)
    45f8:	10800104 	addi	r2,r2,4
    45fc:	1085883a 	add	r2,r2,r2
    4600:	1085883a 	add	r2,r2,r2
    4604:	a885883a 	add	r2,r21,r2
    4608:	11000017 	ldw	r4,0(r2)
    460c:	00075000 	call	7500 <__hi0bits>
    4610:	00c00804 	movi	r3,32
    4614:	1885c83a 	sub	r2,r3,r2
    4618:	00002506 	br	46b0 <_dtoa_r+0xb80>
    461c:	01800044 	movi	r6,1
    4620:	d9800d15 	stw	r6,52(sp)
    4624:	003dec06 	br	3dd8 <_dtoa_r+0x2a8>
    4628:	d8c00817 	ldw	r3,32(sp)
    462c:	d9000517 	ldw	r4,20(sp)
    4630:	d8000a15 	stw	zero,40(sp)
    4634:	1907c83a 	sub	r3,r3,r4
    4638:	010dc83a 	sub	r6,zero,r4
    463c:	d8c00815 	stw	r3,32(sp)
    4640:	d9800915 	stw	r6,36(sp)
    4644:	003ded06 	br	3dfc <_dtoa_r+0x2cc>
    4648:	05adc83a 	sub	r22,zero,r22
    464c:	dd800815 	stw	r22,32(sp)
    4650:	002d883a 	mov	r22,zero
    4654:	003de406 	br	3de8 <_dtoa_r+0x2b8>
    4658:	d9000517 	ldw	r4,20(sp)
    465c:	000dbec0 	call	dbec <__floatsidf>
    4660:	1009883a 	mov	r4,r2
    4664:	180b883a 	mov	r5,r3
    4668:	b00d883a 	mov	r6,r22
    466c:	a80f883a 	mov	r7,r21
    4670:	000c7e40 	call	c7e4 <__eqdf2>
    4674:	103dc726 	beq	r2,zero,3d94 <_dtoa_r+0x264>
    4678:	d8800517 	ldw	r2,20(sp)
    467c:	10bfffc4 	addi	r2,r2,-1
    4680:	d8800515 	stw	r2,20(sp)
    4684:	003dc306 	br	3d94 <_dtoa_r+0x264>
    4688:	dd400917 	ldw	r21,36(sp)
    468c:	dd000817 	ldw	r20,32(sp)
    4690:	0023883a 	mov	r17,zero
    4694:	003fa906 	br	453c <_dtoa_r+0xa0c>
    4698:	d9800317 	ldw	r6,12(sp)
    469c:	b981670e 	bge	r23,r6,4c3c <_dtoa_r+0x110c>
    46a0:	0027883a 	mov	r19,zero
    46a4:	d8c00a17 	ldw	r3,40(sp)
    46a8:	183fd21e 	bne	r3,zero,45f4 <_dtoa_r+0xac4>
    46ac:	00800044 	movi	r2,1
    46b0:	1585883a 	add	r2,r2,r22
    46b4:	108007cc 	andi	r2,r2,31
    46b8:	10005f26 	beq	r2,zero,4838 <_dtoa_r+0xd08>
    46bc:	00c00804 	movi	r3,32
    46c0:	1887c83a 	sub	r3,r3,r2
    46c4:	01000104 	movi	r4,4
    46c8:	20c2dd0e 	bge	r4,r3,5240 <_dtoa_r+0x1710>
    46cc:	d9000817 	ldw	r4,32(sp)
    46d0:	00c00704 	movi	r3,28
    46d4:	1885c83a 	sub	r2,r3,r2
    46d8:	2089883a 	add	r4,r4,r2
    46dc:	d9000815 	stw	r4,32(sp)
    46e0:	a0a9883a 	add	r20,r20,r2
    46e4:	b0ad883a 	add	r22,r22,r2
    46e8:	d8800817 	ldw	r2,32(sp)
    46ec:	0080050e 	bge	zero,r2,4704 <_dtoa_r+0xbd4>
    46f0:	e00b883a 	mov	r5,fp
    46f4:	8009883a 	mov	r4,r16
    46f8:	100d883a 	mov	r6,r2
    46fc:	0007a240 	call	7a24 <__lshift>
    4700:	1039883a 	mov	fp,r2
    4704:	0580050e 	bge	zero,r22,471c <_dtoa_r+0xbec>
    4708:	a80b883a 	mov	r5,r21
    470c:	8009883a 	mov	r4,r16
    4710:	b00d883a 	mov	r6,r22
    4714:	0007a240 	call	7a24 <__lshift>
    4718:	102b883a 	mov	r21,r2
    471c:	d8c00d17 	ldw	r3,52(sp)
    4720:	1801161e 	bne	r3,zero,4b7c <_dtoa_r+0x104c>
    4724:	d8c00617 	ldw	r3,24(sp)
    4728:	00c12d0e 	bge	zero,r3,4be0 <_dtoa_r+0x10b0>
    472c:	d8c00b17 	ldw	r3,44(sp)
    4730:	1800571e 	bne	r3,zero,4890 <_dtoa_r+0xd60>
    4734:	dc800717 	ldw	r18,28(sp)
    4738:	dcc00617 	ldw	r19,24(sp)
    473c:	9029883a 	mov	r20,r18
    4740:	00000206 	br	474c <_dtoa_r+0xc1c>
    4744:	00072b40 	call	72b4 <__multadd>
    4748:	1039883a 	mov	fp,r2
    474c:	e009883a 	mov	r4,fp
    4750:	a80b883a 	mov	r5,r21
    4754:	00039080 	call	3908 <quorem>
    4758:	10800c04 	addi	r2,r2,48
    475c:	90800005 	stb	r2,0(r18)
    4760:	94800044 	addi	r18,r18,1
    4764:	9507c83a 	sub	r3,r18,r20
    4768:	8009883a 	mov	r4,r16
    476c:	e00b883a 	mov	r5,fp
    4770:	01800284 	movi	r6,10
    4774:	000f883a 	mov	r7,zero
    4778:	1cfff216 	blt	r3,r19,4744 <_dtoa_r+0xc14>
    477c:	1011883a 	mov	r8,r2
    4780:	d8800617 	ldw	r2,24(sp)
    4784:	00822e0e 	bge	zero,r2,5040 <_dtoa_r+0x1510>
    4788:	d9000717 	ldw	r4,28(sp)
    478c:	0025883a 	mov	r18,zero
    4790:	20af883a 	add	r23,r4,r2
    4794:	e00b883a 	mov	r5,fp
    4798:	01800044 	movi	r6,1
    479c:	8009883a 	mov	r4,r16
    47a0:	da001715 	stw	r8,92(sp)
    47a4:	0007a240 	call	7a24 <__lshift>
    47a8:	1009883a 	mov	r4,r2
    47ac:	a80b883a 	mov	r5,r21
    47b0:	1039883a 	mov	fp,r2
    47b4:	0007b740 	call	7b74 <__mcmp>
    47b8:	da001717 	ldw	r8,92(sp)
    47bc:	00816e0e 	bge	zero,r2,4d78 <_dtoa_r+0x1248>
    47c0:	b93fffc3 	ldbu	r4,-1(r23)
    47c4:	b8bfffc4 	addi	r2,r23,-1
    47c8:	1007883a 	mov	r3,r2
    47cc:	01800e44 	movi	r6,57
    47d0:	d9c00717 	ldw	r7,28(sp)
    47d4:	00000506 	br	47ec <_dtoa_r+0xcbc>
    47d8:	18ffffc4 	addi	r3,r3,-1
    47dc:	38811926 	beq	r7,r2,4c44 <_dtoa_r+0x1114>
    47e0:	19000003 	ldbu	r4,0(r3)
    47e4:	102f883a 	mov	r23,r2
    47e8:	10bfffc4 	addi	r2,r2,-1
    47ec:	21403fcc 	andi	r5,r4,255
    47f0:	2940201c 	xori	r5,r5,128
    47f4:	297fe004 	addi	r5,r5,-128
    47f8:	29bff726 	beq	r5,r6,47d8 <_dtoa_r+0xca8>
    47fc:	21000044 	addi	r4,r4,1
    4800:	11000005 	stb	r4,0(r2)
    4804:	8009883a 	mov	r4,r16
    4808:	a80b883a 	mov	r5,r21
    480c:	000728c0 	call	728c <_Bfree>
    4810:	883e7526 	beq	r17,zero,41e8 <_dtoa_r+0x6b8>
    4814:	90000426 	beq	r18,zero,4828 <_dtoa_r+0xcf8>
    4818:	94400326 	beq	r18,r17,4828 <_dtoa_r+0xcf8>
    481c:	8009883a 	mov	r4,r16
    4820:	900b883a 	mov	r5,r18
    4824:	000728c0 	call	728c <_Bfree>
    4828:	8009883a 	mov	r4,r16
    482c:	880b883a 	mov	r5,r17
    4830:	000728c0 	call	728c <_Bfree>
    4834:	003e6c06 	br	41e8 <_dtoa_r+0x6b8>
    4838:	00800704 	movi	r2,28
    483c:	d9800817 	ldw	r6,32(sp)
    4840:	a0a9883a 	add	r20,r20,r2
    4844:	b0ad883a 	add	r22,r22,r2
    4848:	308d883a 	add	r6,r6,r2
    484c:	d9800815 	stw	r6,32(sp)
    4850:	003fa506 	br	46e8 <_dtoa_r+0xbb8>
    4854:	013efb84 	movi	r4,-1042
    4858:	246bc83a 	sub	r21,r4,r17
    485c:	9548983a 	sll	r4,r18,r21
    4860:	003d1806 	br	3cc4 <_dtoa_r+0x194>
    4864:	d8000d15 	stw	zero,52(sp)
    4868:	003d5b06 	br	3dd8 <_dtoa_r+0x2a8>
    486c:	880b883a 	mov	r5,r17
    4870:	8009883a 	mov	r4,r16
    4874:	01800284 	movi	r6,10
    4878:	000f883a 	mov	r7,zero
    487c:	00072b40 	call	72b4 <__multadd>
    4880:	1023883a 	mov	r17,r2
    4884:	d8800c17 	ldw	r2,48(sp)
    4888:	0082550e 	bge	zero,r2,51e0 <_dtoa_r+0x16b0>
    488c:	d8800615 	stw	r2,24(sp)
    4890:	0500050e 	bge	zero,r20,48a8 <_dtoa_r+0xd78>
    4894:	880b883a 	mov	r5,r17
    4898:	8009883a 	mov	r4,r16
    489c:	a00d883a 	mov	r6,r20
    48a0:	0007a240 	call	7a24 <__lshift>
    48a4:	1023883a 	mov	r17,r2
    48a8:	98016a1e 	bne	r19,zero,4e54 <_dtoa_r+0x1324>
    48ac:	8829883a 	mov	r20,r17
    48b0:	d9000617 	ldw	r4,24(sp)
    48b4:	dcc00717 	ldw	r19,28(sp)
    48b8:	9480004c 	andi	r18,r18,1
    48bc:	20bfffc4 	addi	r2,r4,-1
    48c0:	9885883a 	add	r2,r19,r2
    48c4:	d8800415 	stw	r2,16(sp)
    48c8:	dc800615 	stw	r18,24(sp)
    48cc:	e009883a 	mov	r4,fp
    48d0:	a80b883a 	mov	r5,r21
    48d4:	00039080 	call	3908 <quorem>
    48d8:	e009883a 	mov	r4,fp
    48dc:	880b883a 	mov	r5,r17
    48e0:	102f883a 	mov	r23,r2
    48e4:	0007b740 	call	7b74 <__mcmp>
    48e8:	8009883a 	mov	r4,r16
    48ec:	a80b883a 	mov	r5,r21
    48f0:	a00d883a 	mov	r6,r20
    48f4:	102d883a 	mov	r22,r2
    48f8:	0007bd40 	call	7bd4 <__mdiff>
    48fc:	1007883a 	mov	r3,r2
    4900:	10800317 	ldw	r2,12(r2)
    4904:	bc800c04 	addi	r18,r23,48
    4908:	1000971e 	bne	r2,zero,4b68 <_dtoa_r+0x1038>
    490c:	180b883a 	mov	r5,r3
    4910:	e009883a 	mov	r4,fp
    4914:	d8c01515 	stw	r3,84(sp)
    4918:	0007b740 	call	7b74 <__mcmp>
    491c:	d8c01517 	ldw	r3,84(sp)
    4920:	8009883a 	mov	r4,r16
    4924:	d8801515 	stw	r2,84(sp)
    4928:	180b883a 	mov	r5,r3
    492c:	000728c0 	call	728c <_Bfree>
    4930:	d8801517 	ldw	r2,84(sp)
    4934:	1000041e 	bne	r2,zero,4948 <_dtoa_r+0xe18>
    4938:	d9800317 	ldw	r6,12(sp)
    493c:	3000021e 	bne	r6,zero,4948 <_dtoa_r+0xe18>
    4940:	d8c00617 	ldw	r3,24(sp)
    4944:	18007626 	beq	r3,zero,4b20 <_dtoa_r+0xff0>
    4948:	b0005b16 	blt	r22,zero,4ab8 <_dtoa_r+0xf88>
    494c:	b000041e 	bne	r22,zero,4960 <_dtoa_r+0xe30>
    4950:	d9000317 	ldw	r4,12(sp)
    4954:	2000021e 	bne	r4,zero,4960 <_dtoa_r+0xe30>
    4958:	d8c00617 	ldw	r3,24(sp)
    495c:	18005626 	beq	r3,zero,4ab8 <_dtoa_r+0xf88>
    4960:	00814d16 	blt	zero,r2,4e98 <_dtoa_r+0x1368>
    4964:	d8c00417 	ldw	r3,16(sp)
    4968:	9d800044 	addi	r22,r19,1
    496c:	9c800005 	stb	r18,0(r19)
    4970:	b02f883a 	mov	r23,r22
    4974:	98c14c26 	beq	r19,r3,4ea8 <_dtoa_r+0x1378>
    4978:	e00b883a 	mov	r5,fp
    497c:	8009883a 	mov	r4,r16
    4980:	01800284 	movi	r6,10
    4984:	000f883a 	mov	r7,zero
    4988:	00072b40 	call	72b4 <__multadd>
    498c:	1039883a 	mov	fp,r2
    4990:	8d006d26 	beq	r17,r20,4b48 <_dtoa_r+0x1018>
    4994:	880b883a 	mov	r5,r17
    4998:	01800284 	movi	r6,10
    499c:	000f883a 	mov	r7,zero
    49a0:	8009883a 	mov	r4,r16
    49a4:	00072b40 	call	72b4 <__multadd>
    49a8:	a00b883a 	mov	r5,r20
    49ac:	8009883a 	mov	r4,r16
    49b0:	01800284 	movi	r6,10
    49b4:	000f883a 	mov	r7,zero
    49b8:	1023883a 	mov	r17,r2
    49bc:	00072b40 	call	72b4 <__multadd>
    49c0:	1029883a 	mov	r20,r2
    49c4:	b027883a 	mov	r19,r22
    49c8:	003fc006 	br	48cc <_dtoa_r+0xd9c>
    49cc:	a005883a 	mov	r2,r20
    49d0:	003ede06 	br	454c <_dtoa_r+0xa1c>
    49d4:	01000044 	movi	r4,1
    49d8:	d9000b15 	stw	r4,44(sp)
    49dc:	d9802217 	ldw	r6,136(sp)
    49e0:	0180dc0e 	bge	zero,r6,4d54 <_dtoa_r+0x1224>
    49e4:	3023883a 	mov	r17,r6
    49e8:	d9800c15 	stw	r6,48(sp)
    49ec:	d9800615 	stw	r6,24(sp)
    49f0:	003d1e06 	br	3e6c <_dtoa_r+0x33c>
    49f4:	d8800617 	ldw	r2,24(sp)
    49f8:	00be3716 	blt	zero,r2,42d8 <_dtoa_r+0x7a8>
    49fc:	1000be1e 	bne	r2,zero,4cf8 <_dtoa_r+0x11c8>
    4a00:	8809883a 	mov	r4,r17
    4a04:	a00b883a 	mov	r5,r20
    4a08:	000d883a 	mov	r6,zero
    4a0c:	01d00534 	movhi	r7,16404
    4a10:	000ca280 	call	ca28 <__muldf3>
    4a14:	1009883a 	mov	r4,r2
    4a18:	180b883a 	mov	r5,r3
    4a1c:	900d883a 	mov	r6,r18
    4a20:	980f883a 	mov	r7,r19
    4a24:	000c8680 	call	c868 <__gedf2>
    4a28:	002b883a 	mov	r21,zero
    4a2c:	0023883a 	mov	r17,zero
    4a30:	10007a16 	blt	r2,zero,4c1c <_dtoa_r+0x10ec>
    4a34:	d9002217 	ldw	r4,136(sp)
    4a38:	ddc00717 	ldw	r23,28(sp)
    4a3c:	0108303a 	nor	r4,zero,r4
    4a40:	d9000515 	stw	r4,20(sp)
    4a44:	8009883a 	mov	r4,r16
    4a48:	a80b883a 	mov	r5,r21
    4a4c:	000728c0 	call	728c <_Bfree>
    4a50:	883f751e 	bne	r17,zero,4828 <_dtoa_r+0xcf8>
    4a54:	003de406 	br	41e8 <_dtoa_r+0x6b8>
    4a58:	e00b883a 	mov	r5,fp
    4a5c:	8009883a 	mov	r4,r16
    4a60:	00078e40 	call	78e4 <__pow5mult>
    4a64:	1039883a 	mov	fp,r2
    4a68:	003ed306 	br	45b8 <_dtoa_r+0xa88>
    4a6c:	903ee01e 	bne	r18,zero,45f0 <_dtoa_r+0xac0>
    4a70:	00800434 	movhi	r2,16
    4a74:	10bfffc4 	addi	r2,r2,-1
    4a78:	9884703a 	and	r2,r19,r2
    4a7c:	103f081e 	bne	r2,zero,46a0 <_dtoa_r+0xb70>
    4a80:	9cdffc2c 	andhi	r19,r19,32752
    4a84:	983f0626 	beq	r19,zero,46a0 <_dtoa_r+0xb70>
    4a88:	d8800817 	ldw	r2,32(sp)
    4a8c:	b5800044 	addi	r22,r22,1
    4a90:	04c00044 	movi	r19,1
    4a94:	10800044 	addi	r2,r2,1
    4a98:	d8800815 	stw	r2,32(sp)
    4a9c:	003f0106 	br	46a4 <_dtoa_r+0xb74>
    4aa0:	d9800f17 	ldw	r6,60(sp)
    4aa4:	30016826 	beq	r6,zero,5048 <_dtoa_r+0x1518>
    4aa8:	10810cc4 	addi	r2,r2,1075
    4aac:	dd400917 	ldw	r21,36(sp)
    4ab0:	dd000817 	ldw	r20,32(sp)
    4ab4:	003e9906 	br	451c <_dtoa_r+0x9ec>
    4ab8:	9011883a 	mov	r8,r18
    4abc:	4007883a 	mov	r3,r8
    4ac0:	e02d883a 	mov	r22,fp
    4ac4:	0080100e 	bge	zero,r2,4b08 <_dtoa_r+0xfd8>
    4ac8:	01800044 	movi	r6,1
    4acc:	8009883a 	mov	r4,r16
    4ad0:	e00b883a 	mov	r5,fp
    4ad4:	da001515 	stw	r8,84(sp)
    4ad8:	da001715 	stw	r8,92(sp)
    4adc:	0007a240 	call	7a24 <__lshift>
    4ae0:	1009883a 	mov	r4,r2
    4ae4:	a80b883a 	mov	r5,r21
    4ae8:	102d883a 	mov	r22,r2
    4aec:	0007b740 	call	7b74 <__mcmp>
    4af0:	d8c01517 	ldw	r3,84(sp)
    4af4:	da001717 	ldw	r8,92(sp)
    4af8:	0081a50e 	bge	zero,r2,5190 <_dtoa_r+0x1660>
    4afc:	00800e44 	movi	r2,57
    4b00:	40817b26 	beq	r8,r2,50f0 <_dtoa_r+0x15c0>
    4b04:	40c00044 	addi	r3,r8,1
    4b08:	8825883a 	mov	r18,r17
    4b0c:	9dc00044 	addi	r23,r19,1
    4b10:	98c00005 	stb	r3,0(r19)
    4b14:	a023883a 	mov	r17,r20
    4b18:	b039883a 	mov	fp,r22
    4b1c:	003f3906 	br	4804 <_dtoa_r+0xcd4>
    4b20:	00800e44 	movi	r2,57
    4b24:	9011883a 	mov	r8,r18
    4b28:	90817226 	beq	r18,r2,50f4 <_dtoa_r+0x15c4>
    4b2c:	0580010e 	bge	zero,r22,4b34 <_dtoa_r+0x1004>
    4b30:	ba000c44 	addi	r8,r23,49
    4b34:	8825883a 	mov	r18,r17
    4b38:	9dc00044 	addi	r23,r19,1
    4b3c:	9a000005 	stb	r8,0(r19)
    4b40:	a023883a 	mov	r17,r20
    4b44:	003f2f06 	br	4804 <_dtoa_r+0xcd4>
    4b48:	880b883a 	mov	r5,r17
    4b4c:	8009883a 	mov	r4,r16
    4b50:	01800284 	movi	r6,10
    4b54:	000f883a 	mov	r7,zero
    4b58:	00072b40 	call	72b4 <__multadd>
    4b5c:	1023883a 	mov	r17,r2
    4b60:	1029883a 	mov	r20,r2
    4b64:	003f9706 	br	49c4 <_dtoa_r+0xe94>
    4b68:	8009883a 	mov	r4,r16
    4b6c:	180b883a 	mov	r5,r3
    4b70:	000728c0 	call	728c <_Bfree>
    4b74:	00800044 	movi	r2,1
    4b78:	003f7306 	br	4948 <_dtoa_r+0xe18>
    4b7c:	e009883a 	mov	r4,fp
    4b80:	a80b883a 	mov	r5,r21
    4b84:	0007b740 	call	7b74 <__mcmp>
    4b88:	103ee60e 	bge	r2,zero,4724 <_dtoa_r+0xbf4>
    4b8c:	8009883a 	mov	r4,r16
    4b90:	e00b883a 	mov	r5,fp
    4b94:	01800284 	movi	r6,10
    4b98:	000f883a 	mov	r7,zero
    4b9c:	00072b40 	call	72b4 <__multadd>
    4ba0:	d9000517 	ldw	r4,20(sp)
    4ba4:	d9800b17 	ldw	r6,44(sp)
    4ba8:	1039883a 	mov	fp,r2
    4bac:	213fffc4 	addi	r4,r4,-1
    4bb0:	d9000515 	stw	r4,20(sp)
    4bb4:	303f2d1e 	bne	r6,zero,486c <_dtoa_r+0xd3c>
    4bb8:	d9000c17 	ldw	r4,48(sp)
    4bbc:	0101780e 	bge	zero,r4,51a0 <_dtoa_r+0x1670>
    4bc0:	d9000615 	stw	r4,24(sp)
    4bc4:	003edb06 	br	4734 <_dtoa_r+0xc04>
    4bc8:	00800084 	movi	r2,2
    4bcc:	30818e1e 	bne	r6,r2,5208 <_dtoa_r+0x16d8>
    4bd0:	d8000b15 	stw	zero,44(sp)
    4bd4:	003f8106 	br	49dc <_dtoa_r+0xeac>
    4bd8:	d8800717 	ldw	r2,28(sp)
    4bdc:	003c0306 	br	3bec <_dtoa_r+0xbc>
    4be0:	d9000317 	ldw	r4,12(sp)
    4be4:	00800084 	movi	r2,2
    4be8:	113ed00e 	bge	r2,r4,472c <_dtoa_r+0xbfc>
    4bec:	d8c00617 	ldw	r3,24(sp)
    4bf0:	183f901e 	bne	r3,zero,4a34 <_dtoa_r+0xf04>
    4bf4:	a80b883a 	mov	r5,r21
    4bf8:	8009883a 	mov	r4,r16
    4bfc:	01800144 	movi	r6,5
    4c00:	000f883a 	mov	r7,zero
    4c04:	00072b40 	call	72b4 <__multadd>
    4c08:	e009883a 	mov	r4,fp
    4c0c:	100b883a 	mov	r5,r2
    4c10:	102b883a 	mov	r21,r2
    4c14:	0007b740 	call	7b74 <__mcmp>
    4c18:	00bf860e 	bge	zero,r2,4a34 <_dtoa_r+0xf04>
    4c1c:	d9800717 	ldw	r6,28(sp)
    4c20:	00800c44 	movi	r2,49
    4c24:	30800005 	stb	r2,0(r6)
    4c28:	d8800517 	ldw	r2,20(sp)
    4c2c:	35c00044 	addi	r23,r6,1
    4c30:	10800044 	addi	r2,r2,1
    4c34:	d8800515 	stw	r2,20(sp)
    4c38:	003f8206 	br	4a44 <_dtoa_r+0xf14>
    4c3c:	903e981e 	bne	r18,zero,46a0 <_dtoa_r+0xb70>
    4c40:	003f8b06 	br	4a70 <_dtoa_r+0xf40>
    4c44:	d9800517 	ldw	r6,20(sp)
    4c48:	d8c00717 	ldw	r3,28(sp)
    4c4c:	00800c44 	movi	r2,49
    4c50:	31800044 	addi	r6,r6,1
    4c54:	d9800515 	stw	r6,20(sp)
    4c58:	18800005 	stb	r2,0(r3)
    4c5c:	003ee906 	br	4804 <_dtoa_r+0xcd4>
    4c60:	dc000317 	ldw	r16,12(sp)
    4c64:	003d6006 	br	41e8 <_dtoa_r+0x6b8>
    4c68:	8809883a 	mov	r4,r17
    4c6c:	000dbec0 	call	dbec <__floatsidf>
    4c70:	a009883a 	mov	r4,r20
    4c74:	a80b883a 	mov	r5,r21
    4c78:	100d883a 	mov	r6,r2
    4c7c:	180f883a 	mov	r7,r3
    4c80:	000ca280 	call	ca28 <__muldf3>
    4c84:	1009883a 	mov	r4,r2
    4c88:	180b883a 	mov	r5,r3
    4c8c:	000d883a 	mov	r6,zero
    4c90:	01d00734 	movhi	r7,16412
    4c94:	000b5c80 	call	b5c8 <__adddf3>
    4c98:	1023883a 	mov	r17,r2
    4c9c:	00bf3034 	movhi	r2,64704
    4ca0:	1885883a 	add	r2,r3,r2
    4ca4:	d8800e15 	stw	r2,56(sp)
    4ca8:	a009883a 	mov	r4,r20
    4cac:	a80b883a 	mov	r5,r21
    4cb0:	000d883a 	mov	r6,zero
    4cb4:	01d00534 	movhi	r7,16404
    4cb8:	000d2940 	call	d294 <__subdf3>
    4cbc:	d9c00e17 	ldw	r7,56(sp)
    4cc0:	1009883a 	mov	r4,r2
    4cc4:	180b883a 	mov	r5,r3
    4cc8:	880d883a 	mov	r6,r17
    4ccc:	102b883a 	mov	r21,r2
    4cd0:	1829883a 	mov	r20,r3
    4cd4:	000c8680 	call	c868 <__gedf2>
    4cd8:	00807716 	blt	zero,r2,4eb8 <_dtoa_r+0x1388>
    4cdc:	d8800e17 	ldw	r2,56(sp)
    4ce0:	a809883a 	mov	r4,r21
    4ce4:	a00b883a 	mov	r5,r20
    4ce8:	11e0003c 	xorhi	r7,r2,32768
    4cec:	880d883a 	mov	r6,r17
    4cf0:	000c9480 	call	c948 <__ledf2>
    4cf4:	103d6b0e 	bge	r2,zero,42a4 <_dtoa_r+0x774>
    4cf8:	002b883a 	mov	r21,zero
    4cfc:	0023883a 	mov	r17,zero
    4d00:	003f4c06 	br	4a34 <_dtoa_r+0xf04>
    4d04:	d9800917 	ldw	r6,36(sp)
    4d08:	e00b883a 	mov	r5,fp
    4d0c:	8009883a 	mov	r4,r16
    4d10:	00078e40 	call	78e4 <__pow5mult>
    4d14:	1039883a 	mov	fp,r2
    4d18:	003e2706 	br	45b8 <_dtoa_r+0xa88>
    4d1c:	d8000b15 	stw	zero,44(sp)
    4d20:	003c4906 	br	3e48 <_dtoa_r+0x318>
    4d24:	d9000917 	ldw	r4,36(sp)
    4d28:	d9800a17 	ldw	r6,40(sp)
    4d2c:	dd400915 	stw	r21,36(sp)
    4d30:	a905c83a 	sub	r2,r21,r4
    4d34:	308d883a 	add	r6,r6,r2
    4d38:	d9800a15 	stw	r6,40(sp)
    4d3c:	002b883a 	mov	r21,zero
    4d40:	003df206 	br	450c <_dtoa_r+0x9dc>
    4d44:	dc800e15 	stw	r18,56(sp)
    4d48:	982b883a 	mov	r21,r19
    4d4c:	04400084 	movi	r17,2
    4d50:	003c7406 	br	3f24 <_dtoa_r+0x3f4>
    4d54:	04400044 	movi	r17,1
    4d58:	dc400c15 	stw	r17,48(sp)
    4d5c:	dc400615 	stw	r17,24(sp)
    4d60:	dc402215 	stw	r17,136(sp)
    4d64:	80001115 	stw	zero,68(r16)
    4d68:	000b883a 	mov	r5,zero
    4d6c:	003c4a06 	br	3e98 <_dtoa_r+0x368>
    4d70:	3023883a 	mov	r17,r6
    4d74:	003ffb06 	br	4d64 <_dtoa_r+0x1234>
    4d78:	1000021e 	bne	r2,zero,4d84 <_dtoa_r+0x1254>
    4d7c:	4200004c 	andi	r8,r8,1
    4d80:	403e8f1e 	bne	r8,zero,47c0 <_dtoa_r+0xc90>
    4d84:	01000c04 	movi	r4,48
    4d88:	00000106 	br	4d90 <_dtoa_r+0x1260>
    4d8c:	102f883a 	mov	r23,r2
    4d90:	b8bfffc4 	addi	r2,r23,-1
    4d94:	10c00007 	ldb	r3,0(r2)
    4d98:	193ffc26 	beq	r3,r4,4d8c <_dtoa_r+0x125c>
    4d9c:	003e9906 	br	4804 <_dtoa_r+0xcd4>
    4da0:	d9000517 	ldw	r4,20(sp)
    4da4:	012fc83a 	sub	r23,zero,r4
    4da8:	b800ad26 	beq	r23,zero,5060 <_dtoa_r+0x1530>
    4dac:	b88003cc 	andi	r2,r23,15
    4db0:	100490fa 	slli	r2,r2,3
    4db4:	00c00074 	movhi	r3,1
    4db8:	18c8ff04 	addi	r3,r3,9212
    4dbc:	1885883a 	add	r2,r3,r2
    4dc0:	11800017 	ldw	r6,0(r2)
    4dc4:	11c00117 	ldw	r7,4(r2)
    4dc8:	b82fd13a 	srai	r23,r23,4
    4dcc:	9009883a 	mov	r4,r18
    4dd0:	980b883a 	mov	r5,r19
    4dd4:	000ca280 	call	ca28 <__muldf3>
    4dd8:	1029883a 	mov	r20,r2
    4ddc:	182b883a 	mov	r21,r3
    4de0:	b800f426 	beq	r23,zero,51b4 <_dtoa_r+0x1684>
    4de4:	02000074 	movhi	r8,1
    4de8:	4208f504 	addi	r8,r8,9172
    4dec:	8029883a 	mov	r20,r16
    4df0:	04400084 	movi	r17,2
    4df4:	4021883a 	mov	r16,r8
    4df8:	b980004c 	andi	r6,r23,1
    4dfc:	1009883a 	mov	r4,r2
    4e00:	b82fd07a 	srai	r23,r23,1
    4e04:	180b883a 	mov	r5,r3
    4e08:	30000426 	beq	r6,zero,4e1c <_dtoa_r+0x12ec>
    4e0c:	81800017 	ldw	r6,0(r16)
    4e10:	81c00117 	ldw	r7,4(r16)
    4e14:	8c400044 	addi	r17,r17,1
    4e18:	000ca280 	call	ca28 <__muldf3>
    4e1c:	84000204 	addi	r16,r16,8
    4e20:	b83ff51e 	bne	r23,zero,4df8 <_dtoa_r+0x12c8>
    4e24:	a021883a 	mov	r16,r20
    4e28:	182b883a 	mov	r21,r3
    4e2c:	1029883a 	mov	r20,r2
    4e30:	003c5506 	br	3f88 <_dtoa_r+0x458>
    4e34:	d9800517 	ldw	r6,20(sp)
    4e38:	d9000717 	ldw	r4,28(sp)
    4e3c:	00c00c04 	movi	r3,48
    4e40:	31800044 	addi	r6,r6,1
    4e44:	d9800515 	stw	r6,20(sp)
    4e48:	20c00005 	stb	r3,0(r4)
    4e4c:	02000c44 	movi	r8,49
    4e50:	003da206 	br	44dc <_dtoa_r+0x9ac>
    4e54:	89400117 	ldw	r5,4(r17)
    4e58:	8009883a 	mov	r4,r16
    4e5c:	00071e40 	call	71e4 <_Balloc>
    4e60:	89800417 	ldw	r6,16(r17)
    4e64:	11000304 	addi	r4,r2,12
    4e68:	89400304 	addi	r5,r17,12
    4e6c:	31800084 	addi	r6,r6,2
    4e70:	318d883a 	add	r6,r6,r6
    4e74:	318d883a 	add	r6,r6,r6
    4e78:	1027883a 	mov	r19,r2
    4e7c:	0006e2c0 	call	6e2c <memcpy>
    4e80:	8009883a 	mov	r4,r16
    4e84:	980b883a 	mov	r5,r19
    4e88:	01800044 	movi	r6,1
    4e8c:	0007a240 	call	7a24 <__lshift>
    4e90:	1029883a 	mov	r20,r2
    4e94:	003e8606 	br	48b0 <_dtoa_r+0xd80>
    4e98:	00800e44 	movi	r2,57
    4e9c:	90809526 	beq	r18,r2,50f4 <_dtoa_r+0x15c4>
    4ea0:	92000044 	addi	r8,r18,1
    4ea4:	003f2306 	br	4b34 <_dtoa_r+0x1004>
    4ea8:	9011883a 	mov	r8,r18
    4eac:	8825883a 	mov	r18,r17
    4eb0:	a023883a 	mov	r17,r20
    4eb4:	003e3706 	br	4794 <_dtoa_r+0xc64>
    4eb8:	002b883a 	mov	r21,zero
    4ebc:	0023883a 	mov	r17,zero
    4ec0:	003f5606 	br	4c1c <_dtoa_r+0x10ec>
    4ec4:	51bfffc4 	addi	r6,r10,-1
    4ec8:	300490fa 	slli	r2,r6,3
    4ecc:	00c00074 	movhi	r3,1
    4ed0:	18c8ff04 	addi	r3,r3,9212
    4ed4:	1885883a 	add	r2,r3,r2
    4ed8:	d9c00e17 	ldw	r7,56(sp)
    4edc:	11000017 	ldw	r4,0(r2)
    4ee0:	11400117 	ldw	r5,4(r2)
    4ee4:	d8800717 	ldw	r2,28(sp)
    4ee8:	d9801015 	stw	r6,64(sp)
    4eec:	880d883a 	mov	r6,r17
    4ef0:	da801615 	stw	r10,88(sp)
    4ef4:	15c00044 	addi	r23,r2,1
    4ef8:	000ca280 	call	ca28 <__muldf3>
    4efc:	a80b883a 	mov	r5,r21
    4f00:	a009883a 	mov	r4,r20
    4f04:	d8c01115 	stw	r3,68(sp)
    4f08:	d8800e15 	stw	r2,56(sp)
    4f0c:	000db640 	call	db64 <__fixdfsi>
    4f10:	1009883a 	mov	r4,r2
    4f14:	1023883a 	mov	r17,r2
    4f18:	000dbec0 	call	dbec <__floatsidf>
    4f1c:	a009883a 	mov	r4,r20
    4f20:	a80b883a 	mov	r5,r21
    4f24:	100d883a 	mov	r6,r2
    4f28:	180f883a 	mov	r7,r3
    4f2c:	000d2940 	call	d294 <__subdf3>
    4f30:	1813883a 	mov	r9,r3
    4f34:	d8c00717 	ldw	r3,28(sp)
    4f38:	8c400c04 	addi	r17,r17,48
    4f3c:	1011883a 	mov	r8,r2
    4f40:	1c400005 	stb	r17,0(r3)
    4f44:	da801617 	ldw	r10,88(sp)
    4f48:	00800044 	movi	r2,1
    4f4c:	50802326 	beq	r10,r2,4fdc <_dtoa_r+0x14ac>
    4f50:	d8800717 	ldw	r2,28(sp)
    4f54:	b82b883a 	mov	r21,r23
    4f58:	dc001315 	stw	r16,76(sp)
    4f5c:	12a9883a 	add	r20,r2,r10
    4f60:	4807883a 	mov	r3,r9
    4f64:	4005883a 	mov	r2,r8
    4f68:	dc801415 	stw	r18,80(sp)
    4f6c:	000d883a 	mov	r6,zero
    4f70:	01d00934 	movhi	r7,16420
    4f74:	1009883a 	mov	r4,r2
    4f78:	180b883a 	mov	r5,r3
    4f7c:	000ca280 	call	ca28 <__muldf3>
    4f80:	180b883a 	mov	r5,r3
    4f84:	1009883a 	mov	r4,r2
    4f88:	1821883a 	mov	r16,r3
    4f8c:	1025883a 	mov	r18,r2
    4f90:	000db640 	call	db64 <__fixdfsi>
    4f94:	1009883a 	mov	r4,r2
    4f98:	1023883a 	mov	r17,r2
    4f9c:	000dbec0 	call	dbec <__floatsidf>
    4fa0:	9009883a 	mov	r4,r18
    4fa4:	800b883a 	mov	r5,r16
    4fa8:	100d883a 	mov	r6,r2
    4fac:	180f883a 	mov	r7,r3
    4fb0:	8c400c04 	addi	r17,r17,48
    4fb4:	000d2940 	call	d294 <__subdf3>
    4fb8:	ad400044 	addi	r21,r21,1
    4fbc:	ac7fffc5 	stb	r17,-1(r21)
    4fc0:	ad3fea1e 	bne	r21,r20,4f6c <_dtoa_r+0x143c>
    4fc4:	1813883a 	mov	r9,r3
    4fc8:	d8c01017 	ldw	r3,64(sp)
    4fcc:	dc001317 	ldw	r16,76(sp)
    4fd0:	dc801417 	ldw	r18,80(sp)
    4fd4:	1011883a 	mov	r8,r2
    4fd8:	b8ef883a 	add	r23,r23,r3
    4fdc:	d9000e17 	ldw	r4,56(sp)
    4fe0:	d9401117 	ldw	r5,68(sp)
    4fe4:	000d883a 	mov	r6,zero
    4fe8:	01cff834 	movhi	r7,16352
    4fec:	da001715 	stw	r8,92(sp)
    4ff0:	da401515 	stw	r9,84(sp)
    4ff4:	000b5c80 	call	b5c8 <__adddf3>
    4ff8:	da001717 	ldw	r8,92(sp)
    4ffc:	da401517 	ldw	r9,84(sp)
    5000:	1009883a 	mov	r4,r2
    5004:	400d883a 	mov	r6,r8
    5008:	480f883a 	mov	r7,r9
    500c:	180b883a 	mov	r5,r3
    5010:	000c9480 	call	c948 <__ledf2>
    5014:	da001717 	ldw	r8,92(sp)
    5018:	da401517 	ldw	r9,84(sp)
    501c:	10003b0e 	bge	r2,zero,510c <_dtoa_r+0x15dc>
    5020:	d9001217 	ldw	r4,72(sp)
    5024:	bd7fffc3 	ldbu	r21,-1(r23)
    5028:	d9000515 	stw	r4,20(sp)
    502c:	003d1c06 	br	44a0 <_dtoa_r+0x970>
    5030:	d8c00817 	ldw	r3,32(sp)
    5034:	18a9c83a 	sub	r20,r3,r2
    5038:	0005883a 	mov	r2,zero
    503c:	003d3706 	br	451c <_dtoa_r+0x9ec>
    5040:	00800044 	movi	r2,1
    5044:	003dd006 	br	4788 <_dtoa_r+0xc58>
    5048:	d8c00217 	ldw	r3,8(sp)
    504c:	00800d84 	movi	r2,54
    5050:	dd400917 	ldw	r21,36(sp)
    5054:	10c5c83a 	sub	r2,r2,r3
    5058:	dd000817 	ldw	r20,32(sp)
    505c:	003d2f06 	br	451c <_dtoa_r+0x9ec>
    5060:	9029883a 	mov	r20,r18
    5064:	982b883a 	mov	r21,r19
    5068:	04400084 	movi	r17,2
    506c:	003bc606 	br	3f88 <_dtoa_r+0x458>
    5070:	d8800617 	ldw	r2,24(sp)
    5074:	103efc26 	beq	r2,zero,4c68 <_dtoa_r+0x1138>
    5078:	d8c00c17 	ldw	r3,48(sp)
    507c:	00fc890e 	bge	zero,r3,42a4 <_dtoa_r+0x774>
    5080:	a80b883a 	mov	r5,r21
    5084:	a009883a 	mov	r4,r20
    5088:	000d883a 	mov	r6,zero
    508c:	01d00934 	movhi	r7,16420
    5090:	000ca280 	call	ca28 <__muldf3>
    5094:	89000044 	addi	r4,r17,1
    5098:	1029883a 	mov	r20,r2
    509c:	182b883a 	mov	r21,r3
    50a0:	000dbec0 	call	dbec <__floatsidf>
    50a4:	a009883a 	mov	r4,r20
    50a8:	a80b883a 	mov	r5,r21
    50ac:	100d883a 	mov	r6,r2
    50b0:	180f883a 	mov	r7,r3
    50b4:	000ca280 	call	ca28 <__muldf3>
    50b8:	1009883a 	mov	r4,r2
    50bc:	180b883a 	mov	r5,r3
    50c0:	000d883a 	mov	r6,zero
    50c4:	01d00734 	movhi	r7,16412
    50c8:	000b5c80 	call	b5c8 <__adddf3>
    50cc:	d9000517 	ldw	r4,20(sp)
    50d0:	1023883a 	mov	r17,r2
    50d4:	00bf3034 	movhi	r2,64704
    50d8:	213fffc4 	addi	r4,r4,-1
    50dc:	1885883a 	add	r2,r3,r2
    50e0:	d9001215 	stw	r4,72(sp)
    50e4:	d8800e15 	stw	r2,56(sp)
    50e8:	da800c17 	ldw	r10,48(sp)
    50ec:	003bc306 	br	3ffc <_dtoa_r+0x4cc>
    50f0:	b039883a 	mov	fp,r22
    50f4:	01000e44 	movi	r4,57
    50f8:	8825883a 	mov	r18,r17
    50fc:	9dc00044 	addi	r23,r19,1
    5100:	99000005 	stb	r4,0(r19)
    5104:	a023883a 	mov	r17,r20
    5108:	003dae06 	br	47c4 <_dtoa_r+0xc94>
    510c:	d9800e17 	ldw	r6,56(sp)
    5110:	d9c01117 	ldw	r7,68(sp)
    5114:	0009883a 	mov	r4,zero
    5118:	014ff834 	movhi	r5,16352
    511c:	da001715 	stw	r8,92(sp)
    5120:	da401515 	stw	r9,84(sp)
    5124:	000d2940 	call	d294 <__subdf3>
    5128:	da001717 	ldw	r8,92(sp)
    512c:	da401517 	ldw	r9,84(sp)
    5130:	1009883a 	mov	r4,r2
    5134:	180b883a 	mov	r5,r3
    5138:	400d883a 	mov	r6,r8
    513c:	480f883a 	mov	r7,r9
    5140:	000c8680 	call	c868 <__gedf2>
    5144:	00bc570e 	bge	zero,r2,42a4 <_dtoa_r+0x774>
    5148:	01000c04 	movi	r4,48
    514c:	00000106 	br	5154 <_dtoa_r+0x1624>
    5150:	102f883a 	mov	r23,r2
    5154:	b8bfffc4 	addi	r2,r23,-1
    5158:	10c00007 	ldb	r3,0(r2)
    515c:	193ffc26 	beq	r3,r4,5150 <_dtoa_r+0x1620>
    5160:	d9801217 	ldw	r6,72(sp)
    5164:	d9800515 	stw	r6,20(sp)
    5168:	003c1f06 	br	41e8 <_dtoa_r+0x6b8>
    516c:	d8801217 	ldw	r2,72(sp)
    5170:	dc001117 	ldw	r16,68(sp)
    5174:	d8800515 	stw	r2,20(sp)
    5178:	003cc906 	br	44a0 <_dtoa_r+0x970>
    517c:	dd801317 	ldw	r22,76(sp)
    5180:	dc001117 	ldw	r16,68(sp)
    5184:	dcc01417 	ldw	r19,80(sp)
    5188:	dc801017 	ldw	r18,64(sp)
    518c:	003c4506 	br	42a4 <_dtoa_r+0x774>
    5190:	103e5d1e 	bne	r2,zero,4b08 <_dtoa_r+0xfd8>
    5194:	4080004c 	andi	r2,r8,1
    5198:	103e5b26 	beq	r2,zero,4b08 <_dtoa_r+0xfd8>
    519c:	003e5706 	br	4afc <_dtoa_r+0xfcc>
    51a0:	d8c00317 	ldw	r3,12(sp)
    51a4:	00800084 	movi	r2,2
    51a8:	10c00a16 	blt	r2,r3,51d4 <_dtoa_r+0x16a4>
    51ac:	d9000c17 	ldw	r4,48(sp)
    51b0:	003e8306 	br	4bc0 <_dtoa_r+0x1090>
    51b4:	04400084 	movi	r17,2
    51b8:	003b7306 	br	3f88 <_dtoa_r+0x458>
    51bc:	d9801217 	ldw	r6,72(sp)
    51c0:	d9800515 	stw	r6,20(sp)
    51c4:	003cb606 	br	44a0 <_dtoa_r+0x970>
    51c8:	d9001217 	ldw	r4,72(sp)
    51cc:	d9000515 	stw	r4,20(sp)
    51d0:	003c0506 	br	41e8 <_dtoa_r+0x6b8>
    51d4:	d9800c17 	ldw	r6,48(sp)
    51d8:	d9800615 	stw	r6,24(sp)
    51dc:	003e8306 	br	4bec <_dtoa_r+0x10bc>
    51e0:	d9800317 	ldw	r6,12(sp)
    51e4:	00800084 	movi	r2,2
    51e8:	11800216 	blt	r2,r6,51f4 <_dtoa_r+0x16c4>
    51ec:	d8800c17 	ldw	r2,48(sp)
    51f0:	003da606 	br	488c <_dtoa_r+0xd5c>
    51f4:	d8800c17 	ldw	r2,48(sp)
    51f8:	d8800615 	stw	r2,24(sp)
    51fc:	003e7b06 	br	4bec <_dtoa_r+0x10bc>
    5200:	05000044 	movi	r20,1
    5204:	003b0506 	br	3e1c <_dtoa_r+0x2ec>
    5208:	8009883a 	mov	r4,r16
    520c:	80001115 	stw	zero,68(r16)
    5210:	000b883a 	mov	r5,zero
    5214:	00071e40 	call	71e4 <_Balloc>
    5218:	d8800715 	stw	r2,28(sp)
    521c:	d8c00717 	ldw	r3,28(sp)
    5220:	00bfffc4 	movi	r2,-1
    5224:	01000044 	movi	r4,1
    5228:	d8800c15 	stw	r2,48(sp)
    522c:	80c01015 	stw	r3,64(r16)
    5230:	d9000b15 	stw	r4,44(sp)
    5234:	d8800615 	stw	r2,24(sp)
    5238:	d8002215 	stw	zero,136(sp)
    523c:	003c1906 	br	42a4 <_dtoa_r+0x774>
    5240:	193d2926 	beq	r3,r4,46e8 <_dtoa_r+0xbb8>
    5244:	00c00f04 	movi	r3,60
    5248:	1885c83a 	sub	r2,r3,r2
    524c:	003d7b06 	br	483c <_dtoa_r+0xd0c>
    5250:	000b883a 	mov	r5,zero
    5254:	003b1006 	br	3e98 <_dtoa_r+0x368>

00005258 <__sflush_r>:
    5258:	2880030b 	ldhu	r2,12(r5)
    525c:	defffb04 	addi	sp,sp,-20
    5260:	dcc00315 	stw	r19,12(sp)
    5264:	dc400115 	stw	r17,4(sp)
    5268:	dfc00415 	stw	ra,16(sp)
    526c:	dc800215 	stw	r18,8(sp)
    5270:	dc000015 	stw	r16,0(sp)
    5274:	10c0020c 	andi	r3,r2,8
    5278:	2823883a 	mov	r17,r5
    527c:	2027883a 	mov	r19,r4
    5280:	1800311e 	bne	r3,zero,5348 <__sflush_r+0xf0>
    5284:	28c00117 	ldw	r3,4(r5)
    5288:	10820014 	ori	r2,r2,2048
    528c:	2880030d 	sth	r2,12(r5)
    5290:	00c04b0e 	bge	zero,r3,53c0 <__sflush_r+0x168>
    5294:	8a000a17 	ldw	r8,40(r17)
    5298:	40002326 	beq	r8,zero,5328 <__sflush_r+0xd0>
    529c:	9c000017 	ldw	r16,0(r19)
    52a0:	10c4000c 	andi	r3,r2,4096
    52a4:	98000015 	stw	zero,0(r19)
    52a8:	18004826 	beq	r3,zero,53cc <__sflush_r+0x174>
    52ac:	89801417 	ldw	r6,80(r17)
    52b0:	10c0010c 	andi	r3,r2,4
    52b4:	18000626 	beq	r3,zero,52d0 <__sflush_r+0x78>
    52b8:	88c00117 	ldw	r3,4(r17)
    52bc:	88800c17 	ldw	r2,48(r17)
    52c0:	30cdc83a 	sub	r6,r6,r3
    52c4:	10000226 	beq	r2,zero,52d0 <__sflush_r+0x78>
    52c8:	88800f17 	ldw	r2,60(r17)
    52cc:	308dc83a 	sub	r6,r6,r2
    52d0:	89400717 	ldw	r5,28(r17)
    52d4:	9809883a 	mov	r4,r19
    52d8:	000f883a 	mov	r7,zero
    52dc:	403ee83a 	callr	r8
    52e0:	00ffffc4 	movi	r3,-1
    52e4:	10c04426 	beq	r2,r3,53f8 <__sflush_r+0x1a0>
    52e8:	88c0030b 	ldhu	r3,12(r17)
    52ec:	89000417 	ldw	r4,16(r17)
    52f0:	88000115 	stw	zero,4(r17)
    52f4:	197dffcc 	andi	r5,r3,63487
    52f8:	8940030d 	sth	r5,12(r17)
    52fc:	89000015 	stw	r4,0(r17)
    5300:	18c4000c 	andi	r3,r3,4096
    5304:	18002c1e 	bne	r3,zero,53b8 <__sflush_r+0x160>
    5308:	89400c17 	ldw	r5,48(r17)
    530c:	9c000015 	stw	r16,0(r19)
    5310:	28000526 	beq	r5,zero,5328 <__sflush_r+0xd0>
    5314:	88801004 	addi	r2,r17,64
    5318:	28800226 	beq	r5,r2,5324 <__sflush_r+0xcc>
    531c:	9809883a 	mov	r4,r19
    5320:	00059c00 	call	59c0 <_free_r>
    5324:	88000c15 	stw	zero,48(r17)
    5328:	0005883a 	mov	r2,zero
    532c:	dfc00417 	ldw	ra,16(sp)
    5330:	dcc00317 	ldw	r19,12(sp)
    5334:	dc800217 	ldw	r18,8(sp)
    5338:	dc400117 	ldw	r17,4(sp)
    533c:	dc000017 	ldw	r16,0(sp)
    5340:	dec00504 	addi	sp,sp,20
    5344:	f800283a 	ret
    5348:	2c800417 	ldw	r18,16(r5)
    534c:	903ff626 	beq	r18,zero,5328 <__sflush_r+0xd0>
    5350:	2c000017 	ldw	r16,0(r5)
    5354:	108000cc 	andi	r2,r2,3
    5358:	2c800015 	stw	r18,0(r5)
    535c:	84a1c83a 	sub	r16,r16,r18
    5360:	1000131e 	bne	r2,zero,53b0 <__sflush_r+0x158>
    5364:	28800517 	ldw	r2,20(r5)
    5368:	88800215 	stw	r2,8(r17)
    536c:	04000316 	blt	zero,r16,537c <__sflush_r+0x124>
    5370:	003fed06 	br	5328 <__sflush_r+0xd0>
    5374:	90a5883a 	add	r18,r18,r2
    5378:	043feb0e 	bge	zero,r16,5328 <__sflush_r+0xd0>
    537c:	88800917 	ldw	r2,36(r17)
    5380:	89400717 	ldw	r5,28(r17)
    5384:	800f883a 	mov	r7,r16
    5388:	900d883a 	mov	r6,r18
    538c:	9809883a 	mov	r4,r19
    5390:	103ee83a 	callr	r2
    5394:	80a1c83a 	sub	r16,r16,r2
    5398:	00bff616 	blt	zero,r2,5374 <__sflush_r+0x11c>
    539c:	88c0030b 	ldhu	r3,12(r17)
    53a0:	00bfffc4 	movi	r2,-1
    53a4:	18c01014 	ori	r3,r3,64
    53a8:	88c0030d 	sth	r3,12(r17)
    53ac:	003fdf06 	br	532c <__sflush_r+0xd4>
    53b0:	0005883a 	mov	r2,zero
    53b4:	003fec06 	br	5368 <__sflush_r+0x110>
    53b8:	88801415 	stw	r2,80(r17)
    53bc:	003fd206 	br	5308 <__sflush_r+0xb0>
    53c0:	28c00f17 	ldw	r3,60(r5)
    53c4:	00ffb316 	blt	zero,r3,5294 <__sflush_r+0x3c>
    53c8:	003fd706 	br	5328 <__sflush_r+0xd0>
    53cc:	89400717 	ldw	r5,28(r17)
    53d0:	000d883a 	mov	r6,zero
    53d4:	9809883a 	mov	r4,r19
    53d8:	01c00044 	movi	r7,1
    53dc:	403ee83a 	callr	r8
    53e0:	100d883a 	mov	r6,r2
    53e4:	00bfffc4 	movi	r2,-1
    53e8:	30801426 	beq	r6,r2,543c <__sflush_r+0x1e4>
    53ec:	8880030b 	ldhu	r2,12(r17)
    53f0:	8a000a17 	ldw	r8,40(r17)
    53f4:	003fae06 	br	52b0 <__sflush_r+0x58>
    53f8:	98c00017 	ldw	r3,0(r19)
    53fc:	183fba26 	beq	r3,zero,52e8 <__sflush_r+0x90>
    5400:	01000744 	movi	r4,29
    5404:	19000626 	beq	r3,r4,5420 <__sflush_r+0x1c8>
    5408:	01000584 	movi	r4,22
    540c:	19000426 	beq	r3,r4,5420 <__sflush_r+0x1c8>
    5410:	88c0030b 	ldhu	r3,12(r17)
    5414:	18c01014 	ori	r3,r3,64
    5418:	88c0030d 	sth	r3,12(r17)
    541c:	003fc306 	br	532c <__sflush_r+0xd4>
    5420:	8880030b 	ldhu	r2,12(r17)
    5424:	88c00417 	ldw	r3,16(r17)
    5428:	88000115 	stw	zero,4(r17)
    542c:	10bdffcc 	andi	r2,r2,63487
    5430:	8880030d 	sth	r2,12(r17)
    5434:	88c00015 	stw	r3,0(r17)
    5438:	003fb306 	br	5308 <__sflush_r+0xb0>
    543c:	98800017 	ldw	r2,0(r19)
    5440:	103fea26 	beq	r2,zero,53ec <__sflush_r+0x194>
    5444:	00c00744 	movi	r3,29
    5448:	10c00226 	beq	r2,r3,5454 <__sflush_r+0x1fc>
    544c:	00c00584 	movi	r3,22
    5450:	10ffd21e 	bne	r2,r3,539c <__sflush_r+0x144>
    5454:	9c000015 	stw	r16,0(r19)
    5458:	0005883a 	mov	r2,zero
    545c:	003fb306 	br	532c <__sflush_r+0xd4>

00005460 <_fflush_r>:
    5460:	defffd04 	addi	sp,sp,-12
    5464:	dc000115 	stw	r16,4(sp)
    5468:	dfc00215 	stw	ra,8(sp)
    546c:	2021883a 	mov	r16,r4
    5470:	20000226 	beq	r4,zero,547c <_fflush_r+0x1c>
    5474:	20800e17 	ldw	r2,56(r4)
    5478:	10000c26 	beq	r2,zero,54ac <_fflush_r+0x4c>
    547c:	2880030f 	ldh	r2,12(r5)
    5480:	1000051e 	bne	r2,zero,5498 <_fflush_r+0x38>
    5484:	0005883a 	mov	r2,zero
    5488:	dfc00217 	ldw	ra,8(sp)
    548c:	dc000117 	ldw	r16,4(sp)
    5490:	dec00304 	addi	sp,sp,12
    5494:	f800283a 	ret
    5498:	8009883a 	mov	r4,r16
    549c:	dfc00217 	ldw	ra,8(sp)
    54a0:	dc000117 	ldw	r16,4(sp)
    54a4:	dec00304 	addi	sp,sp,12
    54a8:	00052581 	jmpi	5258 <__sflush_r>
    54ac:	d9400015 	stw	r5,0(sp)
    54b0:	000584c0 	call	584c <__sinit>
    54b4:	d9400017 	ldw	r5,0(sp)
    54b8:	003ff006 	br	547c <_fflush_r+0x1c>

000054bc <fflush>:
    54bc:	20000526 	beq	r4,zero,54d4 <fflush+0x18>
    54c0:	00800074 	movhi	r2,1
    54c4:	10913d04 	addi	r2,r2,17652
    54c8:	200b883a 	mov	r5,r4
    54cc:	11000017 	ldw	r4,0(r2)
    54d0:	00054601 	jmpi	5460 <_fflush_r>
    54d4:	00800074 	movhi	r2,1
    54d8:	10913c04 	addi	r2,r2,17648
    54dc:	11000017 	ldw	r4,0(r2)
    54e0:	01400034 	movhi	r5,0
    54e4:	29551804 	addi	r5,r5,21600
    54e8:	00062401 	jmpi	6240 <_fwalk_reent>

000054ec <__fp_lock>:
    54ec:	0005883a 	mov	r2,zero
    54f0:	f800283a 	ret

000054f4 <__fp_unlock>:
    54f4:	0005883a 	mov	r2,zero
    54f8:	f800283a 	ret

000054fc <_cleanup_r>:
    54fc:	01400074 	movhi	r5,1
    5500:	29682f04 	addi	r5,r5,-24388
    5504:	00062401 	jmpi	6240 <_fwalk_reent>

00005508 <__sinit.part.1>:
    5508:	defff704 	addi	sp,sp,-36
    550c:	00c00034 	movhi	r3,0
    5510:	dfc00815 	stw	ra,32(sp)
    5514:	ddc00715 	stw	r23,28(sp)
    5518:	dd800615 	stw	r22,24(sp)
    551c:	dd400515 	stw	r21,20(sp)
    5520:	dd000415 	stw	r20,16(sp)
    5524:	dcc00315 	stw	r19,12(sp)
    5528:	dc800215 	stw	r18,8(sp)
    552c:	dc400115 	stw	r17,4(sp)
    5530:	dc000015 	stw	r16,0(sp)
    5534:	18d53f04 	addi	r3,r3,21756
    5538:	24000117 	ldw	r16,4(r4)
    553c:	20c00f15 	stw	r3,60(r4)
    5540:	2080bb04 	addi	r2,r4,748
    5544:	00c000c4 	movi	r3,3
    5548:	20c0b915 	stw	r3,740(r4)
    554c:	2080ba15 	stw	r2,744(r4)
    5550:	2000b815 	stw	zero,736(r4)
    5554:	05c00204 	movi	r23,8
    5558:	00800104 	movi	r2,4
    555c:	2025883a 	mov	r18,r4
    5560:	b80d883a 	mov	r6,r23
    5564:	81001704 	addi	r4,r16,92
    5568:	000b883a 	mov	r5,zero
    556c:	80000015 	stw	zero,0(r16)
    5570:	80000115 	stw	zero,4(r16)
    5574:	80000215 	stw	zero,8(r16)
    5578:	8080030d 	sth	r2,12(r16)
    557c:	80001915 	stw	zero,100(r16)
    5580:	8000038d 	sth	zero,14(r16)
    5584:	80000415 	stw	zero,16(r16)
    5588:	80000515 	stw	zero,20(r16)
    558c:	80000615 	stw	zero,24(r16)
    5590:	00070c00 	call	70c0 <memset>
    5594:	05800074 	movhi	r22,1
    5598:	94400217 	ldw	r17,8(r18)
    559c:	05400074 	movhi	r21,1
    55a0:	05000074 	movhi	r20,1
    55a4:	04c00074 	movhi	r19,1
    55a8:	b5a21c04 	addi	r22,r22,-30608
    55ac:	ad623304 	addi	r21,r21,-30516
    55b0:	a5225204 	addi	r20,r20,-30392
    55b4:	9ce26904 	addi	r19,r19,-30300
    55b8:	85800815 	stw	r22,32(r16)
    55bc:	85400915 	stw	r21,36(r16)
    55c0:	85000a15 	stw	r20,40(r16)
    55c4:	84c00b15 	stw	r19,44(r16)
    55c8:	84000715 	stw	r16,28(r16)
    55cc:	00800284 	movi	r2,10
    55d0:	8880030d 	sth	r2,12(r17)
    55d4:	00800044 	movi	r2,1
    55d8:	89001704 	addi	r4,r17,92
    55dc:	b80d883a 	mov	r6,r23
    55e0:	000b883a 	mov	r5,zero
    55e4:	88000015 	stw	zero,0(r17)
    55e8:	88000115 	stw	zero,4(r17)
    55ec:	88000215 	stw	zero,8(r17)
    55f0:	88001915 	stw	zero,100(r17)
    55f4:	8880038d 	sth	r2,14(r17)
    55f8:	88000415 	stw	zero,16(r17)
    55fc:	88000515 	stw	zero,20(r17)
    5600:	88000615 	stw	zero,24(r17)
    5604:	00070c00 	call	70c0 <memset>
    5608:	94000317 	ldw	r16,12(r18)
    560c:	00800484 	movi	r2,18
    5610:	8c400715 	stw	r17,28(r17)
    5614:	8d800815 	stw	r22,32(r17)
    5618:	8d400915 	stw	r21,36(r17)
    561c:	8d000a15 	stw	r20,40(r17)
    5620:	8cc00b15 	stw	r19,44(r17)
    5624:	8080030d 	sth	r2,12(r16)
    5628:	00800084 	movi	r2,2
    562c:	80000015 	stw	zero,0(r16)
    5630:	80000115 	stw	zero,4(r16)
    5634:	80000215 	stw	zero,8(r16)
    5638:	80001915 	stw	zero,100(r16)
    563c:	8080038d 	sth	r2,14(r16)
    5640:	80000415 	stw	zero,16(r16)
    5644:	80000515 	stw	zero,20(r16)
    5648:	80000615 	stw	zero,24(r16)
    564c:	81001704 	addi	r4,r16,92
    5650:	000b883a 	mov	r5,zero
    5654:	b80d883a 	mov	r6,r23
    5658:	00070c00 	call	70c0 <memset>
    565c:	00800044 	movi	r2,1
    5660:	84000715 	stw	r16,28(r16)
    5664:	85800815 	stw	r22,32(r16)
    5668:	85400915 	stw	r21,36(r16)
    566c:	85000a15 	stw	r20,40(r16)
    5670:	84c00b15 	stw	r19,44(r16)
    5674:	90800e15 	stw	r2,56(r18)
    5678:	dfc00817 	ldw	ra,32(sp)
    567c:	ddc00717 	ldw	r23,28(sp)
    5680:	dd800617 	ldw	r22,24(sp)
    5684:	dd400517 	ldw	r21,20(sp)
    5688:	dd000417 	ldw	r20,16(sp)
    568c:	dcc00317 	ldw	r19,12(sp)
    5690:	dc800217 	ldw	r18,8(sp)
    5694:	dc400117 	ldw	r17,4(sp)
    5698:	dc000017 	ldw	r16,0(sp)
    569c:	dec00904 	addi	sp,sp,36
    56a0:	f800283a 	ret

000056a4 <__sfmoreglue>:
    56a4:	defffc04 	addi	sp,sp,-16
    56a8:	dc800215 	stw	r18,8(sp)
    56ac:	2825883a 	mov	r18,r5
    56b0:	dc000015 	stw	r16,0(sp)
    56b4:	01401a04 	movi	r5,104
    56b8:	2021883a 	mov	r16,r4
    56bc:	913fffc4 	addi	r4,r18,-1
    56c0:	dfc00315 	stw	ra,12(sp)
    56c4:	dc400115 	stw	r17,4(sp)
    56c8:	0000dc40 	call	dc4 <__mulsi3>
    56cc:	8009883a 	mov	r4,r16
    56d0:	11401d04 	addi	r5,r2,116
    56d4:	1023883a 	mov	r17,r2
    56d8:	000659c0 	call	659c <_malloc_r>
    56dc:	1021883a 	mov	r16,r2
    56e0:	10000726 	beq	r2,zero,5700 <__sfmoreglue+0x5c>
    56e4:	11000304 	addi	r4,r2,12
    56e8:	10000015 	stw	zero,0(r2)
    56ec:	14800115 	stw	r18,4(r2)
    56f0:	11000215 	stw	r4,8(r2)
    56f4:	000b883a 	mov	r5,zero
    56f8:	89801a04 	addi	r6,r17,104
    56fc:	00070c00 	call	70c0 <memset>
    5700:	8005883a 	mov	r2,r16
    5704:	dfc00317 	ldw	ra,12(sp)
    5708:	dc800217 	ldw	r18,8(sp)
    570c:	dc400117 	ldw	r17,4(sp)
    5710:	dc000017 	ldw	r16,0(sp)
    5714:	dec00404 	addi	sp,sp,16
    5718:	f800283a 	ret

0000571c <__sfp>:
    571c:	00800074 	movhi	r2,1
    5720:	defffb04 	addi	sp,sp,-20
    5724:	10913c04 	addi	r2,r2,17648
    5728:	dc800215 	stw	r18,8(sp)
    572c:	14800017 	ldw	r18,0(r2)
    5730:	dcc00315 	stw	r19,12(sp)
    5734:	dfc00415 	stw	ra,16(sp)
    5738:	90800e17 	ldw	r2,56(r18)
    573c:	dc400115 	stw	r17,4(sp)
    5740:	dc000015 	stw	r16,0(sp)
    5744:	2027883a 	mov	r19,r4
    5748:	1000021e 	bne	r2,zero,5754 <__sfp+0x38>
    574c:	9009883a 	mov	r4,r18
    5750:	00055080 	call	5508 <__sinit.part.1>
    5754:	9480b804 	addi	r18,r18,736
    5758:	047fffc4 	movi	r17,-1
    575c:	91400117 	ldw	r5,4(r18)
    5760:	94000217 	ldw	r16,8(r18)
    5764:	297fffc4 	addi	r5,r5,-1
    5768:	28000a16 	blt	r5,zero,5794 <__sfp+0x78>
    576c:	8080030f 	ldh	r2,12(r16)
    5770:	10000c26 	beq	r2,zero,57a4 <__sfp+0x88>
    5774:	80c01d04 	addi	r3,r16,116
    5778:	00000206 	br	5784 <__sfp+0x68>
    577c:	18bfe60f 	ldh	r2,-104(r3)
    5780:	10000826 	beq	r2,zero,57a4 <__sfp+0x88>
    5784:	297fffc4 	addi	r5,r5,-1
    5788:	1c3ffd04 	addi	r16,r3,-12
    578c:	18c01a04 	addi	r3,r3,104
    5790:	2c7ffa1e 	bne	r5,r17,577c <__sfp+0x60>
    5794:	90800017 	ldw	r2,0(r18)
    5798:	10001d26 	beq	r2,zero,5810 <__sfp+0xf4>
    579c:	1025883a 	mov	r18,r2
    57a0:	003fee06 	br	575c <__sfp+0x40>
    57a4:	00bfffc4 	movi	r2,-1
    57a8:	8080038d 	sth	r2,14(r16)
    57ac:	00800044 	movi	r2,1
    57b0:	8080030d 	sth	r2,12(r16)
    57b4:	80001915 	stw	zero,100(r16)
    57b8:	80000015 	stw	zero,0(r16)
    57bc:	80000215 	stw	zero,8(r16)
    57c0:	80000115 	stw	zero,4(r16)
    57c4:	80000415 	stw	zero,16(r16)
    57c8:	80000515 	stw	zero,20(r16)
    57cc:	80000615 	stw	zero,24(r16)
    57d0:	81001704 	addi	r4,r16,92
    57d4:	000b883a 	mov	r5,zero
    57d8:	01800204 	movi	r6,8
    57dc:	00070c00 	call	70c0 <memset>
    57e0:	8005883a 	mov	r2,r16
    57e4:	80000c15 	stw	zero,48(r16)
    57e8:	80000d15 	stw	zero,52(r16)
    57ec:	80001115 	stw	zero,68(r16)
    57f0:	80001215 	stw	zero,72(r16)
    57f4:	dfc00417 	ldw	ra,16(sp)
    57f8:	dcc00317 	ldw	r19,12(sp)
    57fc:	dc800217 	ldw	r18,8(sp)
    5800:	dc400117 	ldw	r17,4(sp)
    5804:	dc000017 	ldw	r16,0(sp)
    5808:	dec00504 	addi	sp,sp,20
    580c:	f800283a 	ret
    5810:	9809883a 	mov	r4,r19
    5814:	01400104 	movi	r5,4
    5818:	00056a40 	call	56a4 <__sfmoreglue>
    581c:	90800015 	stw	r2,0(r18)
    5820:	103fde1e 	bne	r2,zero,579c <__sfp+0x80>
    5824:	00800304 	movi	r2,12
    5828:	98800015 	stw	r2,0(r19)
    582c:	0005883a 	mov	r2,zero
    5830:	003ff006 	br	57f4 <__sfp+0xd8>

00005834 <_cleanup>:
    5834:	00800074 	movhi	r2,1
    5838:	10913c04 	addi	r2,r2,17648
    583c:	11000017 	ldw	r4,0(r2)
    5840:	01400074 	movhi	r5,1
    5844:	29682f04 	addi	r5,r5,-24388
    5848:	00062401 	jmpi	6240 <_fwalk_reent>

0000584c <__sinit>:
    584c:	20800e17 	ldw	r2,56(r4)
    5850:	10000126 	beq	r2,zero,5858 <__sinit+0xc>
    5854:	f800283a 	ret
    5858:	00055081 	jmpi	5508 <__sinit.part.1>

0000585c <__sfp_lock_acquire>:
    585c:	f800283a 	ret

00005860 <__sfp_lock_release>:
    5860:	f800283a 	ret

00005864 <__sinit_lock_acquire>:
    5864:	f800283a 	ret

00005868 <__sinit_lock_release>:
    5868:	f800283a 	ret

0000586c <__fp_lock_all>:
    586c:	00800074 	movhi	r2,1
    5870:	10913d04 	addi	r2,r2,17652
    5874:	11000017 	ldw	r4,0(r2)
    5878:	01400034 	movhi	r5,0
    587c:	29553b04 	addi	r5,r5,21740
    5880:	000617c1 	jmpi	617c <_fwalk>

00005884 <__fp_unlock_all>:
    5884:	00800074 	movhi	r2,1
    5888:	10913d04 	addi	r2,r2,17652
    588c:	11000017 	ldw	r4,0(r2)
    5890:	01400034 	movhi	r5,0
    5894:	29553d04 	addi	r5,r5,21748
    5898:	000617c1 	jmpi	617c <_fwalk>

0000589c <_malloc_trim_r>:
    589c:	defffb04 	addi	sp,sp,-20
    58a0:	dcc00315 	stw	r19,12(sp)
    58a4:	04c00074 	movhi	r19,1
    58a8:	dc800215 	stw	r18,8(sp)
    58ac:	dc400115 	stw	r17,4(sp)
    58b0:	dc000015 	stw	r16,0(sp)
    58b4:	dfc00415 	stw	ra,16(sp)
    58b8:	2821883a 	mov	r16,r5
    58bc:	9cca9004 	addi	r19,r19,10816
    58c0:	2025883a 	mov	r18,r4
    58c4:	000e25c0 	call	e25c <__malloc_lock>
    58c8:	98800217 	ldw	r2,8(r19)
    58cc:	14400117 	ldw	r17,4(r2)
    58d0:	00bfff04 	movi	r2,-4
    58d4:	88a2703a 	and	r17,r17,r2
    58d8:	8c21c83a 	sub	r16,r17,r16
    58dc:	8403fbc4 	addi	r16,r16,4079
    58e0:	8020d33a 	srli	r16,r16,12
    58e4:	0083ffc4 	movi	r2,4095
    58e8:	843fffc4 	addi	r16,r16,-1
    58ec:	8020933a 	slli	r16,r16,12
    58f0:	1400060e 	bge	r2,r16,590c <_malloc_trim_r+0x70>
    58f4:	9009883a 	mov	r4,r18
    58f8:	000b883a 	mov	r5,zero
    58fc:	000881c0 	call	881c <_sbrk_r>
    5900:	98c00217 	ldw	r3,8(r19)
    5904:	1c47883a 	add	r3,r3,r17
    5908:	10c00a26 	beq	r2,r3,5934 <_malloc_trim_r+0x98>
    590c:	9009883a 	mov	r4,r18
    5910:	000e27c0 	call	e27c <__malloc_unlock>
    5914:	0005883a 	mov	r2,zero
    5918:	dfc00417 	ldw	ra,16(sp)
    591c:	dcc00317 	ldw	r19,12(sp)
    5920:	dc800217 	ldw	r18,8(sp)
    5924:	dc400117 	ldw	r17,4(sp)
    5928:	dc000017 	ldw	r16,0(sp)
    592c:	dec00504 	addi	sp,sp,20
    5930:	f800283a 	ret
    5934:	9009883a 	mov	r4,r18
    5938:	040bc83a 	sub	r5,zero,r16
    593c:	000881c0 	call	881c <_sbrk_r>
    5940:	00ffffc4 	movi	r3,-1
    5944:	10c00d26 	beq	r2,r3,597c <_malloc_trim_r+0xe0>
    5948:	00c00074 	movhi	r3,1
    594c:	18d15b04 	addi	r3,r3,17772
    5950:	18800017 	ldw	r2,0(r3)
    5954:	99000217 	ldw	r4,8(r19)
    5958:	8c23c83a 	sub	r17,r17,r16
    595c:	8c400054 	ori	r17,r17,1
    5960:	1421c83a 	sub	r16,r2,r16
    5964:	24400115 	stw	r17,4(r4)
    5968:	9009883a 	mov	r4,r18
    596c:	1c000015 	stw	r16,0(r3)
    5970:	000e27c0 	call	e27c <__malloc_unlock>
    5974:	00800044 	movi	r2,1
    5978:	003fe706 	br	5918 <_malloc_trim_r+0x7c>
    597c:	9009883a 	mov	r4,r18
    5980:	000b883a 	mov	r5,zero
    5984:	000881c0 	call	881c <_sbrk_r>
    5988:	99000217 	ldw	r4,8(r19)
    598c:	014003c4 	movi	r5,15
    5990:	1107c83a 	sub	r3,r2,r4
    5994:	28ffdd0e 	bge	r5,r3,590c <_malloc_trim_r+0x70>
    5998:	01400074 	movhi	r5,1
    599c:	29513f04 	addi	r5,r5,17660
    59a0:	29400017 	ldw	r5,0(r5)
    59a4:	18c00054 	ori	r3,r3,1
    59a8:	20c00115 	stw	r3,4(r4)
    59ac:	00c00074 	movhi	r3,1
    59b0:	1145c83a 	sub	r2,r2,r5
    59b4:	18d15b04 	addi	r3,r3,17772
    59b8:	18800015 	stw	r2,0(r3)
    59bc:	003fd306 	br	590c <_malloc_trim_r+0x70>

000059c0 <_free_r>:
    59c0:	28004c26 	beq	r5,zero,5af4 <_free_r+0x134>
    59c4:	defffd04 	addi	sp,sp,-12
    59c8:	dc400115 	stw	r17,4(sp)
    59cc:	dc000015 	stw	r16,0(sp)
    59d0:	2023883a 	mov	r17,r4
    59d4:	2821883a 	mov	r16,r5
    59d8:	dfc00215 	stw	ra,8(sp)
    59dc:	000e25c0 	call	e25c <__malloc_lock>
    59e0:	813fff17 	ldw	r4,-4(r16)
    59e4:	00bfff84 	movi	r2,-2
    59e8:	02400074 	movhi	r9,1
    59ec:	81bffe04 	addi	r6,r16,-8
    59f0:	2084703a 	and	r2,r4,r2
    59f4:	4a4a9004 	addi	r9,r9,10816
    59f8:	308b883a 	add	r5,r6,r2
    59fc:	2a000117 	ldw	r8,4(r5)
    5a00:	49c00217 	ldw	r7,8(r9)
    5a04:	00ffff04 	movi	r3,-4
    5a08:	40c6703a 	and	r3,r8,r3
    5a0c:	39405326 	beq	r7,r5,5b5c <_free_r+0x19c>
    5a10:	28c00115 	stw	r3,4(r5)
    5a14:	2100004c 	andi	r4,r4,1
    5a18:	2000091e 	bne	r4,zero,5a40 <_free_r+0x80>
    5a1c:	81fffe17 	ldw	r7,-8(r16)
    5a20:	4a000204 	addi	r8,r9,8
    5a24:	31cdc83a 	sub	r6,r6,r7
    5a28:	31000217 	ldw	r4,8(r6)
    5a2c:	11c5883a 	add	r2,r2,r7
    5a30:	22006126 	beq	r4,r8,5bb8 <_free_r+0x1f8>
    5a34:	31c00317 	ldw	r7,12(r6)
    5a38:	21c00315 	stw	r7,12(r4)
    5a3c:	39000215 	stw	r4,8(r7)
    5a40:	28c9883a 	add	r4,r5,r3
    5a44:	21c00117 	ldw	r7,4(r4)
    5a48:	39c0004c 	andi	r7,r7,1
    5a4c:	38000d1e 	bne	r7,zero,5a84 <_free_r+0xc4>
    5a50:	29000217 	ldw	r4,8(r5)
    5a54:	10c5883a 	add	r2,r2,r3
    5a58:	00c00074 	movhi	r3,1
    5a5c:	18ca9204 	addi	r3,r3,10824
    5a60:	20c07526 	beq	r4,r3,5c38 <_free_r+0x278>
    5a64:	29c00317 	ldw	r7,12(r5)
    5a68:	11400054 	ori	r5,r2,1
    5a6c:	3087883a 	add	r3,r6,r2
    5a70:	21c00315 	stw	r7,12(r4)
    5a74:	39000215 	stw	r4,8(r7)
    5a78:	31400115 	stw	r5,4(r6)
    5a7c:	18800015 	stw	r2,0(r3)
    5a80:	00000406 	br	5a94 <_free_r+0xd4>
    5a84:	10c00054 	ori	r3,r2,1
    5a88:	30c00115 	stw	r3,4(r6)
    5a8c:	3087883a 	add	r3,r6,r2
    5a90:	18800015 	stw	r2,0(r3)
    5a94:	00c07fc4 	movi	r3,511
    5a98:	18801736 	bltu	r3,r2,5af8 <_free_r+0x138>
    5a9c:	1004d0fa 	srli	r2,r2,3
    5aa0:	01400044 	movi	r5,1
    5aa4:	49000117 	ldw	r4,4(r9)
    5aa8:	1087883a 	add	r3,r2,r2
    5aac:	18c7883a 	add	r3,r3,r3
    5ab0:	1005d0ba 	srai	r2,r2,2
    5ab4:	18c7883a 	add	r3,r3,r3
    5ab8:	1a47883a 	add	r3,r3,r9
    5abc:	19c00217 	ldw	r7,8(r3)
    5ac0:	2884983a 	sll	r2,r5,r2
    5ac4:	30c00315 	stw	r3,12(r6)
    5ac8:	31c00215 	stw	r7,8(r6)
    5acc:	1104b03a 	or	r2,r2,r4
    5ad0:	19800215 	stw	r6,8(r3)
    5ad4:	48800115 	stw	r2,4(r9)
    5ad8:	39800315 	stw	r6,12(r7)
    5adc:	8809883a 	mov	r4,r17
    5ae0:	dfc00217 	ldw	ra,8(sp)
    5ae4:	dc400117 	ldw	r17,4(sp)
    5ae8:	dc000017 	ldw	r16,0(sp)
    5aec:	dec00304 	addi	sp,sp,12
    5af0:	000e27c1 	jmpi	e27c <__malloc_unlock>
    5af4:	f800283a 	ret
    5af8:	1006d27a 	srli	r3,r2,9
    5afc:	01000104 	movi	r4,4
    5b00:	20c04036 	bltu	r4,r3,5c04 <_free_r+0x244>
    5b04:	1006d1ba 	srli	r3,r2,6
    5b08:	19400e04 	addi	r5,r3,56
    5b0c:	2947883a 	add	r3,r5,r5
    5b10:	18c7883a 	add	r3,r3,r3
    5b14:	18c7883a 	add	r3,r3,r3
    5b18:	1a49883a 	add	r4,r3,r9
    5b1c:	20c00217 	ldw	r3,8(r4)
    5b20:	01c00074 	movhi	r7,1
    5b24:	39ca9004 	addi	r7,r7,10816
    5b28:	19003b26 	beq	r3,r4,5c18 <_free_r+0x258>
    5b2c:	01ffff04 	movi	r7,-4
    5b30:	19400117 	ldw	r5,4(r3)
    5b34:	29ca703a 	and	r5,r5,r7
    5b38:	1140022e 	bgeu	r2,r5,5b44 <_free_r+0x184>
    5b3c:	18c00217 	ldw	r3,8(r3)
    5b40:	20fffb1e 	bne	r4,r3,5b30 <_free_r+0x170>
    5b44:	18800317 	ldw	r2,12(r3)
    5b48:	30800315 	stw	r2,12(r6)
    5b4c:	30c00215 	stw	r3,8(r6)
    5b50:	11800215 	stw	r6,8(r2)
    5b54:	19800315 	stw	r6,12(r3)
    5b58:	003fe006 	br	5adc <_free_r+0x11c>
    5b5c:	2100004c 	andi	r4,r4,1
    5b60:	1885883a 	add	r2,r3,r2
    5b64:	2000071e 	bne	r4,zero,5b84 <_free_r+0x1c4>
    5b68:	817ffe17 	ldw	r5,-8(r16)
    5b6c:	314dc83a 	sub	r6,r6,r5
    5b70:	30c00317 	ldw	r3,12(r6)
    5b74:	31000217 	ldw	r4,8(r6)
    5b78:	1145883a 	add	r2,r2,r5
    5b7c:	20c00315 	stw	r3,12(r4)
    5b80:	19000215 	stw	r4,8(r3)
    5b84:	10c00054 	ori	r3,r2,1
    5b88:	30c00115 	stw	r3,4(r6)
    5b8c:	00c00074 	movhi	r3,1
    5b90:	18d14004 	addi	r3,r3,17664
    5b94:	18c00017 	ldw	r3,0(r3)
    5b98:	49800215 	stw	r6,8(r9)
    5b9c:	10ffcf36 	bltu	r2,r3,5adc <_free_r+0x11c>
    5ba0:	00800074 	movhi	r2,1
    5ba4:	10915304 	addi	r2,r2,17740
    5ba8:	11400017 	ldw	r5,0(r2)
    5bac:	8809883a 	mov	r4,r17
    5bb0:	000589c0 	call	589c <_malloc_trim_r>
    5bb4:	003fc906 	br	5adc <_free_r+0x11c>
    5bb8:	28c9883a 	add	r4,r5,r3
    5bbc:	21000117 	ldw	r4,4(r4)
    5bc0:	2100004c 	andi	r4,r4,1
    5bc4:	20000a1e 	bne	r4,zero,5bf0 <_free_r+0x230>
    5bc8:	29000317 	ldw	r4,12(r5)
    5bcc:	29400217 	ldw	r5,8(r5)
    5bd0:	10c5883a 	add	r2,r2,r3
    5bd4:	10c00054 	ori	r3,r2,1
    5bd8:	29000315 	stw	r4,12(r5)
    5bdc:	21400215 	stw	r5,8(r4)
    5be0:	30c00115 	stw	r3,4(r6)
    5be4:	308d883a 	add	r6,r6,r2
    5be8:	30800015 	stw	r2,0(r6)
    5bec:	003fbb06 	br	5adc <_free_r+0x11c>
    5bf0:	10c00054 	ori	r3,r2,1
    5bf4:	30c00115 	stw	r3,4(r6)
    5bf8:	308d883a 	add	r6,r6,r2
    5bfc:	30800015 	stw	r2,0(r6)
    5c00:	003fb606 	br	5adc <_free_r+0x11c>
    5c04:	01000504 	movi	r4,20
    5c08:	20c01436 	bltu	r4,r3,5c5c <_free_r+0x29c>
    5c0c:	194016c4 	addi	r5,r3,91
    5c10:	2947883a 	add	r3,r5,r5
    5c14:	003fbe06 	br	5b10 <_free_r+0x150>
    5c18:	280bd0ba 	srai	r5,r5,2
    5c1c:	00800044 	movi	r2,1
    5c20:	39000117 	ldw	r4,4(r7)
    5c24:	114a983a 	sll	r5,r2,r5
    5c28:	1805883a 	mov	r2,r3
    5c2c:	2908b03a 	or	r4,r5,r4
    5c30:	39000115 	stw	r4,4(r7)
    5c34:	003fc406 	br	5b48 <_free_r+0x188>
    5c38:	49800515 	stw	r6,20(r9)
    5c3c:	49800415 	stw	r6,16(r9)
    5c40:	10c00054 	ori	r3,r2,1
    5c44:	31000315 	stw	r4,12(r6)
    5c48:	31000215 	stw	r4,8(r6)
    5c4c:	30c00115 	stw	r3,4(r6)
    5c50:	308d883a 	add	r6,r6,r2
    5c54:	30800015 	stw	r2,0(r6)
    5c58:	003fa006 	br	5adc <_free_r+0x11c>
    5c5c:	01001504 	movi	r4,84
    5c60:	20c00436 	bltu	r4,r3,5c74 <_free_r+0x2b4>
    5c64:	1006d33a 	srli	r3,r2,12
    5c68:	19401b84 	addi	r5,r3,110
    5c6c:	2947883a 	add	r3,r5,r5
    5c70:	003fa706 	br	5b10 <_free_r+0x150>
    5c74:	01005504 	movi	r4,340
    5c78:	20c00436 	bltu	r4,r3,5c8c <_free_r+0x2cc>
    5c7c:	1006d3fa 	srli	r3,r2,15
    5c80:	19401dc4 	addi	r5,r3,119
    5c84:	2947883a 	add	r3,r5,r5
    5c88:	003fa106 	br	5b10 <_free_r+0x150>
    5c8c:	01015504 	movi	r4,1364
    5c90:	20c00436 	bltu	r4,r3,5ca4 <_free_r+0x2e4>
    5c94:	1006d4ba 	srli	r3,r2,18
    5c98:	19401f04 	addi	r5,r3,124
    5c9c:	2947883a 	add	r3,r5,r5
    5ca0:	003f9b06 	br	5b10 <_free_r+0x150>
    5ca4:	00c03f04 	movi	r3,252
    5ca8:	01401f84 	movi	r5,126
    5cac:	003f9806 	br	5b10 <_free_r+0x150>

00005cb0 <__sfvwrite_r>:
    5cb0:	30800217 	ldw	r2,8(r6)
    5cb4:	10006726 	beq	r2,zero,5e54 <__sfvwrite_r+0x1a4>
    5cb8:	defff404 	addi	sp,sp,-48
    5cbc:	dd000615 	stw	r20,24(sp)
    5cc0:	2029883a 	mov	r20,r4
    5cc4:	2900030b 	ldhu	r4,12(r5)
    5cc8:	ddc00915 	stw	r23,36(sp)
    5ccc:	dc000215 	stw	r16,8(sp)
    5cd0:	dfc00b15 	stw	ra,44(sp)
    5cd4:	df000a15 	stw	fp,40(sp)
    5cd8:	dd800815 	stw	r22,32(sp)
    5cdc:	dd400715 	stw	r21,28(sp)
    5ce0:	dcc00515 	stw	r19,20(sp)
    5ce4:	dc800415 	stw	r18,16(sp)
    5ce8:	dc400315 	stw	r17,12(sp)
    5cec:	2080020c 	andi	r2,r4,8
    5cf0:	2821883a 	mov	r16,r5
    5cf4:	302f883a 	mov	r23,r6
    5cf8:	10002726 	beq	r2,zero,5d98 <__sfvwrite_r+0xe8>
    5cfc:	28800417 	ldw	r2,16(r5)
    5d00:	10002526 	beq	r2,zero,5d98 <__sfvwrite_r+0xe8>
    5d04:	2080008c 	andi	r2,r4,2
    5d08:	bc400017 	ldw	r17,0(r23)
    5d0c:	10002a26 	beq	r2,zero,5db8 <__sfvwrite_r+0x108>
    5d10:	05600034 	movhi	r21,32768
    5d14:	0027883a 	mov	r19,zero
    5d18:	0025883a 	mov	r18,zero
    5d1c:	ad7f0004 	addi	r21,r21,-1024
    5d20:	980d883a 	mov	r6,r19
    5d24:	a009883a 	mov	r4,r20
    5d28:	90004626 	beq	r18,zero,5e44 <__sfvwrite_r+0x194>
    5d2c:	900f883a 	mov	r7,r18
    5d30:	81400717 	ldw	r5,28(r16)
    5d34:	ac80022e 	bgeu	r21,r18,5d40 <__sfvwrite_r+0x90>
    5d38:	01e00034 	movhi	r7,32768
    5d3c:	39ff0004 	addi	r7,r7,-1024
    5d40:	80800917 	ldw	r2,36(r16)
    5d44:	103ee83a 	callr	r2
    5d48:	0080550e 	bge	zero,r2,5ea0 <__sfvwrite_r+0x1f0>
    5d4c:	b8c00217 	ldw	r3,8(r23)
    5d50:	98a7883a 	add	r19,r19,r2
    5d54:	90a5c83a 	sub	r18,r18,r2
    5d58:	1885c83a 	sub	r2,r3,r2
    5d5c:	b8800215 	stw	r2,8(r23)
    5d60:	103fef1e 	bne	r2,zero,5d20 <__sfvwrite_r+0x70>
    5d64:	0005883a 	mov	r2,zero
    5d68:	dfc00b17 	ldw	ra,44(sp)
    5d6c:	df000a17 	ldw	fp,40(sp)
    5d70:	ddc00917 	ldw	r23,36(sp)
    5d74:	dd800817 	ldw	r22,32(sp)
    5d78:	dd400717 	ldw	r21,28(sp)
    5d7c:	dd000617 	ldw	r20,24(sp)
    5d80:	dcc00517 	ldw	r19,20(sp)
    5d84:	dc800417 	ldw	r18,16(sp)
    5d88:	dc400317 	ldw	r17,12(sp)
    5d8c:	dc000217 	ldw	r16,8(sp)
    5d90:	dec00c04 	addi	sp,sp,48
    5d94:	f800283a 	ret
    5d98:	a009883a 	mov	r4,r20
    5d9c:	800b883a 	mov	r5,r16
    5da0:	00037b40 	call	37b4 <__swsetup_r>
    5da4:	1000ef1e 	bne	r2,zero,6164 <__sfvwrite_r+0x4b4>
    5da8:	8100030b 	ldhu	r4,12(r16)
    5dac:	bc400017 	ldw	r17,0(r23)
    5db0:	2080008c 	andi	r2,r4,2
    5db4:	103fd61e 	bne	r2,zero,5d10 <__sfvwrite_r+0x60>
    5db8:	2080004c 	andi	r2,r4,1
    5dbc:	10003d1e 	bne	r2,zero,5eb4 <__sfvwrite_r+0x204>
    5dc0:	0039883a 	mov	fp,zero
    5dc4:	0025883a 	mov	r18,zero
    5dc8:	90001a26 	beq	r18,zero,5e34 <__sfvwrite_r+0x184>
    5dcc:	2080800c 	andi	r2,r4,512
    5dd0:	85800217 	ldw	r22,8(r16)
    5dd4:	10007926 	beq	r2,zero,5fbc <__sfvwrite_r+0x30c>
    5dd8:	b027883a 	mov	r19,r22
    5ddc:	95809736 	bltu	r18,r22,603c <__sfvwrite_r+0x38c>
    5de0:	2081200c 	andi	r2,r4,1152
    5de4:	1000a21e 	bne	r2,zero,6070 <__sfvwrite_r+0x3c0>
    5de8:	81000017 	ldw	r4,0(r16)
    5dec:	e00b883a 	mov	r5,fp
    5df0:	980d883a 	mov	r6,r19
    5df4:	0006f640 	call	6f64 <memmove>
    5df8:	81000217 	ldw	r4,8(r16)
    5dfc:	81400017 	ldw	r5,0(r16)
    5e00:	9005883a 	mov	r2,r18
    5e04:	2587c83a 	sub	r3,r4,r22
    5e08:	2ce7883a 	add	r19,r5,r19
    5e0c:	80c00215 	stw	r3,8(r16)
    5e10:	84c00015 	stw	r19,0(r16)
    5e14:	b8c00217 	ldw	r3,8(r23)
    5e18:	e0b9883a 	add	fp,fp,r2
    5e1c:	90a5c83a 	sub	r18,r18,r2
    5e20:	1885c83a 	sub	r2,r3,r2
    5e24:	b8800215 	stw	r2,8(r23)
    5e28:	103fce26 	beq	r2,zero,5d64 <__sfvwrite_r+0xb4>
    5e2c:	8100030b 	ldhu	r4,12(r16)
    5e30:	903fe61e 	bne	r18,zero,5dcc <__sfvwrite_r+0x11c>
    5e34:	8f000017 	ldw	fp,0(r17)
    5e38:	8c800117 	ldw	r18,4(r17)
    5e3c:	8c400204 	addi	r17,r17,8
    5e40:	003fe106 	br	5dc8 <__sfvwrite_r+0x118>
    5e44:	8cc00017 	ldw	r19,0(r17)
    5e48:	8c800117 	ldw	r18,4(r17)
    5e4c:	8c400204 	addi	r17,r17,8
    5e50:	003fb306 	br	5d20 <__sfvwrite_r+0x70>
    5e54:	0005883a 	mov	r2,zero
    5e58:	f800283a 	ret
    5e5c:	00a00034 	movhi	r2,32768
    5e60:	10bfffc4 	addi	r2,r2,-1
    5e64:	9009883a 	mov	r4,r18
    5e68:	1480012e 	bgeu	r2,r18,5e70 <__sfvwrite_r+0x1c0>
    5e6c:	1009883a 	mov	r4,r2
    5e70:	980b883a 	mov	r5,r19
    5e74:	000b5080 	call	b508 <__divsi3>
    5e78:	9809883a 	mov	r4,r19
    5e7c:	100b883a 	mov	r5,r2
    5e80:	0000dc40 	call	dc4 <__mulsi3>
    5e84:	81400717 	ldw	r5,28(r16)
    5e88:	80c00917 	ldw	r3,36(r16)
    5e8c:	a009883a 	mov	r4,r20
    5e90:	e00d883a 	mov	r6,fp
    5e94:	100f883a 	mov	r7,r2
    5e98:	183ee83a 	callr	r3
    5e9c:	00bfdd16 	blt	zero,r2,5e14 <__sfvwrite_r+0x164>
    5ea0:	8080030b 	ldhu	r2,12(r16)
    5ea4:	10801014 	ori	r2,r2,64
    5ea8:	8080030d 	sth	r2,12(r16)
    5eac:	00bfffc4 	movi	r2,-1
    5eb0:	003fad06 	br	5d68 <__sfvwrite_r+0xb8>
    5eb4:	0027883a 	mov	r19,zero
    5eb8:	0011883a 	mov	r8,zero
    5ebc:	0039883a 	mov	fp,zero
    5ec0:	0025883a 	mov	r18,zero
    5ec4:	90001f26 	beq	r18,zero,5f44 <__sfvwrite_r+0x294>
    5ec8:	40006026 	beq	r8,zero,604c <__sfvwrite_r+0x39c>
    5ecc:	982b883a 	mov	r21,r19
    5ed0:	94c0012e 	bgeu	r18,r19,5ed8 <__sfvwrite_r+0x228>
    5ed4:	902b883a 	mov	r21,r18
    5ed8:	81000017 	ldw	r4,0(r16)
    5edc:	80800417 	ldw	r2,16(r16)
    5ee0:	a82d883a 	mov	r22,r21
    5ee4:	81800217 	ldw	r6,8(r16)
    5ee8:	81c00517 	ldw	r7,20(r16)
    5eec:	1100022e 	bgeu	r2,r4,5ef8 <__sfvwrite_r+0x248>
    5ef0:	31c7883a 	add	r3,r6,r7
    5ef4:	1d401816 	blt	r3,r21,5f58 <__sfvwrite_r+0x2a8>
    5ef8:	a9c04416 	blt	r21,r7,600c <__sfvwrite_r+0x35c>
    5efc:	80800917 	ldw	r2,36(r16)
    5f00:	81400717 	ldw	r5,28(r16)
    5f04:	a009883a 	mov	r4,r20
    5f08:	da000115 	stw	r8,4(sp)
    5f0c:	e00d883a 	mov	r6,fp
    5f10:	103ee83a 	callr	r2
    5f14:	102d883a 	mov	r22,r2
    5f18:	da000117 	ldw	r8,4(sp)
    5f1c:	00bfe00e 	bge	zero,r2,5ea0 <__sfvwrite_r+0x1f0>
    5f20:	9da7c83a 	sub	r19,r19,r22
    5f24:	98001f26 	beq	r19,zero,5fa4 <__sfvwrite_r+0x2f4>
    5f28:	b8800217 	ldw	r2,8(r23)
    5f2c:	e5b9883a 	add	fp,fp,r22
    5f30:	95a5c83a 	sub	r18,r18,r22
    5f34:	15adc83a 	sub	r22,r2,r22
    5f38:	bd800215 	stw	r22,8(r23)
    5f3c:	b03f8926 	beq	r22,zero,5d64 <__sfvwrite_r+0xb4>
    5f40:	903fe11e 	bne	r18,zero,5ec8 <__sfvwrite_r+0x218>
    5f44:	8f000017 	ldw	fp,0(r17)
    5f48:	8c800117 	ldw	r18,4(r17)
    5f4c:	0011883a 	mov	r8,zero
    5f50:	8c400204 	addi	r17,r17,8
    5f54:	003fdb06 	br	5ec4 <__sfvwrite_r+0x214>
    5f58:	180d883a 	mov	r6,r3
    5f5c:	e00b883a 	mov	r5,fp
    5f60:	da000115 	stw	r8,4(sp)
    5f64:	d8c00015 	stw	r3,0(sp)
    5f68:	0006f640 	call	6f64 <memmove>
    5f6c:	d8c00017 	ldw	r3,0(sp)
    5f70:	80800017 	ldw	r2,0(r16)
    5f74:	a009883a 	mov	r4,r20
    5f78:	800b883a 	mov	r5,r16
    5f7c:	10c5883a 	add	r2,r2,r3
    5f80:	80800015 	stw	r2,0(r16)
    5f84:	d8c00015 	stw	r3,0(sp)
    5f88:	00054600 	call	5460 <_fflush_r>
    5f8c:	d8c00017 	ldw	r3,0(sp)
    5f90:	da000117 	ldw	r8,4(sp)
    5f94:	103fc21e 	bne	r2,zero,5ea0 <__sfvwrite_r+0x1f0>
    5f98:	182d883a 	mov	r22,r3
    5f9c:	9da7c83a 	sub	r19,r19,r22
    5fa0:	983fe11e 	bne	r19,zero,5f28 <__sfvwrite_r+0x278>
    5fa4:	a009883a 	mov	r4,r20
    5fa8:	800b883a 	mov	r5,r16
    5fac:	00054600 	call	5460 <_fflush_r>
    5fb0:	103fbb1e 	bne	r2,zero,5ea0 <__sfvwrite_r+0x1f0>
    5fb4:	0011883a 	mov	r8,zero
    5fb8:	003fdb06 	br	5f28 <__sfvwrite_r+0x278>
    5fbc:	81000017 	ldw	r4,0(r16)
    5fc0:	80800417 	ldw	r2,16(r16)
    5fc4:	11000236 	bltu	r2,r4,5fd0 <__sfvwrite_r+0x320>
    5fc8:	84c00517 	ldw	r19,20(r16)
    5fcc:	94ffa32e 	bgeu	r18,r19,5e5c <__sfvwrite_r+0x1ac>
    5fd0:	9027883a 	mov	r19,r18
    5fd4:	b480012e 	bgeu	r22,r18,5fdc <__sfvwrite_r+0x32c>
    5fd8:	b027883a 	mov	r19,r22
    5fdc:	e00b883a 	mov	r5,fp
    5fe0:	980d883a 	mov	r6,r19
    5fe4:	0006f640 	call	6f64 <memmove>
    5fe8:	80800217 	ldw	r2,8(r16)
    5fec:	80c00017 	ldw	r3,0(r16)
    5ff0:	14c5c83a 	sub	r2,r2,r19
    5ff4:	1cc7883a 	add	r3,r3,r19
    5ff8:	80800215 	stw	r2,8(r16)
    5ffc:	80c00015 	stw	r3,0(r16)
    6000:	10004326 	beq	r2,zero,6110 <__sfvwrite_r+0x460>
    6004:	9805883a 	mov	r2,r19
    6008:	003f8206 	br	5e14 <__sfvwrite_r+0x164>
    600c:	a80d883a 	mov	r6,r21
    6010:	e00b883a 	mov	r5,fp
    6014:	da000115 	stw	r8,4(sp)
    6018:	0006f640 	call	6f64 <memmove>
    601c:	80800217 	ldw	r2,8(r16)
    6020:	80c00017 	ldw	r3,0(r16)
    6024:	da000117 	ldw	r8,4(sp)
    6028:	1545c83a 	sub	r2,r2,r21
    602c:	1d6b883a 	add	r21,r3,r21
    6030:	80800215 	stw	r2,8(r16)
    6034:	85400015 	stw	r21,0(r16)
    6038:	003fb906 	br	5f20 <__sfvwrite_r+0x270>
    603c:	81000017 	ldw	r4,0(r16)
    6040:	902d883a 	mov	r22,r18
    6044:	9027883a 	mov	r19,r18
    6048:	003f6806 	br	5dec <__sfvwrite_r+0x13c>
    604c:	e009883a 	mov	r4,fp
    6050:	01400284 	movi	r5,10
    6054:	900d883a 	mov	r6,r18
    6058:	0006d440 	call	6d44 <memchr>
    605c:	10003e26 	beq	r2,zero,6158 <__sfvwrite_r+0x4a8>
    6060:	10800044 	addi	r2,r2,1
    6064:	1727c83a 	sub	r19,r2,fp
    6068:	02000044 	movi	r8,1
    606c:	003f9706 	br	5ecc <__sfvwrite_r+0x21c>
    6070:	80800517 	ldw	r2,20(r16)
    6074:	81400417 	ldw	r5,16(r16)
    6078:	80c00017 	ldw	r3,0(r16)
    607c:	10a7883a 	add	r19,r2,r2
    6080:	9885883a 	add	r2,r19,r2
    6084:	1026d7fa 	srli	r19,r2,31
    6088:	196bc83a 	sub	r21,r3,r5
    608c:	a9800044 	addi	r6,r21,1
    6090:	9885883a 	add	r2,r19,r2
    6094:	1027d07a 	srai	r19,r2,1
    6098:	3485883a 	add	r2,r6,r18
    609c:	980d883a 	mov	r6,r19
    60a0:	9880022e 	bgeu	r19,r2,60ac <__sfvwrite_r+0x3fc>
    60a4:	1027883a 	mov	r19,r2
    60a8:	100d883a 	mov	r6,r2
    60ac:	2101000c 	andi	r4,r4,1024
    60b0:	20001c26 	beq	r4,zero,6124 <__sfvwrite_r+0x474>
    60b4:	a009883a 	mov	r4,r20
    60b8:	300b883a 	mov	r5,r6
    60bc:	000659c0 	call	659c <_malloc_r>
    60c0:	102d883a 	mov	r22,r2
    60c4:	10002926 	beq	r2,zero,616c <__sfvwrite_r+0x4bc>
    60c8:	81400417 	ldw	r5,16(r16)
    60cc:	1009883a 	mov	r4,r2
    60d0:	a80d883a 	mov	r6,r21
    60d4:	0006e2c0 	call	6e2c <memcpy>
    60d8:	8080030b 	ldhu	r2,12(r16)
    60dc:	00fedfc4 	movi	r3,-1153
    60e0:	10c4703a 	and	r2,r2,r3
    60e4:	10802014 	ori	r2,r2,128
    60e8:	8080030d 	sth	r2,12(r16)
    60ec:	b549883a 	add	r4,r22,r21
    60f0:	9d4bc83a 	sub	r5,r19,r21
    60f4:	85800415 	stw	r22,16(r16)
    60f8:	84c00515 	stw	r19,20(r16)
    60fc:	81000015 	stw	r4,0(r16)
    6100:	902d883a 	mov	r22,r18
    6104:	81400215 	stw	r5,8(r16)
    6108:	9027883a 	mov	r19,r18
    610c:	003f3706 	br	5dec <__sfvwrite_r+0x13c>
    6110:	a009883a 	mov	r4,r20
    6114:	800b883a 	mov	r5,r16
    6118:	00054600 	call	5460 <_fflush_r>
    611c:	103fb926 	beq	r2,zero,6004 <__sfvwrite_r+0x354>
    6120:	003f5f06 	br	5ea0 <__sfvwrite_r+0x1f0>
    6124:	a009883a 	mov	r4,r20
    6128:	00082400 	call	8240 <_realloc_r>
    612c:	102d883a 	mov	r22,r2
    6130:	103fee1e 	bne	r2,zero,60ec <__sfvwrite_r+0x43c>
    6134:	81400417 	ldw	r5,16(r16)
    6138:	a009883a 	mov	r4,r20
    613c:	00059c00 	call	59c0 <_free_r>
    6140:	8080030b 	ldhu	r2,12(r16)
    6144:	00ffdfc4 	movi	r3,-129
    6148:	1884703a 	and	r2,r3,r2
    614c:	00c00304 	movi	r3,12
    6150:	a0c00015 	stw	r3,0(r20)
    6154:	003f5306 	br	5ea4 <__sfvwrite_r+0x1f4>
    6158:	94c00044 	addi	r19,r18,1
    615c:	02000044 	movi	r8,1
    6160:	003f5a06 	br	5ecc <__sfvwrite_r+0x21c>
    6164:	00bfffc4 	movi	r2,-1
    6168:	003eff06 	br	5d68 <__sfvwrite_r+0xb8>
    616c:	00800304 	movi	r2,12
    6170:	a0800015 	stw	r2,0(r20)
    6174:	8080030b 	ldhu	r2,12(r16)
    6178:	003f4a06 	br	5ea4 <__sfvwrite_r+0x1f4>

0000617c <_fwalk>:
    617c:	defff704 	addi	sp,sp,-36
    6180:	dd000415 	stw	r20,16(sp)
    6184:	dfc00815 	stw	ra,32(sp)
    6188:	ddc00715 	stw	r23,28(sp)
    618c:	dd800615 	stw	r22,24(sp)
    6190:	dd400515 	stw	r21,20(sp)
    6194:	dcc00315 	stw	r19,12(sp)
    6198:	dc800215 	stw	r18,8(sp)
    619c:	dc400115 	stw	r17,4(sp)
    61a0:	dc000015 	stw	r16,0(sp)
    61a4:	2500b804 	addi	r20,r4,736
    61a8:	a0002326 	beq	r20,zero,6238 <_fwalk+0xbc>
    61ac:	282b883a 	mov	r21,r5
    61b0:	002f883a 	mov	r23,zero
    61b4:	05800044 	movi	r22,1
    61b8:	04ffffc4 	movi	r19,-1
    61bc:	a4400117 	ldw	r17,4(r20)
    61c0:	a4800217 	ldw	r18,8(r20)
    61c4:	8c7fffc4 	addi	r17,r17,-1
    61c8:	88000d16 	blt	r17,zero,6200 <_fwalk+0x84>
    61cc:	94000304 	addi	r16,r18,12
    61d0:	94800384 	addi	r18,r18,14
    61d4:	80c0000b 	ldhu	r3,0(r16)
    61d8:	8c7fffc4 	addi	r17,r17,-1
    61dc:	813ffd04 	addi	r4,r16,-12
    61e0:	b0c0042e 	bgeu	r22,r3,61f4 <_fwalk+0x78>
    61e4:	90c0000f 	ldh	r3,0(r18)
    61e8:	1cc00226 	beq	r3,r19,61f4 <_fwalk+0x78>
    61ec:	a83ee83a 	callr	r21
    61f0:	b8aeb03a 	or	r23,r23,r2
    61f4:	84001a04 	addi	r16,r16,104
    61f8:	94801a04 	addi	r18,r18,104
    61fc:	8cfff51e 	bne	r17,r19,61d4 <_fwalk+0x58>
    6200:	a5000017 	ldw	r20,0(r20)
    6204:	a03fed1e 	bne	r20,zero,61bc <_fwalk+0x40>
    6208:	b805883a 	mov	r2,r23
    620c:	dfc00817 	ldw	ra,32(sp)
    6210:	ddc00717 	ldw	r23,28(sp)
    6214:	dd800617 	ldw	r22,24(sp)
    6218:	dd400517 	ldw	r21,20(sp)
    621c:	dd000417 	ldw	r20,16(sp)
    6220:	dcc00317 	ldw	r19,12(sp)
    6224:	dc800217 	ldw	r18,8(sp)
    6228:	dc400117 	ldw	r17,4(sp)
    622c:	dc000017 	ldw	r16,0(sp)
    6230:	dec00904 	addi	sp,sp,36
    6234:	f800283a 	ret
    6238:	002f883a 	mov	r23,zero
    623c:	003ff206 	br	6208 <_fwalk+0x8c>

00006240 <_fwalk_reent>:
    6240:	defff704 	addi	sp,sp,-36
    6244:	dd400515 	stw	r21,20(sp)
    6248:	dfc00815 	stw	ra,32(sp)
    624c:	ddc00715 	stw	r23,28(sp)
    6250:	dd800615 	stw	r22,24(sp)
    6254:	dd000415 	stw	r20,16(sp)
    6258:	dcc00315 	stw	r19,12(sp)
    625c:	dc800215 	stw	r18,8(sp)
    6260:	dc400115 	stw	r17,4(sp)
    6264:	dc000015 	stw	r16,0(sp)
    6268:	2540b804 	addi	r21,r4,736
    626c:	a8002326 	beq	r21,zero,62fc <_fwalk_reent+0xbc>
    6270:	2829883a 	mov	r20,r5
    6274:	202d883a 	mov	r22,r4
    6278:	002f883a 	mov	r23,zero
    627c:	04c00044 	movi	r19,1
    6280:	04bfffc4 	movi	r18,-1
    6284:	ac400117 	ldw	r17,4(r21)
    6288:	ac000217 	ldw	r16,8(r21)
    628c:	8c7fffc4 	addi	r17,r17,-1
    6290:	88000c16 	blt	r17,zero,62c4 <_fwalk_reent+0x84>
    6294:	84000304 	addi	r16,r16,12
    6298:	80c0000b 	ldhu	r3,0(r16)
    629c:	8c7fffc4 	addi	r17,r17,-1
    62a0:	817ffd04 	addi	r5,r16,-12
    62a4:	98c0052e 	bgeu	r19,r3,62bc <_fwalk_reent+0x7c>
    62a8:	80c0008f 	ldh	r3,2(r16)
    62ac:	b009883a 	mov	r4,r22
    62b0:	1c800226 	beq	r3,r18,62bc <_fwalk_reent+0x7c>
    62b4:	a03ee83a 	callr	r20
    62b8:	b8aeb03a 	or	r23,r23,r2
    62bc:	84001a04 	addi	r16,r16,104
    62c0:	8cbff51e 	bne	r17,r18,6298 <_fwalk_reent+0x58>
    62c4:	ad400017 	ldw	r21,0(r21)
    62c8:	a83fee1e 	bne	r21,zero,6284 <_fwalk_reent+0x44>
    62cc:	b805883a 	mov	r2,r23
    62d0:	dfc00817 	ldw	ra,32(sp)
    62d4:	ddc00717 	ldw	r23,28(sp)
    62d8:	dd800617 	ldw	r22,24(sp)
    62dc:	dd400517 	ldw	r21,20(sp)
    62e0:	dd000417 	ldw	r20,16(sp)
    62e4:	dcc00317 	ldw	r19,12(sp)
    62e8:	dc800217 	ldw	r18,8(sp)
    62ec:	dc400117 	ldw	r17,4(sp)
    62f0:	dc000017 	ldw	r16,0(sp)
    62f4:	dec00904 	addi	sp,sp,36
    62f8:	f800283a 	ret
    62fc:	002f883a 	mov	r23,zero
    6300:	003ff206 	br	62cc <_fwalk_reent+0x8c>

00006304 <_setlocale_r>:
    6304:	30001b26 	beq	r6,zero,6374 <_setlocale_r+0x70>
    6308:	01400074 	movhi	r5,1
    630c:	defffe04 	addi	sp,sp,-8
    6310:	2948e504 	addi	r5,r5,9108
    6314:	3009883a 	mov	r4,r6
    6318:	dc000015 	stw	r16,0(sp)
    631c:	dfc00115 	stw	ra,4(sp)
    6320:	3021883a 	mov	r16,r6
    6324:	00089ac0 	call	89ac <strcmp>
    6328:	1000061e 	bne	r2,zero,6344 <_setlocale_r+0x40>
    632c:	00800074 	movhi	r2,1
    6330:	1088e404 	addi	r2,r2,9104
    6334:	dfc00117 	ldw	ra,4(sp)
    6338:	dc000017 	ldw	r16,0(sp)
    633c:	dec00204 	addi	sp,sp,8
    6340:	f800283a 	ret
    6344:	01400074 	movhi	r5,1
    6348:	2948e404 	addi	r5,r5,9104
    634c:	8009883a 	mov	r4,r16
    6350:	00089ac0 	call	89ac <strcmp>
    6354:	103ff526 	beq	r2,zero,632c <_setlocale_r+0x28>
    6358:	01400074 	movhi	r5,1
    635c:	2948cf04 	addi	r5,r5,9020
    6360:	8009883a 	mov	r4,r16
    6364:	00089ac0 	call	89ac <strcmp>
    6368:	103ff026 	beq	r2,zero,632c <_setlocale_r+0x28>
    636c:	0005883a 	mov	r2,zero
    6370:	003ff006 	br	6334 <_setlocale_r+0x30>
    6374:	00800074 	movhi	r2,1
    6378:	1088e404 	addi	r2,r2,9104
    637c:	f800283a 	ret

00006380 <__locale_charset>:
    6380:	00800074 	movhi	r2,1
    6384:	108a7a04 	addi	r2,r2,10728
    6388:	f800283a 	ret

0000638c <__locale_mb_cur_max>:
    638c:	00800074 	movhi	r2,1
    6390:	10913e04 	addi	r2,r2,17656
    6394:	10800017 	ldw	r2,0(r2)
    6398:	f800283a 	ret

0000639c <__locale_msgcharset>:
    639c:	00800074 	movhi	r2,1
    63a0:	108a7204 	addi	r2,r2,10696
    63a4:	f800283a 	ret

000063a8 <__locale_cjk_lang>:
    63a8:	0005883a 	mov	r2,zero
    63ac:	f800283a 	ret

000063b0 <_localeconv_r>:
    63b0:	00800074 	movhi	r2,1
    63b4:	108a8204 	addi	r2,r2,10760
    63b8:	f800283a 	ret

000063bc <setlocale>:
    63bc:	00c00074 	movhi	r3,1
    63c0:	18d13d04 	addi	r3,r3,17652
    63c4:	2005883a 	mov	r2,r4
    63c8:	19000017 	ldw	r4,0(r3)
    63cc:	280d883a 	mov	r6,r5
    63d0:	100b883a 	mov	r5,r2
    63d4:	00063041 	jmpi	6304 <_setlocale_r>

000063d8 <localeconv>:
    63d8:	00800074 	movhi	r2,1
    63dc:	108a8204 	addi	r2,r2,10760
    63e0:	f800283a 	ret

000063e4 <__smakebuf_r>:
    63e4:	2880030b 	ldhu	r2,12(r5)
    63e8:	10c0008c 	andi	r3,r2,2
    63ec:	1800401e 	bne	r3,zero,64f0 <__smakebuf_r+0x10c>
    63f0:	deffec04 	addi	sp,sp,-80
    63f4:	dc000f15 	stw	r16,60(sp)
    63f8:	2821883a 	mov	r16,r5
    63fc:	2940038f 	ldh	r5,14(r5)
    6400:	dc401015 	stw	r17,64(sp)
    6404:	dfc01315 	stw	ra,76(sp)
    6408:	dcc01215 	stw	r19,72(sp)
    640c:	dc801115 	stw	r18,68(sp)
    6410:	2023883a 	mov	r17,r4
    6414:	28001b16 	blt	r5,zero,6484 <__smakebuf_r+0xa0>
    6418:	d80d883a 	mov	r6,sp
    641c:	000a3a00 	call	a3a0 <_fstat_r>
    6420:	10001716 	blt	r2,zero,6480 <__smakebuf_r+0x9c>
    6424:	d8800117 	ldw	r2,4(sp)
    6428:	00e00014 	movui	r3,32768
    642c:	10bc000c 	andi	r2,r2,61440
    6430:	10c03726 	beq	r2,r3,6510 <__smakebuf_r+0x12c>
    6434:	80c0030b 	ldhu	r3,12(r16)
    6438:	18c20014 	ori	r3,r3,2048
    643c:	80c0030d 	sth	r3,12(r16)
    6440:	00c80004 	movi	r3,8192
    6444:	10c03c1e 	bne	r2,r3,6538 <__smakebuf_r+0x154>
    6448:	8140038f 	ldh	r5,14(r16)
    644c:	8809883a 	mov	r4,r17
    6450:	000a3f80 	call	a3f8 <_isatty_r>
    6454:	10004e26 	beq	r2,zero,6590 <__smakebuf_r+0x1ac>
    6458:	8080030b 	ldhu	r2,12(r16)
    645c:	04c00044 	movi	r19,1
    6460:	80c010c4 	addi	r3,r16,67
    6464:	14c4b03a 	or	r2,r2,r19
    6468:	8080030d 	sth	r2,12(r16)
    646c:	80c00015 	stw	r3,0(r16)
    6470:	80c00415 	stw	r3,16(r16)
    6474:	84c00515 	stw	r19,20(r16)
    6478:	04810004 	movi	r18,1024
    647c:	00000706 	br	649c <__smakebuf_r+0xb8>
    6480:	8080030b 	ldhu	r2,12(r16)
    6484:	10c0200c 	andi	r3,r2,128
    6488:	18001f1e 	bne	r3,zero,6508 <__smakebuf_r+0x124>
    648c:	04810004 	movi	r18,1024
    6490:	10820014 	ori	r2,r2,2048
    6494:	8080030d 	sth	r2,12(r16)
    6498:	0027883a 	mov	r19,zero
    649c:	8809883a 	mov	r4,r17
    64a0:	900b883a 	mov	r5,r18
    64a4:	000659c0 	call	659c <_malloc_r>
    64a8:	10002e26 	beq	r2,zero,6564 <__smakebuf_r+0x180>
    64ac:	80c0030b 	ldhu	r3,12(r16)
    64b0:	01000034 	movhi	r4,0
    64b4:	21153f04 	addi	r4,r4,21756
    64b8:	89000f15 	stw	r4,60(r17)
    64bc:	18c02014 	ori	r3,r3,128
    64c0:	80c0030d 	sth	r3,12(r16)
    64c4:	80800015 	stw	r2,0(r16)
    64c8:	80800415 	stw	r2,16(r16)
    64cc:	84800515 	stw	r18,20(r16)
    64d0:	98001c1e 	bne	r19,zero,6544 <__smakebuf_r+0x160>
    64d4:	dfc01317 	ldw	ra,76(sp)
    64d8:	dcc01217 	ldw	r19,72(sp)
    64dc:	dc801117 	ldw	r18,68(sp)
    64e0:	dc401017 	ldw	r17,64(sp)
    64e4:	dc000f17 	ldw	r16,60(sp)
    64e8:	dec01404 	addi	sp,sp,80
    64ec:	f800283a 	ret
    64f0:	288010c4 	addi	r2,r5,67
    64f4:	28800015 	stw	r2,0(r5)
    64f8:	28800415 	stw	r2,16(r5)
    64fc:	00800044 	movi	r2,1
    6500:	28800515 	stw	r2,20(r5)
    6504:	f800283a 	ret
    6508:	04801004 	movi	r18,64
    650c:	003fe006 	br	6490 <__smakebuf_r+0xac>
    6510:	81000a17 	ldw	r4,40(r16)
    6514:	00c00074 	movhi	r3,1
    6518:	18e25204 	addi	r3,r3,-30392
    651c:	20ffc51e 	bne	r4,r3,6434 <__smakebuf_r+0x50>
    6520:	80c0030b 	ldhu	r3,12(r16)
    6524:	01010004 	movi	r4,1024
    6528:	81001315 	stw	r4,76(r16)
    652c:	1906b03a 	or	r3,r3,r4
    6530:	80c0030d 	sth	r3,12(r16)
    6534:	003fc206 	br	6440 <__smakebuf_r+0x5c>
    6538:	0027883a 	mov	r19,zero
    653c:	04810004 	movi	r18,1024
    6540:	003fd606 	br	649c <__smakebuf_r+0xb8>
    6544:	8140038f 	ldh	r5,14(r16)
    6548:	8809883a 	mov	r4,r17
    654c:	000a3f80 	call	a3f8 <_isatty_r>
    6550:	103fe026 	beq	r2,zero,64d4 <__smakebuf_r+0xf0>
    6554:	8080030b 	ldhu	r2,12(r16)
    6558:	10800054 	ori	r2,r2,1
    655c:	8080030d 	sth	r2,12(r16)
    6560:	003fdc06 	br	64d4 <__smakebuf_r+0xf0>
    6564:	8080030b 	ldhu	r2,12(r16)
    6568:	10c0800c 	andi	r3,r2,512
    656c:	183fd91e 	bne	r3,zero,64d4 <__smakebuf_r+0xf0>
    6570:	10800094 	ori	r2,r2,2
    6574:	80c010c4 	addi	r3,r16,67
    6578:	8080030d 	sth	r2,12(r16)
    657c:	00800044 	movi	r2,1
    6580:	80c00015 	stw	r3,0(r16)
    6584:	80c00415 	stw	r3,16(r16)
    6588:	80800515 	stw	r2,20(r16)
    658c:	003fd106 	br	64d4 <__smakebuf_r+0xf0>
    6590:	04c00044 	movi	r19,1
    6594:	04810004 	movi	r18,1024
    6598:	003fc006 	br	649c <__smakebuf_r+0xb8>

0000659c <_malloc_r>:
    659c:	defff504 	addi	sp,sp,-44
    65a0:	dc800315 	stw	r18,12(sp)
    65a4:	dfc00a15 	stw	ra,40(sp)
    65a8:	df000915 	stw	fp,36(sp)
    65ac:	ddc00815 	stw	r23,32(sp)
    65b0:	dd800715 	stw	r22,28(sp)
    65b4:	dd400615 	stw	r21,24(sp)
    65b8:	dd000515 	stw	r20,20(sp)
    65bc:	dcc00415 	stw	r19,16(sp)
    65c0:	dc400215 	stw	r17,8(sp)
    65c4:	dc000115 	stw	r16,4(sp)
    65c8:	288002c4 	addi	r2,r5,11
    65cc:	00c00584 	movi	r3,22
    65d0:	2025883a 	mov	r18,r4
    65d4:	18802a2e 	bgeu	r3,r2,6680 <_malloc_r+0xe4>
    65d8:	047ffe04 	movi	r17,-8
    65dc:	1462703a 	and	r17,r2,r17
    65e0:	88009e16 	blt	r17,zero,685c <_malloc_r+0x2c0>
    65e4:	89409d36 	bltu	r17,r5,685c <_malloc_r+0x2c0>
    65e8:	000e25c0 	call	e25c <__malloc_lock>
    65ec:	00807dc4 	movi	r2,503
    65f0:	14402736 	bltu	r2,r17,6690 <_malloc_r+0xf4>
    65f4:	8806d0fa 	srli	r3,r17,3
    65f8:	04c00074 	movhi	r19,1
    65fc:	9cca9004 	addi	r19,r19,10816
    6600:	18c5883a 	add	r2,r3,r3
    6604:	1085883a 	add	r2,r2,r2
    6608:	1085883a 	add	r2,r2,r2
    660c:	9885883a 	add	r2,r19,r2
    6610:	14000317 	ldw	r16,12(r2)
    6614:	80814a26 	beq	r16,r2,6b40 <_malloc_r+0x5a4>
    6618:	80c00117 	ldw	r3,4(r16)
    661c:	81000317 	ldw	r4,12(r16)
    6620:	00bfff04 	movi	r2,-4
    6624:	1884703a 	and	r2,r3,r2
    6628:	81400217 	ldw	r5,8(r16)
    662c:	8085883a 	add	r2,r16,r2
    6630:	10c00117 	ldw	r3,4(r2)
    6634:	29000315 	stw	r4,12(r5)
    6638:	21400215 	stw	r5,8(r4)
    663c:	18c00054 	ori	r3,r3,1
    6640:	10c00115 	stw	r3,4(r2)
    6644:	9009883a 	mov	r4,r18
    6648:	000e27c0 	call	e27c <__malloc_unlock>
    664c:	80800204 	addi	r2,r16,8
    6650:	dfc00a17 	ldw	ra,40(sp)
    6654:	df000917 	ldw	fp,36(sp)
    6658:	ddc00817 	ldw	r23,32(sp)
    665c:	dd800717 	ldw	r22,28(sp)
    6660:	dd400617 	ldw	r21,24(sp)
    6664:	dd000517 	ldw	r20,20(sp)
    6668:	dcc00417 	ldw	r19,16(sp)
    666c:	dc800317 	ldw	r18,12(sp)
    6670:	dc400217 	ldw	r17,8(sp)
    6674:	dc000117 	ldw	r16,4(sp)
    6678:	dec00b04 	addi	sp,sp,44
    667c:	f800283a 	ret
    6680:	04400404 	movi	r17,16
    6684:	89407536 	bltu	r17,r5,685c <_malloc_r+0x2c0>
    6688:	000e25c0 	call	e25c <__malloc_lock>
    668c:	003fd906 	br	65f4 <_malloc_r+0x58>
    6690:	8806d27a 	srli	r3,r17,9
    6694:	18007526 	beq	r3,zero,686c <_malloc_r+0x2d0>
    6698:	00800104 	movi	r2,4
    669c:	10c0ef36 	bltu	r2,r3,6a5c <_malloc_r+0x4c0>
    66a0:	8806d1ba 	srli	r3,r17,6
    66a4:	19c00e04 	addi	r7,r3,56
    66a8:	39cb883a 	add	r5,r7,r7
    66ac:	04c00074 	movhi	r19,1
    66b0:	294b883a 	add	r5,r5,r5
    66b4:	9cca9004 	addi	r19,r19,10816
    66b8:	294b883a 	add	r5,r5,r5
    66bc:	994b883a 	add	r5,r19,r5
    66c0:	2c000317 	ldw	r16,12(r5)
    66c4:	2c000e26 	beq	r5,r16,6700 <_malloc_r+0x164>
    66c8:	80800117 	ldw	r2,4(r16)
    66cc:	01bfff04 	movi	r6,-4
    66d0:	010003c4 	movi	r4,15
    66d4:	1184703a 	and	r2,r2,r6
    66d8:	1447c83a 	sub	r3,r2,r17
    66dc:	20c00716 	blt	r4,r3,66fc <_malloc_r+0x160>
    66e0:	1800650e 	bge	r3,zero,6878 <_malloc_r+0x2dc>
    66e4:	84000317 	ldw	r16,12(r16)
    66e8:	2c000526 	beq	r5,r16,6700 <_malloc_r+0x164>
    66ec:	80800117 	ldw	r2,4(r16)
    66f0:	1184703a 	and	r2,r2,r6
    66f4:	1447c83a 	sub	r3,r2,r17
    66f8:	20fff90e 	bge	r4,r3,66e0 <_malloc_r+0x144>
    66fc:	39ffffc4 	addi	r7,r7,-1
    6700:	38c00044 	addi	r3,r7,1
    6704:	01800074 	movhi	r6,1
    6708:	9c000417 	ldw	r16,16(r19)
    670c:	318a9004 	addi	r6,r6,10816
    6710:	32400204 	addi	r9,r6,8
    6714:	82410326 	beq	r16,r9,6b24 <_malloc_r+0x588>
    6718:	81000117 	ldw	r4,4(r16)
    671c:	00bfff04 	movi	r2,-4
    6720:	208e703a 	and	r7,r4,r2
    6724:	3c45c83a 	sub	r2,r7,r17
    6728:	010003c4 	movi	r4,15
    672c:	2080ee16 	blt	r4,r2,6ae8 <_malloc_r+0x54c>
    6730:	32400515 	stw	r9,20(r6)
    6734:	32400415 	stw	r9,16(r6)
    6738:	1000510e 	bge	r2,zero,6880 <_malloc_r+0x2e4>
    673c:	00807fc4 	movi	r2,511
    6740:	11c0ce36 	bltu	r2,r7,6a7c <_malloc_r+0x4e0>
    6744:	3808d0fa 	srli	r4,r7,3
    6748:	01c00044 	movi	r7,1
    674c:	30800117 	ldw	r2,4(r6)
    6750:	210b883a 	add	r5,r4,r4
    6754:	294b883a 	add	r5,r5,r5
    6758:	2009d0ba 	srai	r4,r4,2
    675c:	294b883a 	add	r5,r5,r5
    6760:	298b883a 	add	r5,r5,r6
    6764:	2a000217 	ldw	r8,8(r5)
    6768:	3908983a 	sll	r4,r7,r4
    676c:	81400315 	stw	r5,12(r16)
    6770:	82000215 	stw	r8,8(r16)
    6774:	2088b03a 	or	r4,r4,r2
    6778:	2c000215 	stw	r16,8(r5)
    677c:	31000115 	stw	r4,4(r6)
    6780:	44000315 	stw	r16,12(r8)
    6784:	1805d0ba 	srai	r2,r3,2
    6788:	01400044 	movi	r5,1
    678c:	288a983a 	sll	r5,r5,r2
    6790:	21404336 	bltu	r4,r5,68a0 <_malloc_r+0x304>
    6794:	2144703a 	and	r2,r4,r5
    6798:	10000a1e 	bne	r2,zero,67c4 <_malloc_r+0x228>
    679c:	00bfff04 	movi	r2,-4
    67a0:	294b883a 	add	r5,r5,r5
    67a4:	1886703a 	and	r3,r3,r2
    67a8:	2144703a 	and	r2,r4,r5
    67ac:	18c00104 	addi	r3,r3,4
    67b0:	1000041e 	bne	r2,zero,67c4 <_malloc_r+0x228>
    67b4:	294b883a 	add	r5,r5,r5
    67b8:	2144703a 	and	r2,r4,r5
    67bc:	18c00104 	addi	r3,r3,4
    67c0:	103ffc26 	beq	r2,zero,67b4 <_malloc_r+0x218>
    67c4:	023fff04 	movi	r8,-4
    67c8:	01c003c4 	movi	r7,15
    67cc:	18c5883a 	add	r2,r3,r3
    67d0:	1085883a 	add	r2,r2,r2
    67d4:	1085883a 	add	r2,r2,r2
    67d8:	9895883a 	add	r10,r19,r2
    67dc:	52c00304 	addi	r11,r10,12
    67e0:	1819883a 	mov	r12,r3
    67e4:	5c000017 	ldw	r16,0(r11)
    67e8:	59bffd04 	addi	r6,r11,-12
    67ec:	8180041e 	bne	r16,r6,6800 <_malloc_r+0x264>
    67f0:	0000ce06 	br	6b2c <_malloc_r+0x590>
    67f4:	2000d70e 	bge	r4,zero,6b54 <_malloc_r+0x5b8>
    67f8:	84000317 	ldw	r16,12(r16)
    67fc:	8180cb26 	beq	r16,r6,6b2c <_malloc_r+0x590>
    6800:	80800117 	ldw	r2,4(r16)
    6804:	1204703a 	and	r2,r2,r8
    6808:	1449c83a 	sub	r4,r2,r17
    680c:	393ff90e 	bge	r7,r4,67f4 <_malloc_r+0x258>
    6810:	80800317 	ldw	r2,12(r16)
    6814:	80c00217 	ldw	r3,8(r16)
    6818:	89400054 	ori	r5,r17,1
    681c:	81400115 	stw	r5,4(r16)
    6820:	18800315 	stw	r2,12(r3)
    6824:	10c00215 	stw	r3,8(r2)
    6828:	8463883a 	add	r17,r16,r17
    682c:	9c400515 	stw	r17,20(r19)
    6830:	9c400415 	stw	r17,16(r19)
    6834:	20800054 	ori	r2,r4,1
    6838:	88800115 	stw	r2,4(r17)
    683c:	8a400315 	stw	r9,12(r17)
    6840:	8a400215 	stw	r9,8(r17)
    6844:	8923883a 	add	r17,r17,r4
    6848:	89000015 	stw	r4,0(r17)
    684c:	9009883a 	mov	r4,r18
    6850:	000e27c0 	call	e27c <__malloc_unlock>
    6854:	80800204 	addi	r2,r16,8
    6858:	003f7d06 	br	6650 <_malloc_r+0xb4>
    685c:	00800304 	movi	r2,12
    6860:	90800015 	stw	r2,0(r18)
    6864:	0005883a 	mov	r2,zero
    6868:	003f7906 	br	6650 <_malloc_r+0xb4>
    686c:	01401f84 	movi	r5,126
    6870:	01c00fc4 	movi	r7,63
    6874:	003f8d06 	br	66ac <_malloc_r+0x110>
    6878:	81000317 	ldw	r4,12(r16)
    687c:	003f6a06 	br	6628 <_malloc_r+0x8c>
    6880:	81c5883a 	add	r2,r16,r7
    6884:	10c00117 	ldw	r3,4(r2)
    6888:	9009883a 	mov	r4,r18
    688c:	18c00054 	ori	r3,r3,1
    6890:	10c00115 	stw	r3,4(r2)
    6894:	000e27c0 	call	e27c <__malloc_unlock>
    6898:	80800204 	addi	r2,r16,8
    689c:	003f6c06 	br	6650 <_malloc_r+0xb4>
    68a0:	9c000217 	ldw	r16,8(r19)
    68a4:	00bfff04 	movi	r2,-4
    68a8:	85800117 	ldw	r22,4(r16)
    68ac:	b0ac703a 	and	r22,r22,r2
    68b0:	b4400336 	bltu	r22,r17,68c0 <_malloc_r+0x324>
    68b4:	b445c83a 	sub	r2,r22,r17
    68b8:	00c003c4 	movi	r3,15
    68bc:	18805d16 	blt	r3,r2,6a34 <_malloc_r+0x498>
    68c0:	05c00074 	movhi	r23,1
    68c4:	00800074 	movhi	r2,1
    68c8:	bdd13f04 	addi	r23,r23,17660
    68cc:	10915304 	addi	r2,r2,17740
    68d0:	15400017 	ldw	r21,0(r2)
    68d4:	b9000017 	ldw	r4,0(r23)
    68d8:	00ffffc4 	movi	r3,-1
    68dc:	858d883a 	add	r6,r16,r22
    68e0:	8d6b883a 	add	r21,r17,r21
    68e4:	20c0e426 	beq	r4,r3,6c78 <_malloc_r+0x6dc>
    68e8:	ad4403c4 	addi	r21,r21,4111
    68ec:	00fc0004 	movi	r3,-4096
    68f0:	a8ea703a 	and	r21,r21,r3
    68f4:	9009883a 	mov	r4,r18
    68f8:	a80b883a 	mov	r5,r21
    68fc:	d9800015 	stw	r6,0(sp)
    6900:	000881c0 	call	881c <_sbrk_r>
    6904:	00ffffc4 	movi	r3,-1
    6908:	1029883a 	mov	r20,r2
    690c:	d9800017 	ldw	r6,0(sp)
    6910:	10c0a426 	beq	r2,r3,6ba4 <_malloc_r+0x608>
    6914:	1180a236 	bltu	r2,r6,6ba0 <_malloc_r+0x604>
    6918:	07000074 	movhi	fp,1
    691c:	e7115b04 	addi	fp,fp,17772
    6920:	e0c00017 	ldw	r3,0(fp)
    6924:	a8c7883a 	add	r3,r21,r3
    6928:	e0c00015 	stw	r3,0(fp)
    692c:	3500da26 	beq	r6,r20,6c98 <_malloc_r+0x6fc>
    6930:	b9000017 	ldw	r4,0(r23)
    6934:	00bfffc4 	movi	r2,-1
    6938:	2080e426 	beq	r4,r2,6ccc <_malloc_r+0x730>
    693c:	a185c83a 	sub	r2,r20,r6
    6940:	1885883a 	add	r2,r3,r2
    6944:	e0800015 	stw	r2,0(fp)
    6948:	a0c001cc 	andi	r3,r20,7
    694c:	1800b526 	beq	r3,zero,6c24 <_malloc_r+0x688>
    6950:	a0e9c83a 	sub	r20,r20,r3
    6954:	00840204 	movi	r2,4104
    6958:	a5000204 	addi	r20,r20,8
    695c:	10c7c83a 	sub	r3,r2,r3
    6960:	a545883a 	add	r2,r20,r21
    6964:	1083ffcc 	andi	r2,r2,4095
    6968:	18abc83a 	sub	r21,r3,r2
    696c:	9009883a 	mov	r4,r18
    6970:	a80b883a 	mov	r5,r21
    6974:	000881c0 	call	881c <_sbrk_r>
    6978:	00ffffc4 	movi	r3,-1
    697c:	10c0d026 	beq	r2,r3,6cc0 <_malloc_r+0x724>
    6980:	1507c83a 	sub	r3,r2,r20
    6984:	a8c7883a 	add	r3,r21,r3
    6988:	18c00054 	ori	r3,r3,1
    698c:	e0800017 	ldw	r2,0(fp)
    6990:	9d000215 	stw	r20,8(r19)
    6994:	a0c00115 	stw	r3,4(r20)
    6998:	a887883a 	add	r3,r21,r2
    699c:	e0c00015 	stw	r3,0(fp)
    69a0:	84c00e26 	beq	r16,r19,69dc <_malloc_r+0x440>
    69a4:	018003c4 	movi	r6,15
    69a8:	3580a02e 	bgeu	r6,r22,6c2c <_malloc_r+0x690>
    69ac:	81400117 	ldw	r5,4(r16)
    69b0:	013ffe04 	movi	r4,-8
    69b4:	b0bffd04 	addi	r2,r22,-12
    69b8:	1104703a 	and	r2,r2,r4
    69bc:	2900004c 	andi	r4,r5,1
    69c0:	1108b03a 	or	r4,r2,r4
    69c4:	81000115 	stw	r4,4(r16)
    69c8:	01400144 	movi	r5,5
    69cc:	8089883a 	add	r4,r16,r2
    69d0:	21400115 	stw	r5,4(r4)
    69d4:	21400215 	stw	r5,8(r4)
    69d8:	3080c036 	bltu	r6,r2,6cdc <_malloc_r+0x740>
    69dc:	00800074 	movhi	r2,1
    69e0:	10915204 	addi	r2,r2,17736
    69e4:	11000017 	ldw	r4,0(r2)
    69e8:	20c0012e 	bgeu	r4,r3,69f0 <_malloc_r+0x454>
    69ec:	10c00015 	stw	r3,0(r2)
    69f0:	00800074 	movhi	r2,1
    69f4:	10915104 	addi	r2,r2,17732
    69f8:	11000017 	ldw	r4,0(r2)
    69fc:	9c000217 	ldw	r16,8(r19)
    6a00:	20c0012e 	bgeu	r4,r3,6a08 <_malloc_r+0x46c>
    6a04:	10c00015 	stw	r3,0(r2)
    6a08:	80c00117 	ldw	r3,4(r16)
    6a0c:	00bfff04 	movi	r2,-4
    6a10:	1886703a 	and	r3,r3,r2
    6a14:	1c45c83a 	sub	r2,r3,r17
    6a18:	1c400236 	bltu	r3,r17,6a24 <_malloc_r+0x488>
    6a1c:	00c003c4 	movi	r3,15
    6a20:	18800416 	blt	r3,r2,6a34 <_malloc_r+0x498>
    6a24:	9009883a 	mov	r4,r18
    6a28:	000e27c0 	call	e27c <__malloc_unlock>
    6a2c:	0005883a 	mov	r2,zero
    6a30:	003f0706 	br	6650 <_malloc_r+0xb4>
    6a34:	88c00054 	ori	r3,r17,1
    6a38:	80c00115 	stw	r3,4(r16)
    6a3c:	8463883a 	add	r17,r16,r17
    6a40:	10800054 	ori	r2,r2,1
    6a44:	9c400215 	stw	r17,8(r19)
    6a48:	88800115 	stw	r2,4(r17)
    6a4c:	9009883a 	mov	r4,r18
    6a50:	000e27c0 	call	e27c <__malloc_unlock>
    6a54:	80800204 	addi	r2,r16,8
    6a58:	003efd06 	br	6650 <_malloc_r+0xb4>
    6a5c:	00800504 	movi	r2,20
    6a60:	10c0482e 	bgeu	r2,r3,6b84 <_malloc_r+0x5e8>
    6a64:	00801504 	movi	r2,84
    6a68:	10c06836 	bltu	r2,r3,6c0c <_malloc_r+0x670>
    6a6c:	8806d33a 	srli	r3,r17,12
    6a70:	19c01b84 	addi	r7,r3,110
    6a74:	39cb883a 	add	r5,r7,r7
    6a78:	003f0c06 	br	66ac <_malloc_r+0x110>
    6a7c:	3804d27a 	srli	r2,r7,9
    6a80:	01000104 	movi	r4,4
    6a84:	2080422e 	bgeu	r4,r2,6b90 <_malloc_r+0x5f4>
    6a88:	01000504 	movi	r4,20
    6a8c:	20807c36 	bltu	r4,r2,6c80 <_malloc_r+0x6e4>
    6a90:	110016c4 	addi	r4,r2,91
    6a94:	210b883a 	add	r5,r4,r4
    6a98:	294b883a 	add	r5,r5,r5
    6a9c:	294b883a 	add	r5,r5,r5
    6aa0:	994b883a 	add	r5,r19,r5
    6aa4:	28800217 	ldw	r2,8(r5)
    6aa8:	02000074 	movhi	r8,1
    6aac:	420a9004 	addi	r8,r8,10816
    6ab0:	11406326 	beq	r2,r5,6c40 <_malloc_r+0x6a4>
    6ab4:	01bfff04 	movi	r6,-4
    6ab8:	11000117 	ldw	r4,4(r2)
    6abc:	2188703a 	and	r4,r4,r6
    6ac0:	3900022e 	bgeu	r7,r4,6acc <_malloc_r+0x530>
    6ac4:	10800217 	ldw	r2,8(r2)
    6ac8:	28bffb1e 	bne	r5,r2,6ab8 <_malloc_r+0x51c>
    6acc:	11800317 	ldw	r6,12(r2)
    6ad0:	99000117 	ldw	r4,4(r19)
    6ad4:	81800315 	stw	r6,12(r16)
    6ad8:	80800215 	stw	r2,8(r16)
    6adc:	34000215 	stw	r16,8(r6)
    6ae0:	14000315 	stw	r16,12(r2)
    6ae4:	003f2706 	br	6784 <_malloc_r+0x1e8>
    6ae8:	88c00054 	ori	r3,r17,1
    6aec:	80c00115 	stw	r3,4(r16)
    6af0:	8463883a 	add	r17,r16,r17
    6af4:	34400515 	stw	r17,20(r6)
    6af8:	34400415 	stw	r17,16(r6)
    6afc:	10c00054 	ori	r3,r2,1
    6b00:	8a400315 	stw	r9,12(r17)
    6b04:	8a400215 	stw	r9,8(r17)
    6b08:	88c00115 	stw	r3,4(r17)
    6b0c:	88a3883a 	add	r17,r17,r2
    6b10:	88800015 	stw	r2,0(r17)
    6b14:	9009883a 	mov	r4,r18
    6b18:	000e27c0 	call	e27c <__malloc_unlock>
    6b1c:	80800204 	addi	r2,r16,8
    6b20:	003ecb06 	br	6650 <_malloc_r+0xb4>
    6b24:	31000117 	ldw	r4,4(r6)
    6b28:	003f1606 	br	6784 <_malloc_r+0x1e8>
    6b2c:	63000044 	addi	r12,r12,1
    6b30:	608000cc 	andi	r2,r12,3
    6b34:	5ac00204 	addi	r11,r11,8
    6b38:	103f2a1e 	bne	r2,zero,67e4 <_malloc_r+0x248>
    6b3c:	00002106 	br	6bc4 <_malloc_r+0x628>
    6b40:	80800204 	addi	r2,r16,8
    6b44:	84000517 	ldw	r16,20(r16)
    6b48:	143eb31e 	bne	r2,r16,6618 <_malloc_r+0x7c>
    6b4c:	18c00084 	addi	r3,r3,2
    6b50:	003eec06 	br	6704 <_malloc_r+0x168>
    6b54:	8085883a 	add	r2,r16,r2
    6b58:	10c00117 	ldw	r3,4(r2)
    6b5c:	81000317 	ldw	r4,12(r16)
    6b60:	81400217 	ldw	r5,8(r16)
    6b64:	18c00054 	ori	r3,r3,1
    6b68:	10c00115 	stw	r3,4(r2)
    6b6c:	29000315 	stw	r4,12(r5)
    6b70:	21400215 	stw	r5,8(r4)
    6b74:	9009883a 	mov	r4,r18
    6b78:	000e27c0 	call	e27c <__malloc_unlock>
    6b7c:	80800204 	addi	r2,r16,8
    6b80:	003eb306 	br	6650 <_malloc_r+0xb4>
    6b84:	19c016c4 	addi	r7,r3,91
    6b88:	39cb883a 	add	r5,r7,r7
    6b8c:	003ec706 	br	66ac <_malloc_r+0x110>
    6b90:	3804d1ba 	srli	r2,r7,6
    6b94:	11000e04 	addi	r4,r2,56
    6b98:	210b883a 	add	r5,r4,r4
    6b9c:	003fbe06 	br	6a98 <_malloc_r+0x4fc>
    6ba0:	84ff5d26 	beq	r16,r19,6918 <_malloc_r+0x37c>
    6ba4:	9c000217 	ldw	r16,8(r19)
    6ba8:	00bfff04 	movi	r2,-4
    6bac:	80c00117 	ldw	r3,4(r16)
    6bb0:	1886703a 	and	r3,r3,r2
    6bb4:	003f9706 	br	6a14 <_malloc_r+0x478>
    6bb8:	52800017 	ldw	r10,0(r10)
    6bbc:	18ffffc4 	addi	r3,r3,-1
    6bc0:	50805c1e 	bne	r10,r2,6d34 <_malloc_r+0x798>
    6bc4:	190000cc 	andi	r4,r3,3
    6bc8:	50bffe04 	addi	r2,r10,-8
    6bcc:	203ffa1e 	bne	r4,zero,6bb8 <_malloc_r+0x61c>
    6bd0:	98800117 	ldw	r2,4(r19)
    6bd4:	0146303a 	nor	r3,zero,r5
    6bd8:	1884703a 	and	r2,r3,r2
    6bdc:	98800115 	stw	r2,4(r19)
    6be0:	294b883a 	add	r5,r5,r5
    6be4:	117f2e36 	bltu	r2,r5,68a0 <_malloc_r+0x304>
    6be8:	283f2d26 	beq	r5,zero,68a0 <_malloc_r+0x304>
    6bec:	1146703a 	and	r3,r2,r5
    6bf0:	1800521e 	bne	r3,zero,6d3c <_malloc_r+0x7a0>
    6bf4:	6007883a 	mov	r3,r12
    6bf8:	294b883a 	add	r5,r5,r5
    6bfc:	1148703a 	and	r4,r2,r5
    6c00:	18c00104 	addi	r3,r3,4
    6c04:	203ffc26 	beq	r4,zero,6bf8 <_malloc_r+0x65c>
    6c08:	003ef006 	br	67cc <_malloc_r+0x230>
    6c0c:	00805504 	movi	r2,340
    6c10:	10c01336 	bltu	r2,r3,6c60 <_malloc_r+0x6c4>
    6c14:	8806d3fa 	srli	r3,r17,15
    6c18:	19c01dc4 	addi	r7,r3,119
    6c1c:	39cb883a 	add	r5,r7,r7
    6c20:	003ea206 	br	66ac <_malloc_r+0x110>
    6c24:	00c40004 	movi	r3,4096
    6c28:	003f4d06 	br	6960 <_malloc_r+0x3c4>
    6c2c:	00800044 	movi	r2,1
    6c30:	a0800115 	stw	r2,4(r20)
    6c34:	a021883a 	mov	r16,r20
    6c38:	0007883a 	mov	r3,zero
    6c3c:	003f7506 	br	6a14 <_malloc_r+0x478>
    6c40:	200bd0ba 	srai	r5,r4,2
    6c44:	01800044 	movi	r6,1
    6c48:	41000117 	ldw	r4,4(r8)
    6c4c:	314a983a 	sll	r5,r6,r5
    6c50:	100d883a 	mov	r6,r2
    6c54:	2908b03a 	or	r4,r5,r4
    6c58:	41000115 	stw	r4,4(r8)
    6c5c:	003f9d06 	br	6ad4 <_malloc_r+0x538>
    6c60:	00815504 	movi	r2,1364
    6c64:	10c01336 	bltu	r2,r3,6cb4 <_malloc_r+0x718>
    6c68:	8806d4ba 	srli	r3,r17,18
    6c6c:	19c01f04 	addi	r7,r3,124
    6c70:	39cb883a 	add	r5,r7,r7
    6c74:	003e8d06 	br	66ac <_malloc_r+0x110>
    6c78:	ad400404 	addi	r21,r21,16
    6c7c:	003f1d06 	br	68f4 <_malloc_r+0x358>
    6c80:	01001504 	movi	r4,84
    6c84:	20801c36 	bltu	r4,r2,6cf8 <_malloc_r+0x75c>
    6c88:	3804d33a 	srli	r2,r7,12
    6c8c:	11001b84 	addi	r4,r2,110
    6c90:	210b883a 	add	r5,r4,r4
    6c94:	003f8006 	br	6a98 <_malloc_r+0x4fc>
    6c98:	3083ffcc 	andi	r2,r6,4095
    6c9c:	103f241e 	bne	r2,zero,6930 <_malloc_r+0x394>
    6ca0:	99000217 	ldw	r4,8(r19)
    6ca4:	ad85883a 	add	r2,r21,r22
    6ca8:	10800054 	ori	r2,r2,1
    6cac:	20800115 	stw	r2,4(r4)
    6cb0:	003f4a06 	br	69dc <_malloc_r+0x440>
    6cb4:	01403f04 	movi	r5,252
    6cb8:	01c01f84 	movi	r7,126
    6cbc:	003e7b06 	br	66ac <_malloc_r+0x110>
    6cc0:	00c00044 	movi	r3,1
    6cc4:	002b883a 	mov	r21,zero
    6cc8:	003f3006 	br	698c <_malloc_r+0x3f0>
    6ccc:	00800074 	movhi	r2,1
    6cd0:	10913f04 	addi	r2,r2,17660
    6cd4:	15000015 	stw	r20,0(r2)
    6cd8:	003f1b06 	br	6948 <_malloc_r+0x3ac>
    6cdc:	9009883a 	mov	r4,r18
    6ce0:	81400204 	addi	r5,r16,8
    6ce4:	00059c00 	call	59c0 <_free_r>
    6ce8:	00800074 	movhi	r2,1
    6cec:	10915b04 	addi	r2,r2,17772
    6cf0:	10c00017 	ldw	r3,0(r2)
    6cf4:	003f3906 	br	69dc <_malloc_r+0x440>
    6cf8:	01005504 	movi	r4,340
    6cfc:	20800436 	bltu	r4,r2,6d10 <_malloc_r+0x774>
    6d00:	3804d3fa 	srli	r2,r7,15
    6d04:	11001dc4 	addi	r4,r2,119
    6d08:	210b883a 	add	r5,r4,r4
    6d0c:	003f6206 	br	6a98 <_malloc_r+0x4fc>
    6d10:	01015504 	movi	r4,1364
    6d14:	20800436 	bltu	r4,r2,6d28 <_malloc_r+0x78c>
    6d18:	3804d4ba 	srli	r2,r7,18
    6d1c:	11001f04 	addi	r4,r2,124
    6d20:	210b883a 	add	r5,r4,r4
    6d24:	003f5c06 	br	6a98 <_malloc_r+0x4fc>
    6d28:	01403f04 	movi	r5,252
    6d2c:	01001f84 	movi	r4,126
    6d30:	003f5906 	br	6a98 <_malloc_r+0x4fc>
    6d34:	98800117 	ldw	r2,4(r19)
    6d38:	003fa906 	br	6be0 <_malloc_r+0x644>
    6d3c:	6007883a 	mov	r3,r12
    6d40:	003ea206 	br	67cc <_malloc_r+0x230>

00006d44 <memchr>:
    6d44:	208000cc 	andi	r2,r4,3
    6d48:	280f883a 	mov	r7,r5
    6d4c:	10003526 	beq	r2,zero,6e24 <memchr+0xe0>
    6d50:	30bfffc4 	addi	r2,r6,-1
    6d54:	30001b26 	beq	r6,zero,6dc4 <memchr+0x80>
    6d58:	21800003 	ldbu	r6,0(r4)
    6d5c:	28c03fcc 	andi	r3,r5,255
    6d60:	30c01a26 	beq	r6,r3,6dcc <memchr+0x88>
    6d64:	180d883a 	mov	r6,r3
    6d68:	00000406 	br	6d7c <memchr+0x38>
    6d6c:	10001526 	beq	r2,zero,6dc4 <memchr+0x80>
    6d70:	20c00003 	ldbu	r3,0(r4)
    6d74:	10bfffc4 	addi	r2,r2,-1
    6d78:	19801426 	beq	r3,r6,6dcc <memchr+0x88>
    6d7c:	21000044 	addi	r4,r4,1
    6d80:	20c000cc 	andi	r3,r4,3
    6d84:	183ff91e 	bne	r3,zero,6d6c <memchr+0x28>
    6d88:	024000c4 	movi	r9,3
    6d8c:	48801136 	bltu	r9,r2,6dd4 <memchr+0x90>
    6d90:	10000c26 	beq	r2,zero,6dc4 <memchr+0x80>
    6d94:	20c00003 	ldbu	r3,0(r4)
    6d98:	29403fcc 	andi	r5,r5,255
    6d9c:	19400b26 	beq	r3,r5,6dcc <memchr+0x88>
    6da0:	20c00044 	addi	r3,r4,1
    6da4:	2085883a 	add	r2,r4,r2
    6da8:	39803fcc 	andi	r6,r7,255
    6dac:	00000306 	br	6dbc <memchr+0x78>
    6db0:	18c00044 	addi	r3,r3,1
    6db4:	197fffc3 	ldbu	r5,-1(r3)
    6db8:	29800426 	beq	r5,r6,6dcc <memchr+0x88>
    6dbc:	1809883a 	mov	r4,r3
    6dc0:	18bffb1e 	bne	r3,r2,6db0 <memchr+0x6c>
    6dc4:	0005883a 	mov	r2,zero
    6dc8:	f800283a 	ret
    6dcc:	2005883a 	mov	r2,r4
    6dd0:	f800283a 	ret
    6dd4:	28c03fcc 	andi	r3,r5,255
    6dd8:	1810923a 	slli	r8,r3,8
    6ddc:	02ffbff4 	movhi	r11,65279
    6de0:	02a02074 	movhi	r10,32897
    6de4:	40c6b03a 	or	r3,r8,r3
    6de8:	1810943a 	slli	r8,r3,16
    6dec:	5affbfc4 	addi	r11,r11,-257
    6df0:	52a02004 	addi	r10,r10,-32640
    6df4:	40d0b03a 	or	r8,r8,r3
    6df8:	20c00017 	ldw	r3,0(r4)
    6dfc:	40c6f03a 	xor	r3,r8,r3
    6e00:	1acd883a 	add	r6,r3,r11
    6e04:	00c6303a 	nor	r3,zero,r3
    6e08:	30c6703a 	and	r3,r6,r3
    6e0c:	1a86703a 	and	r3,r3,r10
    6e10:	183fdf1e 	bne	r3,zero,6d90 <memchr+0x4c>
    6e14:	10bfff04 	addi	r2,r2,-4
    6e18:	21000104 	addi	r4,r4,4
    6e1c:	48bff636 	bltu	r9,r2,6df8 <memchr+0xb4>
    6e20:	003fdb06 	br	6d90 <memchr+0x4c>
    6e24:	3005883a 	mov	r2,r6
    6e28:	003fd706 	br	6d88 <memchr+0x44>

00006e2c <memcpy>:
    6e2c:	deffff04 	addi	sp,sp,-4
    6e30:	dc000015 	stw	r16,0(sp)
    6e34:	00c003c4 	movi	r3,15
    6e38:	2005883a 	mov	r2,r4
    6e3c:	1980432e 	bgeu	r3,r6,6f4c <memcpy+0x120>
    6e40:	2146b03a 	or	r3,r4,r5
    6e44:	18c000cc 	andi	r3,r3,3
    6e48:	1800421e 	bne	r3,zero,6f54 <memcpy+0x128>
    6e4c:	343ffc04 	addi	r16,r6,-16
    6e50:	8020d13a 	srli	r16,r16,4
    6e54:	28c00104 	addi	r3,r5,4
    6e58:	23400104 	addi	r13,r4,4
    6e5c:	801e913a 	slli	r15,r16,4
    6e60:	2b000204 	addi	r12,r5,8
    6e64:	22c00204 	addi	r11,r4,8
    6e68:	7bc00504 	addi	r15,r15,20
    6e6c:	2a800304 	addi	r10,r5,12
    6e70:	22400304 	addi	r9,r4,12
    6e74:	2bdf883a 	add	r15,r5,r15
    6e78:	2811883a 	mov	r8,r5
    6e7c:	200f883a 	mov	r7,r4
    6e80:	41000017 	ldw	r4,0(r8)
    6e84:	39c00404 	addi	r7,r7,16
    6e88:	18c00404 	addi	r3,r3,16
    6e8c:	393ffc15 	stw	r4,-16(r7)
    6e90:	1bbffc17 	ldw	r14,-16(r3)
    6e94:	6b400404 	addi	r13,r13,16
    6e98:	5ac00404 	addi	r11,r11,16
    6e9c:	6bbffc15 	stw	r14,-16(r13)
    6ea0:	63800017 	ldw	r14,0(r12)
    6ea4:	4a400404 	addi	r9,r9,16
    6ea8:	42000404 	addi	r8,r8,16
    6eac:	5bbffc15 	stw	r14,-16(r11)
    6eb0:	53800017 	ldw	r14,0(r10)
    6eb4:	63000404 	addi	r12,r12,16
    6eb8:	52800404 	addi	r10,r10,16
    6ebc:	4bbffc15 	stw	r14,-16(r9)
    6ec0:	1bffef1e 	bne	r3,r15,6e80 <memcpy+0x54>
    6ec4:	81c00044 	addi	r7,r16,1
    6ec8:	380e913a 	slli	r7,r7,4
    6ecc:	310003cc 	andi	r4,r6,15
    6ed0:	02c000c4 	movi	r11,3
    6ed4:	11c7883a 	add	r3,r2,r7
    6ed8:	29cb883a 	add	r5,r5,r7
    6edc:	59001f2e 	bgeu	r11,r4,6f5c <memcpy+0x130>
    6ee0:	1813883a 	mov	r9,r3
    6ee4:	2811883a 	mov	r8,r5
    6ee8:	200f883a 	mov	r7,r4
    6eec:	42800017 	ldw	r10,0(r8)
    6ef0:	4a400104 	addi	r9,r9,4
    6ef4:	39ffff04 	addi	r7,r7,-4
    6ef8:	4abfff15 	stw	r10,-4(r9)
    6efc:	42000104 	addi	r8,r8,4
    6f00:	59fffa36 	bltu	r11,r7,6eec <memcpy+0xc0>
    6f04:	213fff04 	addi	r4,r4,-4
    6f08:	2008d0ba 	srli	r4,r4,2
    6f0c:	318000cc 	andi	r6,r6,3
    6f10:	21000044 	addi	r4,r4,1
    6f14:	2109883a 	add	r4,r4,r4
    6f18:	2109883a 	add	r4,r4,r4
    6f1c:	1907883a 	add	r3,r3,r4
    6f20:	290b883a 	add	r5,r5,r4
    6f24:	30000626 	beq	r6,zero,6f40 <memcpy+0x114>
    6f28:	198d883a 	add	r6,r3,r6
    6f2c:	29c00003 	ldbu	r7,0(r5)
    6f30:	18c00044 	addi	r3,r3,1
    6f34:	29400044 	addi	r5,r5,1
    6f38:	19ffffc5 	stb	r7,-1(r3)
    6f3c:	19bffb1e 	bne	r3,r6,6f2c <memcpy+0x100>
    6f40:	dc000017 	ldw	r16,0(sp)
    6f44:	dec00104 	addi	sp,sp,4
    6f48:	f800283a 	ret
    6f4c:	2007883a 	mov	r3,r4
    6f50:	003ff406 	br	6f24 <memcpy+0xf8>
    6f54:	2007883a 	mov	r3,r4
    6f58:	003ff306 	br	6f28 <memcpy+0xfc>
    6f5c:	200d883a 	mov	r6,r4
    6f60:	003ff006 	br	6f24 <memcpy+0xf8>

00006f64 <memmove>:
    6f64:	2005883a 	mov	r2,r4
    6f68:	29000b2e 	bgeu	r5,r4,6f98 <memmove+0x34>
    6f6c:	298f883a 	add	r7,r5,r6
    6f70:	21c0092e 	bgeu	r4,r7,6f98 <memmove+0x34>
    6f74:	2187883a 	add	r3,r4,r6
    6f78:	198bc83a 	sub	r5,r3,r6
    6f7c:	30004b26 	beq	r6,zero,70ac <memmove+0x148>
    6f80:	39ffffc4 	addi	r7,r7,-1
    6f84:	39000003 	ldbu	r4,0(r7)
    6f88:	18ffffc4 	addi	r3,r3,-1
    6f8c:	19000005 	stb	r4,0(r3)
    6f90:	197ffb1e 	bne	r3,r5,6f80 <memmove+0x1c>
    6f94:	f800283a 	ret
    6f98:	00c003c4 	movi	r3,15
    6f9c:	1980412e 	bgeu	r3,r6,70a4 <memmove+0x140>
    6fa0:	1146b03a 	or	r3,r2,r5
    6fa4:	18c000cc 	andi	r3,r3,3
    6fa8:	1800411e 	bne	r3,zero,70b0 <memmove+0x14c>
    6fac:	33fffc04 	addi	r15,r6,-16
    6fb0:	781ed13a 	srli	r15,r15,4
    6fb4:	28c00104 	addi	r3,r5,4
    6fb8:	13400104 	addi	r13,r2,4
    6fbc:	781c913a 	slli	r14,r15,4
    6fc0:	2b000204 	addi	r12,r5,8
    6fc4:	12c00204 	addi	r11,r2,8
    6fc8:	73800504 	addi	r14,r14,20
    6fcc:	2a800304 	addi	r10,r5,12
    6fd0:	12400304 	addi	r9,r2,12
    6fd4:	2b9d883a 	add	r14,r5,r14
    6fd8:	2811883a 	mov	r8,r5
    6fdc:	100f883a 	mov	r7,r2
    6fe0:	41000017 	ldw	r4,0(r8)
    6fe4:	39c00404 	addi	r7,r7,16
    6fe8:	18c00404 	addi	r3,r3,16
    6fec:	393ffc15 	stw	r4,-16(r7)
    6ff0:	193ffc17 	ldw	r4,-16(r3)
    6ff4:	6b400404 	addi	r13,r13,16
    6ff8:	5ac00404 	addi	r11,r11,16
    6ffc:	693ffc15 	stw	r4,-16(r13)
    7000:	61000017 	ldw	r4,0(r12)
    7004:	4a400404 	addi	r9,r9,16
    7008:	42000404 	addi	r8,r8,16
    700c:	593ffc15 	stw	r4,-16(r11)
    7010:	51000017 	ldw	r4,0(r10)
    7014:	63000404 	addi	r12,r12,16
    7018:	52800404 	addi	r10,r10,16
    701c:	493ffc15 	stw	r4,-16(r9)
    7020:	1bbfef1e 	bne	r3,r14,6fe0 <memmove+0x7c>
    7024:	79000044 	addi	r4,r15,1
    7028:	2008913a 	slli	r4,r4,4
    702c:	328003cc 	andi	r10,r6,15
    7030:	02c000c4 	movi	r11,3
    7034:	1107883a 	add	r3,r2,r4
    7038:	290b883a 	add	r5,r5,r4
    703c:	5a801e2e 	bgeu	r11,r10,70b8 <memmove+0x154>
    7040:	1813883a 	mov	r9,r3
    7044:	2811883a 	mov	r8,r5
    7048:	500f883a 	mov	r7,r10
    704c:	41000017 	ldw	r4,0(r8)
    7050:	4a400104 	addi	r9,r9,4
    7054:	39ffff04 	addi	r7,r7,-4
    7058:	493fff15 	stw	r4,-4(r9)
    705c:	42000104 	addi	r8,r8,4
    7060:	59fffa36 	bltu	r11,r7,704c <memmove+0xe8>
    7064:	513fff04 	addi	r4,r10,-4
    7068:	2008d0ba 	srli	r4,r4,2
    706c:	318000cc 	andi	r6,r6,3
    7070:	21000044 	addi	r4,r4,1
    7074:	2109883a 	add	r4,r4,r4
    7078:	2109883a 	add	r4,r4,r4
    707c:	1907883a 	add	r3,r3,r4
    7080:	290b883a 	add	r5,r5,r4
    7084:	30000926 	beq	r6,zero,70ac <memmove+0x148>
    7088:	198d883a 	add	r6,r3,r6
    708c:	29c00003 	ldbu	r7,0(r5)
    7090:	18c00044 	addi	r3,r3,1
    7094:	29400044 	addi	r5,r5,1
    7098:	19ffffc5 	stb	r7,-1(r3)
    709c:	19bffb1e 	bne	r3,r6,708c <memmove+0x128>
    70a0:	f800283a 	ret
    70a4:	1007883a 	mov	r3,r2
    70a8:	003ff606 	br	7084 <memmove+0x120>
    70ac:	f800283a 	ret
    70b0:	1007883a 	mov	r3,r2
    70b4:	003ff406 	br	7088 <memmove+0x124>
    70b8:	500d883a 	mov	r6,r10
    70bc:	003ff106 	br	7084 <memmove+0x120>

000070c0 <memset>:
    70c0:	20c000cc 	andi	r3,r4,3
    70c4:	2005883a 	mov	r2,r4
    70c8:	18004326 	beq	r3,zero,71d8 <memset+0x118>
    70cc:	31ffffc4 	addi	r7,r6,-1
    70d0:	30004026 	beq	r6,zero,71d4 <memset+0x114>
    70d4:	2813883a 	mov	r9,r5
    70d8:	200d883a 	mov	r6,r4
    70dc:	2007883a 	mov	r3,r4
    70e0:	00000406 	br	70f4 <memset+0x34>
    70e4:	3a3fffc4 	addi	r8,r7,-1
    70e8:	31800044 	addi	r6,r6,1
    70ec:	38003926 	beq	r7,zero,71d4 <memset+0x114>
    70f0:	400f883a 	mov	r7,r8
    70f4:	18c00044 	addi	r3,r3,1
    70f8:	32400005 	stb	r9,0(r6)
    70fc:	1a0000cc 	andi	r8,r3,3
    7100:	403ff81e 	bne	r8,zero,70e4 <memset+0x24>
    7104:	010000c4 	movi	r4,3
    7108:	21c02d2e 	bgeu	r4,r7,71c0 <memset+0x100>
    710c:	29803fcc 	andi	r6,r5,255
    7110:	3008923a 	slli	r4,r6,8
    7114:	218cb03a 	or	r6,r4,r6
    7118:	3008943a 	slli	r4,r6,16
    711c:	218cb03a 	or	r6,r4,r6
    7120:	010003c4 	movi	r4,15
    7124:	21c0182e 	bgeu	r4,r7,7188 <memset+0xc8>
    7128:	3b3ffc04 	addi	r12,r7,-16
    712c:	6018d13a 	srli	r12,r12,4
    7130:	1a000104 	addi	r8,r3,4
    7134:	1ac00204 	addi	r11,r3,8
    7138:	6008913a 	slli	r4,r12,4
    713c:	1a800304 	addi	r10,r3,12
    7140:	1813883a 	mov	r9,r3
    7144:	21000504 	addi	r4,r4,20
    7148:	1909883a 	add	r4,r3,r4
    714c:	49800015 	stw	r6,0(r9)
    7150:	41800015 	stw	r6,0(r8)
    7154:	59800015 	stw	r6,0(r11)
    7158:	51800015 	stw	r6,0(r10)
    715c:	42000404 	addi	r8,r8,16
    7160:	4a400404 	addi	r9,r9,16
    7164:	5ac00404 	addi	r11,r11,16
    7168:	52800404 	addi	r10,r10,16
    716c:	413ff71e 	bne	r8,r4,714c <memset+0x8c>
    7170:	63000044 	addi	r12,r12,1
    7174:	6018913a 	slli	r12,r12,4
    7178:	39c003cc 	andi	r7,r7,15
    717c:	010000c4 	movi	r4,3
    7180:	1b07883a 	add	r3,r3,r12
    7184:	21c00e2e 	bgeu	r4,r7,71c0 <memset+0x100>
    7188:	1813883a 	mov	r9,r3
    718c:	3811883a 	mov	r8,r7
    7190:	010000c4 	movi	r4,3
    7194:	49800015 	stw	r6,0(r9)
    7198:	423fff04 	addi	r8,r8,-4
    719c:	4a400104 	addi	r9,r9,4
    71a0:	223ffc36 	bltu	r4,r8,7194 <memset+0xd4>
    71a4:	393fff04 	addi	r4,r7,-4
    71a8:	2008d0ba 	srli	r4,r4,2
    71ac:	39c000cc 	andi	r7,r7,3
    71b0:	21000044 	addi	r4,r4,1
    71b4:	2109883a 	add	r4,r4,r4
    71b8:	2109883a 	add	r4,r4,r4
    71bc:	1907883a 	add	r3,r3,r4
    71c0:	38000426 	beq	r7,zero,71d4 <memset+0x114>
    71c4:	19cf883a 	add	r7,r3,r7
    71c8:	19400005 	stb	r5,0(r3)
    71cc:	18c00044 	addi	r3,r3,1
    71d0:	19fffd1e 	bne	r3,r7,71c8 <memset+0x108>
    71d4:	f800283a 	ret
    71d8:	2007883a 	mov	r3,r4
    71dc:	300f883a 	mov	r7,r6
    71e0:	003fc806 	br	7104 <memset+0x44>

000071e4 <_Balloc>:
    71e4:	20801317 	ldw	r2,76(r4)
    71e8:	defffc04 	addi	sp,sp,-16
    71ec:	dc400115 	stw	r17,4(sp)
    71f0:	dc000015 	stw	r16,0(sp)
    71f4:	dfc00315 	stw	ra,12(sp)
    71f8:	dc800215 	stw	r18,8(sp)
    71fc:	2023883a 	mov	r17,r4
    7200:	2821883a 	mov	r16,r5
    7204:	10000f26 	beq	r2,zero,7244 <_Balloc+0x60>
    7208:	8407883a 	add	r3,r16,r16
    720c:	18c7883a 	add	r3,r3,r3
    7210:	10c7883a 	add	r3,r2,r3
    7214:	18800017 	ldw	r2,0(r3)
    7218:	10001126 	beq	r2,zero,7260 <_Balloc+0x7c>
    721c:	11000017 	ldw	r4,0(r2)
    7220:	19000015 	stw	r4,0(r3)
    7224:	10000415 	stw	zero,16(r2)
    7228:	10000315 	stw	zero,12(r2)
    722c:	dfc00317 	ldw	ra,12(sp)
    7230:	dc800217 	ldw	r18,8(sp)
    7234:	dc400117 	ldw	r17,4(sp)
    7238:	dc000017 	ldw	r16,0(sp)
    723c:	dec00404 	addi	sp,sp,16
    7240:	f800283a 	ret
    7244:	01400104 	movi	r5,4
    7248:	01800844 	movi	r6,33
    724c:	0009fe40 	call	9fe4 <_calloc_r>
    7250:	88801315 	stw	r2,76(r17)
    7254:	103fec1e 	bne	r2,zero,7208 <_Balloc+0x24>
    7258:	0005883a 	mov	r2,zero
    725c:	003ff306 	br	722c <_Balloc+0x48>
    7260:	01400044 	movi	r5,1
    7264:	2c24983a 	sll	r18,r5,r16
    7268:	8809883a 	mov	r4,r17
    726c:	91800144 	addi	r6,r18,5
    7270:	318d883a 	add	r6,r6,r6
    7274:	318d883a 	add	r6,r6,r6
    7278:	0009fe40 	call	9fe4 <_calloc_r>
    727c:	103ff626 	beq	r2,zero,7258 <_Balloc+0x74>
    7280:	14000115 	stw	r16,4(r2)
    7284:	14800215 	stw	r18,8(r2)
    7288:	003fe606 	br	7224 <_Balloc+0x40>

0000728c <_Bfree>:
    728c:	28000826 	beq	r5,zero,72b0 <_Bfree+0x24>
    7290:	28c00117 	ldw	r3,4(r5)
    7294:	20801317 	ldw	r2,76(r4)
    7298:	18c7883a 	add	r3,r3,r3
    729c:	18c7883a 	add	r3,r3,r3
    72a0:	10c5883a 	add	r2,r2,r3
    72a4:	10c00017 	ldw	r3,0(r2)
    72a8:	28c00015 	stw	r3,0(r5)
    72ac:	11400015 	stw	r5,0(r2)
    72b0:	f800283a 	ret

000072b4 <__multadd>:
    72b4:	defff704 	addi	sp,sp,-36
    72b8:	dc800215 	stw	r18,8(sp)
    72bc:	2c800417 	ldw	r18,16(r5)
    72c0:	ddc00715 	stw	r23,28(sp)
    72c4:	dd800615 	stw	r22,24(sp)
    72c8:	dd000415 	stw	r20,16(sp)
    72cc:	dcc00315 	stw	r19,12(sp)
    72d0:	dc400115 	stw	r17,4(sp)
    72d4:	dc000015 	stw	r16,0(sp)
    72d8:	dfc00815 	stw	ra,32(sp)
    72dc:	dd400515 	stw	r21,20(sp)
    72e0:	2827883a 	mov	r19,r5
    72e4:	2029883a 	mov	r20,r4
    72e8:	3023883a 	mov	r17,r6
    72ec:	3821883a 	mov	r16,r7
    72f0:	2d800504 	addi	r22,r5,20
    72f4:	002f883a 	mov	r23,zero
    72f8:	b5400017 	ldw	r21,0(r22)
    72fc:	880b883a 	mov	r5,r17
    7300:	bdc00044 	addi	r23,r23,1
    7304:	a93fffcc 	andi	r4,r21,65535
    7308:	0000dc40 	call	dc4 <__mulsi3>
    730c:	1421883a 	add	r16,r2,r16
    7310:	a808d43a 	srli	r4,r21,16
    7314:	802ad43a 	srli	r21,r16,16
    7318:	880b883a 	mov	r5,r17
    731c:	0000dc40 	call	dc4 <__mulsi3>
    7320:	a88f883a 	add	r7,r21,r2
    7324:	3804943a 	slli	r2,r7,16
    7328:	80ffffcc 	andi	r3,r16,65535
    732c:	b5800104 	addi	r22,r22,4
    7330:	10c7883a 	add	r3,r2,r3
    7334:	b0ffff15 	stw	r3,-4(r22)
    7338:	3820d43a 	srli	r16,r7,16
    733c:	bcbfee16 	blt	r23,r18,72f8 <__multadd+0x44>
    7340:	80000926 	beq	r16,zero,7368 <__multadd+0xb4>
    7344:	98800217 	ldw	r2,8(r19)
    7348:	9080130e 	bge	r18,r2,7398 <__multadd+0xe4>
    734c:	90800144 	addi	r2,r18,5
    7350:	1085883a 	add	r2,r2,r2
    7354:	1085883a 	add	r2,r2,r2
    7358:	9885883a 	add	r2,r19,r2
    735c:	14000015 	stw	r16,0(r2)
    7360:	94800044 	addi	r18,r18,1
    7364:	9c800415 	stw	r18,16(r19)
    7368:	9805883a 	mov	r2,r19
    736c:	dfc00817 	ldw	ra,32(sp)
    7370:	ddc00717 	ldw	r23,28(sp)
    7374:	dd800617 	ldw	r22,24(sp)
    7378:	dd400517 	ldw	r21,20(sp)
    737c:	dd000417 	ldw	r20,16(sp)
    7380:	dcc00317 	ldw	r19,12(sp)
    7384:	dc800217 	ldw	r18,8(sp)
    7388:	dc400117 	ldw	r17,4(sp)
    738c:	dc000017 	ldw	r16,0(sp)
    7390:	dec00904 	addi	sp,sp,36
    7394:	f800283a 	ret
    7398:	99400117 	ldw	r5,4(r19)
    739c:	a009883a 	mov	r4,r20
    73a0:	29400044 	addi	r5,r5,1
    73a4:	00071e40 	call	71e4 <_Balloc>
    73a8:	99800417 	ldw	r6,16(r19)
    73ac:	11000304 	addi	r4,r2,12
    73b0:	99400304 	addi	r5,r19,12
    73b4:	31800084 	addi	r6,r6,2
    73b8:	318d883a 	add	r6,r6,r6
    73bc:	318d883a 	add	r6,r6,r6
    73c0:	1023883a 	mov	r17,r2
    73c4:	0006e2c0 	call	6e2c <memcpy>
    73c8:	98000a26 	beq	r19,zero,73f4 <__multadd+0x140>
    73cc:	99000117 	ldw	r4,4(r19)
    73d0:	a0c01317 	ldw	r3,76(r20)
    73d4:	2109883a 	add	r4,r4,r4
    73d8:	2109883a 	add	r4,r4,r4
    73dc:	1907883a 	add	r3,r3,r4
    73e0:	18800017 	ldw	r2,0(r3)
    73e4:	98800015 	stw	r2,0(r19)
    73e8:	1cc00015 	stw	r19,0(r3)
    73ec:	8827883a 	mov	r19,r17
    73f0:	003fd606 	br	734c <__multadd+0x98>
    73f4:	8827883a 	mov	r19,r17
    73f8:	003fd406 	br	734c <__multadd+0x98>

000073fc <__s2b>:
    73fc:	defff904 	addi	sp,sp,-28
    7400:	dc400115 	stw	r17,4(sp)
    7404:	dc000015 	stw	r16,0(sp)
    7408:	2023883a 	mov	r17,r4
    740c:	2821883a 	mov	r16,r5
    7410:	39000204 	addi	r4,r7,8
    7414:	01400244 	movi	r5,9
    7418:	dcc00315 	stw	r19,12(sp)
    741c:	dc800215 	stw	r18,8(sp)
    7420:	dfc00615 	stw	ra,24(sp)
    7424:	dd400515 	stw	r21,20(sp)
    7428:	dd000415 	stw	r20,16(sp)
    742c:	3825883a 	mov	r18,r7
    7430:	3027883a 	mov	r19,r6
    7434:	000b5080 	call	b508 <__divsi3>
    7438:	00c00044 	movi	r3,1
    743c:	000b883a 	mov	r5,zero
    7440:	1880030e 	bge	r3,r2,7450 <__s2b+0x54>
    7444:	18c7883a 	add	r3,r3,r3
    7448:	29400044 	addi	r5,r5,1
    744c:	18bffd16 	blt	r3,r2,7444 <__s2b+0x48>
    7450:	8809883a 	mov	r4,r17
    7454:	00071e40 	call	71e4 <_Balloc>
    7458:	d8c00717 	ldw	r3,28(sp)
    745c:	10c00515 	stw	r3,20(r2)
    7460:	00c00044 	movi	r3,1
    7464:	10c00415 	stw	r3,16(r2)
    7468:	00c00244 	movi	r3,9
    746c:	1cc0210e 	bge	r3,r19,74f4 <__s2b+0xf8>
    7470:	80eb883a 	add	r21,r16,r3
    7474:	a829883a 	mov	r20,r21
    7478:	84e1883a 	add	r16,r16,r19
    747c:	a1c00007 	ldb	r7,0(r20)
    7480:	8809883a 	mov	r4,r17
    7484:	a5000044 	addi	r20,r20,1
    7488:	100b883a 	mov	r5,r2
    748c:	01800284 	movi	r6,10
    7490:	39fff404 	addi	r7,r7,-48
    7494:	00072b40 	call	72b4 <__multadd>
    7498:	a43ff81e 	bne	r20,r16,747c <__s2b+0x80>
    749c:	ace1883a 	add	r16,r21,r19
    74a0:	843ffe04 	addi	r16,r16,-8
    74a4:	9c800a0e 	bge	r19,r18,74d0 <__s2b+0xd4>
    74a8:	94e5c83a 	sub	r18,r18,r19
    74ac:	84a5883a 	add	r18,r16,r18
    74b0:	81c00007 	ldb	r7,0(r16)
    74b4:	8809883a 	mov	r4,r17
    74b8:	84000044 	addi	r16,r16,1
    74bc:	100b883a 	mov	r5,r2
    74c0:	01800284 	movi	r6,10
    74c4:	39fff404 	addi	r7,r7,-48
    74c8:	00072b40 	call	72b4 <__multadd>
    74cc:	84bff81e 	bne	r16,r18,74b0 <__s2b+0xb4>
    74d0:	dfc00617 	ldw	ra,24(sp)
    74d4:	dd400517 	ldw	r21,20(sp)
    74d8:	dd000417 	ldw	r20,16(sp)
    74dc:	dcc00317 	ldw	r19,12(sp)
    74e0:	dc800217 	ldw	r18,8(sp)
    74e4:	dc400117 	ldw	r17,4(sp)
    74e8:	dc000017 	ldw	r16,0(sp)
    74ec:	dec00704 	addi	sp,sp,28
    74f0:	f800283a 	ret
    74f4:	84000284 	addi	r16,r16,10
    74f8:	1827883a 	mov	r19,r3
    74fc:	003fe906 	br	74a4 <__s2b+0xa8>

00007500 <__hi0bits>:
    7500:	20bfffec 	andhi	r2,r4,65535
    7504:	1000141e 	bne	r2,zero,7558 <__hi0bits+0x58>
    7508:	2008943a 	slli	r4,r4,16
    750c:	00800404 	movi	r2,16
    7510:	20ffc02c 	andhi	r3,r4,65280
    7514:	1800021e 	bne	r3,zero,7520 <__hi0bits+0x20>
    7518:	2008923a 	slli	r4,r4,8
    751c:	10800204 	addi	r2,r2,8
    7520:	20fc002c 	andhi	r3,r4,61440
    7524:	1800021e 	bne	r3,zero,7530 <__hi0bits+0x30>
    7528:	2008913a 	slli	r4,r4,4
    752c:	10800104 	addi	r2,r2,4
    7530:	20f0002c 	andhi	r3,r4,49152
    7534:	1800031e 	bne	r3,zero,7544 <__hi0bits+0x44>
    7538:	2109883a 	add	r4,r4,r4
    753c:	10800084 	addi	r2,r2,2
    7540:	2109883a 	add	r4,r4,r4
    7544:	20000316 	blt	r4,zero,7554 <__hi0bits+0x54>
    7548:	2110002c 	andhi	r4,r4,16384
    754c:	2000041e 	bne	r4,zero,7560 <__hi0bits+0x60>
    7550:	00800804 	movi	r2,32
    7554:	f800283a 	ret
    7558:	0005883a 	mov	r2,zero
    755c:	003fec06 	br	7510 <__hi0bits+0x10>
    7560:	10800044 	addi	r2,r2,1
    7564:	f800283a 	ret

00007568 <__lo0bits>:
    7568:	20c00017 	ldw	r3,0(r4)
    756c:	188001cc 	andi	r2,r3,7
    7570:	10000826 	beq	r2,zero,7594 <__lo0bits+0x2c>
    7574:	1880004c 	andi	r2,r3,1
    7578:	1000211e 	bne	r2,zero,7600 <__lo0bits+0x98>
    757c:	1880008c 	andi	r2,r3,2
    7580:	1000211e 	bne	r2,zero,7608 <__lo0bits+0xa0>
    7584:	1806d0ba 	srli	r3,r3,2
    7588:	00800084 	movi	r2,2
    758c:	20c00015 	stw	r3,0(r4)
    7590:	f800283a 	ret
    7594:	18bfffcc 	andi	r2,r3,65535
    7598:	10001326 	beq	r2,zero,75e8 <__lo0bits+0x80>
    759c:	0005883a 	mov	r2,zero
    75a0:	19403fcc 	andi	r5,r3,255
    75a4:	2800021e 	bne	r5,zero,75b0 <__lo0bits+0x48>
    75a8:	1806d23a 	srli	r3,r3,8
    75ac:	10800204 	addi	r2,r2,8
    75b0:	194003cc 	andi	r5,r3,15
    75b4:	2800021e 	bne	r5,zero,75c0 <__lo0bits+0x58>
    75b8:	1806d13a 	srli	r3,r3,4
    75bc:	10800104 	addi	r2,r2,4
    75c0:	194000cc 	andi	r5,r3,3
    75c4:	2800021e 	bne	r5,zero,75d0 <__lo0bits+0x68>
    75c8:	1806d0ba 	srli	r3,r3,2
    75cc:	10800084 	addi	r2,r2,2
    75d0:	1940004c 	andi	r5,r3,1
    75d4:	2800081e 	bne	r5,zero,75f8 <__lo0bits+0x90>
    75d8:	1806d07a 	srli	r3,r3,1
    75dc:	1800051e 	bne	r3,zero,75f4 <__lo0bits+0x8c>
    75e0:	00800804 	movi	r2,32
    75e4:	f800283a 	ret
    75e8:	1806d43a 	srli	r3,r3,16
    75ec:	00800404 	movi	r2,16
    75f0:	003feb06 	br	75a0 <__lo0bits+0x38>
    75f4:	10800044 	addi	r2,r2,1
    75f8:	20c00015 	stw	r3,0(r4)
    75fc:	f800283a 	ret
    7600:	0005883a 	mov	r2,zero
    7604:	f800283a 	ret
    7608:	1806d07a 	srli	r3,r3,1
    760c:	00800044 	movi	r2,1
    7610:	20c00015 	stw	r3,0(r4)
    7614:	f800283a 	ret

00007618 <__i2b>:
    7618:	defffd04 	addi	sp,sp,-12
    761c:	dc000015 	stw	r16,0(sp)
    7620:	04000044 	movi	r16,1
    7624:	dc400115 	stw	r17,4(sp)
    7628:	2823883a 	mov	r17,r5
    762c:	800b883a 	mov	r5,r16
    7630:	dfc00215 	stw	ra,8(sp)
    7634:	00071e40 	call	71e4 <_Balloc>
    7638:	14400515 	stw	r17,20(r2)
    763c:	14000415 	stw	r16,16(r2)
    7640:	dfc00217 	ldw	ra,8(sp)
    7644:	dc400117 	ldw	r17,4(sp)
    7648:	dc000017 	ldw	r16,0(sp)
    764c:	dec00304 	addi	sp,sp,12
    7650:	f800283a 	ret

00007654 <__multiply>:
    7654:	deffef04 	addi	sp,sp,-68
    7658:	dc400815 	stw	r17,32(sp)
    765c:	dc000715 	stw	r16,28(sp)
    7660:	2c400417 	ldw	r17,16(r5)
    7664:	34000417 	ldw	r16,16(r6)
    7668:	dd800d15 	stw	r22,52(sp)
    766c:	dc800915 	stw	r18,36(sp)
    7670:	dfc01015 	stw	ra,64(sp)
    7674:	df000f15 	stw	fp,60(sp)
    7678:	ddc00e15 	stw	r23,56(sp)
    767c:	dd400c15 	stw	r21,48(sp)
    7680:	dd000b15 	stw	r20,44(sp)
    7684:	dcc00a15 	stw	r19,40(sp)
    7688:	2825883a 	mov	r18,r5
    768c:	302d883a 	mov	r22,r6
    7690:	8c009116 	blt	r17,r16,78d8 <__multiply+0x284>
    7694:	8005883a 	mov	r2,r16
    7698:	8821883a 	mov	r16,r17
    769c:	1023883a 	mov	r17,r2
    76a0:	90800217 	ldw	r2,8(r18)
    76a4:	8447883a 	add	r3,r16,r17
    76a8:	d8c00215 	stw	r3,8(sp)
    76ac:	91400117 	ldw	r5,4(r18)
    76b0:	10c0010e 	bge	r2,r3,76b8 <__multiply+0x64>
    76b4:	29400044 	addi	r5,r5,1
    76b8:	00071e40 	call	71e4 <_Balloc>
    76bc:	d8c00217 	ldw	r3,8(sp)
    76c0:	d8800615 	stw	r2,24(sp)
    76c4:	18eb883a 	add	r21,r3,r3
    76c8:	ad6b883a 	add	r21,r21,r21
    76cc:	10c00504 	addi	r3,r2,20
    76d0:	1d6b883a 	add	r21,r3,r21
    76d4:	d8c00115 	stw	r3,4(sp)
    76d8:	dd400315 	stw	r21,12(sp)
    76dc:	1805883a 	mov	r2,r3
    76e0:	1d40042e 	bgeu	r3,r21,76f4 <__multiply+0xa0>
    76e4:	d8c00317 	ldw	r3,12(sp)
    76e8:	10000015 	stw	zero,0(r2)
    76ec:	10800104 	addi	r2,r2,4
    76f0:	10fffc36 	bltu	r2,r3,76e4 <__multiply+0x90>
    76f4:	8c63883a 	add	r17,r17,r17
    76f8:	b5800504 	addi	r22,r22,20
    76fc:	8c63883a 	add	r17,r17,r17
    7700:	94800504 	addi	r18,r18,20
    7704:	8421883a 	add	r16,r16,r16
    7708:	b463883a 	add	r17,r22,r17
    770c:	8421883a 	add	r16,r16,r16
    7710:	dd800015 	stw	r22,0(sp)
    7714:	dc800415 	stw	r18,16(sp)
    7718:	dc400515 	stw	r17,20(sp)
    771c:	9429883a 	add	r20,r18,r16
    7720:	b4404f2e 	bgeu	r22,r17,7860 <__multiply+0x20c>
    7724:	d8c00017 	ldw	r3,0(sp)
    7728:	1c800017 	ldw	r18,0(r3)
    772c:	943fffcc 	andi	r16,r18,65535
    7730:	80001e26 	beq	r16,zero,77ac <__multiply+0x158>
    7734:	dd800117 	ldw	r22,4(sp)
    7738:	dd400417 	ldw	r21,16(sp)
    773c:	0025883a 	mov	r18,zero
    7740:	adc00017 	ldw	r23,0(r21)
    7744:	b4c00017 	ldw	r19,0(r22)
    7748:	800b883a 	mov	r5,r16
    774c:	b93fffcc 	andi	r4,r23,65535
    7750:	0000dc40 	call	dc4 <__mulsi3>
    7754:	9c7fffcc 	andi	r17,r19,65535
    7758:	8885883a 	add	r2,r17,r2
    775c:	b808d43a 	srli	r4,r23,16
    7760:	14a3883a 	add	r17,r2,r18
    7764:	9826d43a 	srli	r19,r19,16
    7768:	8824d43a 	srli	r18,r17,16
    776c:	800b883a 	mov	r5,r16
    7770:	0000dc40 	call	dc4 <__mulsi3>
    7774:	9885883a 	add	r2,r19,r2
    7778:	14a7883a 	add	r19,r2,r18
    777c:	88ffffcc 	andi	r3,r17,65535
    7780:	9822943a 	slli	r17,r19,16
    7784:	ad400104 	addi	r21,r21,4
    7788:	b005883a 	mov	r2,r22
    778c:	88c6b03a 	or	r3,r17,r3
    7790:	b0c00015 	stw	r3,0(r22)
    7794:	9824d43a 	srli	r18,r19,16
    7798:	b5800104 	addi	r22,r22,4
    779c:	ad3fe836 	bltu	r21,r20,7740 <__multiply+0xec>
    77a0:	d8c00017 	ldw	r3,0(sp)
    77a4:	14800115 	stw	r18,4(r2)
    77a8:	1c800017 	ldw	r18,0(r3)
    77ac:	9024d43a 	srli	r18,r18,16
    77b0:	90002226 	beq	r18,zero,783c <__multiply+0x1e8>
    77b4:	d8c00117 	ldw	r3,4(sp)
    77b8:	dd800417 	ldw	r22,16(sp)
    77bc:	002f883a 	mov	r23,zero
    77c0:	1f000017 	ldw	fp,0(r3)
    77c4:	1823883a 	mov	r17,r3
    77c8:	182b883a 	mov	r21,r3
    77cc:	e021883a 	mov	r16,fp
    77d0:	00000106 	br	77d8 <__multiply+0x184>
    77d4:	982b883a 	mov	r21,r19
    77d8:	b100000b 	ldhu	r4,0(r22)
    77dc:	8020d43a 	srli	r16,r16,16
    77e0:	900b883a 	mov	r5,r18
    77e4:	0000dc40 	call	dc4 <__mulsi3>
    77e8:	1405883a 	add	r2,r2,r16
    77ec:	15ef883a 	add	r23,r2,r23
    77f0:	b804943a 	slli	r2,r23,16
    77f4:	e0ffffcc 	andi	r3,fp,65535
    77f8:	8c400104 	addi	r17,r17,4
    77fc:	10c6b03a 	or	r3,r2,r3
    7800:	88ffff15 	stw	r3,-4(r17)
    7804:	b5800104 	addi	r22,r22,4
    7808:	b13fff17 	ldw	r4,-4(r22)
    780c:	acc00104 	addi	r19,r21,4
    7810:	900b883a 	mov	r5,r18
    7814:	2008d43a 	srli	r4,r4,16
    7818:	9c000017 	ldw	r16,0(r19)
    781c:	0000dc40 	call	dc4 <__mulsi3>
    7820:	b806d43a 	srli	r3,r23,16
    7824:	813fffcc 	andi	r4,r16,65535
    7828:	1105883a 	add	r2,r2,r4
    782c:	10f9883a 	add	fp,r2,r3
    7830:	e02ed43a 	srli	r23,fp,16
    7834:	b53fe736 	bltu	r22,r20,77d4 <__multiply+0x180>
    7838:	af000115 	stw	fp,4(r21)
    783c:	d8c00017 	ldw	r3,0(sp)
    7840:	d9000517 	ldw	r4,20(sp)
    7844:	18c00104 	addi	r3,r3,4
    7848:	d8c00015 	stw	r3,0(sp)
    784c:	d8c00117 	ldw	r3,4(sp)
    7850:	18c00104 	addi	r3,r3,4
    7854:	d8c00115 	stw	r3,4(sp)
    7858:	d8c00017 	ldw	r3,0(sp)
    785c:	193fb136 	bltu	r3,r4,7724 <__multiply+0xd0>
    7860:	d8c00217 	ldw	r3,8(sp)
    7864:	00c00c0e 	bge	zero,r3,7898 <__multiply+0x244>
    7868:	d8c00317 	ldw	r3,12(sp)
    786c:	18bfff17 	ldw	r2,-4(r3)
    7870:	1d7fff04 	addi	r21,r3,-4
    7874:	10000326 	beq	r2,zero,7884 <__multiply+0x230>
    7878:	00000706 	br	7898 <__multiply+0x244>
    787c:	a8800017 	ldw	r2,0(r21)
    7880:	1000051e 	bne	r2,zero,7898 <__multiply+0x244>
    7884:	d8c00217 	ldw	r3,8(sp)
    7888:	ad7fff04 	addi	r21,r21,-4
    788c:	18ffffc4 	addi	r3,r3,-1
    7890:	d8c00215 	stw	r3,8(sp)
    7894:	183ff91e 	bne	r3,zero,787c <__multiply+0x228>
    7898:	d8c00617 	ldw	r3,24(sp)
    789c:	d9000217 	ldw	r4,8(sp)
    78a0:	1805883a 	mov	r2,r3
    78a4:	19000415 	stw	r4,16(r3)
    78a8:	dfc01017 	ldw	ra,64(sp)
    78ac:	df000f17 	ldw	fp,60(sp)
    78b0:	ddc00e17 	ldw	r23,56(sp)
    78b4:	dd800d17 	ldw	r22,52(sp)
    78b8:	dd400c17 	ldw	r21,48(sp)
    78bc:	dd000b17 	ldw	r20,44(sp)
    78c0:	dcc00a17 	ldw	r19,40(sp)
    78c4:	dc800917 	ldw	r18,36(sp)
    78c8:	dc400817 	ldw	r17,32(sp)
    78cc:	dc000717 	ldw	r16,28(sp)
    78d0:	dec01104 	addi	sp,sp,68
    78d4:	f800283a 	ret
    78d8:	3025883a 	mov	r18,r6
    78dc:	282d883a 	mov	r22,r5
    78e0:	003f6f06 	br	76a0 <__multiply+0x4c>

000078e4 <__pow5mult>:
    78e4:	defffa04 	addi	sp,sp,-24
    78e8:	dcc00315 	stw	r19,12(sp)
    78ec:	dc800215 	stw	r18,8(sp)
    78f0:	dc000015 	stw	r16,0(sp)
    78f4:	dfc00515 	stw	ra,20(sp)
    78f8:	dd000415 	stw	r20,16(sp)
    78fc:	dc400115 	stw	r17,4(sp)
    7900:	308000cc 	andi	r2,r6,3
    7904:	3021883a 	mov	r16,r6
    7908:	2027883a 	mov	r19,r4
    790c:	2825883a 	mov	r18,r5
    7910:	10002e1e 	bne	r2,zero,79cc <__pow5mult+0xe8>
    7914:	8021d0ba 	srai	r16,r16,2
    7918:	80001a26 	beq	r16,zero,7984 <__pow5mult+0xa0>
    791c:	9c401217 	ldw	r17,72(r19)
    7920:	8800061e 	bne	r17,zero,793c <__pow5mult+0x58>
    7924:	00003406 	br	79f8 <__pow5mult+0x114>
    7928:	8021d07a 	srai	r16,r16,1
    792c:	80001526 	beq	r16,zero,7984 <__pow5mult+0xa0>
    7930:	88800017 	ldw	r2,0(r17)
    7934:	10001c26 	beq	r2,zero,79a8 <__pow5mult+0xc4>
    7938:	1023883a 	mov	r17,r2
    793c:	80c0004c 	andi	r3,r16,1
    7940:	183ff926 	beq	r3,zero,7928 <__pow5mult+0x44>
    7944:	900b883a 	mov	r5,r18
    7948:	880d883a 	mov	r6,r17
    794c:	9809883a 	mov	r4,r19
    7950:	00076540 	call	7654 <__multiply>
    7954:	90001b26 	beq	r18,zero,79c4 <__pow5mult+0xe0>
    7958:	91c00117 	ldw	r7,4(r18)
    795c:	98c01317 	ldw	r3,76(r19)
    7960:	8021d07a 	srai	r16,r16,1
    7964:	39cf883a 	add	r7,r7,r7
    7968:	39cf883a 	add	r7,r7,r7
    796c:	19c7883a 	add	r3,r3,r7
    7970:	19000017 	ldw	r4,0(r3)
    7974:	91000015 	stw	r4,0(r18)
    7978:	1c800015 	stw	r18,0(r3)
    797c:	1025883a 	mov	r18,r2
    7980:	803feb1e 	bne	r16,zero,7930 <__pow5mult+0x4c>
    7984:	9005883a 	mov	r2,r18
    7988:	dfc00517 	ldw	ra,20(sp)
    798c:	dd000417 	ldw	r20,16(sp)
    7990:	dcc00317 	ldw	r19,12(sp)
    7994:	dc800217 	ldw	r18,8(sp)
    7998:	dc400117 	ldw	r17,4(sp)
    799c:	dc000017 	ldw	r16,0(sp)
    79a0:	dec00604 	addi	sp,sp,24
    79a4:	f800283a 	ret
    79a8:	9809883a 	mov	r4,r19
    79ac:	880b883a 	mov	r5,r17
    79b0:	880d883a 	mov	r6,r17
    79b4:	00076540 	call	7654 <__multiply>
    79b8:	88800015 	stw	r2,0(r17)
    79bc:	10000015 	stw	zero,0(r2)
    79c0:	003fdd06 	br	7938 <__pow5mult+0x54>
    79c4:	1025883a 	mov	r18,r2
    79c8:	003fd706 	br	7928 <__pow5mult+0x44>
    79cc:	10bfffc4 	addi	r2,r2,-1
    79d0:	1085883a 	add	r2,r2,r2
    79d4:	00c00074 	movhi	r3,1
    79d8:	18c8e804 	addi	r3,r3,9120
    79dc:	1085883a 	add	r2,r2,r2
    79e0:	1885883a 	add	r2,r3,r2
    79e4:	11800017 	ldw	r6,0(r2)
    79e8:	000f883a 	mov	r7,zero
    79ec:	00072b40 	call	72b4 <__multadd>
    79f0:	1025883a 	mov	r18,r2
    79f4:	003fc706 	br	7914 <__pow5mult+0x30>
    79f8:	05000044 	movi	r20,1
    79fc:	9809883a 	mov	r4,r19
    7a00:	a00b883a 	mov	r5,r20
    7a04:	00071e40 	call	71e4 <_Balloc>
    7a08:	1023883a 	mov	r17,r2
    7a0c:	00809c44 	movi	r2,625
    7a10:	88800515 	stw	r2,20(r17)
    7a14:	8d000415 	stw	r20,16(r17)
    7a18:	9c401215 	stw	r17,72(r19)
    7a1c:	88000015 	stw	zero,0(r17)
    7a20:	003fc606 	br	793c <__pow5mult+0x58>

00007a24 <__lshift>:
    7a24:	defff904 	addi	sp,sp,-28
    7a28:	dd000415 	stw	r20,16(sp)
    7a2c:	dcc00315 	stw	r19,12(sp)
    7a30:	3029d17a 	srai	r20,r6,5
    7a34:	2cc00417 	ldw	r19,16(r5)
    7a38:	28800217 	ldw	r2,8(r5)
    7a3c:	dd400515 	stw	r21,20(sp)
    7a40:	a4e7883a 	add	r19,r20,r19
    7a44:	dc800215 	stw	r18,8(sp)
    7a48:	dc400115 	stw	r17,4(sp)
    7a4c:	dc000015 	stw	r16,0(sp)
    7a50:	dfc00615 	stw	ra,24(sp)
    7a54:	9c000044 	addi	r16,r19,1
    7a58:	2823883a 	mov	r17,r5
    7a5c:	302b883a 	mov	r21,r6
    7a60:	2025883a 	mov	r18,r4
    7a64:	29400117 	ldw	r5,4(r5)
    7a68:	1400030e 	bge	r2,r16,7a78 <__lshift+0x54>
    7a6c:	1085883a 	add	r2,r2,r2
    7a70:	29400044 	addi	r5,r5,1
    7a74:	143ffd16 	blt	r2,r16,7a6c <__lshift+0x48>
    7a78:	9009883a 	mov	r4,r18
    7a7c:	00071e40 	call	71e4 <_Balloc>
    7a80:	11c00504 	addi	r7,r2,20
    7a84:	0500090e 	bge	zero,r20,7aac <__lshift+0x88>
    7a88:	3811883a 	mov	r8,r7
    7a8c:	0007883a 	mov	r3,zero
    7a90:	40000015 	stw	zero,0(r8)
    7a94:	18c00044 	addi	r3,r3,1
    7a98:	42000104 	addi	r8,r8,4
    7a9c:	1d3ffc1e 	bne	r3,r20,7a90 <__lshift+0x6c>
    7aa0:	18c7883a 	add	r3,r3,r3
    7aa4:	18c7883a 	add	r3,r3,r3
    7aa8:	38cf883a 	add	r7,r7,r3
    7aac:	89000417 	ldw	r4,16(r17)
    7ab0:	88c00504 	addi	r3,r17,20
    7ab4:	a98007cc 	andi	r6,r21,31
    7ab8:	2109883a 	add	r4,r4,r4
    7abc:	2109883a 	add	r4,r4,r4
    7ac0:	1909883a 	add	r4,r3,r4
    7ac4:	30002326 	beq	r6,zero,7b54 <__lshift+0x130>
    7ac8:	01400804 	movi	r5,32
    7acc:	298bc83a 	sub	r5,r5,r6
    7ad0:	0013883a 	mov	r9,zero
    7ad4:	1a000017 	ldw	r8,0(r3)
    7ad8:	3815883a 	mov	r10,r7
    7adc:	39c00104 	addi	r7,r7,4
    7ae0:	4190983a 	sll	r8,r8,r6
    7ae4:	18c00104 	addi	r3,r3,4
    7ae8:	4a10b03a 	or	r8,r9,r8
    7aec:	3a3fff15 	stw	r8,-4(r7)
    7af0:	1a3fff17 	ldw	r8,-4(r3)
    7af4:	4152d83a 	srl	r9,r8,r5
    7af8:	193ff636 	bltu	r3,r4,7ad4 <__lshift+0xb0>
    7afc:	52400115 	stw	r9,4(r10)
    7b00:	48001a1e 	bne	r9,zero,7b6c <__lshift+0x148>
    7b04:	843fffc4 	addi	r16,r16,-1
    7b08:	14000415 	stw	r16,16(r2)
    7b0c:	88000826 	beq	r17,zero,7b30 <__lshift+0x10c>
    7b10:	89000117 	ldw	r4,4(r17)
    7b14:	90c01317 	ldw	r3,76(r18)
    7b18:	2109883a 	add	r4,r4,r4
    7b1c:	2109883a 	add	r4,r4,r4
    7b20:	1907883a 	add	r3,r3,r4
    7b24:	19000017 	ldw	r4,0(r3)
    7b28:	89000015 	stw	r4,0(r17)
    7b2c:	1c400015 	stw	r17,0(r3)
    7b30:	dfc00617 	ldw	ra,24(sp)
    7b34:	dd400517 	ldw	r21,20(sp)
    7b38:	dd000417 	ldw	r20,16(sp)
    7b3c:	dcc00317 	ldw	r19,12(sp)
    7b40:	dc800217 	ldw	r18,8(sp)
    7b44:	dc400117 	ldw	r17,4(sp)
    7b48:	dc000017 	ldw	r16,0(sp)
    7b4c:	dec00704 	addi	sp,sp,28
    7b50:	f800283a 	ret
    7b54:	19400017 	ldw	r5,0(r3)
    7b58:	39c00104 	addi	r7,r7,4
    7b5c:	18c00104 	addi	r3,r3,4
    7b60:	397fff15 	stw	r5,-4(r7)
    7b64:	193ffb36 	bltu	r3,r4,7b54 <__lshift+0x130>
    7b68:	003fe606 	br	7b04 <__lshift+0xe0>
    7b6c:	9c000084 	addi	r16,r19,2
    7b70:	003fe406 	br	7b04 <__lshift+0xe0>

00007b74 <__mcmp>:
    7b74:	20800417 	ldw	r2,16(r4)
    7b78:	28c00417 	ldw	r3,16(r5)
    7b7c:	10c5c83a 	sub	r2,r2,r3
    7b80:	1000111e 	bne	r2,zero,7bc8 <__mcmp+0x54>
    7b84:	18c7883a 	add	r3,r3,r3
    7b88:	18c7883a 	add	r3,r3,r3
    7b8c:	21000504 	addi	r4,r4,20
    7b90:	29400504 	addi	r5,r5,20
    7b94:	20c5883a 	add	r2,r4,r3
    7b98:	28cb883a 	add	r5,r5,r3
    7b9c:	00000106 	br	7ba4 <__mcmp+0x30>
    7ba0:	20800a2e 	bgeu	r4,r2,7bcc <__mcmp+0x58>
    7ba4:	10bfff04 	addi	r2,r2,-4
    7ba8:	297fff04 	addi	r5,r5,-4
    7bac:	11800017 	ldw	r6,0(r2)
    7bb0:	28c00017 	ldw	r3,0(r5)
    7bb4:	30fffa26 	beq	r6,r3,7ba0 <__mcmp+0x2c>
    7bb8:	30c00236 	bltu	r6,r3,7bc4 <__mcmp+0x50>
    7bbc:	00800044 	movi	r2,1
    7bc0:	f800283a 	ret
    7bc4:	00bfffc4 	movi	r2,-1
    7bc8:	f800283a 	ret
    7bcc:	0005883a 	mov	r2,zero
    7bd0:	f800283a 	ret

00007bd4 <__mdiff>:
    7bd4:	defffb04 	addi	sp,sp,-20
    7bd8:	dc000015 	stw	r16,0(sp)
    7bdc:	2821883a 	mov	r16,r5
    7be0:	dcc00315 	stw	r19,12(sp)
    7be4:	300b883a 	mov	r5,r6
    7be8:	2027883a 	mov	r19,r4
    7bec:	8009883a 	mov	r4,r16
    7bf0:	dc800215 	stw	r18,8(sp)
    7bf4:	dfc00415 	stw	ra,16(sp)
    7bf8:	dc400115 	stw	r17,4(sp)
    7bfc:	3025883a 	mov	r18,r6
    7c00:	0007b740 	call	7b74 <__mcmp>
    7c04:	10005226 	beq	r2,zero,7d50 <__mdiff+0x17c>
    7c08:	10004c16 	blt	r2,zero,7d3c <__mdiff+0x168>
    7c0c:	0023883a 	mov	r17,zero
    7c10:	81400117 	ldw	r5,4(r16)
    7c14:	9809883a 	mov	r4,r19
    7c18:	00071e40 	call	71e4 <_Balloc>
    7c1c:	83400417 	ldw	r13,16(r16)
    7c20:	93800417 	ldw	r14,16(r18)
    7c24:	81000504 	addi	r4,r16,20
    7c28:	6b59883a 	add	r12,r13,r13
    7c2c:	739d883a 	add	r14,r14,r14
    7c30:	6319883a 	add	r12,r12,r12
    7c34:	91800504 	addi	r6,r18,20
    7c38:	739d883a 	add	r14,r14,r14
    7c3c:	14400315 	stw	r17,12(r2)
    7c40:	2319883a 	add	r12,r4,r12
    7c44:	339d883a 	add	r14,r6,r14
    7c48:	12400504 	addi	r9,r2,20
    7c4c:	0007883a 	mov	r3,zero
    7c50:	22000017 	ldw	r8,0(r4)
    7c54:	32800017 	ldw	r10,0(r6)
    7c58:	4ac00104 	addi	r11,r9,4
    7c5c:	41ffffcc 	andi	r7,r8,65535
    7c60:	38c7883a 	add	r3,r7,r3
    7c64:	51ffffcc 	andi	r7,r10,65535
    7c68:	19cfc83a 	sub	r7,r3,r7
    7c6c:	4010d43a 	srli	r8,r8,16
    7c70:	5014d43a 	srli	r10,r10,16
    7c74:	3807d43a 	srai	r3,r7,16
    7c78:	39ffffcc 	andi	r7,r7,65535
    7c7c:	4291c83a 	sub	r8,r8,r10
    7c80:	40c7883a 	add	r3,r8,r3
    7c84:	1810943a 	slli	r8,r3,16
    7c88:	31800104 	addi	r6,r6,4
    7c8c:	21000104 	addi	r4,r4,4
    7c90:	41ceb03a 	or	r7,r8,r7
    7c94:	49c00015 	stw	r7,0(r9)
    7c98:	1807d43a 	srai	r3,r3,16
    7c9c:	580b883a 	mov	r5,r11
    7ca0:	5813883a 	mov	r9,r11
    7ca4:	33bfea36 	bltu	r6,r14,7c50 <__mdiff+0x7c>
    7ca8:	2011883a 	mov	r8,r4
    7cac:	2300152e 	bgeu	r4,r12,7d04 <__mdiff+0x130>
    7cb0:	21400017 	ldw	r5,0(r4)
    7cb4:	4a400104 	addi	r9,r9,4
    7cb8:	21000104 	addi	r4,r4,4
    7cbc:	29ffffcc 	andi	r7,r5,65535
    7cc0:	38c7883a 	add	r3,r7,r3
    7cc4:	280ad43a 	srli	r5,r5,16
    7cc8:	180dd43a 	srai	r6,r3,16
    7ccc:	19ffffcc 	andi	r7,r3,65535
    7cd0:	3147883a 	add	r3,r6,r5
    7cd4:	180a943a 	slli	r5,r3,16
    7cd8:	1807d43a 	srai	r3,r3,16
    7cdc:	29ceb03a 	or	r7,r5,r7
    7ce0:	49ffff15 	stw	r7,-4(r9)
    7ce4:	233ff236 	bltu	r4,r12,7cb0 <__mdiff+0xdc>
    7ce8:	0206303a 	nor	r3,zero,r8
    7cec:	1b07883a 	add	r3,r3,r12
    7cf0:	1806d0ba 	srli	r3,r3,2
    7cf4:	18c00044 	addi	r3,r3,1
    7cf8:	18c7883a 	add	r3,r3,r3
    7cfc:	18c7883a 	add	r3,r3,r3
    7d00:	58cb883a 	add	r5,r11,r3
    7d04:	28ffff04 	addi	r3,r5,-4
    7d08:	3800041e 	bne	r7,zero,7d1c <__mdiff+0x148>
    7d0c:	18ffff04 	addi	r3,r3,-4
    7d10:	19000017 	ldw	r4,0(r3)
    7d14:	6b7fffc4 	addi	r13,r13,-1
    7d18:	203ffc26 	beq	r4,zero,7d0c <__mdiff+0x138>
    7d1c:	13400415 	stw	r13,16(r2)
    7d20:	dfc00417 	ldw	ra,16(sp)
    7d24:	dcc00317 	ldw	r19,12(sp)
    7d28:	dc800217 	ldw	r18,8(sp)
    7d2c:	dc400117 	ldw	r17,4(sp)
    7d30:	dc000017 	ldw	r16,0(sp)
    7d34:	dec00504 	addi	sp,sp,20
    7d38:	f800283a 	ret
    7d3c:	8005883a 	mov	r2,r16
    7d40:	04400044 	movi	r17,1
    7d44:	9021883a 	mov	r16,r18
    7d48:	1025883a 	mov	r18,r2
    7d4c:	003fb006 	br	7c10 <__mdiff+0x3c>
    7d50:	9809883a 	mov	r4,r19
    7d54:	000b883a 	mov	r5,zero
    7d58:	00071e40 	call	71e4 <_Balloc>
    7d5c:	00c00044 	movi	r3,1
    7d60:	10c00415 	stw	r3,16(r2)
    7d64:	10000515 	stw	zero,20(r2)
    7d68:	003fed06 	br	7d20 <__mdiff+0x14c>

00007d6c <__ulp>:
    7d6c:	295ffc2c 	andhi	r5,r5,32752
    7d70:	00bf3034 	movhi	r2,64704
    7d74:	2887883a 	add	r3,r5,r2
    7d78:	00c0020e 	bge	zero,r3,7d84 <__ulp+0x18>
    7d7c:	0005883a 	mov	r2,zero
    7d80:	f800283a 	ret
    7d84:	00c7c83a 	sub	r3,zero,r3
    7d88:	180bd53a 	srai	r5,r3,20
    7d8c:	008004c4 	movi	r2,19
    7d90:	11400a0e 	bge	r2,r5,7dbc <__ulp+0x50>
    7d94:	00800c84 	movi	r2,50
    7d98:	0007883a 	mov	r3,zero
    7d9c:	11400516 	blt	r2,r5,7db4 <__ulp+0x48>
    7da0:	00800cc4 	movi	r2,51
    7da4:	114bc83a 	sub	r5,r2,r5
    7da8:	00800044 	movi	r2,1
    7dac:	1144983a 	sll	r2,r2,r5
    7db0:	f800283a 	ret
    7db4:	00800044 	movi	r2,1
    7db8:	f800283a 	ret
    7dbc:	00800234 	movhi	r2,8
    7dc0:	1147d83a 	sra	r3,r2,r5
    7dc4:	0005883a 	mov	r2,zero
    7dc8:	f800283a 	ret

00007dcc <__b2d>:
    7dcc:	defffa04 	addi	sp,sp,-24
    7dd0:	dc000015 	stw	r16,0(sp)
    7dd4:	24000417 	ldw	r16,16(r4)
    7dd8:	dc400115 	stw	r17,4(sp)
    7ddc:	24400504 	addi	r17,r4,20
    7de0:	8421883a 	add	r16,r16,r16
    7de4:	8421883a 	add	r16,r16,r16
    7de8:	8c21883a 	add	r16,r17,r16
    7dec:	dc800215 	stw	r18,8(sp)
    7df0:	84bfff17 	ldw	r18,-4(r16)
    7df4:	dd000415 	stw	r20,16(sp)
    7df8:	dcc00315 	stw	r19,12(sp)
    7dfc:	9009883a 	mov	r4,r18
    7e00:	2829883a 	mov	r20,r5
    7e04:	dfc00515 	stw	ra,20(sp)
    7e08:	00075000 	call	7500 <__hi0bits>
    7e0c:	00c00804 	movi	r3,32
    7e10:	1887c83a 	sub	r3,r3,r2
    7e14:	a0c00015 	stw	r3,0(r20)
    7e18:	00c00284 	movi	r3,10
    7e1c:	84ffff04 	addi	r19,r16,-4
    7e20:	18801216 	blt	r3,r2,7e6c <__b2d+0xa0>
    7e24:	014002c4 	movi	r5,11
    7e28:	2889c83a 	sub	r4,r5,r2
    7e2c:	9106d83a 	srl	r3,r18,r4
    7e30:	18cffc34 	orhi	r3,r3,16368
    7e34:	8cc0282e 	bgeu	r17,r19,7ed8 <__b2d+0x10c>
    7e38:	817ffe17 	ldw	r5,-8(r16)
    7e3c:	290ad83a 	srl	r5,r5,r4
    7e40:	10800544 	addi	r2,r2,21
    7e44:	9084983a 	sll	r2,r18,r2
    7e48:	2884b03a 	or	r2,r5,r2
    7e4c:	dfc00517 	ldw	ra,20(sp)
    7e50:	dd000417 	ldw	r20,16(sp)
    7e54:	dcc00317 	ldw	r19,12(sp)
    7e58:	dc800217 	ldw	r18,8(sp)
    7e5c:	dc400117 	ldw	r17,4(sp)
    7e60:	dc000017 	ldw	r16,0(sp)
    7e64:	dec00604 	addi	sp,sp,24
    7e68:	f800283a 	ret
    7e6c:	113ffd44 	addi	r4,r2,-11
    7e70:	8cc00f2e 	bgeu	r17,r19,7eb0 <__b2d+0xe4>
    7e74:	81bffe04 	addi	r6,r16,-8
    7e78:	817ffe17 	ldw	r5,-8(r16)
    7e7c:	20001326 	beq	r4,zero,7ecc <__b2d+0x100>
    7e80:	00c00ac4 	movi	r3,43
    7e84:	1885c83a 	sub	r2,r3,r2
    7e88:	2886d83a 	srl	r3,r5,r2
    7e8c:	9124983a 	sll	r18,r18,r4
    7e90:	90e4b03a 	or	r18,r18,r3
    7e94:	90cffc34 	orhi	r3,r18,16368
    7e98:	8980112e 	bgeu	r17,r6,7ee0 <__b2d+0x114>
    7e9c:	81bffd17 	ldw	r6,-12(r16)
    7ea0:	308cd83a 	srl	r6,r6,r2
    7ea4:	2904983a 	sll	r2,r5,r4
    7ea8:	1184b03a 	or	r2,r2,r6
    7eac:	003fe706 	br	7e4c <__b2d+0x80>
    7eb0:	20000526 	beq	r4,zero,7ec8 <__b2d+0xfc>
    7eb4:	9124983a 	sll	r18,r18,r4
    7eb8:	000d883a 	mov	r6,zero
    7ebc:	000b883a 	mov	r5,zero
    7ec0:	90cffc34 	orhi	r3,r18,16368
    7ec4:	003ff706 	br	7ea4 <__b2d+0xd8>
    7ec8:	000b883a 	mov	r5,zero
    7ecc:	90cffc34 	orhi	r3,r18,16368
    7ed0:	2805883a 	mov	r2,r5
    7ed4:	003fdd06 	br	7e4c <__b2d+0x80>
    7ed8:	000b883a 	mov	r5,zero
    7edc:	003fd806 	br	7e40 <__b2d+0x74>
    7ee0:	000d883a 	mov	r6,zero
    7ee4:	003fef06 	br	7ea4 <__b2d+0xd8>

00007ee8 <__d2b>:
    7ee8:	defff704 	addi	sp,sp,-36
    7eec:	dc000215 	stw	r16,8(sp)
    7ef0:	3021883a 	mov	r16,r6
    7ef4:	dc400315 	stw	r17,12(sp)
    7ef8:	8022907a 	slli	r17,r16,1
    7efc:	dd400715 	stw	r21,28(sp)
    7f00:	282b883a 	mov	r21,r5
    7f04:	01400044 	movi	r5,1
    7f08:	dd000615 	stw	r20,24(sp)
    7f0c:	dcc00515 	stw	r19,20(sp)
    7f10:	dc800415 	stw	r18,16(sp)
    7f14:	dfc00815 	stw	ra,32(sp)
    7f18:	3829883a 	mov	r20,r7
    7f1c:	dc800917 	ldw	r18,36(sp)
    7f20:	8822d57a 	srli	r17,r17,21
    7f24:	00071e40 	call	71e4 <_Balloc>
    7f28:	1027883a 	mov	r19,r2
    7f2c:	00800434 	movhi	r2,16
    7f30:	10bfffc4 	addi	r2,r2,-1
    7f34:	808c703a 	and	r6,r16,r2
    7f38:	88000126 	beq	r17,zero,7f40 <__d2b+0x58>
    7f3c:	31800434 	orhi	r6,r6,16
    7f40:	d9800015 	stw	r6,0(sp)
    7f44:	a8001f26 	beq	r21,zero,7fc4 <__d2b+0xdc>
    7f48:	d9000104 	addi	r4,sp,4
    7f4c:	dd400115 	stw	r21,4(sp)
    7f50:	00075680 	call	7568 <__lo0bits>
    7f54:	d8c00017 	ldw	r3,0(sp)
    7f58:	1000291e 	bne	r2,zero,8000 <__d2b+0x118>
    7f5c:	d9000117 	ldw	r4,4(sp)
    7f60:	99000515 	stw	r4,20(r19)
    7f64:	1820c03a 	cmpne	r16,r3,zero
    7f68:	84000044 	addi	r16,r16,1
    7f6c:	98c00615 	stw	r3,24(r19)
    7f70:	9c000415 	stw	r16,16(r19)
    7f74:	88001b1e 	bne	r17,zero,7fe4 <__d2b+0xfc>
    7f78:	800690ba 	slli	r3,r16,2
    7f7c:	10bef384 	addi	r2,r2,-1074
    7f80:	a0800015 	stw	r2,0(r20)
    7f84:	98c5883a 	add	r2,r19,r3
    7f88:	11000417 	ldw	r4,16(r2)
    7f8c:	8020917a 	slli	r16,r16,5
    7f90:	00075000 	call	7500 <__hi0bits>
    7f94:	8085c83a 	sub	r2,r16,r2
    7f98:	90800015 	stw	r2,0(r18)
    7f9c:	9805883a 	mov	r2,r19
    7fa0:	dfc00817 	ldw	ra,32(sp)
    7fa4:	dd400717 	ldw	r21,28(sp)
    7fa8:	dd000617 	ldw	r20,24(sp)
    7fac:	dcc00517 	ldw	r19,20(sp)
    7fb0:	dc800417 	ldw	r18,16(sp)
    7fb4:	dc400317 	ldw	r17,12(sp)
    7fb8:	dc000217 	ldw	r16,8(sp)
    7fbc:	dec00904 	addi	sp,sp,36
    7fc0:	f800283a 	ret
    7fc4:	d809883a 	mov	r4,sp
    7fc8:	00075680 	call	7568 <__lo0bits>
    7fcc:	d8c00017 	ldw	r3,0(sp)
    7fd0:	04000044 	movi	r16,1
    7fd4:	9c000415 	stw	r16,16(r19)
    7fd8:	98c00515 	stw	r3,20(r19)
    7fdc:	10800804 	addi	r2,r2,32
    7fe0:	883fe526 	beq	r17,zero,7f78 <__d2b+0x90>
    7fe4:	8c7ef344 	addi	r17,r17,-1075
    7fe8:	88a3883a 	add	r17,r17,r2
    7fec:	00c00d44 	movi	r3,53
    7ff0:	a4400015 	stw	r17,0(r20)
    7ff4:	1885c83a 	sub	r2,r3,r2
    7ff8:	90800015 	stw	r2,0(r18)
    7ffc:	003fe706 	br	7f9c <__d2b+0xb4>
    8000:	01000804 	movi	r4,32
    8004:	2089c83a 	sub	r4,r4,r2
    8008:	1908983a 	sll	r4,r3,r4
    800c:	d9400117 	ldw	r5,4(sp)
    8010:	1886d83a 	srl	r3,r3,r2
    8014:	2148b03a 	or	r4,r4,r5
    8018:	99000515 	stw	r4,20(r19)
    801c:	d8c00015 	stw	r3,0(sp)
    8020:	003fd006 	br	7f64 <__d2b+0x7c>

00008024 <__ratio>:
    8024:	defff904 	addi	sp,sp,-28
    8028:	dc400315 	stw	r17,12(sp)
    802c:	2823883a 	mov	r17,r5
    8030:	d9400104 	addi	r5,sp,4
    8034:	dfc00615 	stw	ra,24(sp)
    8038:	dcc00515 	stw	r19,20(sp)
    803c:	dc800415 	stw	r18,16(sp)
    8040:	2027883a 	mov	r19,r4
    8044:	dc000215 	stw	r16,8(sp)
    8048:	0007dcc0 	call	7dcc <__b2d>
    804c:	8809883a 	mov	r4,r17
    8050:	d80b883a 	mov	r5,sp
    8054:	1025883a 	mov	r18,r2
    8058:	1821883a 	mov	r16,r3
    805c:	0007dcc0 	call	7dcc <__b2d>
    8060:	8a400417 	ldw	r9,16(r17)
    8064:	9a000417 	ldw	r8,16(r19)
    8068:	100d883a 	mov	r6,r2
    806c:	d8800017 	ldw	r2,0(sp)
    8070:	4251c83a 	sub	r8,r8,r9
    8074:	4012917a 	slli	r9,r8,5
    8078:	da000117 	ldw	r8,4(sp)
    807c:	4091c83a 	sub	r8,r8,r2
    8080:	4251883a 	add	r8,r8,r9
    8084:	02000d0e 	bge	zero,r8,80bc <__ratio+0x98>
    8088:	4010953a 	slli	r8,r8,20
    808c:	4421883a 	add	r16,r8,r16
    8090:	9009883a 	mov	r4,r18
    8094:	800b883a 	mov	r5,r16
    8098:	180f883a 	mov	r7,r3
    809c:	000be640 	call	be64 <__divdf3>
    80a0:	dfc00617 	ldw	ra,24(sp)
    80a4:	dcc00517 	ldw	r19,20(sp)
    80a8:	dc800417 	ldw	r18,16(sp)
    80ac:	dc400317 	ldw	r17,12(sp)
    80b0:	dc000217 	ldw	r16,8(sp)
    80b4:	dec00704 	addi	sp,sp,28
    80b8:	f800283a 	ret
    80bc:	4010953a 	slli	r8,r8,20
    80c0:	1a07c83a 	sub	r3,r3,r8
    80c4:	003ff206 	br	8090 <__ratio+0x6c>

000080c8 <_mprec_log10>:
    80c8:	defffe04 	addi	sp,sp,-8
    80cc:	dc000015 	stw	r16,0(sp)
    80d0:	dfc00115 	stw	ra,4(sp)
    80d4:	008005c4 	movi	r2,23
    80d8:	2021883a 	mov	r16,r4
    80dc:	11000d0e 	bge	r2,r4,8114 <_mprec_log10+0x4c>
    80e0:	0005883a 	mov	r2,zero
    80e4:	00cffc34 	movhi	r3,16368
    80e8:	843fffc4 	addi	r16,r16,-1
    80ec:	1009883a 	mov	r4,r2
    80f0:	180b883a 	mov	r5,r3
    80f4:	000d883a 	mov	r6,zero
    80f8:	01d00934 	movhi	r7,16420
    80fc:	000ca280 	call	ca28 <__muldf3>
    8100:	803ff91e 	bne	r16,zero,80e8 <_mprec_log10+0x20>
    8104:	dfc00117 	ldw	ra,4(sp)
    8108:	dc000017 	ldw	r16,0(sp)
    810c:	dec00204 	addi	sp,sp,8
    8110:	f800283a 	ret
    8114:	202090fa 	slli	r16,r4,3
    8118:	00800074 	movhi	r2,1
    811c:	1088ff04 	addi	r2,r2,9212
    8120:	1421883a 	add	r16,r2,r16
    8124:	80800017 	ldw	r2,0(r16)
    8128:	80c00117 	ldw	r3,4(r16)
    812c:	dfc00117 	ldw	ra,4(sp)
    8130:	dc000017 	ldw	r16,0(sp)
    8134:	dec00204 	addi	sp,sp,8
    8138:	f800283a 	ret

0000813c <__copybits>:
    813c:	297fffc4 	addi	r5,r5,-1
    8140:	280fd17a 	srai	r7,r5,5
    8144:	30c00417 	ldw	r3,16(r6)
    8148:	30800504 	addi	r2,r6,20
    814c:	39c00044 	addi	r7,r7,1
    8150:	18c7883a 	add	r3,r3,r3
    8154:	39cf883a 	add	r7,r7,r7
    8158:	18c7883a 	add	r3,r3,r3
    815c:	39cf883a 	add	r7,r7,r7
    8160:	10c7883a 	add	r3,r2,r3
    8164:	21cf883a 	add	r7,r4,r7
    8168:	10c00d2e 	bgeu	r2,r3,81a0 <__copybits+0x64>
    816c:	200b883a 	mov	r5,r4
    8170:	12000017 	ldw	r8,0(r2)
    8174:	29400104 	addi	r5,r5,4
    8178:	10800104 	addi	r2,r2,4
    817c:	2a3fff15 	stw	r8,-4(r5)
    8180:	10fffb36 	bltu	r2,r3,8170 <__copybits+0x34>
    8184:	1985c83a 	sub	r2,r3,r6
    8188:	10bffac4 	addi	r2,r2,-21
    818c:	1004d0ba 	srli	r2,r2,2
    8190:	10800044 	addi	r2,r2,1
    8194:	1085883a 	add	r2,r2,r2
    8198:	1085883a 	add	r2,r2,r2
    819c:	2089883a 	add	r4,r4,r2
    81a0:	21c0032e 	bgeu	r4,r7,81b0 <__copybits+0x74>
    81a4:	20000015 	stw	zero,0(r4)
    81a8:	21000104 	addi	r4,r4,4
    81ac:	21fffd36 	bltu	r4,r7,81a4 <__copybits+0x68>
    81b0:	f800283a 	ret

000081b4 <__any_on>:
    81b4:	20c00417 	ldw	r3,16(r4)
    81b8:	2805d17a 	srai	r2,r5,5
    81bc:	21000504 	addi	r4,r4,20
    81c0:	18800d0e 	bge	r3,r2,81f8 <__any_on+0x44>
    81c4:	18c7883a 	add	r3,r3,r3
    81c8:	18c7883a 	add	r3,r3,r3
    81cc:	20c7883a 	add	r3,r4,r3
    81d0:	20c0192e 	bgeu	r4,r3,8238 <__any_on+0x84>
    81d4:	18bfff17 	ldw	r2,-4(r3)
    81d8:	18ffff04 	addi	r3,r3,-4
    81dc:	1000041e 	bne	r2,zero,81f0 <__any_on+0x3c>
    81e0:	20c0142e 	bgeu	r4,r3,8234 <__any_on+0x80>
    81e4:	18ffff04 	addi	r3,r3,-4
    81e8:	19400017 	ldw	r5,0(r3)
    81ec:	283ffc26 	beq	r5,zero,81e0 <__any_on+0x2c>
    81f0:	00800044 	movi	r2,1
    81f4:	f800283a 	ret
    81f8:	10c00a0e 	bge	r2,r3,8224 <__any_on+0x70>
    81fc:	1085883a 	add	r2,r2,r2
    8200:	1085883a 	add	r2,r2,r2
    8204:	294007cc 	andi	r5,r5,31
    8208:	2087883a 	add	r3,r4,r2
    820c:	283ff026 	beq	r5,zero,81d0 <__any_on+0x1c>
    8210:	19800017 	ldw	r6,0(r3)
    8214:	3144d83a 	srl	r2,r6,r5
    8218:	114a983a 	sll	r5,r2,r5
    821c:	29bff41e 	bne	r5,r6,81f0 <__any_on+0x3c>
    8220:	003feb06 	br	81d0 <__any_on+0x1c>
    8224:	1085883a 	add	r2,r2,r2
    8228:	1085883a 	add	r2,r2,r2
    822c:	2087883a 	add	r3,r4,r2
    8230:	003fe706 	br	81d0 <__any_on+0x1c>
    8234:	f800283a 	ret
    8238:	0005883a 	mov	r2,zero
    823c:	f800283a 	ret

00008240 <_realloc_r>:
    8240:	defff604 	addi	sp,sp,-40
    8244:	dd000415 	stw	r20,16(sp)
    8248:	dc400115 	stw	r17,4(sp)
    824c:	dfc00915 	stw	ra,36(sp)
    8250:	df000815 	stw	fp,32(sp)
    8254:	ddc00715 	stw	r23,28(sp)
    8258:	dd800615 	stw	r22,24(sp)
    825c:	dd400515 	stw	r21,20(sp)
    8260:	dcc00315 	stw	r19,12(sp)
    8264:	dc800215 	stw	r18,8(sp)
    8268:	dc000015 	stw	r16,0(sp)
    826c:	2829883a 	mov	r20,r5
    8270:	3023883a 	mov	r17,r6
    8274:	2800ad26 	beq	r5,zero,852c <_realloc_r+0x2ec>
    8278:	2025883a 	mov	r18,r4
    827c:	000e25c0 	call	e25c <__malloc_lock>
    8280:	a0ffff17 	ldw	r3,-4(r20)
    8284:	043fff04 	movi	r16,-4
    8288:	890002c4 	addi	r4,r17,11
    828c:	01c00584 	movi	r7,22
    8290:	a57ffe04 	addi	r21,r20,-8
    8294:	1c20703a 	and	r16,r3,r16
    8298:	39001d2e 	bgeu	r7,r4,8310 <_realloc_r+0xd0>
    829c:	05bffe04 	movi	r22,-8
    82a0:	25ac703a 	and	r22,r4,r22
    82a4:	b00f883a 	mov	r7,r22
    82a8:	b0006516 	blt	r22,zero,8440 <_realloc_r+0x200>
    82ac:	b4406436 	bltu	r22,r17,8440 <_realloc_r+0x200>
    82b0:	81c01a0e 	bge	r16,r7,831c <_realloc_r+0xdc>
    82b4:	07000074 	movhi	fp,1
    82b8:	e70a9004 	addi	fp,fp,10816
    82bc:	e1400217 	ldw	r5,8(fp)
    82c0:	ac11883a 	add	r8,r21,r16
    82c4:	2a006226 	beq	r5,r8,8450 <_realloc_r+0x210>
    82c8:	41800117 	ldw	r6,4(r8)
    82cc:	027fff84 	movi	r9,-2
    82d0:	3252703a 	and	r9,r6,r9
    82d4:	4253883a 	add	r9,r8,r9
    82d8:	49000117 	ldw	r4,4(r9)
    82dc:	2100004c 	andi	r4,r4,1
    82e0:	2000281e 	bne	r4,zero,8384 <_realloc_r+0x144>
    82e4:	00bfff04 	movi	r2,-4
    82e8:	3084703a 	and	r2,r6,r2
    82ec:	1409883a 	add	r4,r2,r16
    82f0:	21c05e16 	blt	r4,r7,846c <_realloc_r+0x22c>
    82f4:	40800317 	ldw	r2,12(r8)
    82f8:	41400217 	ldw	r5,8(r8)
    82fc:	a023883a 	mov	r17,r20
    8300:	2021883a 	mov	r16,r4
    8304:	28800315 	stw	r2,12(r5)
    8308:	11400215 	stw	r5,8(r2)
    830c:	00000406 	br	8320 <_realloc_r+0xe0>
    8310:	01c00404 	movi	r7,16
    8314:	382d883a 	mov	r22,r7
    8318:	003fe406 	br	82ac <_realloc_r+0x6c>
    831c:	a023883a 	mov	r17,r20
    8320:	858fc83a 	sub	r7,r16,r22
    8324:	008003c4 	movi	r2,15
    8328:	18c0004c 	andi	r3,r3,1
    832c:	11c07236 	bltu	r2,r7,84f8 <_realloc_r+0x2b8>
    8330:	1c06b03a 	or	r3,r3,r16
    8334:	a8c00115 	stw	r3,4(r21)
    8338:	ac21883a 	add	r16,r21,r16
    833c:	80800117 	ldw	r2,4(r16)
    8340:	10800054 	ori	r2,r2,1
    8344:	80800115 	stw	r2,4(r16)
    8348:	9009883a 	mov	r4,r18
    834c:	000e27c0 	call	e27c <__malloc_unlock>
    8350:	8805883a 	mov	r2,r17
    8354:	dfc00917 	ldw	ra,36(sp)
    8358:	df000817 	ldw	fp,32(sp)
    835c:	ddc00717 	ldw	r23,28(sp)
    8360:	dd800617 	ldw	r22,24(sp)
    8364:	dd400517 	ldw	r21,20(sp)
    8368:	dd000417 	ldw	r20,16(sp)
    836c:	dcc00317 	ldw	r19,12(sp)
    8370:	dc800217 	ldw	r18,8(sp)
    8374:	dc400117 	ldw	r17,4(sp)
    8378:	dc000017 	ldw	r16,0(sp)
    837c:	dec00a04 	addi	sp,sp,40
    8380:	f800283a 	ret
    8384:	18c0004c 	andi	r3,r3,1
    8388:	1800081e 	bne	r3,zero,83ac <_realloc_r+0x16c>
    838c:	a4fffe17 	ldw	r19,-8(r20)
    8390:	00bfff04 	movi	r2,-4
    8394:	ace7c83a 	sub	r19,r21,r19
    8398:	98c00117 	ldw	r3,4(r19)
    839c:	1886703a 	and	r3,r3,r2
    83a0:	98000226 	beq	r19,zero,83ac <_realloc_r+0x16c>
    83a4:	1c2f883a 	add	r23,r3,r16
    83a8:	b9c06d0e 	bge	r23,r7,8560 <_realloc_r+0x320>
    83ac:	880b883a 	mov	r5,r17
    83b0:	9009883a 	mov	r4,r18
    83b4:	000659c0 	call	659c <_malloc_r>
    83b8:	1023883a 	mov	r17,r2
    83bc:	1000ef26 	beq	r2,zero,877c <_realloc_r+0x53c>
    83c0:	a0ffff17 	ldw	r3,-4(r20)
    83c4:	113ffe04 	addi	r4,r2,-8
    83c8:	00bfff84 	movi	r2,-2
    83cc:	1884703a 	and	r2,r3,r2
    83d0:	a885883a 	add	r2,r21,r2
    83d4:	2080bf26 	beq	r4,r2,86d4 <_realloc_r+0x494>
    83d8:	81bfff04 	addi	r6,r16,-4
    83dc:	00800904 	movi	r2,36
    83e0:	11808936 	bltu	r2,r6,8608 <_realloc_r+0x3c8>
    83e4:	00c004c4 	movi	r3,19
    83e8:	19806c2e 	bgeu	r3,r6,859c <_realloc_r+0x35c>
    83ec:	a0c00017 	ldw	r3,0(r20)
    83f0:	88c00015 	stw	r3,0(r17)
    83f4:	a0c00117 	ldw	r3,4(r20)
    83f8:	88c00115 	stw	r3,4(r17)
    83fc:	00c006c4 	movi	r3,27
    8400:	1980ac36 	bltu	r3,r6,86b4 <_realloc_r+0x474>
    8404:	88800204 	addi	r2,r17,8
    8408:	a0c00204 	addi	r3,r20,8
    840c:	19000017 	ldw	r4,0(r3)
    8410:	11000015 	stw	r4,0(r2)
    8414:	19000117 	ldw	r4,4(r3)
    8418:	11000115 	stw	r4,4(r2)
    841c:	18c00217 	ldw	r3,8(r3)
    8420:	10c00215 	stw	r3,8(r2)
    8424:	a00b883a 	mov	r5,r20
    8428:	9009883a 	mov	r4,r18
    842c:	00059c00 	call	59c0 <_free_r>
    8430:	9009883a 	mov	r4,r18
    8434:	000e27c0 	call	e27c <__malloc_unlock>
    8438:	8805883a 	mov	r2,r17
    843c:	003fc506 	br	8354 <_realloc_r+0x114>
    8440:	00800304 	movi	r2,12
    8444:	90800015 	stw	r2,0(r18)
    8448:	0005883a 	mov	r2,zero
    844c:	003fc106 	br	8354 <_realloc_r+0x114>
    8450:	29800117 	ldw	r6,4(r5)
    8454:	00bfff04 	movi	r2,-4
    8458:	b1000404 	addi	r4,r22,16
    845c:	3084703a 	and	r2,r6,r2
    8460:	140d883a 	add	r6,r2,r16
    8464:	31005b0e 	bge	r6,r4,85d4 <_realloc_r+0x394>
    8468:	2811883a 	mov	r8,r5
    846c:	18c0004c 	andi	r3,r3,1
    8470:	183fce1e 	bne	r3,zero,83ac <_realloc_r+0x16c>
    8474:	a4fffe17 	ldw	r19,-8(r20)
    8478:	00ffff04 	movi	r3,-4
    847c:	ace7c83a 	sub	r19,r21,r19
    8480:	99000117 	ldw	r4,4(r19)
    8484:	20c6703a 	and	r3,r4,r3
    8488:	403fc526 	beq	r8,zero,83a0 <_realloc_r+0x160>
    848c:	1c2f883a 	add	r23,r3,r16
    8490:	b8af883a 	add	r23,r23,r2
    8494:	41406026 	beq	r8,r5,8618 <_realloc_r+0x3d8>
    8498:	b9ffc116 	blt	r23,r7,83a0 <_realloc_r+0x160>
    849c:	40c00217 	ldw	r3,8(r8)
    84a0:	40800317 	ldw	r2,12(r8)
    84a4:	81bfff04 	addi	r6,r16,-4
    84a8:	01000904 	movi	r4,36
    84ac:	18800315 	stw	r2,12(r3)
    84b0:	10c00215 	stw	r3,8(r2)
    84b4:	99400217 	ldw	r5,8(r19)
    84b8:	98c00317 	ldw	r3,12(r19)
    84bc:	9c400204 	addi	r17,r19,8
    84c0:	28c00315 	stw	r3,12(r5)
    84c4:	19400215 	stw	r5,8(r3)
    84c8:	21802d36 	bltu	r4,r6,8580 <_realloc_r+0x340>
    84cc:	008004c4 	movi	r2,19
    84d0:	1180352e 	bgeu	r2,r6,85a8 <_realloc_r+0x368>
    84d4:	a0800017 	ldw	r2,0(r20)
    84d8:	98800215 	stw	r2,8(r19)
    84dc:	a0800117 	ldw	r2,4(r20)
    84e0:	98800315 	stw	r2,12(r19)
    84e4:	008006c4 	movi	r2,27
    84e8:	11808036 	bltu	r2,r6,86ec <_realloc_r+0x4ac>
    84ec:	98c00404 	addi	r3,r19,16
    84f0:	a5000204 	addi	r20,r20,8
    84f4:	00002d06 	br	85ac <_realloc_r+0x36c>
    84f8:	1d86b03a 	or	r3,r3,r22
    84fc:	ad8b883a 	add	r5,r21,r22
    8500:	a8c00115 	stw	r3,4(r21)
    8504:	38800054 	ori	r2,r7,1
    8508:	28800115 	stw	r2,4(r5)
    850c:	29cf883a 	add	r7,r5,r7
    8510:	38800117 	ldw	r2,4(r7)
    8514:	9009883a 	mov	r4,r18
    8518:	29400204 	addi	r5,r5,8
    851c:	10800054 	ori	r2,r2,1
    8520:	38800115 	stw	r2,4(r7)
    8524:	00059c00 	call	59c0 <_free_r>
    8528:	003f8706 	br	8348 <_realloc_r+0x108>
    852c:	300b883a 	mov	r5,r6
    8530:	dfc00917 	ldw	ra,36(sp)
    8534:	df000817 	ldw	fp,32(sp)
    8538:	ddc00717 	ldw	r23,28(sp)
    853c:	dd800617 	ldw	r22,24(sp)
    8540:	dd400517 	ldw	r21,20(sp)
    8544:	dd000417 	ldw	r20,16(sp)
    8548:	dcc00317 	ldw	r19,12(sp)
    854c:	dc800217 	ldw	r18,8(sp)
    8550:	dc400117 	ldw	r17,4(sp)
    8554:	dc000017 	ldw	r16,0(sp)
    8558:	dec00a04 	addi	sp,sp,40
    855c:	000659c1 	jmpi	659c <_malloc_r>
    8560:	98800317 	ldw	r2,12(r19)
    8564:	98c00217 	ldw	r3,8(r19)
    8568:	81bfff04 	addi	r6,r16,-4
    856c:	01000904 	movi	r4,36
    8570:	18800315 	stw	r2,12(r3)
    8574:	10c00215 	stw	r3,8(r2)
    8578:	9c400204 	addi	r17,r19,8
    857c:	21bfd32e 	bgeu	r4,r6,84cc <_realloc_r+0x28c>
    8580:	8809883a 	mov	r4,r17
    8584:	a00b883a 	mov	r5,r20
    8588:	0006f640 	call	6f64 <memmove>
    858c:	98c00117 	ldw	r3,4(r19)
    8590:	b821883a 	mov	r16,r23
    8594:	982b883a 	mov	r21,r19
    8598:	003f6106 	br	8320 <_realloc_r+0xe0>
    859c:	8805883a 	mov	r2,r17
    85a0:	a007883a 	mov	r3,r20
    85a4:	003f9906 	br	840c <_realloc_r+0x1cc>
    85a8:	8807883a 	mov	r3,r17
    85ac:	a0800017 	ldw	r2,0(r20)
    85b0:	b821883a 	mov	r16,r23
    85b4:	982b883a 	mov	r21,r19
    85b8:	18800015 	stw	r2,0(r3)
    85bc:	a0800117 	ldw	r2,4(r20)
    85c0:	18800115 	stw	r2,4(r3)
    85c4:	a0800217 	ldw	r2,8(r20)
    85c8:	18800215 	stw	r2,8(r3)
    85cc:	98c00117 	ldw	r3,4(r19)
    85d0:	003f5306 	br	8320 <_realloc_r+0xe0>
    85d4:	adab883a 	add	r21,r21,r22
    85d8:	3585c83a 	sub	r2,r6,r22
    85dc:	e5400215 	stw	r21,8(fp)
    85e0:	10800054 	ori	r2,r2,1
    85e4:	a8800115 	stw	r2,4(r21)
    85e8:	a0bfff17 	ldw	r2,-4(r20)
    85ec:	9009883a 	mov	r4,r18
    85f0:	1080004c 	andi	r2,r2,1
    85f4:	b0acb03a 	or	r22,r22,r2
    85f8:	a5bfff15 	stw	r22,-4(r20)
    85fc:	000e27c0 	call	e27c <__malloc_unlock>
    8600:	a005883a 	mov	r2,r20
    8604:	003f5306 	br	8354 <_realloc_r+0x114>
    8608:	8809883a 	mov	r4,r17
    860c:	a00b883a 	mov	r5,r20
    8610:	0006f640 	call	6f64 <memmove>
    8614:	003f8306 	br	8424 <_realloc_r+0x1e4>
    8618:	b0800404 	addi	r2,r22,16
    861c:	b8bf6016 	blt	r23,r2,83a0 <_realloc_r+0x160>
    8620:	98800317 	ldw	r2,12(r19)
    8624:	98c00217 	ldw	r3,8(r19)
    8628:	81bfff04 	addi	r6,r16,-4
    862c:	01000904 	movi	r4,36
    8630:	18800315 	stw	r2,12(r3)
    8634:	10c00215 	stw	r3,8(r2)
    8638:	9c400204 	addi	r17,r19,8
    863c:	21804336 	bltu	r4,r6,874c <_realloc_r+0x50c>
    8640:	008004c4 	movi	r2,19
    8644:	11803f2e 	bgeu	r2,r6,8744 <_realloc_r+0x504>
    8648:	a0800017 	ldw	r2,0(r20)
    864c:	98800215 	stw	r2,8(r19)
    8650:	a0800117 	ldw	r2,4(r20)
    8654:	98800315 	stw	r2,12(r19)
    8658:	008006c4 	movi	r2,27
    865c:	11803f36 	bltu	r2,r6,875c <_realloc_r+0x51c>
    8660:	98800404 	addi	r2,r19,16
    8664:	a5000204 	addi	r20,r20,8
    8668:	a0c00017 	ldw	r3,0(r20)
    866c:	10c00015 	stw	r3,0(r2)
    8670:	a0c00117 	ldw	r3,4(r20)
    8674:	10c00115 	stw	r3,4(r2)
    8678:	a0c00217 	ldw	r3,8(r20)
    867c:	10c00215 	stw	r3,8(r2)
    8680:	9d87883a 	add	r3,r19,r22
    8684:	bd85c83a 	sub	r2,r23,r22
    8688:	e0c00215 	stw	r3,8(fp)
    868c:	10800054 	ori	r2,r2,1
    8690:	18800115 	stw	r2,4(r3)
    8694:	98800117 	ldw	r2,4(r19)
    8698:	9009883a 	mov	r4,r18
    869c:	1080004c 	andi	r2,r2,1
    86a0:	b0acb03a 	or	r22,r22,r2
    86a4:	9d800115 	stw	r22,4(r19)
    86a8:	000e27c0 	call	e27c <__malloc_unlock>
    86ac:	8805883a 	mov	r2,r17
    86b0:	003f2806 	br	8354 <_realloc_r+0x114>
    86b4:	a0c00217 	ldw	r3,8(r20)
    86b8:	88c00215 	stw	r3,8(r17)
    86bc:	a0c00317 	ldw	r3,12(r20)
    86c0:	88c00315 	stw	r3,12(r17)
    86c4:	30801126 	beq	r6,r2,870c <_realloc_r+0x4cc>
    86c8:	88800404 	addi	r2,r17,16
    86cc:	a0c00404 	addi	r3,r20,16
    86d0:	003f4e06 	br	840c <_realloc_r+0x1cc>
    86d4:	893fff17 	ldw	r4,-4(r17)
    86d8:	00bfff04 	movi	r2,-4
    86dc:	a023883a 	mov	r17,r20
    86e0:	2084703a 	and	r2,r4,r2
    86e4:	80a1883a 	add	r16,r16,r2
    86e8:	003f0d06 	br	8320 <_realloc_r+0xe0>
    86ec:	a0800217 	ldw	r2,8(r20)
    86f0:	98800415 	stw	r2,16(r19)
    86f4:	a0800317 	ldw	r2,12(r20)
    86f8:	98800515 	stw	r2,20(r19)
    86fc:	31000a26 	beq	r6,r4,8728 <_realloc_r+0x4e8>
    8700:	98c00604 	addi	r3,r19,24
    8704:	a5000404 	addi	r20,r20,16
    8708:	003fa806 	br	85ac <_realloc_r+0x36c>
    870c:	a1000417 	ldw	r4,16(r20)
    8710:	88800604 	addi	r2,r17,24
    8714:	a0c00604 	addi	r3,r20,24
    8718:	89000415 	stw	r4,16(r17)
    871c:	a1000517 	ldw	r4,20(r20)
    8720:	89000515 	stw	r4,20(r17)
    8724:	003f3906 	br	840c <_realloc_r+0x1cc>
    8728:	a0800417 	ldw	r2,16(r20)
    872c:	a5000604 	addi	r20,r20,24
    8730:	98c00804 	addi	r3,r19,32
    8734:	98800615 	stw	r2,24(r19)
    8738:	a0bfff17 	ldw	r2,-4(r20)
    873c:	98800715 	stw	r2,28(r19)
    8740:	003f9a06 	br	85ac <_realloc_r+0x36c>
    8744:	8805883a 	mov	r2,r17
    8748:	003fc706 	br	8668 <_realloc_r+0x428>
    874c:	8809883a 	mov	r4,r17
    8750:	a00b883a 	mov	r5,r20
    8754:	0006f640 	call	6f64 <memmove>
    8758:	003fc906 	br	8680 <_realloc_r+0x440>
    875c:	a0800217 	ldw	r2,8(r20)
    8760:	98800415 	stw	r2,16(r19)
    8764:	a0800317 	ldw	r2,12(r20)
    8768:	98800515 	stw	r2,20(r19)
    876c:	31000726 	beq	r6,r4,878c <_realloc_r+0x54c>
    8770:	98800604 	addi	r2,r19,24
    8774:	a5000404 	addi	r20,r20,16
    8778:	003fbb06 	br	8668 <_realloc_r+0x428>
    877c:	9009883a 	mov	r4,r18
    8780:	000e27c0 	call	e27c <__malloc_unlock>
    8784:	0005883a 	mov	r2,zero
    8788:	003ef206 	br	8354 <_realloc_r+0x114>
    878c:	a0c00417 	ldw	r3,16(r20)
    8790:	a5000604 	addi	r20,r20,24
    8794:	98800804 	addi	r2,r19,32
    8798:	98c00615 	stw	r3,24(r19)
    879c:	a0ffff17 	ldw	r3,-4(r20)
    87a0:	98c00715 	stw	r3,28(r19)
    87a4:	003fb006 	br	8668 <_realloc_r+0x428>

000087a8 <__fpclassifyd>:
    87a8:	00a00034 	movhi	r2,32768
    87ac:	10bfffc4 	addi	r2,r2,-1
    87b0:	2884703a 	and	r2,r5,r2
    87b4:	10000726 	beq	r2,zero,87d4 <__fpclassifyd+0x2c>
    87b8:	00fffc34 	movhi	r3,65520
    87bc:	019ff834 	movhi	r6,32736
    87c0:	28c7883a 	add	r3,r5,r3
    87c4:	31bfffc4 	addi	r6,r6,-1
    87c8:	30c00536 	bltu	r6,r3,87e0 <__fpclassifyd+0x38>
    87cc:	00800104 	movi	r2,4
    87d0:	f800283a 	ret
    87d4:	2000021e 	bne	r4,zero,87e0 <__fpclassifyd+0x38>
    87d8:	00800084 	movi	r2,2
    87dc:	f800283a 	ret
    87e0:	00dffc34 	movhi	r3,32752
    87e4:	019ff834 	movhi	r6,32736
    87e8:	28cb883a 	add	r5,r5,r3
    87ec:	31bfffc4 	addi	r6,r6,-1
    87f0:	317ff62e 	bgeu	r6,r5,87cc <__fpclassifyd+0x24>
    87f4:	01400434 	movhi	r5,16
    87f8:	297fffc4 	addi	r5,r5,-1
    87fc:	28800236 	bltu	r5,r2,8808 <__fpclassifyd+0x60>
    8800:	008000c4 	movi	r2,3
    8804:	f800283a 	ret
    8808:	10c00226 	beq	r2,r3,8814 <__fpclassifyd+0x6c>
    880c:	0005883a 	mov	r2,zero
    8810:	f800283a 	ret
    8814:	2005003a 	cmpeq	r2,r4,zero
    8818:	f800283a 	ret

0000881c <_sbrk_r>:
    881c:	defffd04 	addi	sp,sp,-12
    8820:	dc000015 	stw	r16,0(sp)
    8824:	04000074 	movhi	r16,1
    8828:	dc400115 	stw	r17,4(sp)
    882c:	84115404 	addi	r16,r16,17744
    8830:	2023883a 	mov	r17,r4
    8834:	2809883a 	mov	r4,r5
    8838:	dfc00215 	stw	ra,8(sp)
    883c:	80000015 	stw	zero,0(r16)
    8840:	000e4700 	call	e470 <sbrk>
    8844:	00ffffc4 	movi	r3,-1
    8848:	10c00526 	beq	r2,r3,8860 <_sbrk_r+0x44>
    884c:	dfc00217 	ldw	ra,8(sp)
    8850:	dc400117 	ldw	r17,4(sp)
    8854:	dc000017 	ldw	r16,0(sp)
    8858:	dec00304 	addi	sp,sp,12
    885c:	f800283a 	ret
    8860:	80c00017 	ldw	r3,0(r16)
    8864:	183ff926 	beq	r3,zero,884c <_sbrk_r+0x30>
    8868:	88c00015 	stw	r3,0(r17)
    886c:	003ff706 	br	884c <_sbrk_r+0x30>

00008870 <__sread>:
    8870:	defffe04 	addi	sp,sp,-8
    8874:	dc000015 	stw	r16,0(sp)
    8878:	2821883a 	mov	r16,r5
    887c:	2940038f 	ldh	r5,14(r5)
    8880:	dfc00115 	stw	ra,4(sp)
    8884:	000a4a80 	call	a4a8 <_read_r>
    8888:	10000716 	blt	r2,zero,88a8 <__sread+0x38>
    888c:	80c01417 	ldw	r3,80(r16)
    8890:	1887883a 	add	r3,r3,r2
    8894:	80c01415 	stw	r3,80(r16)
    8898:	dfc00117 	ldw	ra,4(sp)
    889c:	dc000017 	ldw	r16,0(sp)
    88a0:	dec00204 	addi	sp,sp,8
    88a4:	f800283a 	ret
    88a8:	80c0030b 	ldhu	r3,12(r16)
    88ac:	18fbffcc 	andi	r3,r3,61439
    88b0:	80c0030d 	sth	r3,12(r16)
    88b4:	dfc00117 	ldw	ra,4(sp)
    88b8:	dc000017 	ldw	r16,0(sp)
    88bc:	dec00204 	addi	sp,sp,8
    88c0:	f800283a 	ret

000088c4 <__seofread>:
    88c4:	0005883a 	mov	r2,zero
    88c8:	f800283a 	ret

000088cc <__swrite>:
    88cc:	2880030b 	ldhu	r2,12(r5)
    88d0:	defffb04 	addi	sp,sp,-20
    88d4:	dcc00315 	stw	r19,12(sp)
    88d8:	dc800215 	stw	r18,8(sp)
    88dc:	dc400115 	stw	r17,4(sp)
    88e0:	dc000015 	stw	r16,0(sp)
    88e4:	dfc00415 	stw	ra,16(sp)
    88e8:	10c0400c 	andi	r3,r2,256
    88ec:	2821883a 	mov	r16,r5
    88f0:	2027883a 	mov	r19,r4
    88f4:	3025883a 	mov	r18,r6
    88f8:	3823883a 	mov	r17,r7
    88fc:	18000526 	beq	r3,zero,8914 <__swrite+0x48>
    8900:	2940038f 	ldh	r5,14(r5)
    8904:	000d883a 	mov	r6,zero
    8908:	01c00084 	movi	r7,2
    890c:	000a44c0 	call	a44c <_lseek_r>
    8910:	8080030b 	ldhu	r2,12(r16)
    8914:	8140038f 	ldh	r5,14(r16)
    8918:	10bbffcc 	andi	r2,r2,61439
    891c:	9809883a 	mov	r4,r19
    8920:	900d883a 	mov	r6,r18
    8924:	880f883a 	mov	r7,r17
    8928:	8080030d 	sth	r2,12(r16)
    892c:	dfc00417 	ldw	ra,16(sp)
    8930:	dcc00317 	ldw	r19,12(sp)
    8934:	dc800217 	ldw	r18,8(sp)
    8938:	dc400117 	ldw	r17,4(sp)
    893c:	dc000017 	ldw	r16,0(sp)
    8940:	dec00504 	addi	sp,sp,20
    8944:	0009f341 	jmpi	9f34 <_write_r>

00008948 <__sseek>:
    8948:	defffe04 	addi	sp,sp,-8
    894c:	dc000015 	stw	r16,0(sp)
    8950:	2821883a 	mov	r16,r5
    8954:	2940038f 	ldh	r5,14(r5)
    8958:	dfc00115 	stw	ra,4(sp)
    895c:	000a44c0 	call	a44c <_lseek_r>
    8960:	00ffffc4 	movi	r3,-1
    8964:	10c00826 	beq	r2,r3,8988 <__sseek+0x40>
    8968:	80c0030b 	ldhu	r3,12(r16)
    896c:	80801415 	stw	r2,80(r16)
    8970:	18c40014 	ori	r3,r3,4096
    8974:	80c0030d 	sth	r3,12(r16)
    8978:	dfc00117 	ldw	ra,4(sp)
    897c:	dc000017 	ldw	r16,0(sp)
    8980:	dec00204 	addi	sp,sp,8
    8984:	f800283a 	ret
    8988:	80c0030b 	ldhu	r3,12(r16)
    898c:	18fbffcc 	andi	r3,r3,61439
    8990:	80c0030d 	sth	r3,12(r16)
    8994:	dfc00117 	ldw	ra,4(sp)
    8998:	dc000017 	ldw	r16,0(sp)
    899c:	dec00204 	addi	sp,sp,8
    89a0:	f800283a 	ret

000089a4 <__sclose>:
    89a4:	2940038f 	ldh	r5,14(r5)
    89a8:	0009f901 	jmpi	9f90 <_close_r>

000089ac <strcmp>:
    89ac:	2144b03a 	or	r2,r4,r5
    89b0:	108000cc 	andi	r2,r2,3
    89b4:	1000171e 	bne	r2,zero,8a14 <strcmp+0x68>
    89b8:	20800017 	ldw	r2,0(r4)
    89bc:	28c00017 	ldw	r3,0(r5)
    89c0:	10c0141e 	bne	r2,r3,8a14 <strcmp+0x68>
    89c4:	027fbff4 	movhi	r9,65279
    89c8:	4a7fbfc4 	addi	r9,r9,-257
    89cc:	0086303a 	nor	r3,zero,r2
    89d0:	02202074 	movhi	r8,32897
    89d4:	1245883a 	add	r2,r2,r9
    89d8:	42202004 	addi	r8,r8,-32640
    89dc:	10c4703a 	and	r2,r2,r3
    89e0:	1204703a 	and	r2,r2,r8
    89e4:	10000226 	beq	r2,zero,89f0 <strcmp+0x44>
    89e8:	00001706 	br	8a48 <strcmp+0x9c>
    89ec:	1000161e 	bne	r2,zero,8a48 <strcmp+0x9c>
    89f0:	21000104 	addi	r4,r4,4
    89f4:	20c00017 	ldw	r3,0(r4)
    89f8:	29400104 	addi	r5,r5,4
    89fc:	29800017 	ldw	r6,0(r5)
    8a00:	1a4f883a 	add	r7,r3,r9
    8a04:	00c4303a 	nor	r2,zero,r3
    8a08:	3884703a 	and	r2,r7,r2
    8a0c:	1204703a 	and	r2,r2,r8
    8a10:	19bff626 	beq	r3,r6,89ec <strcmp+0x40>
    8a14:	20800007 	ldb	r2,0(r4)
    8a18:	1000051e 	bne	r2,zero,8a30 <strcmp+0x84>
    8a1c:	00000606 	br	8a38 <strcmp+0x8c>
    8a20:	21000044 	addi	r4,r4,1
    8a24:	20800007 	ldb	r2,0(r4)
    8a28:	29400044 	addi	r5,r5,1
    8a2c:	10000226 	beq	r2,zero,8a38 <strcmp+0x8c>
    8a30:	28c00007 	ldb	r3,0(r5)
    8a34:	10fffa26 	beq	r2,r3,8a20 <strcmp+0x74>
    8a38:	20800003 	ldbu	r2,0(r4)
    8a3c:	28c00003 	ldbu	r3,0(r5)
    8a40:	10c5c83a 	sub	r2,r2,r3
    8a44:	f800283a 	ret
    8a48:	0005883a 	mov	r2,zero
    8a4c:	f800283a 	ret

00008a50 <__sprint_r.part.0>:
    8a50:	28801917 	ldw	r2,100(r5)
    8a54:	defff604 	addi	sp,sp,-40
    8a58:	dd400515 	stw	r21,20(sp)
    8a5c:	dcc00315 	stw	r19,12(sp)
    8a60:	dfc00915 	stw	ra,36(sp)
    8a64:	df000815 	stw	fp,32(sp)
    8a68:	ddc00715 	stw	r23,28(sp)
    8a6c:	dd800615 	stw	r22,24(sp)
    8a70:	dd000415 	stw	r20,16(sp)
    8a74:	dc800215 	stw	r18,8(sp)
    8a78:	dc400115 	stw	r17,4(sp)
    8a7c:	dc000015 	stw	r16,0(sp)
    8a80:	1088000c 	andi	r2,r2,8192
    8a84:	2827883a 	mov	r19,r5
    8a88:	302b883a 	mov	r21,r6
    8a8c:	10002d26 	beq	r2,zero,8b44 <__sprint_r.part.0+0xf4>
    8a90:	30800217 	ldw	r2,8(r6)
    8a94:	35800017 	ldw	r22,0(r6)
    8a98:	10002826 	beq	r2,zero,8b3c <__sprint_r.part.0+0xec>
    8a9c:	2029883a 	mov	r20,r4
    8aa0:	b5c00104 	addi	r23,r22,4
    8aa4:	04bfffc4 	movi	r18,-1
    8aa8:	bc400017 	ldw	r17,0(r23)
    8aac:	b4000017 	ldw	r16,0(r22)
    8ab0:	0039883a 	mov	fp,zero
    8ab4:	8822d0ba 	srli	r17,r17,2
    8ab8:	04400316 	blt	zero,r17,8ac8 <__sprint_r.part.0+0x78>
    8abc:	00001806 	br	8b20 <__sprint_r.part.0+0xd0>
    8ac0:	84000104 	addi	r16,r16,4
    8ac4:	8f001526 	beq	r17,fp,8b1c <__sprint_r.part.0+0xcc>
    8ac8:	81400017 	ldw	r5,0(r16)
    8acc:	a009883a 	mov	r4,r20
    8ad0:	980d883a 	mov	r6,r19
    8ad4:	000a1c00 	call	a1c0 <_fputwc_r>
    8ad8:	e7000044 	addi	fp,fp,1
    8adc:	14bff81e 	bne	r2,r18,8ac0 <__sprint_r.part.0+0x70>
    8ae0:	9005883a 	mov	r2,r18
    8ae4:	a8000215 	stw	zero,8(r21)
    8ae8:	a8000115 	stw	zero,4(r21)
    8aec:	dfc00917 	ldw	ra,36(sp)
    8af0:	df000817 	ldw	fp,32(sp)
    8af4:	ddc00717 	ldw	r23,28(sp)
    8af8:	dd800617 	ldw	r22,24(sp)
    8afc:	dd400517 	ldw	r21,20(sp)
    8b00:	dd000417 	ldw	r20,16(sp)
    8b04:	dcc00317 	ldw	r19,12(sp)
    8b08:	dc800217 	ldw	r18,8(sp)
    8b0c:	dc400117 	ldw	r17,4(sp)
    8b10:	dc000017 	ldw	r16,0(sp)
    8b14:	dec00a04 	addi	sp,sp,40
    8b18:	f800283a 	ret
    8b1c:	a8800217 	ldw	r2,8(r21)
    8b20:	8c63883a 	add	r17,r17,r17
    8b24:	8c63883a 	add	r17,r17,r17
    8b28:	1445c83a 	sub	r2,r2,r17
    8b2c:	a8800215 	stw	r2,8(r21)
    8b30:	b5800204 	addi	r22,r22,8
    8b34:	bdc00204 	addi	r23,r23,8
    8b38:	103fdb1e 	bne	r2,zero,8aa8 <__sprint_r.part.0+0x58>
    8b3c:	0005883a 	mov	r2,zero
    8b40:	003fe806 	br	8ae4 <__sprint_r.part.0+0x94>
    8b44:	0005cb00 	call	5cb0 <__sfvwrite_r>
    8b48:	003fe606 	br	8ae4 <__sprint_r.part.0+0x94>

00008b4c <__sprint_r>:
    8b4c:	30c00217 	ldw	r3,8(r6)
    8b50:	18000126 	beq	r3,zero,8b58 <__sprint_r+0xc>
    8b54:	0008a501 	jmpi	8a50 <__sprint_r.part.0>
    8b58:	30000115 	stw	zero,4(r6)
    8b5c:	0005883a 	mov	r2,zero
    8b60:	f800283a 	ret

00008b64 <___vfiprintf_internal_r>:
    8b64:	deffca04 	addi	sp,sp,-216
    8b68:	dcc02f15 	stw	r19,188(sp)
    8b6c:	dfc03515 	stw	ra,212(sp)
    8b70:	df003415 	stw	fp,208(sp)
    8b74:	ddc03315 	stw	r23,204(sp)
    8b78:	dd803215 	stw	r22,200(sp)
    8b7c:	dd403115 	stw	r21,196(sp)
    8b80:	dd003015 	stw	r20,192(sp)
    8b84:	dc802e15 	stw	r18,184(sp)
    8b88:	dc402d15 	stw	r17,180(sp)
    8b8c:	dc002c15 	stw	r16,176(sp)
    8b90:	d9002215 	stw	r4,136(sp)
    8b94:	d9402115 	stw	r5,132(sp)
    8b98:	d9c02315 	stw	r7,140(sp)
    8b9c:	3027883a 	mov	r19,r6
    8ba0:	20000226 	beq	r4,zero,8bac <___vfiprintf_internal_r+0x48>
    8ba4:	20800e17 	ldw	r2,56(r4)
    8ba8:	10018d26 	beq	r2,zero,91e0 <___vfiprintf_internal_r+0x67c>
    8bac:	d8c02117 	ldw	r3,132(sp)
    8bb0:	1880030b 	ldhu	r2,12(r3)
    8bb4:	10c8000c 	andi	r3,r2,8192
    8bb8:	1800071e 	bne	r3,zero,8bd8 <___vfiprintf_internal_r+0x74>
    8bbc:	d9402117 	ldw	r5,132(sp)
    8bc0:	00f7ffc4 	movi	r3,-8193
    8bc4:	10880014 	ori	r2,r2,8192
    8bc8:	29001917 	ldw	r4,100(r5)
    8bcc:	2880030d 	sth	r2,12(r5)
    8bd0:	20c6703a 	and	r3,r4,r3
    8bd4:	28c01915 	stw	r3,100(r5)
    8bd8:	10c0020c 	andi	r3,r2,8
    8bdc:	18016126 	beq	r3,zero,9164 <___vfiprintf_internal_r+0x600>
    8be0:	d9002117 	ldw	r4,132(sp)
    8be4:	20c00417 	ldw	r3,16(r4)
    8be8:	18015e26 	beq	r3,zero,9164 <___vfiprintf_internal_r+0x600>
    8bec:	1080068c 	andi	r2,r2,26
    8bf0:	00c00284 	movi	r3,10
    8bf4:	10c16426 	beq	r2,r3,9188 <___vfiprintf_internal_r+0x624>
    8bf8:	d9001a04 	addi	r4,sp,104
    8bfc:	d94019c4 	addi	r5,sp,103
    8c00:	04400074 	movhi	r17,1
    8c04:	2145c83a 	sub	r2,r4,r5
    8c08:	8c493104 	addi	r17,r17,9412
    8c0c:	d9001e15 	stw	r4,120(sp)
    8c10:	d9401f15 	stw	r5,124(sp)
    8c14:	dec01a15 	stw	sp,104(sp)
    8c18:	d8001c15 	stw	zero,112(sp)
    8c1c:	d8001b15 	stw	zero,108(sp)
    8c20:	d8002715 	stw	zero,156(sp)
    8c24:	d8002515 	stw	zero,148(sp)
    8c28:	d8802815 	stw	r2,160(sp)
    8c2c:	d829883a 	mov	r20,sp
    8c30:	982d883a 	mov	r22,r19
    8c34:	b0800007 	ldb	r2,0(r22)
    8c38:	10038126 	beq	r2,zero,9a40 <___vfiprintf_internal_r+0xedc>
    8c3c:	01000944 	movi	r4,37
    8c40:	11037f26 	beq	r2,r4,9a40 <___vfiprintf_internal_r+0xedc>
    8c44:	b005883a 	mov	r2,r22
    8c48:	00000106 	br	8c50 <___vfiprintf_internal_r+0xec>
    8c4c:	19000326 	beq	r3,r4,8c5c <___vfiprintf_internal_r+0xf8>
    8c50:	10800044 	addi	r2,r2,1
    8c54:	10c00007 	ldb	r3,0(r2)
    8c58:	183ffc1e 	bne	r3,zero,8c4c <___vfiprintf_internal_r+0xe8>
    8c5c:	15a1c83a 	sub	r16,r2,r22
    8c60:	102b883a 	mov	r21,r2
    8c64:	80001026 	beq	r16,zero,8ca8 <___vfiprintf_internal_r+0x144>
    8c68:	d8c01c17 	ldw	r3,112(sp)
    8c6c:	d8801b17 	ldw	r2,108(sp)
    8c70:	a5800015 	stw	r22,0(r20)
    8c74:	80c7883a 	add	r3,r16,r3
    8c78:	10800044 	addi	r2,r2,1
    8c7c:	a4000115 	stw	r16,4(r20)
    8c80:	d8c01c15 	stw	r3,112(sp)
    8c84:	d8801b15 	stw	r2,108(sp)
    8c88:	010001c4 	movi	r4,7
    8c8c:	2080730e 	bge	r4,r2,8e5c <___vfiprintf_internal_r+0x2f8>
    8c90:	1803781e 	bne	r3,zero,9a74 <___vfiprintf_internal_r+0xf10>
    8c94:	d8c02517 	ldw	r3,148(sp)
    8c98:	d8001b15 	stw	zero,108(sp)
    8c9c:	d829883a 	mov	r20,sp
    8ca0:	1c07883a 	add	r3,r3,r16
    8ca4:	d8c02515 	stw	r3,148(sp)
    8ca8:	a8800007 	ldb	r2,0(r21)
    8cac:	1002a126 	beq	r2,zero,9734 <___vfiprintf_internal_r+0xbd0>
    8cb0:	a8800044 	addi	r2,r21,1
    8cb4:	a9800047 	ldb	r6,1(r21)
    8cb8:	d8001d85 	stb	zero,118(sp)
    8cbc:	d8002005 	stb	zero,128(sp)
    8cc0:	043fffc4 	movi	r16,-1
    8cc4:	d8002415 	stw	zero,144(sp)
    8cc8:	0025883a 	mov	r18,zero
    8ccc:	05401604 	movi	r21,88
    8cd0:	04c00244 	movi	r19,9
    8cd4:	15800044 	addi	r22,r2,1
    8cd8:	30bff804 	addi	r2,r6,-32
    8cdc:	a8823d36 	bltu	r21,r2,95d4 <___vfiprintf_internal_r+0xa70>
    8ce0:	100490ba 	slli	r2,r2,2
    8ce4:	01000074 	movhi	r4,1
    8ce8:	21233e04 	addi	r4,r4,-29448
    8cec:	1105883a 	add	r2,r2,r4
    8cf0:	10800017 	ldw	r2,0(r2)
    8cf4:	1000683a 	jmp	r2
    8cf8:	00009414 	movui	zero,592
    8cfc:	000095d4 	movui	zero,599
    8d00:	000095d4 	movui	zero,599
    8d04:	00009430 	cmpltui	zero,zero,592
    8d08:	000095d4 	movui	zero,599
    8d0c:	000095d4 	movui	zero,599
    8d10:	000095d4 	movui	zero,599
    8d14:	000095d4 	movui	zero,599
    8d18:	000095d4 	movui	zero,599
    8d1c:	000095d4 	movui	zero,599
    8d20:	00009440 	call	944 <test_motor+0x1d8>
    8d24:	00009468 	cmpgeui	zero,zero,593
    8d28:	000095d4 	movui	zero,599
    8d2c:	000091e8 	cmpgeui	zero,zero,583
    8d30:	0000936c 	andhi	zero,zero,589
    8d34:	000095d4 	movui	zero,599
    8d38:	000092dc 	xori	zero,zero,587
    8d3c:	000092ec 	andhi	zero,zero,587
    8d40:	000092ec 	andhi	zero,zero,587
    8d44:	000092ec 	andhi	zero,zero,587
    8d48:	000092ec 	andhi	zero,zero,587
    8d4c:	000092ec 	andhi	zero,zero,587
    8d50:	000092ec 	andhi	zero,zero,587
    8d54:	000092ec 	andhi	zero,zero,587
    8d58:	000092ec 	andhi	zero,zero,587
    8d5c:	000092ec 	andhi	zero,zero,587
    8d60:	000095d4 	movui	zero,599
    8d64:	000095d4 	movui	zero,599
    8d68:	000095d4 	movui	zero,599
    8d6c:	000095d4 	movui	zero,599
    8d70:	000095d4 	movui	zero,599
    8d74:	000095d4 	movui	zero,599
    8d78:	000095d4 	movui	zero,599
    8d7c:	000095d4 	movui	zero,599
    8d80:	000095d4 	movui	zero,599
    8d84:	000095d4 	movui	zero,599
    8d88:	00009324 	muli	zero,zero,588
    8d8c:	000095d4 	movui	zero,599
    8d90:	000095d4 	movui	zero,599
    8d94:	000095d4 	movui	zero,599
    8d98:	000095d4 	movui	zero,599
    8d9c:	000095d4 	movui	zero,599
    8da0:	000095d4 	movui	zero,599
    8da4:	000095d4 	movui	zero,599
    8da8:	000095d4 	movui	zero,599
    8dac:	000095d4 	movui	zero,599
    8db0:	000095d4 	movui	zero,599
    8db4:	00008ea4 	muli	zero,zero,570
    8db8:	000095d4 	movui	zero,599
    8dbc:	000095d4 	movui	zero,599
    8dc0:	000095d4 	movui	zero,599
    8dc4:	000095d4 	movui	zero,599
    8dc8:	000095d4 	movui	zero,599
    8dcc:	00008e70 	cmpltui	zero,zero,569
    8dd0:	000095d4 	movui	zero,599
    8dd4:	000095d4 	movui	zero,599
    8dd8:	00009258 	cmpnei	zero,zero,585
    8ddc:	000095d4 	movui	zero,599
    8de0:	000095d4 	movui	zero,599
    8de4:	000095d4 	movui	zero,599
    8de8:	000095d4 	movui	zero,599
    8dec:	000095d4 	movui	zero,599
    8df0:	000095d4 	movui	zero,599
    8df4:	000095d4 	movui	zero,599
    8df8:	000095d4 	movui	zero,599
    8dfc:	000095d4 	movui	zero,599
    8e00:	000095d4 	movui	zero,599
    8e04:	000092b0 	cmpltui	zero,zero,586
    8e08:	0000947c 	xorhi	zero,zero,593
    8e0c:	000095d4 	movui	zero,599
    8e10:	000095d4 	movui	zero,599
    8e14:	000095d4 	movui	zero,599
    8e18:	00009538 	rdprs	zero,zero,596
    8e1c:	0000947c 	xorhi	zero,zero,593
    8e20:	000095d4 	movui	zero,599
    8e24:	000095d4 	movui	zero,599
    8e28:	00009548 	cmpgei	zero,zero,597
    8e2c:	000095d4 	movui	zero,599
    8e30:	000093bc 	xorhi	zero,zero,590
    8e34:	00008ea8 	cmpgeui	zero,zero,570
    8e38:	00009560 	cmpeqi	zero,zero,597
    8e3c:	000095a0 	cmpeqi	zero,zero,598
    8e40:	000095d4 	movui	zero,599
    8e44:	000094b4 	movhi	zero,594
    8e48:	000095d4 	movui	zero,599
    8e4c:	00008e74 	movhi	zero,569
    8e50:	000095d4 	movui	zero,599
    8e54:	000095d4 	movui	zero,599
    8e58:	000094fc 	xorhi	zero,zero,595
    8e5c:	a5000204 	addi	r20,r20,8
    8e60:	d8c02517 	ldw	r3,148(sp)
    8e64:	1c07883a 	add	r3,r3,r16
    8e68:	d8c02515 	stw	r3,148(sp)
    8e6c:	003f8e06 	br	8ca8 <___vfiprintf_internal_r+0x144>
    8e70:	94800414 	ori	r18,r18,16
    8e74:	9080080c 	andi	r2,r18,32
    8e78:	1001cd1e 	bne	r2,zero,95b0 <___vfiprintf_internal_r+0xa4c>
    8e7c:	9080040c 	andi	r2,r18,16
    8e80:	10034e26 	beq	r2,zero,9bbc <___vfiprintf_internal_r+0x1058>
    8e84:	d9002317 	ldw	r4,140(sp)
    8e88:	002f883a 	mov	r23,zero
    8e8c:	00800044 	movi	r2,1
    8e90:	24c00017 	ldw	r19,0(r4)
    8e94:	21000104 	addi	r4,r4,4
    8e98:	d9002315 	stw	r4,140(sp)
    8e9c:	9807883a 	mov	r3,r19
    8ea0:	00000c06 	br	8ed4 <___vfiprintf_internal_r+0x370>
    8ea4:	94800414 	ori	r18,r18,16
    8ea8:	9080080c 	andi	r2,r18,32
    8eac:	1001501e 	bne	r2,zero,93f0 <___vfiprintf_internal_r+0x88c>
    8eb0:	9080040c 	andi	r2,r18,16
    8eb4:	10033726 	beq	r2,zero,9b94 <___vfiprintf_internal_r+0x1030>
    8eb8:	d9002317 	ldw	r4,140(sp)
    8ebc:	002f883a 	mov	r23,zero
    8ec0:	0005883a 	mov	r2,zero
    8ec4:	24c00017 	ldw	r19,0(r4)
    8ec8:	21000104 	addi	r4,r4,4
    8ecc:	d9002315 	stw	r4,140(sp)
    8ed0:	9807883a 	mov	r3,r19
    8ed4:	d8001d85 	stb	zero,118(sp)
    8ed8:	dc002015 	stw	r16,128(sp)
    8edc:	0015883a 	mov	r10,zero
    8ee0:	80000216 	blt	r16,zero,8eec <___vfiprintf_internal_r+0x388>
    8ee4:	013fdfc4 	movi	r4,-129
    8ee8:	9124703a 	and	r18,r18,r4
    8eec:	1801ec1e 	bne	r3,zero,96a0 <___vfiprintf_internal_r+0xb3c>
    8ef0:	8002b826 	beq	r16,zero,99d4 <___vfiprintf_internal_r+0xe70>
    8ef4:	10803fcc 	andi	r2,r2,255
    8ef8:	00c00044 	movi	r3,1
    8efc:	10c20726 	beq	r2,r3,971c <___vfiprintf_internal_r+0xbb8>
    8f00:	00c00084 	movi	r3,2
    8f04:	df001a04 	addi	fp,sp,104
    8f08:	10c0bb1e 	bne	r2,r3,91f8 <___vfiprintf_internal_r+0x694>
    8f0c:	d9002717 	ldw	r4,156(sp)
    8f10:	988003cc 	andi	r2,r19,15
    8f14:	b806973a 	slli	r3,r23,28
    8f18:	2085883a 	add	r2,r4,r2
    8f1c:	9826d13a 	srli	r19,r19,4
    8f20:	10800003 	ldbu	r2,0(r2)
    8f24:	b82ed13a 	srli	r23,r23,4
    8f28:	e73fffc4 	addi	fp,fp,-1
    8f2c:	1ce6b03a 	or	r19,r3,r19
    8f30:	e0800005 	stb	r2,0(fp)
    8f34:	9dc4b03a 	or	r2,r19,r23
    8f38:	103ff51e 	bne	r2,zero,8f10 <___vfiprintf_internal_r+0x3ac>
    8f3c:	d8c01e17 	ldw	r3,120(sp)
    8f40:	1f07c83a 	sub	r3,r3,fp
    8f44:	d8c02015 	stw	r3,128(sp)
    8f48:	dd402017 	ldw	r21,128(sp)
    8f4c:	ac00010e 	bge	r21,r16,8f54 <___vfiprintf_internal_r+0x3f0>
    8f50:	802b883a 	mov	r21,r16
    8f54:	52803fcc 	andi	r10,r10,255
    8f58:	5280201c 	xori	r10,r10,128
    8f5c:	52bfe004 	addi	r10,r10,-128
    8f60:	50000126 	beq	r10,zero,8f68 <___vfiprintf_internal_r+0x404>
    8f64:	ad400044 	addi	r21,r21,1
    8f68:	91c0008c 	andi	r7,r18,2
    8f6c:	38000126 	beq	r7,zero,8f74 <___vfiprintf_internal_r+0x410>
    8f70:	ad400084 	addi	r21,r21,2
    8f74:	95c0210c 	andi	r23,r18,132
    8f78:	b801ad1e 	bne	r23,zero,9630 <___vfiprintf_internal_r+0xacc>
    8f7c:	d9002417 	ldw	r4,144(sp)
    8f80:	2567c83a 	sub	r19,r4,r21
    8f84:	04c1aa0e 	bge	zero,r19,9630 <___vfiprintf_internal_r+0xacc>
    8f88:	00c00404 	movi	r3,16
    8f8c:	d8801c17 	ldw	r2,112(sp)
    8f90:	1cc37f0e 	bge	r3,r19,9d90 <___vfiprintf_internal_r+0x122c>
    8f94:	01000074 	movhi	r4,1
    8f98:	21093504 	addi	r4,r4,9428
    8f9c:	dc002915 	stw	r16,164(sp)
    8fa0:	d9801b17 	ldw	r6,108(sp)
    8fa4:	9821883a 	mov	r16,r19
    8fa8:	d9002615 	stw	r4,152(sp)
    8fac:	02c001c4 	movi	r11,7
    8fb0:	3827883a 	mov	r19,r7
    8fb4:	00000506 	br	8fcc <___vfiprintf_internal_r+0x468>
    8fb8:	31400084 	addi	r5,r6,2
    8fbc:	a5000204 	addi	r20,r20,8
    8fc0:	200d883a 	mov	r6,r4
    8fc4:	843ffc04 	addi	r16,r16,-16
    8fc8:	1c000f0e 	bge	r3,r16,9008 <___vfiprintf_internal_r+0x4a4>
    8fcc:	01400074 	movhi	r5,1
    8fd0:	10800404 	addi	r2,r2,16
    8fd4:	31000044 	addi	r4,r6,1
    8fd8:	29493504 	addi	r5,r5,9428
    8fdc:	a1400015 	stw	r5,0(r20)
    8fe0:	a0c00115 	stw	r3,4(r20)
    8fe4:	d8801c15 	stw	r2,112(sp)
    8fe8:	d9001b15 	stw	r4,108(sp)
    8fec:	593ff20e 	bge	r11,r4,8fb8 <___vfiprintf_internal_r+0x454>
    8ff0:	1001811e 	bne	r2,zero,95f8 <___vfiprintf_internal_r+0xa94>
    8ff4:	843ffc04 	addi	r16,r16,-16
    8ff8:	000d883a 	mov	r6,zero
    8ffc:	01400044 	movi	r5,1
    9000:	d829883a 	mov	r20,sp
    9004:	1c3ff116 	blt	r3,r16,8fcc <___vfiprintf_internal_r+0x468>
    9008:	980f883a 	mov	r7,r19
    900c:	8027883a 	mov	r19,r16
    9010:	dc002917 	ldw	r16,164(sp)
    9014:	d8c02617 	ldw	r3,152(sp)
    9018:	9885883a 	add	r2,r19,r2
    901c:	a4c00115 	stw	r19,4(r20)
    9020:	a0c00015 	stw	r3,0(r20)
    9024:	d8801c15 	stw	r2,112(sp)
    9028:	d9401b15 	stw	r5,108(sp)
    902c:	00c001c4 	movi	r3,7
    9030:	19427416 	blt	r3,r5,9a04 <___vfiprintf_internal_r+0xea0>
    9034:	d8c01d87 	ldb	r3,118(sp)
    9038:	a5000204 	addi	r20,r20,8
    903c:	29000044 	addi	r4,r5,1
    9040:	1801801e 	bne	r3,zero,9644 <___vfiprintf_internal_r+0xae0>
    9044:	38000c26 	beq	r7,zero,9078 <___vfiprintf_internal_r+0x514>
    9048:	d8c01d04 	addi	r3,sp,116
    904c:	10800084 	addi	r2,r2,2
    9050:	a0c00015 	stw	r3,0(r20)
    9054:	00c00084 	movi	r3,2
    9058:	a0c00115 	stw	r3,4(r20)
    905c:	d8801c15 	stw	r2,112(sp)
    9060:	d9001b15 	stw	r4,108(sp)
    9064:	00c001c4 	movi	r3,7
    9068:	19025516 	blt	r3,r4,99c0 <___vfiprintf_internal_r+0xe5c>
    906c:	200b883a 	mov	r5,r4
    9070:	a5000204 	addi	r20,r20,8
    9074:	21000044 	addi	r4,r4,1
    9078:	00c02004 	movi	r3,128
    907c:	b8c21326 	beq	r23,r3,98cc <___vfiprintf_internal_r+0xd68>
    9080:	d8c02017 	ldw	r3,128(sp)
    9084:	80e1c83a 	sub	r16,r16,r3
    9088:	0400230e 	bge	zero,r16,9118 <___vfiprintf_internal_r+0x5b4>
    908c:	04c00404 	movi	r19,16
    9090:	9c03240e 	bge	r19,r16,9d24 <___vfiprintf_internal_r+0x11c0>
    9094:	00c00074 	movhi	r3,1
    9098:	18c93104 	addi	r3,r3,9412
    909c:	d8c02615 	stw	r3,152(sp)
    90a0:	05c001c4 	movi	r23,7
    90a4:	00000506 	br	90bc <___vfiprintf_internal_r+0x558>
    90a8:	29000084 	addi	r4,r5,2
    90ac:	a5000204 	addi	r20,r20,8
    90b0:	180b883a 	mov	r5,r3
    90b4:	843ffc04 	addi	r16,r16,-16
    90b8:	9c000d0e 	bge	r19,r16,90f0 <___vfiprintf_internal_r+0x58c>
    90bc:	10800404 	addi	r2,r2,16
    90c0:	28c00044 	addi	r3,r5,1
    90c4:	a4400015 	stw	r17,0(r20)
    90c8:	a4c00115 	stw	r19,4(r20)
    90cc:	d8801c15 	stw	r2,112(sp)
    90d0:	d8c01b15 	stw	r3,108(sp)
    90d4:	b8fff40e 	bge	r23,r3,90a8 <___vfiprintf_internal_r+0x544>
    90d8:	1001671e 	bne	r2,zero,9678 <___vfiprintf_internal_r+0xb14>
    90dc:	843ffc04 	addi	r16,r16,-16
    90e0:	01000044 	movi	r4,1
    90e4:	000b883a 	mov	r5,zero
    90e8:	d829883a 	mov	r20,sp
    90ec:	9c3ff316 	blt	r19,r16,90bc <___vfiprintf_internal_r+0x558>
    90f0:	d8c02617 	ldw	r3,152(sp)
    90f4:	1405883a 	add	r2,r2,r16
    90f8:	a4000115 	stw	r16,4(r20)
    90fc:	a0c00015 	stw	r3,0(r20)
    9100:	d8801c15 	stw	r2,112(sp)
    9104:	d9001b15 	stw	r4,108(sp)
    9108:	00c001c4 	movi	r3,7
    910c:	19019516 	blt	r3,r4,9764 <___vfiprintf_internal_r+0xc00>
    9110:	a5000204 	addi	r20,r20,8
    9114:	21000044 	addi	r4,r4,1
    9118:	d8c02017 	ldw	r3,128(sp)
    911c:	a7000015 	stw	fp,0(r20)
    9120:	d9001b15 	stw	r4,108(sp)
    9124:	10c5883a 	add	r2,r2,r3
    9128:	a0c00115 	stw	r3,4(r20)
    912c:	d8801c15 	stw	r2,112(sp)
    9130:	00c001c4 	movi	r3,7
    9134:	1901930e 	bge	r3,r4,9784 <___vfiprintf_internal_r+0xc20>
    9138:	1002431e 	bne	r2,zero,9a48 <___vfiprintf_internal_r+0xee4>
    913c:	d8001b15 	stw	zero,108(sp)
    9140:	9480010c 	andi	r18,r18,4
    9144:	9002391e 	bne	r18,zero,9a2c <___vfiprintf_internal_r+0xec8>
    9148:	d8802417 	ldw	r2,144(sp)
    914c:	a880010e 	bge	r21,r2,9154 <___vfiprintf_internal_r+0x5f0>
    9150:	102b883a 	mov	r21,r2
    9154:	d8c02517 	ldw	r3,148(sp)
    9158:	1d47883a 	add	r3,r3,r21
    915c:	d8c02515 	stw	r3,148(sp)
    9160:	0001cd06 	br	9898 <___vfiprintf_internal_r+0xd34>
    9164:	d9002217 	ldw	r4,136(sp)
    9168:	d9402117 	ldw	r5,132(sp)
    916c:	00037b40 	call	37b4 <__swsetup_r>
    9170:	10000e1e 	bne	r2,zero,91ac <___vfiprintf_internal_r+0x648>
    9174:	d9402117 	ldw	r5,132(sp)
    9178:	00c00284 	movi	r3,10
    917c:	2880030b 	ldhu	r2,12(r5)
    9180:	1080068c 	andi	r2,r2,26
    9184:	10fe9c1e 	bne	r2,r3,8bf8 <___vfiprintf_internal_r+0x94>
    9188:	d8c02117 	ldw	r3,132(sp)
    918c:	1880038f 	ldh	r2,14(r3)
    9190:	103e9916 	blt	r2,zero,8bf8 <___vfiprintf_internal_r+0x94>
    9194:	d9002217 	ldw	r4,136(sp)
    9198:	d9c02317 	ldw	r7,140(sp)
    919c:	180b883a 	mov	r5,r3
    91a0:	980d883a 	mov	r6,r19
    91a4:	0009e780 	call	9e78 <__sbprintf>
    91a8:	00000106 	br	91b0 <___vfiprintf_internal_r+0x64c>
    91ac:	00bfffc4 	movi	r2,-1
    91b0:	dfc03517 	ldw	ra,212(sp)
    91b4:	df003417 	ldw	fp,208(sp)
    91b8:	ddc03317 	ldw	r23,204(sp)
    91bc:	dd803217 	ldw	r22,200(sp)
    91c0:	dd403117 	ldw	r21,196(sp)
    91c4:	dd003017 	ldw	r20,192(sp)
    91c8:	dcc02f17 	ldw	r19,188(sp)
    91cc:	dc802e17 	ldw	r18,184(sp)
    91d0:	dc402d17 	ldw	r17,180(sp)
    91d4:	dc002c17 	ldw	r16,176(sp)
    91d8:	dec03604 	addi	sp,sp,216
    91dc:	f800283a 	ret
    91e0:	000584c0 	call	584c <__sinit>
    91e4:	003e7106 	br	8bac <___vfiprintf_internal_r+0x48>
    91e8:	b005883a 	mov	r2,r22
    91ec:	94800114 	ori	r18,r18,4
    91f0:	b1800007 	ldb	r6,0(r22)
    91f4:	003eb706 	br	8cd4 <___vfiprintf_internal_r+0x170>
    91f8:	9806d0fa 	srli	r3,r19,3
    91fc:	b808977a 	slli	r4,r23,29
    9200:	b82ed0fa 	srli	r23,r23,3
    9204:	9cc001cc 	andi	r19,r19,7
    9208:	98800c04 	addi	r2,r19,48
    920c:	e73fffc4 	addi	fp,fp,-1
    9210:	20e6b03a 	or	r19,r4,r3
    9214:	e0800005 	stb	r2,0(fp)
    9218:	9dc6b03a 	or	r3,r19,r23
    921c:	183ff61e 	bne	r3,zero,91f8 <___vfiprintf_internal_r+0x694>
    9220:	90c0004c 	andi	r3,r18,1
    9224:	e009883a 	mov	r4,fp
    9228:	183f4426 	beq	r3,zero,8f3c <___vfiprintf_internal_r+0x3d8>
    922c:	10803fcc 	andi	r2,r2,255
    9230:	1080201c 	xori	r2,r2,128
    9234:	10bfe004 	addi	r2,r2,-128
    9238:	00c00c04 	movi	r3,48
    923c:	10ff3f26 	beq	r2,r3,8f3c <___vfiprintf_internal_r+0x3d8>
    9240:	20ffffc5 	stb	r3,-1(r4)
    9244:	d8c01e17 	ldw	r3,120(sp)
    9248:	e73fffc4 	addi	fp,fp,-1
    924c:	1f07c83a 	sub	r3,r3,fp
    9250:	d8c02015 	stw	r3,128(sp)
    9254:	003f3c06 	br	8f48 <___vfiprintf_internal_r+0x3e4>
    9258:	d8c02003 	ldbu	r3,128(sp)
    925c:	01000074 	movhi	r4,1
    9260:	2108cb04 	addi	r4,r4,9004
    9264:	d8c01d85 	stb	r3,118(sp)
    9268:	d9002715 	stw	r4,156(sp)
    926c:	9080080c 	andi	r2,r18,32
    9270:	1000a926 	beq	r2,zero,9518 <___vfiprintf_internal_r+0x9b4>
    9274:	d9002317 	ldw	r4,140(sp)
    9278:	24c00017 	ldw	r19,0(r4)
    927c:	25c00117 	ldw	r23,4(r4)
    9280:	21000204 	addi	r4,r4,8
    9284:	d9002315 	stw	r4,140(sp)
    9288:	9080004c 	andi	r2,r18,1
    928c:	1001f626 	beq	r2,zero,9a68 <___vfiprintf_internal_r+0xf04>
    9290:	9dc6b03a 	or	r3,r19,r23
    9294:	18023d26 	beq	r3,zero,9b8c <___vfiprintf_internal_r+0x1028>
    9298:	00800c04 	movi	r2,48
    929c:	d8801d05 	stb	r2,116(sp)
    92a0:	d9801d45 	stb	r6,117(sp)
    92a4:	94800094 	ori	r18,r18,2
    92a8:	00800084 	movi	r2,2
    92ac:	003f0906 	br	8ed4 <___vfiprintf_internal_r+0x370>
    92b0:	d9002317 	ldw	r4,140(sp)
    92b4:	05400044 	movi	r21,1
    92b8:	d8001d85 	stb	zero,118(sp)
    92bc:	20800017 	ldw	r2,0(r4)
    92c0:	21000104 	addi	r4,r4,4
    92c4:	d9002315 	stw	r4,140(sp)
    92c8:	d8801005 	stb	r2,64(sp)
    92cc:	dd402015 	stw	r21,128(sp)
    92d0:	df001004 	addi	fp,sp,64
    92d4:	0021883a 	mov	r16,zero
    92d8:	003f2306 	br	8f68 <___vfiprintf_internal_r+0x404>
    92dc:	94802014 	ori	r18,r18,128
    92e0:	b005883a 	mov	r2,r22
    92e4:	b1800007 	ldb	r6,0(r22)
    92e8:	003e7a06 	br	8cd4 <___vfiprintf_internal_r+0x170>
    92ec:	b039883a 	mov	fp,r22
    92f0:	d8002415 	stw	zero,144(sp)
    92f4:	35fff404 	addi	r23,r6,-48
    92f8:	0009883a 	mov	r4,zero
    92fc:	01400284 	movi	r5,10
    9300:	0000dc40 	call	dc4 <__mulsi3>
    9304:	e1800007 	ldb	r6,0(fp)
    9308:	15c9883a 	add	r4,r2,r23
    930c:	b5800044 	addi	r22,r22,1
    9310:	35fff404 	addi	r23,r6,-48
    9314:	b039883a 	mov	fp,r22
    9318:	9dfff82e 	bgeu	r19,r23,92fc <___vfiprintf_internal_r+0x798>
    931c:	d9002415 	stw	r4,144(sp)
    9320:	003e6d06 	br	8cd8 <___vfiprintf_internal_r+0x174>
    9324:	d8c02003 	ldbu	r3,128(sp)
    9328:	94800414 	ori	r18,r18,16
    932c:	9080080c 	andi	r2,r18,32
    9330:	d8c01d85 	stb	r3,118(sp)
    9334:	d8c02317 	ldw	r3,140(sp)
    9338:	10005526 	beq	r2,zero,9490 <___vfiprintf_internal_r+0x92c>
    933c:	d9002317 	ldw	r4,140(sp)
    9340:	18800117 	ldw	r2,4(r3)
    9344:	1cc00017 	ldw	r19,0(r3)
    9348:	21000204 	addi	r4,r4,8
    934c:	d9002315 	stw	r4,140(sp)
    9350:	102f883a 	mov	r23,r2
    9354:	1001f716 	blt	r2,zero,9b34 <___vfiprintf_internal_r+0xfd0>
    9358:	da801d83 	ldbu	r10,118(sp)
    935c:	dc002015 	stw	r16,128(sp)
    9360:	00800044 	movi	r2,1
    9364:	9dc6b03a 	or	r3,r19,r23
    9368:	003edd06 	br	8ee0 <___vfiprintf_internal_r+0x37c>
    936c:	b1800007 	ldb	r6,0(r22)
    9370:	01000a84 	movi	r4,42
    9374:	b0800044 	addi	r2,r22,1
    9378:	3102ae26 	beq	r6,r4,9e34 <___vfiprintf_internal_r+0x12d0>
    937c:	35fff404 	addi	r23,r6,-48
    9380:	102d883a 	mov	r22,r2
    9384:	0021883a 	mov	r16,zero
    9388:	9dfe5336 	bltu	r19,r23,8cd8 <___vfiprintf_internal_r+0x174>
    938c:	0009883a 	mov	r4,zero
    9390:	01400284 	movi	r5,10
    9394:	0000dc40 	call	dc4 <__mulsi3>
    9398:	b1800007 	ldb	r6,0(r22)
    939c:	b889883a 	add	r4,r23,r2
    93a0:	b5800044 	addi	r22,r22,1
    93a4:	35fff404 	addi	r23,r6,-48
    93a8:	9dfff92e 	bgeu	r19,r23,9390 <___vfiprintf_internal_r+0x82c>
    93ac:	2021883a 	mov	r16,r4
    93b0:	203e490e 	bge	r4,zero,8cd8 <___vfiprintf_internal_r+0x174>
    93b4:	043fffc4 	movi	r16,-1
    93b8:	003e4706 	br	8cd8 <___vfiprintf_internal_r+0x174>
    93bc:	d8c02003 	ldbu	r3,128(sp)
    93c0:	9080080c 	andi	r2,r18,32
    93c4:	d8c01d85 	stb	r3,118(sp)
    93c8:	10020e26 	beq	r2,zero,9c04 <___vfiprintf_internal_r+0x10a0>
    93cc:	d9002317 	ldw	r4,140(sp)
    93d0:	d9402517 	ldw	r5,148(sp)
    93d4:	20800017 	ldw	r2,0(r4)
    93d8:	2807d7fa 	srai	r3,r5,31
    93dc:	21000104 	addi	r4,r4,4
    93e0:	d9002315 	stw	r4,140(sp)
    93e4:	11400015 	stw	r5,0(r2)
    93e8:	10c00115 	stw	r3,4(r2)
    93ec:	003e1106 	br	8c34 <___vfiprintf_internal_r+0xd0>
    93f0:	d8802317 	ldw	r2,140(sp)
    93f4:	d8c02317 	ldw	r3,140(sp)
    93f8:	14c00017 	ldw	r19,0(r2)
    93fc:	15c00117 	ldw	r23,4(r2)
    9400:	18c00204 	addi	r3,r3,8
    9404:	d8c02315 	stw	r3,140(sp)
    9408:	0005883a 	mov	r2,zero
    940c:	9dc6b03a 	or	r3,r19,r23
    9410:	003eb006 	br	8ed4 <___vfiprintf_internal_r+0x370>
    9414:	d8802007 	ldb	r2,128(sp)
    9418:	1001d91e 	bne	r2,zero,9b80 <___vfiprintf_internal_r+0x101c>
    941c:	00c00804 	movi	r3,32
    9420:	d8c02005 	stb	r3,128(sp)
    9424:	b005883a 	mov	r2,r22
    9428:	b1800007 	ldb	r6,0(r22)
    942c:	003e2906 	br	8cd4 <___vfiprintf_internal_r+0x170>
    9430:	94800054 	ori	r18,r18,1
    9434:	b005883a 	mov	r2,r22
    9438:	b1800007 	ldb	r6,0(r22)
    943c:	003e2506 	br	8cd4 <___vfiprintf_internal_r+0x170>
    9440:	d9002317 	ldw	r4,140(sp)
    9444:	d9402317 	ldw	r5,140(sp)
    9448:	21000017 	ldw	r4,0(r4)
    944c:	28c00104 	addi	r3,r5,4
    9450:	d9002415 	stw	r4,144(sp)
    9454:	20023b16 	blt	r4,zero,9d44 <___vfiprintf_internal_r+0x11e0>
    9458:	d8c02315 	stw	r3,140(sp)
    945c:	b005883a 	mov	r2,r22
    9460:	b1800007 	ldb	r6,0(r22)
    9464:	003e1b06 	br	8cd4 <___vfiprintf_internal_r+0x170>
    9468:	00c00ac4 	movi	r3,43
    946c:	d8c02005 	stb	r3,128(sp)
    9470:	b005883a 	mov	r2,r22
    9474:	b1800007 	ldb	r6,0(r22)
    9478:	003e1606 	br	8cd4 <___vfiprintf_internal_r+0x170>
    947c:	d8c02003 	ldbu	r3,128(sp)
    9480:	9080080c 	andi	r2,r18,32
    9484:	d8c01d85 	stb	r3,118(sp)
    9488:	d8c02317 	ldw	r3,140(sp)
    948c:	103fab1e 	bne	r2,zero,933c <___vfiprintf_internal_r+0x7d8>
    9490:	9080040c 	andi	r2,r18,16
    9494:	1001e626 	beq	r2,zero,9c30 <___vfiprintf_internal_r+0x10cc>
    9498:	1cc00017 	ldw	r19,0(r3)
    949c:	d9402317 	ldw	r5,140(sp)
    94a0:	982fd7fa 	srai	r23,r19,31
    94a4:	29400104 	addi	r5,r5,4
    94a8:	d9402315 	stw	r5,140(sp)
    94ac:	b805883a 	mov	r2,r23
    94b0:	003fa806 	br	9354 <___vfiprintf_internal_r+0x7f0>
    94b4:	d9402317 	ldw	r5,140(sp)
    94b8:	d8001d85 	stb	zero,118(sp)
    94bc:	2f000017 	ldw	fp,0(r5)
    94c0:	2cc00104 	addi	r19,r5,4
    94c4:	e0023826 	beq	fp,zero,9da8 <___vfiprintf_internal_r+0x1244>
    94c8:	e009883a 	mov	r4,fp
    94cc:	80022316 	blt	r16,zero,9d5c <___vfiprintf_internal_r+0x11f8>
    94d0:	000b883a 	mov	r5,zero
    94d4:	800d883a 	mov	r6,r16
    94d8:	0006d440 	call	6d44 <memchr>
    94dc:	10024e26 	beq	r2,zero,9e18 <___vfiprintf_internal_r+0x12b4>
    94e0:	1705c83a 	sub	r2,r2,fp
    94e4:	d8802015 	stw	r2,128(sp)
    94e8:	8081e816 	blt	r16,r2,9c8c <___vfiprintf_internal_r+0x1128>
    94ec:	da801d83 	ldbu	r10,118(sp)
    94f0:	dcc02315 	stw	r19,140(sp)
    94f4:	0021883a 	mov	r16,zero
    94f8:	003e9306 	br	8f48 <___vfiprintf_internal_r+0x3e4>
    94fc:	00c00074 	movhi	r3,1
    9500:	18c8d004 	addi	r3,r3,9024
    9504:	d8c02715 	stw	r3,156(sp)
    9508:	d8c02003 	ldbu	r3,128(sp)
    950c:	9080080c 	andi	r2,r18,32
    9510:	d8c01d85 	stb	r3,118(sp)
    9514:	103f571e 	bne	r2,zero,9274 <___vfiprintf_internal_r+0x710>
    9518:	9080040c 	andi	r2,r18,16
    951c:	1001b126 	beq	r2,zero,9be4 <___vfiprintf_internal_r+0x1080>
    9520:	d9402317 	ldw	r5,140(sp)
    9524:	002f883a 	mov	r23,zero
    9528:	2cc00017 	ldw	r19,0(r5)
    952c:	29400104 	addi	r5,r5,4
    9530:	d9402315 	stw	r5,140(sp)
    9534:	003f5406 	br	9288 <___vfiprintf_internal_r+0x724>
    9538:	94801014 	ori	r18,r18,64
    953c:	b005883a 	mov	r2,r22
    9540:	b1800007 	ldb	r6,0(r22)
    9544:	003de306 	br	8cd4 <___vfiprintf_internal_r+0x170>
    9548:	b1800007 	ldb	r6,0(r22)
    954c:	00c01b04 	movi	r3,108
    9550:	b005883a 	mov	r2,r22
    9554:	30c1f726 	beq	r6,r3,9d34 <___vfiprintf_internal_r+0x11d0>
    9558:	94800414 	ori	r18,r18,16
    955c:	003ddd06 	br	8cd4 <___vfiprintf_internal_r+0x170>
    9560:	d8c02317 	ldw	r3,140(sp)
    9564:	00800c04 	movi	r2,48
    9568:	01000074 	movhi	r4,1
    956c:	1cc00017 	ldw	r19,0(r3)
    9570:	d8801d05 	stb	r2,116(sp)
    9574:	18c00104 	addi	r3,r3,4
    9578:	00801e04 	movi	r2,120
    957c:	2108d004 	addi	r4,r4,9024
    9580:	d8801d45 	stb	r2,117(sp)
    9584:	d8c02315 	stw	r3,140(sp)
    9588:	002f883a 	mov	r23,zero
    958c:	94800094 	ori	r18,r18,2
    9590:	d9002715 	stw	r4,156(sp)
    9594:	00800084 	movi	r2,2
    9598:	9807883a 	mov	r3,r19
    959c:	003e4d06 	br	8ed4 <___vfiprintf_internal_r+0x370>
    95a0:	94800814 	ori	r18,r18,32
    95a4:	b005883a 	mov	r2,r22
    95a8:	b1800007 	ldb	r6,0(r22)
    95ac:	003dc906 	br	8cd4 <___vfiprintf_internal_r+0x170>
    95b0:	d8802317 	ldw	r2,140(sp)
    95b4:	d8c02317 	ldw	r3,140(sp)
    95b8:	14c00017 	ldw	r19,0(r2)
    95bc:	15c00117 	ldw	r23,4(r2)
    95c0:	18c00204 	addi	r3,r3,8
    95c4:	d8c02315 	stw	r3,140(sp)
    95c8:	00800044 	movi	r2,1
    95cc:	9dc6b03a 	or	r3,r19,r23
    95d0:	003e4006 	br	8ed4 <___vfiprintf_internal_r+0x370>
    95d4:	d8c02003 	ldbu	r3,128(sp)
    95d8:	d8c01d85 	stb	r3,118(sp)
    95dc:	30005526 	beq	r6,zero,9734 <___vfiprintf_internal_r+0xbd0>
    95e0:	05400044 	movi	r21,1
    95e4:	d9801005 	stb	r6,64(sp)
    95e8:	d8001d85 	stb	zero,118(sp)
    95ec:	dd402015 	stw	r21,128(sp)
    95f0:	df001004 	addi	fp,sp,64
    95f4:	003f3706 	br	92d4 <___vfiprintf_internal_r+0x770>
    95f8:	d9002217 	ldw	r4,136(sp)
    95fc:	d9402117 	ldw	r5,132(sp)
    9600:	d9801a04 	addi	r6,sp,104
    9604:	d8c02a15 	stw	r3,168(sp)
    9608:	dac02b15 	stw	r11,172(sp)
    960c:	0008a500 	call	8a50 <__sprint_r.part.0>
    9610:	d8c02a17 	ldw	r3,168(sp)
    9614:	dac02b17 	ldw	r11,172(sp)
    9618:	10004c1e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    961c:	d9801b17 	ldw	r6,108(sp)
    9620:	d8801c17 	ldw	r2,112(sp)
    9624:	d829883a 	mov	r20,sp
    9628:	31400044 	addi	r5,r6,1
    962c:	003e6506 	br	8fc4 <___vfiprintf_internal_r+0x460>
    9630:	d9401b17 	ldw	r5,108(sp)
    9634:	d8801c17 	ldw	r2,112(sp)
    9638:	29000044 	addi	r4,r5,1
    963c:	d8c01d87 	ldb	r3,118(sp)
    9640:	183e8026 	beq	r3,zero,9044 <___vfiprintf_internal_r+0x4e0>
    9644:	00c00044 	movi	r3,1
    9648:	d9401d84 	addi	r5,sp,118
    964c:	10c5883a 	add	r2,r2,r3
    9650:	a1400015 	stw	r5,0(r20)
    9654:	a0c00115 	stw	r3,4(r20)
    9658:	d8801c15 	stw	r2,112(sp)
    965c:	d9001b15 	stw	r4,108(sp)
    9660:	014001c4 	movi	r5,7
    9664:	2900cd16 	blt	r5,r4,999c <___vfiprintf_internal_r+0xe38>
    9668:	200b883a 	mov	r5,r4
    966c:	a5000204 	addi	r20,r20,8
    9670:	21000044 	addi	r4,r4,1
    9674:	003e7306 	br	9044 <___vfiprintf_internal_r+0x4e0>
    9678:	d9002217 	ldw	r4,136(sp)
    967c:	d9402117 	ldw	r5,132(sp)
    9680:	d9801a04 	addi	r6,sp,104
    9684:	0008a500 	call	8a50 <__sprint_r.part.0>
    9688:	1000301e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    968c:	d9401b17 	ldw	r5,108(sp)
    9690:	d8801c17 	ldw	r2,112(sp)
    9694:	d829883a 	mov	r20,sp
    9698:	29000044 	addi	r4,r5,1
    969c:	003e8506 	br	90b4 <___vfiprintf_internal_r+0x550>
    96a0:	10803fcc 	andi	r2,r2,255
    96a4:	00c00044 	movi	r3,1
    96a8:	10fe151e 	bne	r2,r3,8f00 <___vfiprintf_internal_r+0x39c>
    96ac:	b800021e 	bne	r23,zero,96b8 <___vfiprintf_internal_r+0xb54>
    96b0:	00800244 	movi	r2,9
    96b4:	14c0192e 	bgeu	r2,r19,971c <___vfiprintf_internal_r+0xbb8>
    96b8:	dd401a04 	addi	r21,sp,104
    96bc:	5039883a 	mov	fp,r10
    96c0:	9809883a 	mov	r4,r19
    96c4:	b80b883a 	mov	r5,r23
    96c8:	01800284 	movi	r6,10
    96cc:	000f883a 	mov	r7,zero
    96d0:	000ae800 	call	ae80 <__umoddi3>
    96d4:	10800c04 	addi	r2,r2,48
    96d8:	ad7fffc4 	addi	r21,r21,-1
    96dc:	9809883a 	mov	r4,r19
    96e0:	b80b883a 	mov	r5,r23
    96e4:	01800284 	movi	r6,10
    96e8:	000f883a 	mov	r7,zero
    96ec:	a8800005 	stb	r2,0(r21)
    96f0:	000a8400 	call	a840 <__udivdi3>
    96f4:	1027883a 	mov	r19,r2
    96f8:	10c4b03a 	or	r2,r2,r3
    96fc:	182f883a 	mov	r23,r3
    9700:	103fef1e 	bne	r2,zero,96c0 <___vfiprintf_internal_r+0xb5c>
    9704:	d8c01e17 	ldw	r3,120(sp)
    9708:	e015883a 	mov	r10,fp
    970c:	a839883a 	mov	fp,r21
    9710:	1d47c83a 	sub	r3,r3,r21
    9714:	d8c02015 	stw	r3,128(sp)
    9718:	003e0b06 	br	8f48 <___vfiprintf_internal_r+0x3e4>
    971c:	d9002817 	ldw	r4,160(sp)
    9720:	9cc00c04 	addi	r19,r19,48
    9724:	dcc019c5 	stb	r19,103(sp)
    9728:	d9002015 	stw	r4,128(sp)
    972c:	df0019c4 	addi	fp,sp,103
    9730:	003e0506 	br	8f48 <___vfiprintf_internal_r+0x3e4>
    9734:	d8801c17 	ldw	r2,112(sp)
    9738:	10000426 	beq	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    973c:	d9002217 	ldw	r4,136(sp)
    9740:	d9402117 	ldw	r5,132(sp)
    9744:	d9801a04 	addi	r6,sp,104
    9748:	0008a500 	call	8a50 <__sprint_r.part.0>
    974c:	d8c02117 	ldw	r3,132(sp)
    9750:	1880030b 	ldhu	r2,12(r3)
    9754:	1080100c 	andi	r2,r2,64
    9758:	103e941e 	bne	r2,zero,91ac <___vfiprintf_internal_r+0x648>
    975c:	d8802517 	ldw	r2,148(sp)
    9760:	003e9306 	br	91b0 <___vfiprintf_internal_r+0x64c>
    9764:	1000e91e 	bne	r2,zero,9b0c <___vfiprintf_internal_r+0xfa8>
    9768:	d8802017 	ldw	r2,128(sp)
    976c:	00c00044 	movi	r3,1
    9770:	df000015 	stw	fp,0(sp)
    9774:	d8800115 	stw	r2,4(sp)
    9778:	d8801c15 	stw	r2,112(sp)
    977c:	d8c01b15 	stw	r3,108(sp)
    9780:	d829883a 	mov	r20,sp
    9784:	a2000204 	addi	r8,r20,8
    9788:	9480010c 	andi	r18,r18,4
    978c:	90003626 	beq	r18,zero,9868 <___vfiprintf_internal_r+0xd04>
    9790:	d9002417 	ldw	r4,144(sp)
    9794:	2565c83a 	sub	r18,r4,r21
    9798:	0480330e 	bge	zero,r18,9868 <___vfiprintf_internal_r+0xd04>
    979c:	04000404 	movi	r16,16
    97a0:	84818b0e 	bge	r16,r18,9dd0 <___vfiprintf_internal_r+0x126c>
    97a4:	00c00074 	movhi	r3,1
    97a8:	18c93504 	addi	r3,r3,9428
    97ac:	d9001b17 	ldw	r4,108(sp)
    97b0:	d8c02615 	stw	r3,152(sp)
    97b4:	04c001c4 	movi	r19,7
    97b8:	dd002217 	ldw	r20,136(sp)
    97bc:	ddc02117 	ldw	r23,132(sp)
    97c0:	00000506 	br	97d8 <___vfiprintf_internal_r+0xc74>
    97c4:	21400084 	addi	r5,r4,2
    97c8:	42000204 	addi	r8,r8,8
    97cc:	1809883a 	mov	r4,r3
    97d0:	94bffc04 	addi	r18,r18,-16
    97d4:	84800f0e 	bge	r16,r18,9814 <___vfiprintf_internal_r+0xcb0>
    97d8:	01400074 	movhi	r5,1
    97dc:	10800404 	addi	r2,r2,16
    97e0:	20c00044 	addi	r3,r4,1
    97e4:	29493504 	addi	r5,r5,9428
    97e8:	41400015 	stw	r5,0(r8)
    97ec:	44000115 	stw	r16,4(r8)
    97f0:	d8801c15 	stw	r2,112(sp)
    97f4:	d8c01b15 	stw	r3,108(sp)
    97f8:	98fff20e 	bge	r19,r3,97c4 <___vfiprintf_internal_r+0xc60>
    97fc:	1000291e 	bne	r2,zero,98a4 <___vfiprintf_internal_r+0xd40>
    9800:	94bffc04 	addi	r18,r18,-16
    9804:	01400044 	movi	r5,1
    9808:	0009883a 	mov	r4,zero
    980c:	d811883a 	mov	r8,sp
    9810:	84bff116 	blt	r16,r18,97d8 <___vfiprintf_internal_r+0xc74>
    9814:	d8c02617 	ldw	r3,152(sp)
    9818:	1485883a 	add	r2,r2,r18
    981c:	44800115 	stw	r18,4(r8)
    9820:	40c00015 	stw	r3,0(r8)
    9824:	d8801c15 	stw	r2,112(sp)
    9828:	d9401b15 	stw	r5,108(sp)
    982c:	00c001c4 	movi	r3,7
    9830:	19400d0e 	bge	r3,r5,9868 <___vfiprintf_internal_r+0xd04>
    9834:	1000061e 	bne	r2,zero,9850 <___vfiprintf_internal_r+0xcec>
    9838:	d9002417 	ldw	r4,144(sp)
    983c:	a9011116 	blt	r21,r4,9c84 <___vfiprintf_internal_r+0x1120>
    9840:	d9402517 	ldw	r5,148(sp)
    9844:	2d4b883a 	add	r5,r5,r21
    9848:	d9402515 	stw	r5,148(sp)
    984c:	00001206 	br	9898 <___vfiprintf_internal_r+0xd34>
    9850:	d9002217 	ldw	r4,136(sp)
    9854:	d9402117 	ldw	r5,132(sp)
    9858:	d9801a04 	addi	r6,sp,104
    985c:	0008a500 	call	8a50 <__sprint_r.part.0>
    9860:	103fba1e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9864:	d8801c17 	ldw	r2,112(sp)
    9868:	d9002417 	ldw	r4,144(sp)
    986c:	a900010e 	bge	r21,r4,9874 <___vfiprintf_internal_r+0xd10>
    9870:	202b883a 	mov	r21,r4
    9874:	d9402517 	ldw	r5,148(sp)
    9878:	2d4b883a 	add	r5,r5,r21
    987c:	d9402515 	stw	r5,148(sp)
    9880:	10000526 	beq	r2,zero,9898 <___vfiprintf_internal_r+0xd34>
    9884:	d9002217 	ldw	r4,136(sp)
    9888:	d9402117 	ldw	r5,132(sp)
    988c:	d9801a04 	addi	r6,sp,104
    9890:	0008a500 	call	8a50 <__sprint_r.part.0>
    9894:	103fad1e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9898:	d8001b15 	stw	zero,108(sp)
    989c:	d829883a 	mov	r20,sp
    98a0:	003ce406 	br	8c34 <___vfiprintf_internal_r+0xd0>
    98a4:	a009883a 	mov	r4,r20
    98a8:	b80b883a 	mov	r5,r23
    98ac:	d9801a04 	addi	r6,sp,104
    98b0:	0008a500 	call	8a50 <__sprint_r.part.0>
    98b4:	103fa51e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    98b8:	d9001b17 	ldw	r4,108(sp)
    98bc:	d8801c17 	ldw	r2,112(sp)
    98c0:	d811883a 	mov	r8,sp
    98c4:	21400044 	addi	r5,r4,1
    98c8:	003fc106 	br	97d0 <___vfiprintf_internal_r+0xc6c>
    98cc:	d8c02417 	ldw	r3,144(sp)
    98d0:	1d6fc83a 	sub	r23,r3,r21
    98d4:	05fdea0e 	bge	zero,r23,9080 <___vfiprintf_internal_r+0x51c>
    98d8:	04c00404 	movi	r19,16
    98dc:	9dc1490e 	bge	r19,r23,9e04 <___vfiprintf_internal_r+0x12a0>
    98e0:	01000074 	movhi	r4,1
    98e4:	21093104 	addi	r4,r4,9412
    98e8:	d9002615 	stw	r4,152(sp)
    98ec:	028001c4 	movi	r10,7
    98f0:	00000506 	br	9908 <___vfiprintf_internal_r+0xda4>
    98f4:	29800084 	addi	r6,r5,2
    98f8:	a5000204 	addi	r20,r20,8
    98fc:	180b883a 	mov	r5,r3
    9900:	bdfffc04 	addi	r23,r23,-16
    9904:	9dc00d0e 	bge	r19,r23,993c <___vfiprintf_internal_r+0xdd8>
    9908:	10800404 	addi	r2,r2,16
    990c:	28c00044 	addi	r3,r5,1
    9910:	a4400015 	stw	r17,0(r20)
    9914:	a4c00115 	stw	r19,4(r20)
    9918:	d8801c15 	stw	r2,112(sp)
    991c:	d8c01b15 	stw	r3,108(sp)
    9920:	50fff40e 	bge	r10,r3,98f4 <___vfiprintf_internal_r+0xd90>
    9924:	1000111e 	bne	r2,zero,996c <___vfiprintf_internal_r+0xe08>
    9928:	bdfffc04 	addi	r23,r23,-16
    992c:	01800044 	movi	r6,1
    9930:	000b883a 	mov	r5,zero
    9934:	d829883a 	mov	r20,sp
    9938:	9dfff316 	blt	r19,r23,9908 <___vfiprintf_internal_r+0xda4>
    993c:	d8c02617 	ldw	r3,152(sp)
    9940:	15c5883a 	add	r2,r2,r23
    9944:	a5c00115 	stw	r23,4(r20)
    9948:	a0c00015 	stw	r3,0(r20)
    994c:	d8801c15 	stw	r2,112(sp)
    9950:	d9801b15 	stw	r6,108(sp)
    9954:	00c001c4 	movi	r3,7
    9958:	19806716 	blt	r3,r6,9af8 <___vfiprintf_internal_r+0xf94>
    995c:	a5000204 	addi	r20,r20,8
    9960:	31000044 	addi	r4,r6,1
    9964:	300b883a 	mov	r5,r6
    9968:	003dc506 	br	9080 <___vfiprintf_internal_r+0x51c>
    996c:	d9002217 	ldw	r4,136(sp)
    9970:	d9402117 	ldw	r5,132(sp)
    9974:	d9801a04 	addi	r6,sp,104
    9978:	da802a15 	stw	r10,168(sp)
    997c:	0008a500 	call	8a50 <__sprint_r.part.0>
    9980:	da802a17 	ldw	r10,168(sp)
    9984:	103f711e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9988:	d9401b17 	ldw	r5,108(sp)
    998c:	d8801c17 	ldw	r2,112(sp)
    9990:	d829883a 	mov	r20,sp
    9994:	29800044 	addi	r6,r5,1
    9998:	003fd906 	br	9900 <___vfiprintf_internal_r+0xd9c>
    999c:	1000401e 	bne	r2,zero,9aa0 <___vfiprintf_internal_r+0xf3c>
    99a0:	38003b26 	beq	r7,zero,9a90 <___vfiprintf_internal_r+0xf2c>
    99a4:	d9001d04 	addi	r4,sp,116
    99a8:	00800084 	movi	r2,2
    99ac:	d9000015 	stw	r4,0(sp)
    99b0:	d8800115 	stw	r2,4(sp)
    99b4:	1809883a 	mov	r4,r3
    99b8:	d829883a 	mov	r20,sp
    99bc:	003dab06 	br	906c <___vfiprintf_internal_r+0x508>
    99c0:	1000431e 	bne	r2,zero,9ad0 <___vfiprintf_internal_r+0xf6c>
    99c4:	01000044 	movi	r4,1
    99c8:	000b883a 	mov	r5,zero
    99cc:	d829883a 	mov	r20,sp
    99d0:	003da906 	br	9078 <___vfiprintf_internal_r+0x514>
    99d4:	10803fcc 	andi	r2,r2,255
    99d8:	1000081e 	bne	r2,zero,99fc <___vfiprintf_internal_r+0xe98>
    99dc:	9080004c 	andi	r2,r18,1
    99e0:	10000626 	beq	r2,zero,99fc <___vfiprintf_internal_r+0xe98>
    99e4:	d9002817 	ldw	r4,160(sp)
    99e8:	00800c04 	movi	r2,48
    99ec:	d88019c5 	stb	r2,103(sp)
    99f0:	d9002015 	stw	r4,128(sp)
    99f4:	df0019c4 	addi	fp,sp,103
    99f8:	003d5306 	br	8f48 <___vfiprintf_internal_r+0x3e4>
    99fc:	df001a04 	addi	fp,sp,104
    9a00:	003d5106 	br	8f48 <___vfiprintf_internal_r+0x3e4>
    9a04:	1000931e 	bne	r2,zero,9c54 <___vfiprintf_internal_r+0x10f0>
    9a08:	d8c01d87 	ldb	r3,118(sp)
    9a0c:	18005326 	beq	r3,zero,9b5c <___vfiprintf_internal_r+0xff8>
    9a10:	00800044 	movi	r2,1
    9a14:	d8c01d84 	addi	r3,sp,118
    9a18:	1009883a 	mov	r4,r2
    9a1c:	d8c00015 	stw	r3,0(sp)
    9a20:	d8800115 	stw	r2,4(sp)
    9a24:	d829883a 	mov	r20,sp
    9a28:	003f0f06 	br	9668 <___vfiprintf_internal_r+0xb04>
    9a2c:	d8c02417 	ldw	r3,144(sp)
    9a30:	d811883a 	mov	r8,sp
    9a34:	1d65c83a 	sub	r18,r3,r21
    9a38:	04bf5816 	blt	zero,r18,979c <___vfiprintf_internal_r+0xc38>
    9a3c:	003f7e06 	br	9838 <___vfiprintf_internal_r+0xcd4>
    9a40:	b02b883a 	mov	r21,r22
    9a44:	003c9806 	br	8ca8 <___vfiprintf_internal_r+0x144>
    9a48:	d9002217 	ldw	r4,136(sp)
    9a4c:	d9402117 	ldw	r5,132(sp)
    9a50:	d9801a04 	addi	r6,sp,104
    9a54:	0008a500 	call	8a50 <__sprint_r.part.0>
    9a58:	103f3c1e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9a5c:	d8801c17 	ldw	r2,112(sp)
    9a60:	d811883a 	mov	r8,sp
    9a64:	003f4806 	br	9788 <___vfiprintf_internal_r+0xc24>
    9a68:	00800084 	movi	r2,2
    9a6c:	9dc6b03a 	or	r3,r19,r23
    9a70:	003d1806 	br	8ed4 <___vfiprintf_internal_r+0x370>
    9a74:	d9002217 	ldw	r4,136(sp)
    9a78:	d9402117 	ldw	r5,132(sp)
    9a7c:	d9801a04 	addi	r6,sp,104
    9a80:	0008a500 	call	8a50 <__sprint_r.part.0>
    9a84:	103f311e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9a88:	d829883a 	mov	r20,sp
    9a8c:	003cf406 	br	8e60 <___vfiprintf_internal_r+0x2fc>
    9a90:	000b883a 	mov	r5,zero
    9a94:	1809883a 	mov	r4,r3
    9a98:	d829883a 	mov	r20,sp
    9a9c:	003d7606 	br	9078 <___vfiprintf_internal_r+0x514>
    9aa0:	d9002217 	ldw	r4,136(sp)
    9aa4:	d9402117 	ldw	r5,132(sp)
    9aa8:	d9801a04 	addi	r6,sp,104
    9aac:	d9c02a15 	stw	r7,168(sp)
    9ab0:	0008a500 	call	8a50 <__sprint_r.part.0>
    9ab4:	d9c02a17 	ldw	r7,168(sp)
    9ab8:	103f241e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9abc:	d9401b17 	ldw	r5,108(sp)
    9ac0:	d8801c17 	ldw	r2,112(sp)
    9ac4:	d829883a 	mov	r20,sp
    9ac8:	29000044 	addi	r4,r5,1
    9acc:	003d5d06 	br	9044 <___vfiprintf_internal_r+0x4e0>
    9ad0:	d9002217 	ldw	r4,136(sp)
    9ad4:	d9402117 	ldw	r5,132(sp)
    9ad8:	d9801a04 	addi	r6,sp,104
    9adc:	0008a500 	call	8a50 <__sprint_r.part.0>
    9ae0:	103f1a1e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9ae4:	d9401b17 	ldw	r5,108(sp)
    9ae8:	d8801c17 	ldw	r2,112(sp)
    9aec:	d829883a 	mov	r20,sp
    9af0:	29000044 	addi	r4,r5,1
    9af4:	003d6006 	br	9078 <___vfiprintf_internal_r+0x514>
    9af8:	10009b1e 	bne	r2,zero,9d68 <___vfiprintf_internal_r+0x1204>
    9afc:	01000044 	movi	r4,1
    9b00:	000b883a 	mov	r5,zero
    9b04:	d829883a 	mov	r20,sp
    9b08:	003d5d06 	br	9080 <___vfiprintf_internal_r+0x51c>
    9b0c:	d9002217 	ldw	r4,136(sp)
    9b10:	d9402117 	ldw	r5,132(sp)
    9b14:	d9801a04 	addi	r6,sp,104
    9b18:	0008a500 	call	8a50 <__sprint_r.part.0>
    9b1c:	103f0b1e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9b20:	d9001b17 	ldw	r4,108(sp)
    9b24:	d8801c17 	ldw	r2,112(sp)
    9b28:	d829883a 	mov	r20,sp
    9b2c:	21000044 	addi	r4,r4,1
    9b30:	003d7906 	br	9118 <___vfiprintf_internal_r+0x5b4>
    9b34:	04e7c83a 	sub	r19,zero,r19
    9b38:	9804c03a 	cmpne	r2,r19,zero
    9b3c:	05efc83a 	sub	r23,zero,r23
    9b40:	b8afc83a 	sub	r23,r23,r2
    9b44:	02800b44 	movi	r10,45
    9b48:	da801d85 	stb	r10,118(sp)
    9b4c:	dc002015 	stw	r16,128(sp)
    9b50:	00800044 	movi	r2,1
    9b54:	9dc6b03a 	or	r3,r19,r23
    9b58:	003ce106 	br	8ee0 <___vfiprintf_internal_r+0x37c>
    9b5c:	000b883a 	mov	r5,zero
    9b60:	01000044 	movi	r4,1
    9b64:	d829883a 	mov	r20,sp
    9b68:	383d4326 	beq	r7,zero,9078 <___vfiprintf_internal_r+0x514>
    9b6c:	00800084 	movi	r2,2
    9b70:	d8c01d04 	addi	r3,sp,116
    9b74:	d8c00015 	stw	r3,0(sp)
    9b78:	d8800115 	stw	r2,4(sp)
    9b7c:	003d3b06 	br	906c <___vfiprintf_internal_r+0x508>
    9b80:	b1800007 	ldb	r6,0(r22)
    9b84:	b005883a 	mov	r2,r22
    9b88:	003c5206 	br	8cd4 <___vfiprintf_internal_r+0x170>
    9b8c:	00800084 	movi	r2,2
    9b90:	003cd006 	br	8ed4 <___vfiprintf_internal_r+0x370>
    9b94:	9080100c 	andi	r2,r18,64
    9b98:	10003e26 	beq	r2,zero,9c94 <___vfiprintf_internal_r+0x1130>
    9b9c:	d9402317 	ldw	r5,140(sp)
    9ba0:	002f883a 	mov	r23,zero
    9ba4:	0005883a 	mov	r2,zero
    9ba8:	2cc0000b 	ldhu	r19,0(r5)
    9bac:	29400104 	addi	r5,r5,4
    9bb0:	d9402315 	stw	r5,140(sp)
    9bb4:	9807883a 	mov	r3,r19
    9bb8:	003cc606 	br	8ed4 <___vfiprintf_internal_r+0x370>
    9bbc:	9080100c 	andi	r2,r18,64
    9bc0:	10004226 	beq	r2,zero,9ccc <___vfiprintf_internal_r+0x1168>
    9bc4:	d9402317 	ldw	r5,140(sp)
    9bc8:	002f883a 	mov	r23,zero
    9bcc:	00800044 	movi	r2,1
    9bd0:	2cc0000b 	ldhu	r19,0(r5)
    9bd4:	29400104 	addi	r5,r5,4
    9bd8:	d9402315 	stw	r5,140(sp)
    9bdc:	9807883a 	mov	r3,r19
    9be0:	003cbc06 	br	8ed4 <___vfiprintf_internal_r+0x370>
    9be4:	9080100c 	andi	r2,r18,64
    9be8:	10003226 	beq	r2,zero,9cb4 <___vfiprintf_internal_r+0x1150>
    9bec:	d8802317 	ldw	r2,140(sp)
    9bf0:	002f883a 	mov	r23,zero
    9bf4:	14c0000b 	ldhu	r19,0(r2)
    9bf8:	10800104 	addi	r2,r2,4
    9bfc:	d8802315 	stw	r2,140(sp)
    9c00:	003da106 	br	9288 <___vfiprintf_internal_r+0x724>
    9c04:	9080040c 	andi	r2,r18,16
    9c08:	10003f1e 	bne	r2,zero,9d08 <___vfiprintf_internal_r+0x11a4>
    9c0c:	9480100c 	andi	r18,r18,64
    9c10:	90007526 	beq	r18,zero,9de8 <___vfiprintf_internal_r+0x1284>
    9c14:	d9402317 	ldw	r5,140(sp)
    9c18:	d8c02517 	ldw	r3,148(sp)
    9c1c:	28800017 	ldw	r2,0(r5)
    9c20:	29400104 	addi	r5,r5,4
    9c24:	d9402315 	stw	r5,140(sp)
    9c28:	10c0000d 	sth	r3,0(r2)
    9c2c:	003c0106 	br	8c34 <___vfiprintf_internal_r+0xd0>
    9c30:	9080100c 	andi	r2,r18,64
    9c34:	10002d26 	beq	r2,zero,9cec <___vfiprintf_internal_r+0x1188>
    9c38:	1cc0000f 	ldh	r19,0(r3)
    9c3c:	d8802317 	ldw	r2,140(sp)
    9c40:	982fd7fa 	srai	r23,r19,31
    9c44:	10800104 	addi	r2,r2,4
    9c48:	d8802315 	stw	r2,140(sp)
    9c4c:	b805883a 	mov	r2,r23
    9c50:	003dc006 	br	9354 <___vfiprintf_internal_r+0x7f0>
    9c54:	d9002217 	ldw	r4,136(sp)
    9c58:	d9402117 	ldw	r5,132(sp)
    9c5c:	d9801a04 	addi	r6,sp,104
    9c60:	d9c02a15 	stw	r7,168(sp)
    9c64:	0008a500 	call	8a50 <__sprint_r.part.0>
    9c68:	d9c02a17 	ldw	r7,168(sp)
    9c6c:	103eb71e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9c70:	d9401b17 	ldw	r5,108(sp)
    9c74:	d8801c17 	ldw	r2,112(sp)
    9c78:	d829883a 	mov	r20,sp
    9c7c:	29000044 	addi	r4,r5,1
    9c80:	003e6e06 	br	963c <___vfiprintf_internal_r+0xad8>
    9c84:	202b883a 	mov	r21,r4
    9c88:	003eed06 	br	9840 <___vfiprintf_internal_r+0xcdc>
    9c8c:	dc002015 	stw	r16,128(sp)
    9c90:	003e1606 	br	94ec <___vfiprintf_internal_r+0x988>
    9c94:	d8802317 	ldw	r2,140(sp)
    9c98:	002f883a 	mov	r23,zero
    9c9c:	14c00017 	ldw	r19,0(r2)
    9ca0:	10800104 	addi	r2,r2,4
    9ca4:	d8802315 	stw	r2,140(sp)
    9ca8:	9807883a 	mov	r3,r19
    9cac:	0005883a 	mov	r2,zero
    9cb0:	003c8806 	br	8ed4 <___vfiprintf_internal_r+0x370>
    9cb4:	d8c02317 	ldw	r3,140(sp)
    9cb8:	002f883a 	mov	r23,zero
    9cbc:	1cc00017 	ldw	r19,0(r3)
    9cc0:	18c00104 	addi	r3,r3,4
    9cc4:	d8c02315 	stw	r3,140(sp)
    9cc8:	003d6f06 	br	9288 <___vfiprintf_internal_r+0x724>
    9ccc:	d8802317 	ldw	r2,140(sp)
    9cd0:	002f883a 	mov	r23,zero
    9cd4:	14c00017 	ldw	r19,0(r2)
    9cd8:	10800104 	addi	r2,r2,4
    9cdc:	d8802315 	stw	r2,140(sp)
    9ce0:	9807883a 	mov	r3,r19
    9ce4:	00800044 	movi	r2,1
    9ce8:	003c7a06 	br	8ed4 <___vfiprintf_internal_r+0x370>
    9cec:	1cc00017 	ldw	r19,0(r3)
    9cf0:	d8c02317 	ldw	r3,140(sp)
    9cf4:	982fd7fa 	srai	r23,r19,31
    9cf8:	18c00104 	addi	r3,r3,4
    9cfc:	d8c02315 	stw	r3,140(sp)
    9d00:	b805883a 	mov	r2,r23
    9d04:	003d9306 	br	9354 <___vfiprintf_internal_r+0x7f0>
    9d08:	d8c02317 	ldw	r3,140(sp)
    9d0c:	d9002517 	ldw	r4,148(sp)
    9d10:	18800017 	ldw	r2,0(r3)
    9d14:	18c00104 	addi	r3,r3,4
    9d18:	d8c02315 	stw	r3,140(sp)
    9d1c:	11000015 	stw	r4,0(r2)
    9d20:	003bc406 	br	8c34 <___vfiprintf_internal_r+0xd0>
    9d24:	01400074 	movhi	r5,1
    9d28:	29493104 	addi	r5,r5,9412
    9d2c:	d9402615 	stw	r5,152(sp)
    9d30:	003cef06 	br	90f0 <___vfiprintf_internal_r+0x58c>
    9d34:	b0800044 	addi	r2,r22,1
    9d38:	94800814 	ori	r18,r18,32
    9d3c:	b1800047 	ldb	r6,1(r22)
    9d40:	003be406 	br	8cd4 <___vfiprintf_internal_r+0x170>
    9d44:	d8802417 	ldw	r2,144(sp)
    9d48:	d8c02315 	stw	r3,140(sp)
    9d4c:	0085c83a 	sub	r2,zero,r2
    9d50:	d8802415 	stw	r2,144(sp)
    9d54:	b005883a 	mov	r2,r22
    9d58:	003d2406 	br	91ec <___vfiprintf_internal_r+0x688>
    9d5c:	00015e40 	call	15e4 <strlen>
    9d60:	d8802015 	stw	r2,128(sp)
    9d64:	003de106 	br	94ec <___vfiprintf_internal_r+0x988>
    9d68:	d9002217 	ldw	r4,136(sp)
    9d6c:	d9402117 	ldw	r5,132(sp)
    9d70:	d9801a04 	addi	r6,sp,104
    9d74:	0008a500 	call	8a50 <__sprint_r.part.0>
    9d78:	103e741e 	bne	r2,zero,974c <___vfiprintf_internal_r+0xbe8>
    9d7c:	d9401b17 	ldw	r5,108(sp)
    9d80:	d8801c17 	ldw	r2,112(sp)
    9d84:	d829883a 	mov	r20,sp
    9d88:	29000044 	addi	r4,r5,1
    9d8c:	003cbc06 	br	9080 <___vfiprintf_internal_r+0x51c>
    9d90:	01400074 	movhi	r5,1
    9d94:	29493504 	addi	r5,r5,9428
    9d98:	d9402615 	stw	r5,152(sp)
    9d9c:	d9401b17 	ldw	r5,108(sp)
    9da0:	29400044 	addi	r5,r5,1
    9da4:	003c9b06 	br	9014 <___vfiprintf_internal_r+0x4b0>
    9da8:	00800184 	movi	r2,6
    9dac:	1400012e 	bgeu	r2,r16,9db4 <___vfiprintf_internal_r+0x1250>
    9db0:	1021883a 	mov	r16,r2
    9db4:	dc002015 	stw	r16,128(sp)
    9db8:	802b883a 	mov	r21,r16
    9dbc:	80001b16 	blt	r16,zero,9e2c <___vfiprintf_internal_r+0x12c8>
    9dc0:	07000074 	movhi	fp,1
    9dc4:	dcc02315 	stw	r19,140(sp)
    9dc8:	e708d504 	addi	fp,fp,9044
    9dcc:	003d4106 	br	92d4 <___vfiprintf_internal_r+0x770>
    9dd0:	01400074 	movhi	r5,1
    9dd4:	29493504 	addi	r5,r5,9428
    9dd8:	d9402615 	stw	r5,152(sp)
    9ddc:	d9401b17 	ldw	r5,108(sp)
    9de0:	29400044 	addi	r5,r5,1
    9de4:	003e8b06 	br	9814 <___vfiprintf_internal_r+0xcb0>
    9de8:	d9002317 	ldw	r4,140(sp)
    9dec:	d9402517 	ldw	r5,148(sp)
    9df0:	20800017 	ldw	r2,0(r4)
    9df4:	21000104 	addi	r4,r4,4
    9df8:	d9002315 	stw	r4,140(sp)
    9dfc:	11400015 	stw	r5,0(r2)
    9e00:	003b8c06 	br	8c34 <___vfiprintf_internal_r+0xd0>
    9e04:	01400074 	movhi	r5,1
    9e08:	29493104 	addi	r5,r5,9412
    9e0c:	d9402615 	stw	r5,152(sp)
    9e10:	200d883a 	mov	r6,r4
    9e14:	003ec906 	br	993c <___vfiprintf_internal_r+0xdd8>
    9e18:	dc002015 	stw	r16,128(sp)
    9e1c:	da801d83 	ldbu	r10,118(sp)
    9e20:	dcc02315 	stw	r19,140(sp)
    9e24:	0021883a 	mov	r16,zero
    9e28:	003c4706 	br	8f48 <___vfiprintf_internal_r+0x3e4>
    9e2c:	002b883a 	mov	r21,zero
    9e30:	003fe306 	br	9dc0 <___vfiprintf_internal_r+0x125c>
    9e34:	d9402317 	ldw	r5,140(sp)
    9e38:	2c000017 	ldw	r16,0(r5)
    9e3c:	28c00104 	addi	r3,r5,4
    9e40:	d8c02315 	stw	r3,140(sp)
    9e44:	803fbd0e 	bge	r16,zero,9d3c <___vfiprintf_internal_r+0x11d8>
    9e48:	043fffc4 	movi	r16,-1
    9e4c:	b1800047 	ldb	r6,1(r22)
    9e50:	003ba006 	br	8cd4 <___vfiprintf_internal_r+0x170>

00009e54 <__vfiprintf_internal>:
    9e54:	2007883a 	mov	r3,r4
    9e58:	01000074 	movhi	r4,1
    9e5c:	21113d04 	addi	r4,r4,17652
    9e60:	21000017 	ldw	r4,0(r4)
    9e64:	2805883a 	mov	r2,r5
    9e68:	300f883a 	mov	r7,r6
    9e6c:	180b883a 	mov	r5,r3
    9e70:	100d883a 	mov	r6,r2
    9e74:	0008b641 	jmpi	8b64 <___vfiprintf_internal_r>

00009e78 <__sbprintf>:
    9e78:	2880030b 	ldhu	r2,12(r5)
    9e7c:	2ac01917 	ldw	r11,100(r5)
    9e80:	2a80038b 	ldhu	r10,14(r5)
    9e84:	2a400717 	ldw	r9,28(r5)
    9e88:	2a000917 	ldw	r8,36(r5)
    9e8c:	defee204 	addi	sp,sp,-1144
    9e90:	00c10004 	movi	r3,1024
    9e94:	dc011a15 	stw	r16,1128(sp)
    9e98:	10bfff4c 	andi	r2,r2,65533
    9e9c:	2821883a 	mov	r16,r5
    9ea0:	d8cb883a 	add	r5,sp,r3
    9ea4:	dc811c15 	stw	r18,1136(sp)
    9ea8:	dc411b15 	stw	r17,1132(sp)
    9eac:	dfc11d15 	stw	ra,1140(sp)
    9eb0:	2025883a 	mov	r18,r4
    9eb4:	d881030d 	sth	r2,1036(sp)
    9eb8:	dac11915 	stw	r11,1124(sp)
    9ebc:	da81038d 	sth	r10,1038(sp)
    9ec0:	da410715 	stw	r9,1052(sp)
    9ec4:	da010915 	stw	r8,1060(sp)
    9ec8:	dec10015 	stw	sp,1024(sp)
    9ecc:	dec10415 	stw	sp,1040(sp)
    9ed0:	d8c10215 	stw	r3,1032(sp)
    9ed4:	d8c10515 	stw	r3,1044(sp)
    9ed8:	d8010615 	stw	zero,1048(sp)
    9edc:	0008b640 	call	8b64 <___vfiprintf_internal_r>
    9ee0:	1023883a 	mov	r17,r2
    9ee4:	10000416 	blt	r2,zero,9ef8 <__sbprintf+0x80>
    9ee8:	9009883a 	mov	r4,r18
    9eec:	d9410004 	addi	r5,sp,1024
    9ef0:	00054600 	call	5460 <_fflush_r>
    9ef4:	10000d1e 	bne	r2,zero,9f2c <__sbprintf+0xb4>
    9ef8:	d8c1030b 	ldhu	r3,1036(sp)
    9efc:	18c0100c 	andi	r3,r3,64
    9f00:	18000326 	beq	r3,zero,9f10 <__sbprintf+0x98>
    9f04:	8080030b 	ldhu	r2,12(r16)
    9f08:	10801014 	ori	r2,r2,64
    9f0c:	8080030d 	sth	r2,12(r16)
    9f10:	8805883a 	mov	r2,r17
    9f14:	dfc11d17 	ldw	ra,1140(sp)
    9f18:	dc811c17 	ldw	r18,1136(sp)
    9f1c:	dc411b17 	ldw	r17,1132(sp)
    9f20:	dc011a17 	ldw	r16,1128(sp)
    9f24:	dec11e04 	addi	sp,sp,1144
    9f28:	f800283a 	ret
    9f2c:	047fffc4 	movi	r17,-1
    9f30:	003ff106 	br	9ef8 <__sbprintf+0x80>

00009f34 <_write_r>:
    9f34:	defffd04 	addi	sp,sp,-12
    9f38:	dc000015 	stw	r16,0(sp)
    9f3c:	04000074 	movhi	r16,1
    9f40:	dc400115 	stw	r17,4(sp)
    9f44:	84115404 	addi	r16,r16,17744
    9f48:	2023883a 	mov	r17,r4
    9f4c:	2809883a 	mov	r4,r5
    9f50:	300b883a 	mov	r5,r6
    9f54:	380d883a 	mov	r6,r7
    9f58:	dfc00215 	stw	ra,8(sp)
    9f5c:	80000015 	stw	zero,0(r16)
    9f60:	000e5700 	call	e570 <write>
    9f64:	00ffffc4 	movi	r3,-1
    9f68:	10c00526 	beq	r2,r3,9f80 <_write_r+0x4c>
    9f6c:	dfc00217 	ldw	ra,8(sp)
    9f70:	dc400117 	ldw	r17,4(sp)
    9f74:	dc000017 	ldw	r16,0(sp)
    9f78:	dec00304 	addi	sp,sp,12
    9f7c:	f800283a 	ret
    9f80:	80c00017 	ldw	r3,0(r16)
    9f84:	183ff926 	beq	r3,zero,9f6c <_write_r+0x38>
    9f88:	88c00015 	stw	r3,0(r17)
    9f8c:	003ff706 	br	9f6c <_write_r+0x38>

00009f90 <_close_r>:
    9f90:	defffd04 	addi	sp,sp,-12
    9f94:	dc000015 	stw	r16,0(sp)
    9f98:	04000074 	movhi	r16,1
    9f9c:	dc400115 	stw	r17,4(sp)
    9fa0:	84115404 	addi	r16,r16,17744
    9fa4:	2023883a 	mov	r17,r4
    9fa8:	2809883a 	mov	r4,r5
    9fac:	dfc00215 	stw	ra,8(sp)
    9fb0:	80000015 	stw	zero,0(r16)
    9fb4:	000ddb00 	call	ddb0 <close>
    9fb8:	00ffffc4 	movi	r3,-1
    9fbc:	10c00526 	beq	r2,r3,9fd4 <_close_r+0x44>
    9fc0:	dfc00217 	ldw	ra,8(sp)
    9fc4:	dc400117 	ldw	r17,4(sp)
    9fc8:	dc000017 	ldw	r16,0(sp)
    9fcc:	dec00304 	addi	sp,sp,12
    9fd0:	f800283a 	ret
    9fd4:	80c00017 	ldw	r3,0(r16)
    9fd8:	183ff926 	beq	r3,zero,9fc0 <_close_r+0x30>
    9fdc:	88c00015 	stw	r3,0(r17)
    9fe0:	003ff706 	br	9fc0 <_close_r+0x30>

00009fe4 <_calloc_r>:
    9fe4:	defffe04 	addi	sp,sp,-8
    9fe8:	dc000015 	stw	r16,0(sp)
    9fec:	2021883a 	mov	r16,r4
    9ff0:	2809883a 	mov	r4,r5
    9ff4:	300b883a 	mov	r5,r6
    9ff8:	dfc00115 	stw	ra,4(sp)
    9ffc:	0000dc40 	call	dc4 <__mulsi3>
    a000:	8009883a 	mov	r4,r16
    a004:	100b883a 	mov	r5,r2
    a008:	000659c0 	call	659c <_malloc_r>
    a00c:	1021883a 	mov	r16,r2
    a010:	10002826 	beq	r2,zero,a0b4 <_calloc_r+0xd0>
    a014:	11bfff17 	ldw	r6,-4(r2)
    a018:	00bfff04 	movi	r2,-4
    a01c:	00c00904 	movi	r3,36
    a020:	308c703a 	and	r6,r6,r2
    a024:	308d883a 	add	r6,r6,r2
    a028:	19801436 	bltu	r3,r6,a07c <_calloc_r+0x98>
    a02c:	008004c4 	movi	r2,19
    a030:	11800936 	bltu	r2,r6,a058 <_calloc_r+0x74>
    a034:	8005883a 	mov	r2,r16
    a038:	10000015 	stw	zero,0(r2)
    a03c:	10000115 	stw	zero,4(r2)
    a040:	10000215 	stw	zero,8(r2)
    a044:	8005883a 	mov	r2,r16
    a048:	dfc00117 	ldw	ra,4(sp)
    a04c:	dc000017 	ldw	r16,0(sp)
    a050:	dec00204 	addi	sp,sp,8
    a054:	f800283a 	ret
    a058:	80000015 	stw	zero,0(r16)
    a05c:	80000115 	stw	zero,4(r16)
    a060:	008006c4 	movi	r2,27
    a064:	11800d2e 	bgeu	r2,r6,a09c <_calloc_r+0xb8>
    a068:	80000215 	stw	zero,8(r16)
    a06c:	80000315 	stw	zero,12(r16)
    a070:	30c00c26 	beq	r6,r3,a0a4 <_calloc_r+0xc0>
    a074:	80800404 	addi	r2,r16,16
    a078:	003fef06 	br	a038 <_calloc_r+0x54>
    a07c:	8009883a 	mov	r4,r16
    a080:	000b883a 	mov	r5,zero
    a084:	00070c00 	call	70c0 <memset>
    a088:	8005883a 	mov	r2,r16
    a08c:	dfc00117 	ldw	ra,4(sp)
    a090:	dc000017 	ldw	r16,0(sp)
    a094:	dec00204 	addi	sp,sp,8
    a098:	f800283a 	ret
    a09c:	80800204 	addi	r2,r16,8
    a0a0:	003fe506 	br	a038 <_calloc_r+0x54>
    a0a4:	80000415 	stw	zero,16(r16)
    a0a8:	80800604 	addi	r2,r16,24
    a0ac:	80000515 	stw	zero,20(r16)
    a0b0:	003fe106 	br	a038 <_calloc_r+0x54>
    a0b4:	0005883a 	mov	r2,zero
    a0b8:	003fe306 	br	a048 <_calloc_r+0x64>

0000a0bc <_fclose_r>:
    a0bc:	28003926 	beq	r5,zero,a1a4 <_fclose_r+0xe8>
    a0c0:	defffc04 	addi	sp,sp,-16
    a0c4:	dc400115 	stw	r17,4(sp)
    a0c8:	dc000015 	stw	r16,0(sp)
    a0cc:	dfc00315 	stw	ra,12(sp)
    a0d0:	dc800215 	stw	r18,8(sp)
    a0d4:	2023883a 	mov	r17,r4
    a0d8:	2821883a 	mov	r16,r5
    a0dc:	20000226 	beq	r4,zero,a0e8 <_fclose_r+0x2c>
    a0e0:	20800e17 	ldw	r2,56(r4)
    a0e4:	10002726 	beq	r2,zero,a184 <_fclose_r+0xc8>
    a0e8:	8080030f 	ldh	r2,12(r16)
    a0ec:	1000071e 	bne	r2,zero,a10c <_fclose_r+0x50>
    a0f0:	0005883a 	mov	r2,zero
    a0f4:	dfc00317 	ldw	ra,12(sp)
    a0f8:	dc800217 	ldw	r18,8(sp)
    a0fc:	dc400117 	ldw	r17,4(sp)
    a100:	dc000017 	ldw	r16,0(sp)
    a104:	dec00404 	addi	sp,sp,16
    a108:	f800283a 	ret
    a10c:	8809883a 	mov	r4,r17
    a110:	800b883a 	mov	r5,r16
    a114:	00052580 	call	5258 <__sflush_r>
    a118:	1025883a 	mov	r18,r2
    a11c:	80800b17 	ldw	r2,44(r16)
    a120:	10000426 	beq	r2,zero,a134 <_fclose_r+0x78>
    a124:	81400717 	ldw	r5,28(r16)
    a128:	8809883a 	mov	r4,r17
    a12c:	103ee83a 	callr	r2
    a130:	10001616 	blt	r2,zero,a18c <_fclose_r+0xd0>
    a134:	8080030b 	ldhu	r2,12(r16)
    a138:	1080200c 	andi	r2,r2,128
    a13c:	1000151e 	bne	r2,zero,a194 <_fclose_r+0xd8>
    a140:	81400c17 	ldw	r5,48(r16)
    a144:	28000526 	beq	r5,zero,a15c <_fclose_r+0xa0>
    a148:	80801004 	addi	r2,r16,64
    a14c:	28800226 	beq	r5,r2,a158 <_fclose_r+0x9c>
    a150:	8809883a 	mov	r4,r17
    a154:	00059c00 	call	59c0 <_free_r>
    a158:	80000c15 	stw	zero,48(r16)
    a15c:	81401117 	ldw	r5,68(r16)
    a160:	28000326 	beq	r5,zero,a170 <_fclose_r+0xb4>
    a164:	8809883a 	mov	r4,r17
    a168:	00059c00 	call	59c0 <_free_r>
    a16c:	80001115 	stw	zero,68(r16)
    a170:	000585c0 	call	585c <__sfp_lock_acquire>
    a174:	8000030d 	sth	zero,12(r16)
    a178:	00058600 	call	5860 <__sfp_lock_release>
    a17c:	9005883a 	mov	r2,r18
    a180:	003fdc06 	br	a0f4 <_fclose_r+0x38>
    a184:	000584c0 	call	584c <__sinit>
    a188:	003fd706 	br	a0e8 <_fclose_r+0x2c>
    a18c:	04bfffc4 	movi	r18,-1
    a190:	003fe806 	br	a134 <_fclose_r+0x78>
    a194:	81400417 	ldw	r5,16(r16)
    a198:	8809883a 	mov	r4,r17
    a19c:	00059c00 	call	59c0 <_free_r>
    a1a0:	003fe706 	br	a140 <_fclose_r+0x84>
    a1a4:	0005883a 	mov	r2,zero
    a1a8:	f800283a 	ret

0000a1ac <fclose>:
    a1ac:	00800074 	movhi	r2,1
    a1b0:	10913d04 	addi	r2,r2,17652
    a1b4:	200b883a 	mov	r5,r4
    a1b8:	11000017 	ldw	r4,0(r2)
    a1bc:	000a0bc1 	jmpi	a0bc <_fclose_r>

0000a1c0 <_fputwc_r>:
    a1c0:	3080030b 	ldhu	r2,12(r6)
    a1c4:	defff804 	addi	sp,sp,-32
    a1c8:	dcc00415 	stw	r19,16(sp)
    a1cc:	dc800315 	stw	r18,12(sp)
    a1d0:	dc000115 	stw	r16,4(sp)
    a1d4:	dfc00715 	stw	ra,28(sp)
    a1d8:	dd400615 	stw	r21,24(sp)
    a1dc:	dd000515 	stw	r20,20(sp)
    a1e0:	dc400215 	stw	r17,8(sp)
    a1e4:	10c8000c 	andi	r3,r2,8192
    a1e8:	3021883a 	mov	r16,r6
    a1ec:	2027883a 	mov	r19,r4
    a1f0:	2825883a 	mov	r18,r5
    a1f4:	1800051e 	bne	r3,zero,a20c <_fputwc_r+0x4c>
    a1f8:	30c01917 	ldw	r3,100(r6)
    a1fc:	10880014 	ori	r2,r2,8192
    a200:	3080030d 	sth	r2,12(r6)
    a204:	18880014 	ori	r2,r3,8192
    a208:	30801915 	stw	r2,100(r6)
    a20c:	000638c0 	call	638c <__locale_mb_cur_max>
    a210:	00c00044 	movi	r3,1
    a214:	10c03e26 	beq	r2,r3,a310 <_fputwc_r+0x150>
    a218:	9809883a 	mov	r4,r19
    a21c:	d80b883a 	mov	r5,sp
    a220:	900d883a 	mov	r6,r18
    a224:	81c01704 	addi	r7,r16,92
    a228:	000a6580 	call	a658 <_wcrtomb_r>
    a22c:	1029883a 	mov	r20,r2
    a230:	00bfffc4 	movi	r2,-1
    a234:	a0802026 	beq	r20,r2,a2b8 <_fputwc_r+0xf8>
    a238:	d9400003 	ldbu	r5,0(sp)
    a23c:	a0001c26 	beq	r20,zero,a2b0 <_fputwc_r+0xf0>
    a240:	0023883a 	mov	r17,zero
    a244:	05400284 	movi	r21,10
    a248:	00000906 	br	a270 <_fputwc_r+0xb0>
    a24c:	80800017 	ldw	r2,0(r16)
    a250:	11400005 	stb	r5,0(r2)
    a254:	80c00017 	ldw	r3,0(r16)
    a258:	18c00044 	addi	r3,r3,1
    a25c:	80c00015 	stw	r3,0(r16)
    a260:	8c400044 	addi	r17,r17,1
    a264:	dc45883a 	add	r2,sp,r17
    a268:	8d00112e 	bgeu	r17,r20,a2b0 <_fputwc_r+0xf0>
    a26c:	11400003 	ldbu	r5,0(r2)
    a270:	80c00217 	ldw	r3,8(r16)
    a274:	18ffffc4 	addi	r3,r3,-1
    a278:	80c00215 	stw	r3,8(r16)
    a27c:	183ff30e 	bge	r3,zero,a24c <_fputwc_r+0x8c>
    a280:	80800617 	ldw	r2,24(r16)
    a284:	18801916 	blt	r3,r2,a2ec <_fputwc_r+0x12c>
    a288:	80800017 	ldw	r2,0(r16)
    a28c:	11400005 	stb	r5,0(r2)
    a290:	80800017 	ldw	r2,0(r16)
    a294:	10c00003 	ldbu	r3,0(r2)
    a298:	10800044 	addi	r2,r2,1
    a29c:	1d402326 	beq	r3,r21,a32c <_fputwc_r+0x16c>
    a2a0:	80800015 	stw	r2,0(r16)
    a2a4:	8c400044 	addi	r17,r17,1
    a2a8:	dc45883a 	add	r2,sp,r17
    a2ac:	8d3fef36 	bltu	r17,r20,a26c <_fputwc_r+0xac>
    a2b0:	9005883a 	mov	r2,r18
    a2b4:	00000406 	br	a2c8 <_fputwc_r+0x108>
    a2b8:	80c0030b 	ldhu	r3,12(r16)
    a2bc:	a005883a 	mov	r2,r20
    a2c0:	18c01014 	ori	r3,r3,64
    a2c4:	80c0030d 	sth	r3,12(r16)
    a2c8:	dfc00717 	ldw	ra,28(sp)
    a2cc:	dd400617 	ldw	r21,24(sp)
    a2d0:	dd000517 	ldw	r20,20(sp)
    a2d4:	dcc00417 	ldw	r19,16(sp)
    a2d8:	dc800317 	ldw	r18,12(sp)
    a2dc:	dc400217 	ldw	r17,8(sp)
    a2e0:	dc000117 	ldw	r16,4(sp)
    a2e4:	dec00804 	addi	sp,sp,32
    a2e8:	f800283a 	ret
    a2ec:	9809883a 	mov	r4,r19
    a2f0:	29403fcc 	andi	r5,r5,255
    a2f4:	800d883a 	mov	r6,r16
    a2f8:	000a5040 	call	a504 <__swbuf_r>
    a2fc:	10bfffe0 	cmpeqi	r2,r2,-1
    a300:	10803fcc 	andi	r2,r2,255
    a304:	103fd626 	beq	r2,zero,a260 <_fputwc_r+0xa0>
    a308:	00bfffc4 	movi	r2,-1
    a30c:	003fee06 	br	a2c8 <_fputwc_r+0x108>
    a310:	90ffffc4 	addi	r3,r18,-1
    a314:	01003f84 	movi	r4,254
    a318:	20ffbf36 	bltu	r4,r3,a218 <_fputwc_r+0x58>
    a31c:	900b883a 	mov	r5,r18
    a320:	dc800005 	stb	r18,0(sp)
    a324:	1029883a 	mov	r20,r2
    a328:	003fc506 	br	a240 <_fputwc_r+0x80>
    a32c:	9809883a 	mov	r4,r19
    a330:	a80b883a 	mov	r5,r21
    a334:	800d883a 	mov	r6,r16
    a338:	000a5040 	call	a504 <__swbuf_r>
    a33c:	10bfffe0 	cmpeqi	r2,r2,-1
    a340:	003fef06 	br	a300 <_fputwc_r+0x140>

0000a344 <fputwc>:
    a344:	00800074 	movhi	r2,1
    a348:	defffc04 	addi	sp,sp,-16
    a34c:	10913d04 	addi	r2,r2,17652
    a350:	dc000115 	stw	r16,4(sp)
    a354:	14000017 	ldw	r16,0(r2)
    a358:	dc400215 	stw	r17,8(sp)
    a35c:	dfc00315 	stw	ra,12(sp)
    a360:	2023883a 	mov	r17,r4
    a364:	280d883a 	mov	r6,r5
    a368:	80000626 	beq	r16,zero,a384 <fputwc+0x40>
    a36c:	80800e17 	ldw	r2,56(r16)
    a370:	1000041e 	bne	r2,zero,a384 <fputwc+0x40>
    a374:	8009883a 	mov	r4,r16
    a378:	d9400015 	stw	r5,0(sp)
    a37c:	000584c0 	call	584c <__sinit>
    a380:	d9800017 	ldw	r6,0(sp)
    a384:	8009883a 	mov	r4,r16
    a388:	880b883a 	mov	r5,r17
    a38c:	dfc00317 	ldw	ra,12(sp)
    a390:	dc400217 	ldw	r17,8(sp)
    a394:	dc000117 	ldw	r16,4(sp)
    a398:	dec00404 	addi	sp,sp,16
    a39c:	000a1c01 	jmpi	a1c0 <_fputwc_r>

0000a3a0 <_fstat_r>:
    a3a0:	defffd04 	addi	sp,sp,-12
    a3a4:	dc000015 	stw	r16,0(sp)
    a3a8:	04000074 	movhi	r16,1
    a3ac:	dc400115 	stw	r17,4(sp)
    a3b0:	84115404 	addi	r16,r16,17744
    a3b4:	2023883a 	mov	r17,r4
    a3b8:	2809883a 	mov	r4,r5
    a3bc:	300b883a 	mov	r5,r6
    a3c0:	dfc00215 	stw	ra,8(sp)
    a3c4:	80000015 	stw	zero,0(r16)
    a3c8:	000df040 	call	df04 <fstat>
    a3cc:	00ffffc4 	movi	r3,-1
    a3d0:	10c00526 	beq	r2,r3,a3e8 <_fstat_r+0x48>
    a3d4:	dfc00217 	ldw	ra,8(sp)
    a3d8:	dc400117 	ldw	r17,4(sp)
    a3dc:	dc000017 	ldw	r16,0(sp)
    a3e0:	dec00304 	addi	sp,sp,12
    a3e4:	f800283a 	ret
    a3e8:	80c00017 	ldw	r3,0(r16)
    a3ec:	183ff926 	beq	r3,zero,a3d4 <_fstat_r+0x34>
    a3f0:	88c00015 	stw	r3,0(r17)
    a3f4:	003ff706 	br	a3d4 <_fstat_r+0x34>

0000a3f8 <_isatty_r>:
    a3f8:	defffd04 	addi	sp,sp,-12
    a3fc:	dc000015 	stw	r16,0(sp)
    a400:	04000074 	movhi	r16,1
    a404:	dc400115 	stw	r17,4(sp)
    a408:	84115404 	addi	r16,r16,17744
    a40c:	2023883a 	mov	r17,r4
    a410:	2809883a 	mov	r4,r5
    a414:	dfc00215 	stw	ra,8(sp)
    a418:	80000015 	stw	zero,0(r16)
    a41c:	000e00c0 	call	e00c <isatty>
    a420:	00ffffc4 	movi	r3,-1
    a424:	10c00526 	beq	r2,r3,a43c <_isatty_r+0x44>
    a428:	dfc00217 	ldw	ra,8(sp)
    a42c:	dc400117 	ldw	r17,4(sp)
    a430:	dc000017 	ldw	r16,0(sp)
    a434:	dec00304 	addi	sp,sp,12
    a438:	f800283a 	ret
    a43c:	80c00017 	ldw	r3,0(r16)
    a440:	183ff926 	beq	r3,zero,a428 <_isatty_r+0x30>
    a444:	88c00015 	stw	r3,0(r17)
    a448:	003ff706 	br	a428 <_isatty_r+0x30>

0000a44c <_lseek_r>:
    a44c:	defffd04 	addi	sp,sp,-12
    a450:	dc000015 	stw	r16,0(sp)
    a454:	04000074 	movhi	r16,1
    a458:	dc400115 	stw	r17,4(sp)
    a45c:	84115404 	addi	r16,r16,17744
    a460:	2023883a 	mov	r17,r4
    a464:	2809883a 	mov	r4,r5
    a468:	300b883a 	mov	r5,r6
    a46c:	380d883a 	mov	r6,r7
    a470:	dfc00215 	stw	ra,8(sp)
    a474:	80000015 	stw	zero,0(r16)
    a478:	000e1080 	call	e108 <lseek>
    a47c:	00ffffc4 	movi	r3,-1
    a480:	10c00526 	beq	r2,r3,a498 <_lseek_r+0x4c>
    a484:	dfc00217 	ldw	ra,8(sp)
    a488:	dc400117 	ldw	r17,4(sp)
    a48c:	dc000017 	ldw	r16,0(sp)
    a490:	dec00304 	addi	sp,sp,12
    a494:	f800283a 	ret
    a498:	80c00017 	ldw	r3,0(r16)
    a49c:	183ff926 	beq	r3,zero,a484 <_lseek_r+0x38>
    a4a0:	88c00015 	stw	r3,0(r17)
    a4a4:	003ff706 	br	a484 <_lseek_r+0x38>

0000a4a8 <_read_r>:
    a4a8:	defffd04 	addi	sp,sp,-12
    a4ac:	dc000015 	stw	r16,0(sp)
    a4b0:	04000074 	movhi	r16,1
    a4b4:	dc400115 	stw	r17,4(sp)
    a4b8:	84115404 	addi	r16,r16,17744
    a4bc:	2023883a 	mov	r17,r4
    a4c0:	2809883a 	mov	r4,r5
    a4c4:	300b883a 	mov	r5,r6
    a4c8:	380d883a 	mov	r6,r7
    a4cc:	dfc00215 	stw	ra,8(sp)
    a4d0:	80000015 	stw	zero,0(r16)
    a4d4:	000e2ec0 	call	e2ec <read>
    a4d8:	00ffffc4 	movi	r3,-1
    a4dc:	10c00526 	beq	r2,r3,a4f4 <_read_r+0x4c>
    a4e0:	dfc00217 	ldw	ra,8(sp)
    a4e4:	dc400117 	ldw	r17,4(sp)
    a4e8:	dc000017 	ldw	r16,0(sp)
    a4ec:	dec00304 	addi	sp,sp,12
    a4f0:	f800283a 	ret
    a4f4:	80c00017 	ldw	r3,0(r16)
    a4f8:	183ff926 	beq	r3,zero,a4e0 <_read_r+0x38>
    a4fc:	88c00015 	stw	r3,0(r17)
    a500:	003ff706 	br	a4e0 <_read_r+0x38>

0000a504 <__swbuf_r>:
    a504:	defffc04 	addi	sp,sp,-16
    a508:	dc800215 	stw	r18,8(sp)
    a50c:	dc400115 	stw	r17,4(sp)
    a510:	dc000015 	stw	r16,0(sp)
    a514:	dfc00315 	stw	ra,12(sp)
    a518:	2025883a 	mov	r18,r4
    a51c:	2823883a 	mov	r17,r5
    a520:	3021883a 	mov	r16,r6
    a524:	20000226 	beq	r4,zero,a530 <__swbuf_r+0x2c>
    a528:	20800e17 	ldw	r2,56(r4)
    a52c:	10004126 	beq	r2,zero,a634 <__swbuf_r+0x130>
    a530:	80c00617 	ldw	r3,24(r16)
    a534:	8180030b 	ldhu	r6,12(r16)
    a538:	80c00215 	stw	r3,8(r16)
    a53c:	30c0020c 	andi	r3,r6,8
    a540:	18003526 	beq	r3,zero,a618 <__swbuf_r+0x114>
    a544:	80c00417 	ldw	r3,16(r16)
    a548:	18003326 	beq	r3,zero,a618 <__swbuf_r+0x114>
    a54c:	3088000c 	andi	r2,r6,8192
    a550:	8c403fcc 	andi	r17,r17,255
    a554:	10001726 	beq	r2,zero,a5b4 <__swbuf_r+0xb0>
    a558:	80800017 	ldw	r2,0(r16)
    a55c:	81000517 	ldw	r4,20(r16)
    a560:	10c7c83a 	sub	r3,r2,r3
    a564:	19001d0e 	bge	r3,r4,a5dc <__swbuf_r+0xd8>
    a568:	18c00044 	addi	r3,r3,1
    a56c:	81400217 	ldw	r5,8(r16)
    a570:	11000044 	addi	r4,r2,1
    a574:	81000015 	stw	r4,0(r16)
    a578:	297fffc4 	addi	r5,r5,-1
    a57c:	81400215 	stw	r5,8(r16)
    a580:	14400005 	stb	r17,0(r2)
    a584:	80800517 	ldw	r2,20(r16)
    a588:	10c01d26 	beq	r2,r3,a600 <__swbuf_r+0xfc>
    a58c:	8080030b 	ldhu	r2,12(r16)
    a590:	1080004c 	andi	r2,r2,1
    a594:	1000181e 	bne	r2,zero,a5f8 <__swbuf_r+0xf4>
    a598:	8805883a 	mov	r2,r17
    a59c:	dfc00317 	ldw	ra,12(sp)
    a5a0:	dc800217 	ldw	r18,8(sp)
    a5a4:	dc400117 	ldw	r17,4(sp)
    a5a8:	dc000017 	ldw	r16,0(sp)
    a5ac:	dec00404 	addi	sp,sp,16
    a5b0:	f800283a 	ret
    a5b4:	81001917 	ldw	r4,100(r16)
    a5b8:	00b7ffc4 	movi	r2,-8193
    a5bc:	31880014 	ori	r6,r6,8192
    a5c0:	2084703a 	and	r2,r4,r2
    a5c4:	80801915 	stw	r2,100(r16)
    a5c8:	80800017 	ldw	r2,0(r16)
    a5cc:	81000517 	ldw	r4,20(r16)
    a5d0:	8180030d 	sth	r6,12(r16)
    a5d4:	10c7c83a 	sub	r3,r2,r3
    a5d8:	193fe316 	blt	r3,r4,a568 <__swbuf_r+0x64>
    a5dc:	9009883a 	mov	r4,r18
    a5e0:	800b883a 	mov	r5,r16
    a5e4:	00054600 	call	5460 <_fflush_r>
    a5e8:	1000091e 	bne	r2,zero,a610 <__swbuf_r+0x10c>
    a5ec:	80800017 	ldw	r2,0(r16)
    a5f0:	00c00044 	movi	r3,1
    a5f4:	003fdd06 	br	a56c <__swbuf_r+0x68>
    a5f8:	00800284 	movi	r2,10
    a5fc:	88bfe61e 	bne	r17,r2,a598 <__swbuf_r+0x94>
    a600:	9009883a 	mov	r4,r18
    a604:	800b883a 	mov	r5,r16
    a608:	00054600 	call	5460 <_fflush_r>
    a60c:	103fe226 	beq	r2,zero,a598 <__swbuf_r+0x94>
    a610:	00bfffc4 	movi	r2,-1
    a614:	003fe106 	br	a59c <__swbuf_r+0x98>
    a618:	9009883a 	mov	r4,r18
    a61c:	800b883a 	mov	r5,r16
    a620:	00037b40 	call	37b4 <__swsetup_r>
    a624:	103ffa1e 	bne	r2,zero,a610 <__swbuf_r+0x10c>
    a628:	8180030b 	ldhu	r6,12(r16)
    a62c:	80c00417 	ldw	r3,16(r16)
    a630:	003fc606 	br	a54c <__swbuf_r+0x48>
    a634:	000584c0 	call	584c <__sinit>
    a638:	003fbd06 	br	a530 <__swbuf_r+0x2c>

0000a63c <__swbuf>:
    a63c:	00c00074 	movhi	r3,1
    a640:	18d13d04 	addi	r3,r3,17652
    a644:	2005883a 	mov	r2,r4
    a648:	19000017 	ldw	r4,0(r3)
    a64c:	280d883a 	mov	r6,r5
    a650:	100b883a 	mov	r5,r2
    a654:	000a5041 	jmpi	a504 <__swbuf_r>

0000a658 <_wcrtomb_r>:
    a658:	defff604 	addi	sp,sp,-40
    a65c:	00800074 	movhi	r2,1
    a660:	dc800815 	stw	r18,32(sp)
    a664:	dc400715 	stw	r17,28(sp)
    a668:	dc000615 	stw	r16,24(sp)
    a66c:	10914104 	addi	r2,r2,17668
    a670:	dfc00915 	stw	ra,36(sp)
    a674:	2021883a 	mov	r16,r4
    a678:	3823883a 	mov	r17,r7
    a67c:	14800017 	ldw	r18,0(r2)
    a680:	28001426 	beq	r5,zero,a6d4 <_wcrtomb_r+0x7c>
    a684:	d9400415 	stw	r5,16(sp)
    a688:	d9800515 	stw	r6,20(sp)
    a68c:	00063800 	call	6380 <__locale_charset>
    a690:	d9400417 	ldw	r5,16(sp)
    a694:	d9800517 	ldw	r6,20(sp)
    a698:	8009883a 	mov	r4,r16
    a69c:	dc400015 	stw	r17,0(sp)
    a6a0:	100f883a 	mov	r7,r2
    a6a4:	903ee83a 	callr	r18
    a6a8:	00ffffc4 	movi	r3,-1
    a6ac:	10c0031e 	bne	r2,r3,a6bc <_wcrtomb_r+0x64>
    a6b0:	88000015 	stw	zero,0(r17)
    a6b4:	00c02284 	movi	r3,138
    a6b8:	80c00015 	stw	r3,0(r16)
    a6bc:	dfc00917 	ldw	ra,36(sp)
    a6c0:	dc800817 	ldw	r18,32(sp)
    a6c4:	dc400717 	ldw	r17,28(sp)
    a6c8:	dc000617 	ldw	r16,24(sp)
    a6cc:	dec00a04 	addi	sp,sp,40
    a6d0:	f800283a 	ret
    a6d4:	00063800 	call	6380 <__locale_charset>
    a6d8:	8009883a 	mov	r4,r16
    a6dc:	dc400015 	stw	r17,0(sp)
    a6e0:	d9400104 	addi	r5,sp,4
    a6e4:	000d883a 	mov	r6,zero
    a6e8:	100f883a 	mov	r7,r2
    a6ec:	903ee83a 	callr	r18
    a6f0:	003fed06 	br	a6a8 <_wcrtomb_r+0x50>

0000a6f4 <wcrtomb>:
    a6f4:	defff604 	addi	sp,sp,-40
    a6f8:	00800074 	movhi	r2,1
    a6fc:	dc800615 	stw	r18,24(sp)
    a700:	dc400515 	stw	r17,20(sp)
    a704:	dc000415 	stw	r16,16(sp)
    a708:	10913d04 	addi	r2,r2,17652
    a70c:	dfc00915 	stw	ra,36(sp)
    a710:	dd000815 	stw	r20,32(sp)
    a714:	dcc00715 	stw	r19,28(sp)
    a718:	2021883a 	mov	r16,r4
    a71c:	3025883a 	mov	r18,r6
    a720:	14400017 	ldw	r17,0(r2)
    a724:	20001826 	beq	r4,zero,a788 <wcrtomb+0x94>
    a728:	00800074 	movhi	r2,1
    a72c:	10914104 	addi	r2,r2,17668
    a730:	15000017 	ldw	r20,0(r2)
    a734:	2827883a 	mov	r19,r5
    a738:	00063800 	call	6380 <__locale_charset>
    a73c:	8809883a 	mov	r4,r17
    a740:	dc800015 	stw	r18,0(sp)
    a744:	800b883a 	mov	r5,r16
    a748:	980d883a 	mov	r6,r19
    a74c:	100f883a 	mov	r7,r2
    a750:	a03ee83a 	callr	r20
    a754:	00ffffc4 	movi	r3,-1
    a758:	10c0031e 	bne	r2,r3,a768 <wcrtomb+0x74>
    a75c:	90000015 	stw	zero,0(r18)
    a760:	00c02284 	movi	r3,138
    a764:	88c00015 	stw	r3,0(r17)
    a768:	dfc00917 	ldw	ra,36(sp)
    a76c:	dd000817 	ldw	r20,32(sp)
    a770:	dcc00717 	ldw	r19,28(sp)
    a774:	dc800617 	ldw	r18,24(sp)
    a778:	dc400517 	ldw	r17,20(sp)
    a77c:	dc000417 	ldw	r16,16(sp)
    a780:	dec00a04 	addi	sp,sp,40
    a784:	f800283a 	ret
    a788:	00800074 	movhi	r2,1
    a78c:	10914104 	addi	r2,r2,17668
    a790:	14000017 	ldw	r16,0(r2)
    a794:	00063800 	call	6380 <__locale_charset>
    a798:	8809883a 	mov	r4,r17
    a79c:	dc800015 	stw	r18,0(sp)
    a7a0:	d9400104 	addi	r5,sp,4
    a7a4:	000d883a 	mov	r6,zero
    a7a8:	100f883a 	mov	r7,r2
    a7ac:	803ee83a 	callr	r16
    a7b0:	003fe806 	br	a754 <wcrtomb+0x60>

0000a7b4 <__ascii_wctomb>:
    a7b4:	28000526 	beq	r5,zero,a7cc <__ascii_wctomb+0x18>
    a7b8:	00803fc4 	movi	r2,255
    a7bc:	11800536 	bltu	r2,r6,a7d4 <__ascii_wctomb+0x20>
    a7c0:	29800005 	stb	r6,0(r5)
    a7c4:	00800044 	movi	r2,1
    a7c8:	f800283a 	ret
    a7cc:	0005883a 	mov	r2,zero
    a7d0:	f800283a 	ret
    a7d4:	00802284 	movi	r2,138
    a7d8:	20800015 	stw	r2,0(r4)
    a7dc:	00bfffc4 	movi	r2,-1
    a7e0:	f800283a 	ret

0000a7e4 <_wctomb_r>:
    a7e4:	00800074 	movhi	r2,1
    a7e8:	defff904 	addi	sp,sp,-28
    a7ec:	10914104 	addi	r2,r2,17668
    a7f0:	dfc00615 	stw	ra,24(sp)
    a7f4:	dc400515 	stw	r17,20(sp)
    a7f8:	dc000415 	stw	r16,16(sp)
    a7fc:	3823883a 	mov	r17,r7
    a800:	14000017 	ldw	r16,0(r2)
    a804:	d9000115 	stw	r4,4(sp)
    a808:	d9400215 	stw	r5,8(sp)
    a80c:	d9800315 	stw	r6,12(sp)
    a810:	00063800 	call	6380 <__locale_charset>
    a814:	d9000117 	ldw	r4,4(sp)
    a818:	d9400217 	ldw	r5,8(sp)
    a81c:	d9800317 	ldw	r6,12(sp)
    a820:	dc400015 	stw	r17,0(sp)
    a824:	100f883a 	mov	r7,r2
    a828:	803ee83a 	callr	r16
    a82c:	dfc00617 	ldw	ra,24(sp)
    a830:	dc400517 	ldw	r17,20(sp)
    a834:	dc000417 	ldw	r16,16(sp)
    a838:	dec00704 	addi	sp,sp,28
    a83c:	f800283a 	ret

0000a840 <__udivdi3>:
    a840:	defff504 	addi	sp,sp,-44
    a844:	dcc00415 	stw	r19,16(sp)
    a848:	dc000115 	stw	r16,4(sp)
    a84c:	dfc00a15 	stw	ra,40(sp)
    a850:	df000915 	stw	fp,36(sp)
    a854:	ddc00815 	stw	r23,32(sp)
    a858:	dd800715 	stw	r22,28(sp)
    a85c:	dd400615 	stw	r21,24(sp)
    a860:	dd000515 	stw	r20,20(sp)
    a864:	dc800315 	stw	r18,12(sp)
    a868:	dc400215 	stw	r17,8(sp)
    a86c:	2027883a 	mov	r19,r4
    a870:	2821883a 	mov	r16,r5
    a874:	3800471e 	bne	r7,zero,a994 <__udivdi3+0x154>
    a878:	3025883a 	mov	r18,r6
    a87c:	2023883a 	mov	r17,r4
    a880:	2980592e 	bgeu	r5,r6,a9e8 <__udivdi3+0x1a8>
    a884:	00bfffd4 	movui	r2,65535
    a888:	2829883a 	mov	r20,r5
    a88c:	1180b236 	bltu	r2,r6,ab58 <__udivdi3+0x318>
    a890:	00803fc4 	movi	r2,255
    a894:	1181622e 	bgeu	r2,r6,ae20 <__udivdi3+0x5e0>
    a898:	00800204 	movi	r2,8
    a89c:	1007883a 	mov	r3,r2
    a8a0:	3084d83a 	srl	r2,r6,r2
    a8a4:	01000074 	movhi	r4,1
    a8a8:	21088604 	addi	r4,r4,8728
    a8ac:	2085883a 	add	r2,r4,r2
    a8b0:	11000003 	ldbu	r4,0(r2)
    a8b4:	20c9883a 	add	r4,r4,r3
    a8b8:	00c00804 	movi	r3,32
    a8bc:	1907c83a 	sub	r3,r3,r4
    a8c0:	18000526 	beq	r3,zero,a8d8 <__udivdi3+0x98>
    a8c4:	80e0983a 	sll	r16,r16,r3
    a8c8:	9908d83a 	srl	r4,r19,r4
    a8cc:	30e4983a 	sll	r18,r6,r3
    a8d0:	98e2983a 	sll	r17,r19,r3
    a8d4:	8128b03a 	or	r20,r16,r4
    a8d8:	902ad43a 	srli	r21,r18,16
    a8dc:	a009883a 	mov	r4,r20
    a8e0:	95bfffcc 	andi	r22,r18,65535
    a8e4:	a80b883a 	mov	r5,r21
    a8e8:	000b5c00 	call	b5c0 <__umodsi3>
    a8ec:	a009883a 	mov	r4,r20
    a8f0:	a80b883a 	mov	r5,r21
    a8f4:	102f883a 	mov	r23,r2
    a8f8:	000b5b80 	call	b5b8 <__udivsi3>
    a8fc:	1009883a 	mov	r4,r2
    a900:	b00b883a 	mov	r5,r22
    a904:	1021883a 	mov	r16,r2
    a908:	0000dc40 	call	dc4 <__mulsi3>
    a90c:	b82e943a 	slli	r23,r23,16
    a910:	8808d43a 	srli	r4,r17,16
    a914:	b906b03a 	or	r3,r23,r4
    a918:	1880052e 	bgeu	r3,r2,a930 <__udivdi3+0xf0>
    a91c:	1c87883a 	add	r3,r3,r18
    a920:	813fffc4 	addi	r4,r16,-1
    a924:	1c800136 	bltu	r3,r18,a92c <__udivdi3+0xec>
    a928:	18815236 	bltu	r3,r2,ae74 <__udivdi3+0x634>
    a92c:	2021883a 	mov	r16,r4
    a930:	18a7c83a 	sub	r19,r3,r2
    a934:	9809883a 	mov	r4,r19
    a938:	a80b883a 	mov	r5,r21
    a93c:	000b5c00 	call	b5c0 <__umodsi3>
    a940:	1029883a 	mov	r20,r2
    a944:	9809883a 	mov	r4,r19
    a948:	a80b883a 	mov	r5,r21
    a94c:	a028943a 	slli	r20,r20,16
    a950:	000b5b80 	call	b5b8 <__udivsi3>
    a954:	1009883a 	mov	r4,r2
    a958:	b00b883a 	mov	r5,r22
    a95c:	8c7fffcc 	andi	r17,r17,65535
    a960:	1027883a 	mov	r19,r2
    a964:	a462b03a 	or	r17,r20,r17
    a968:	0000dc40 	call	dc4 <__mulsi3>
    a96c:	8880052e 	bgeu	r17,r2,a984 <__udivdi3+0x144>
    a970:	8ca3883a 	add	r17,r17,r18
    a974:	98ffffc4 	addi	r3,r19,-1
    a978:	8c811036 	bltu	r17,r18,adbc <__udivdi3+0x57c>
    a97c:	88810f2e 	bgeu	r17,r2,adbc <__udivdi3+0x57c>
    a980:	9cffff84 	addi	r19,r19,-2
    a984:	8020943a 	slli	r16,r16,16
    a988:	0007883a 	mov	r3,zero
    a98c:	9c04b03a 	or	r2,r19,r16
    a990:	00006006 	br	ab14 <__udivdi3+0x2d4>
    a994:	29c05d36 	bltu	r5,r7,ab0c <__udivdi3+0x2cc>
    a998:	00bfffd4 	movui	r2,65535
    a99c:	11c0692e 	bgeu	r2,r7,ab44 <__udivdi3+0x304>
    a9a0:	00804034 	movhi	r2,256
    a9a4:	10bfffc4 	addi	r2,r2,-1
    a9a8:	11c10e2e 	bgeu	r2,r7,ade4 <__udivdi3+0x5a4>
    a9ac:	01400604 	movi	r5,24
    a9b0:	2811883a 	mov	r8,r5
    a9b4:	394ad83a 	srl	r5,r7,r5
    a9b8:	00800074 	movhi	r2,1
    a9bc:	10888604 	addi	r2,r2,8728
    a9c0:	114b883a 	add	r5,r2,r5
    a9c4:	29400003 	ldbu	r5,0(r5)
    a9c8:	00c00804 	movi	r3,32
    a9cc:	2a0b883a 	add	r5,r5,r8
    a9d0:	196fc83a 	sub	r23,r3,r5
    a9d4:	b8006b1e 	bne	r23,zero,ab84 <__udivdi3+0x344>
    a9d8:	3c011436 	bltu	r7,r16,ae2c <__udivdi3+0x5ec>
    a9dc:	9985403a 	cmpgeu	r2,r19,r6
    a9e0:	0007883a 	mov	r3,zero
    a9e4:	00004b06 	br	ab14 <__udivdi3+0x2d4>
    a9e8:	3000041e 	bne	r6,zero,a9fc <__udivdi3+0x1bc>
    a9ec:	01000044 	movi	r4,1
    a9f0:	000b883a 	mov	r5,zero
    a9f4:	000b5b80 	call	b5b8 <__udivsi3>
    a9f8:	1025883a 	mov	r18,r2
    a9fc:	00bfffd4 	movui	r2,65535
    aa00:	14805b2e 	bgeu	r2,r18,ab70 <__udivdi3+0x330>
    aa04:	00804034 	movhi	r2,256
    aa08:	10bfffc4 	addi	r2,r2,-1
    aa0c:	1480fe2e 	bgeu	r2,r18,ae08 <__udivdi3+0x5c8>
    aa10:	00800604 	movi	r2,24
    aa14:	1007883a 	mov	r3,r2
    aa18:	9084d83a 	srl	r2,r18,r2
    aa1c:	01000074 	movhi	r4,1
    aa20:	21088604 	addi	r4,r4,8728
    aa24:	2085883a 	add	r2,r4,r2
    aa28:	11800003 	ldbu	r6,0(r2)
    aa2c:	01c00804 	movi	r7,32
    aa30:	30c7883a 	add	r3,r6,r3
    aa34:	38cfc83a 	sub	r7,r7,r3
    aa38:	3800a71e 	bne	r7,zero,acd8 <__udivdi3+0x498>
    aa3c:	9028d43a 	srli	r20,r18,16
    aa40:	84a1c83a 	sub	r16,r16,r18
    aa44:	957fffcc 	andi	r21,r18,65535
    aa48:	00c00044 	movi	r3,1
    aa4c:	8009883a 	mov	r4,r16
    aa50:	a00b883a 	mov	r5,r20
    aa54:	d8c00015 	stw	r3,0(sp)
    aa58:	000b5c00 	call	b5c0 <__umodsi3>
    aa5c:	8009883a 	mov	r4,r16
    aa60:	a00b883a 	mov	r5,r20
    aa64:	102d883a 	mov	r22,r2
    aa68:	000b5b80 	call	b5b8 <__udivsi3>
    aa6c:	1009883a 	mov	r4,r2
    aa70:	a80b883a 	mov	r5,r21
    aa74:	1021883a 	mov	r16,r2
    aa78:	0000dc40 	call	dc4 <__mulsi3>
    aa7c:	b02c943a 	slli	r22,r22,16
    aa80:	880ed43a 	srli	r7,r17,16
    aa84:	d8c00017 	ldw	r3,0(sp)
    aa88:	b1ccb03a 	or	r6,r22,r7
    aa8c:	3080052e 	bgeu	r6,r2,aaa4 <__udivdi3+0x264>
    aa90:	348d883a 	add	r6,r6,r18
    aa94:	813fffc4 	addi	r4,r16,-1
    aa98:	34800136 	bltu	r6,r18,aaa0 <__udivdi3+0x260>
    aa9c:	3080f236 	bltu	r6,r2,ae68 <__udivdi3+0x628>
    aaa0:	2021883a 	mov	r16,r4
    aaa4:	30a7c83a 	sub	r19,r6,r2
    aaa8:	9809883a 	mov	r4,r19
    aaac:	a00b883a 	mov	r5,r20
    aab0:	d8c00015 	stw	r3,0(sp)
    aab4:	000b5c00 	call	b5c0 <__umodsi3>
    aab8:	102d883a 	mov	r22,r2
    aabc:	9809883a 	mov	r4,r19
    aac0:	a00b883a 	mov	r5,r20
    aac4:	b02c943a 	slli	r22,r22,16
    aac8:	000b5b80 	call	b5b8 <__udivsi3>
    aacc:	1009883a 	mov	r4,r2
    aad0:	a80b883a 	mov	r5,r21
    aad4:	8c7fffcc 	andi	r17,r17,65535
    aad8:	1027883a 	mov	r19,r2
    aadc:	b462b03a 	or	r17,r22,r17
    aae0:	0000dc40 	call	dc4 <__mulsi3>
    aae4:	d8c00017 	ldw	r3,0(sp)
    aae8:	8880052e 	bgeu	r17,r2,ab00 <__udivdi3+0x2c0>
    aaec:	8ca3883a 	add	r17,r17,r18
    aaf0:	993fffc4 	addi	r4,r19,-1
    aaf4:	8c80af36 	bltu	r17,r18,adb4 <__udivdi3+0x574>
    aaf8:	8880ae2e 	bgeu	r17,r2,adb4 <__udivdi3+0x574>
    aafc:	9cffff84 	addi	r19,r19,-2
    ab00:	8020943a 	slli	r16,r16,16
    ab04:	9c04b03a 	or	r2,r19,r16
    ab08:	00000206 	br	ab14 <__udivdi3+0x2d4>
    ab0c:	0007883a 	mov	r3,zero
    ab10:	0005883a 	mov	r2,zero
    ab14:	dfc00a17 	ldw	ra,40(sp)
    ab18:	df000917 	ldw	fp,36(sp)
    ab1c:	ddc00817 	ldw	r23,32(sp)
    ab20:	dd800717 	ldw	r22,28(sp)
    ab24:	dd400617 	ldw	r21,24(sp)
    ab28:	dd000517 	ldw	r20,20(sp)
    ab2c:	dcc00417 	ldw	r19,16(sp)
    ab30:	dc800317 	ldw	r18,12(sp)
    ab34:	dc400217 	ldw	r17,8(sp)
    ab38:	dc000117 	ldw	r16,4(sp)
    ab3c:	dec00b04 	addi	sp,sp,44
    ab40:	f800283a 	ret
    ab44:	00803fc4 	movi	r2,255
    ab48:	11c0a92e 	bgeu	r2,r7,adf0 <__udivdi3+0x5b0>
    ab4c:	01400204 	movi	r5,8
    ab50:	2811883a 	mov	r8,r5
    ab54:	003f9706 	br	a9b4 <__udivdi3+0x174>
    ab58:	00804034 	movhi	r2,256
    ab5c:	10bfffc4 	addi	r2,r2,-1
    ab60:	1180a62e 	bgeu	r2,r6,adfc <__udivdi3+0x5bc>
    ab64:	00800604 	movi	r2,24
    ab68:	1007883a 	mov	r3,r2
    ab6c:	003f4c06 	br	a8a0 <__udivdi3+0x60>
    ab70:	00803fc4 	movi	r2,255
    ab74:	1480a72e 	bgeu	r2,r18,ae14 <__udivdi3+0x5d4>
    ab78:	00800204 	movi	r2,8
    ab7c:	1007883a 	mov	r3,r2
    ab80:	003fa506 	br	aa18 <__udivdi3+0x1d8>
    ab84:	3178d83a 	srl	fp,r6,r5
    ab88:	3dce983a 	sll	r7,r7,r23
    ab8c:	8168d83a 	srl	r20,r16,r5
    ab90:	9950d83a 	srl	r8,r19,r5
    ab94:	3f38b03a 	or	fp,r7,fp
    ab98:	e024d43a 	srli	r18,fp,16
    ab9c:	85e0983a 	sll	r16,r16,r23
    aba0:	a009883a 	mov	r4,r20
    aba4:	900b883a 	mov	r5,r18
    aba8:	8220b03a 	or	r16,r16,r8
    abac:	35ea983a 	sll	r21,r6,r23
    abb0:	000b5c00 	call	b5c0 <__umodsi3>
    abb4:	a009883a 	mov	r4,r20
    abb8:	900b883a 	mov	r5,r18
    abbc:	1023883a 	mov	r17,r2
    abc0:	e5bfffcc 	andi	r22,fp,65535
    abc4:	000b5b80 	call	b5b8 <__udivsi3>
    abc8:	1009883a 	mov	r4,r2
    abcc:	b00b883a 	mov	r5,r22
    abd0:	1029883a 	mov	r20,r2
    abd4:	0000dc40 	call	dc4 <__mulsi3>
    abd8:	8806943a 	slli	r3,r17,16
    abdc:	8014d43a 	srli	r10,r16,16
    abe0:	1a92b03a 	or	r9,r3,r10
    abe4:	4880042e 	bgeu	r9,r2,abf8 <__udivdi3+0x3b8>
    abe8:	4f13883a 	add	r9,r9,fp
    abec:	a0ffffc4 	addi	r3,r20,-1
    abf0:	4f00952e 	bgeu	r9,fp,ae48 <__udivdi3+0x608>
    abf4:	1829883a 	mov	r20,r3
    abf8:	48a3c83a 	sub	r17,r9,r2
    abfc:	8809883a 	mov	r4,r17
    ac00:	900b883a 	mov	r5,r18
    ac04:	000b5c00 	call	b5c0 <__umodsi3>
    ac08:	8809883a 	mov	r4,r17
    ac0c:	900b883a 	mov	r5,r18
    ac10:	d8800015 	stw	r2,0(sp)
    ac14:	000b5b80 	call	b5b8 <__udivsi3>
    ac18:	1009883a 	mov	r4,r2
    ac1c:	b00b883a 	mov	r5,r22
    ac20:	1023883a 	mov	r17,r2
    ac24:	0000dc40 	call	dc4 <__mulsi3>
    ac28:	d8c00017 	ldw	r3,0(sp)
    ac2c:	823fffcc 	andi	r8,r16,65535
    ac30:	1806943a 	slli	r3,r3,16
    ac34:	1a20b03a 	or	r16,r3,r8
    ac38:	8080042e 	bgeu	r16,r2,ac4c <__udivdi3+0x40c>
    ac3c:	8721883a 	add	r16,r16,fp
    ac40:	88ffffc4 	addi	r3,r17,-1
    ac44:	87007c2e 	bgeu	r16,fp,ae38 <__udivdi3+0x5f8>
    ac48:	1823883a 	mov	r17,r3
    ac4c:	a028943a 	slli	r20,r20,16
    ac50:	acbfffcc 	andi	r18,r21,65535
    ac54:	900b883a 	mov	r5,r18
    ac58:	8d28b03a 	or	r20,r17,r20
    ac5c:	a022d43a 	srli	r17,r20,16
    ac60:	a5bfffcc 	andi	r22,r20,65535
    ac64:	b009883a 	mov	r4,r22
    ac68:	a82ad43a 	srli	r21,r21,16
    ac6c:	80a1c83a 	sub	r16,r16,r2
    ac70:	0000dc40 	call	dc4 <__mulsi3>
    ac74:	8809883a 	mov	r4,r17
    ac78:	900b883a 	mov	r5,r18
    ac7c:	1039883a 	mov	fp,r2
    ac80:	0000dc40 	call	dc4 <__mulsi3>
    ac84:	8809883a 	mov	r4,r17
    ac88:	a80b883a 	mov	r5,r21
    ac8c:	1025883a 	mov	r18,r2
    ac90:	0000dc40 	call	dc4 <__mulsi3>
    ac94:	b009883a 	mov	r4,r22
    ac98:	a80b883a 	mov	r5,r21
    ac9c:	1023883a 	mov	r17,r2
    aca0:	0000dc40 	call	dc4 <__mulsi3>
    aca4:	e006d43a 	srli	r3,fp,16
    aca8:	9085883a 	add	r2,r18,r2
    acac:	10c7883a 	add	r3,r2,r3
    acb0:	1c80022e 	bgeu	r3,r18,acbc <__udivdi3+0x47c>
    acb4:	00800074 	movhi	r2,1
    acb8:	88a3883a 	add	r17,r17,r2
    acbc:	1808d43a 	srli	r4,r3,16
    acc0:	8909883a 	add	r4,r17,r4
    acc4:	81004436 	bltu	r16,r4,add8 <__udivdi3+0x598>
    acc8:	81003e26 	beq	r16,r4,adc4 <__udivdi3+0x584>
    accc:	a005883a 	mov	r2,r20
    acd0:	0007883a 	mov	r3,zero
    acd4:	003f8f06 	br	ab14 <__udivdi3+0x2d4>
    acd8:	91e4983a 	sll	r18,r18,r7
    acdc:	80eed83a 	srl	r23,r16,r3
    ace0:	81cc983a 	sll	r6,r16,r7
    ace4:	9028d43a 	srli	r20,r18,16
    ace8:	98c6d83a 	srl	r3,r19,r3
    acec:	b809883a 	mov	r4,r23
    acf0:	a00b883a 	mov	r5,r20
    acf4:	30ecb03a 	or	r22,r6,r3
    acf8:	99e2983a 	sll	r17,r19,r7
    acfc:	000b5c00 	call	b5c0 <__umodsi3>
    ad00:	b809883a 	mov	r4,r23
    ad04:	a00b883a 	mov	r5,r20
    ad08:	1021883a 	mov	r16,r2
    ad0c:	957fffcc 	andi	r21,r18,65535
    ad10:	000b5b80 	call	b5b8 <__udivsi3>
    ad14:	a80b883a 	mov	r5,r21
    ad18:	1009883a 	mov	r4,r2
    ad1c:	102f883a 	mov	r23,r2
    ad20:	0000dc40 	call	dc4 <__mulsi3>
    ad24:	8020943a 	slli	r16,r16,16
    ad28:	b00ad43a 	srli	r5,r22,16
    ad2c:	814cb03a 	or	r6,r16,r5
    ad30:	3080062e 	bgeu	r6,r2,ad4c <__udivdi3+0x50c>
    ad34:	348d883a 	add	r6,r6,r18
    ad38:	b8ffffc4 	addi	r3,r23,-1
    ad3c:	34804836 	bltu	r6,r18,ae60 <__udivdi3+0x620>
    ad40:	3080472e 	bgeu	r6,r2,ae60 <__udivdi3+0x620>
    ad44:	bdffff84 	addi	r23,r23,-2
    ad48:	348d883a 	add	r6,r6,r18
    ad4c:	30a7c83a 	sub	r19,r6,r2
    ad50:	9809883a 	mov	r4,r19
    ad54:	a00b883a 	mov	r5,r20
    ad58:	000b5c00 	call	b5c0 <__umodsi3>
    ad5c:	9809883a 	mov	r4,r19
    ad60:	a00b883a 	mov	r5,r20
    ad64:	1039883a 	mov	fp,r2
    ad68:	000b5b80 	call	b5b8 <__udivsi3>
    ad6c:	1009883a 	mov	r4,r2
    ad70:	a80b883a 	mov	r5,r21
    ad74:	e038943a 	slli	fp,fp,16
    ad78:	1027883a 	mov	r19,r2
    ad7c:	0000dc40 	call	dc4 <__mulsi3>
    ad80:	b1bfffcc 	andi	r6,r22,65535
    ad84:	e18cb03a 	or	r6,fp,r6
    ad88:	3080062e 	bgeu	r6,r2,ada4 <__udivdi3+0x564>
    ad8c:	348d883a 	add	r6,r6,r18
    ad90:	98ffffc4 	addi	r3,r19,-1
    ad94:	34803036 	bltu	r6,r18,ae58 <__udivdi3+0x618>
    ad98:	30802f2e 	bgeu	r6,r2,ae58 <__udivdi3+0x618>
    ad9c:	9cffff84 	addi	r19,r19,-2
    ada0:	348d883a 	add	r6,r6,r18
    ada4:	b82e943a 	slli	r23,r23,16
    ada8:	30a1c83a 	sub	r16,r6,r2
    adac:	9dc6b03a 	or	r3,r19,r23
    adb0:	003f2606 	br	aa4c <__udivdi3+0x20c>
    adb4:	2027883a 	mov	r19,r4
    adb8:	003f5106 	br	ab00 <__udivdi3+0x2c0>
    adbc:	1827883a 	mov	r19,r3
    adc0:	003ef006 	br	a984 <__udivdi3+0x144>
    adc4:	1808943a 	slli	r4,r3,16
    adc8:	9dc6983a 	sll	r3,r19,r23
    adcc:	e73fffcc 	andi	fp,fp,65535
    add0:	2709883a 	add	r4,r4,fp
    add4:	193fbd2e 	bgeu	r3,r4,accc <__udivdi3+0x48c>
    add8:	a0bfffc4 	addi	r2,r20,-1
    addc:	0007883a 	mov	r3,zero
    ade0:	003f4c06 	br	ab14 <__udivdi3+0x2d4>
    ade4:	01400404 	movi	r5,16
    ade8:	2811883a 	mov	r8,r5
    adec:	003ef106 	br	a9b4 <__udivdi3+0x174>
    adf0:	000b883a 	mov	r5,zero
    adf4:	0011883a 	mov	r8,zero
    adf8:	003eee06 	br	a9b4 <__udivdi3+0x174>
    adfc:	00800404 	movi	r2,16
    ae00:	1007883a 	mov	r3,r2
    ae04:	003ea606 	br	a8a0 <__udivdi3+0x60>
    ae08:	00800404 	movi	r2,16
    ae0c:	1007883a 	mov	r3,r2
    ae10:	003f0106 	br	aa18 <__udivdi3+0x1d8>
    ae14:	0005883a 	mov	r2,zero
    ae18:	0007883a 	mov	r3,zero
    ae1c:	003efe06 	br	aa18 <__udivdi3+0x1d8>
    ae20:	0005883a 	mov	r2,zero
    ae24:	0007883a 	mov	r3,zero
    ae28:	003e9d06 	br	a8a0 <__udivdi3+0x60>
    ae2c:	0007883a 	mov	r3,zero
    ae30:	00800044 	movi	r2,1
    ae34:	003f3706 	br	ab14 <__udivdi3+0x2d4>
    ae38:	80bf832e 	bgeu	r16,r2,ac48 <__udivdi3+0x408>
    ae3c:	8c7fff84 	addi	r17,r17,-2
    ae40:	8721883a 	add	r16,r16,fp
    ae44:	003f8106 	br	ac4c <__udivdi3+0x40c>
    ae48:	48bf6a2e 	bgeu	r9,r2,abf4 <__udivdi3+0x3b4>
    ae4c:	a53fff84 	addi	r20,r20,-2
    ae50:	4f13883a 	add	r9,r9,fp
    ae54:	003f6806 	br	abf8 <__udivdi3+0x3b8>
    ae58:	1827883a 	mov	r19,r3
    ae5c:	003fd106 	br	ada4 <__udivdi3+0x564>
    ae60:	182f883a 	mov	r23,r3
    ae64:	003fb906 	br	ad4c <__udivdi3+0x50c>
    ae68:	843fff84 	addi	r16,r16,-2
    ae6c:	348d883a 	add	r6,r6,r18
    ae70:	003f0c06 	br	aaa4 <__udivdi3+0x264>
    ae74:	843fff84 	addi	r16,r16,-2
    ae78:	1c87883a 	add	r3,r3,r18
    ae7c:	003eac06 	br	a930 <__udivdi3+0xf0>

0000ae80 <__umoddi3>:
    ae80:	defff404 	addi	sp,sp,-48
    ae84:	dd800815 	stw	r22,32(sp)
    ae88:	dc400315 	stw	r17,12(sp)
    ae8c:	dc000215 	stw	r16,8(sp)
    ae90:	dfc00b15 	stw	ra,44(sp)
    ae94:	df000a15 	stw	fp,40(sp)
    ae98:	ddc00915 	stw	r23,36(sp)
    ae9c:	dd400715 	stw	r21,28(sp)
    aea0:	dd000615 	stw	r20,24(sp)
    aea4:	dcc00515 	stw	r19,20(sp)
    aea8:	dc800415 	stw	r18,16(sp)
    aeac:	2021883a 	mov	r16,r4
    aeb0:	2823883a 	mov	r17,r5
    aeb4:	282d883a 	mov	r22,r5
    aeb8:	38003c1e 	bne	r7,zero,afac <__umoddi3+0x12c>
    aebc:	3027883a 	mov	r19,r6
    aec0:	2029883a 	mov	r20,r4
    aec4:	2980522e 	bgeu	r5,r6,b010 <__umoddi3+0x190>
    aec8:	00bfffd4 	movui	r2,65535
    aecc:	1180a436 	bltu	r2,r6,b160 <__umoddi3+0x2e0>
    aed0:	00803fc4 	movi	r2,255
    aed4:	11815e2e 	bgeu	r2,r6,b450 <__umoddi3+0x5d0>
    aed8:	01400204 	movi	r5,8
    aedc:	2805883a 	mov	r2,r5
    aee0:	314ad83a 	srl	r5,r6,r5
    aee4:	00c00074 	movhi	r3,1
    aee8:	18c88604 	addi	r3,r3,8728
    aeec:	194b883a 	add	r5,r3,r5
    aef0:	29000003 	ldbu	r4,0(r5)
    aef4:	2089883a 	add	r4,r4,r2
    aef8:	00800804 	movi	r2,32
    aefc:	1105c83a 	sub	r2,r2,r4
    af00:	10010c26 	beq	r2,zero,b334 <__umoddi3+0x4b4>
    af04:	88a2983a 	sll	r17,r17,r2
    af08:	8108d83a 	srl	r4,r16,r4
    af0c:	30a6983a 	sll	r19,r6,r2
    af10:	80a8983a 	sll	r20,r16,r2
    af14:	1025883a 	mov	r18,r2
    af18:	892cb03a 	or	r22,r17,r4
    af1c:	9822d43a 	srli	r17,r19,16
    af20:	b009883a 	mov	r4,r22
    af24:	9d7fffcc 	andi	r21,r19,65535
    af28:	880b883a 	mov	r5,r17
    af2c:	000b5c00 	call	b5c0 <__umodsi3>
    af30:	b009883a 	mov	r4,r22
    af34:	880b883a 	mov	r5,r17
    af38:	102f883a 	mov	r23,r2
    af3c:	000b5b80 	call	b5b8 <__udivsi3>
    af40:	1009883a 	mov	r4,r2
    af44:	a80b883a 	mov	r5,r21
    af48:	0000dc40 	call	dc4 <__mulsi3>
    af4c:	b82e943a 	slli	r23,r23,16
    af50:	a008d43a 	srli	r4,r20,16
    af54:	b906b03a 	or	r3,r23,r4
    af58:	1880042e 	bgeu	r3,r2,af6c <__umoddi3+0xec>
    af5c:	1cc7883a 	add	r3,r3,r19
    af60:	1cc00236 	bltu	r3,r19,af6c <__umoddi3+0xec>
    af64:	1880012e 	bgeu	r3,r2,af6c <__umoddi3+0xec>
    af68:	1cc7883a 	add	r3,r3,r19
    af6c:	18a1c83a 	sub	r16,r3,r2
    af70:	8009883a 	mov	r4,r16
    af74:	880b883a 	mov	r5,r17
    af78:	000b5c00 	call	b5c0 <__umodsi3>
    af7c:	8009883a 	mov	r4,r16
    af80:	880b883a 	mov	r5,r17
    af84:	102d883a 	mov	r22,r2
    af88:	000b5b80 	call	b5b8 <__udivsi3>
    af8c:	1009883a 	mov	r4,r2
    af90:	a80b883a 	mov	r5,r21
    af94:	b02c943a 	slli	r22,r22,16
    af98:	0000dc40 	call	dc4 <__mulsi3>
    af9c:	a13fffcc 	andi	r4,r20,65535
    afa0:	b106b03a 	or	r3,r22,r4
    afa4:	1880572e 	bgeu	r3,r2,b104 <__umoddi3+0x284>
    afa8:	00005206 	br	b0f4 <__umoddi3+0x274>
    afac:	29c05936 	bltu	r5,r7,b114 <__umoddi3+0x294>
    afb0:	00bfffd4 	movui	r2,65535
    afb4:	11c0652e 	bgeu	r2,r7,b14c <__umoddi3+0x2cc>
    afb8:	00804034 	movhi	r2,256
    afbc:	10bfffc4 	addi	r2,r2,-1
    afc0:	11c1172e 	bgeu	r2,r7,b420 <__umoddi3+0x5a0>
    afc4:	01400604 	movi	r5,24
    afc8:	282b883a 	mov	r21,r5
    afcc:	394ad83a 	srl	r5,r7,r5
    afd0:	00c00074 	movhi	r3,1
    afd4:	18c88604 	addi	r3,r3,8728
    afd8:	194b883a 	add	r5,r3,r5
    afdc:	28800003 	ldbu	r2,0(r5)
    afe0:	00c00804 	movi	r3,32
    afe4:	156b883a 	add	r21,r2,r21
    afe8:	1d69c83a 	sub	r20,r3,r21
    afec:	a000671e 	bne	r20,zero,b18c <__umoddi3+0x30c>
    aff0:	3c400136 	bltu	r7,r17,aff8 <__umoddi3+0x178>
    aff4:	81812336 	bltu	r16,r6,b484 <__umoddi3+0x604>
    aff8:	8185c83a 	sub	r2,r16,r6
    affc:	89e3c83a 	sub	r17,r17,r7
    b000:	8087803a 	cmpltu	r3,r16,r2
    b004:	88edc83a 	sub	r22,r17,r3
    b008:	b007883a 	mov	r3,r22
    b00c:	00004306 	br	b11c <__umoddi3+0x29c>
    b010:	3000041e 	bne	r6,zero,b024 <__umoddi3+0x1a4>
    b014:	01000044 	movi	r4,1
    b018:	000b883a 	mov	r5,zero
    b01c:	000b5b80 	call	b5b8 <__udivsi3>
    b020:	1027883a 	mov	r19,r2
    b024:	00bfffd4 	movui	r2,65535
    b028:	14c0532e 	bgeu	r2,r19,b178 <__umoddi3+0x2f8>
    b02c:	00804034 	movhi	r2,256
    b030:	10bfffc4 	addi	r2,r2,-1
    b034:	14c1032e 	bgeu	r2,r19,b444 <__umoddi3+0x5c4>
    b038:	00800604 	movi	r2,24
    b03c:	1007883a 	mov	r3,r2
    b040:	9884d83a 	srl	r2,r19,r2
    b044:	01000074 	movhi	r4,1
    b048:	21088604 	addi	r4,r4,8728
    b04c:	2085883a 	add	r2,r4,r2
    b050:	11000003 	ldbu	r4,0(r2)
    b054:	00800804 	movi	r2,32
    b058:	20c7883a 	add	r3,r4,r3
    b05c:	10c5c83a 	sub	r2,r2,r3
    b060:	1000b61e 	bne	r2,zero,b33c <__umoddi3+0x4bc>
    b064:	982ad43a 	srli	r21,r19,16
    b068:	8ce3c83a 	sub	r17,r17,r19
    b06c:	9dbfffcc 	andi	r22,r19,65535
    b070:	0025883a 	mov	r18,zero
    b074:	8809883a 	mov	r4,r17
    b078:	a80b883a 	mov	r5,r21
    b07c:	000b5c00 	call	b5c0 <__umodsi3>
    b080:	8809883a 	mov	r4,r17
    b084:	a80b883a 	mov	r5,r21
    b088:	102f883a 	mov	r23,r2
    b08c:	000b5b80 	call	b5b8 <__udivsi3>
    b090:	1009883a 	mov	r4,r2
    b094:	b00b883a 	mov	r5,r22
    b098:	0000dc40 	call	dc4 <__mulsi3>
    b09c:	b82e943a 	slli	r23,r23,16
    b0a0:	a008d43a 	srli	r4,r20,16
    b0a4:	b906b03a 	or	r3,r23,r4
    b0a8:	1880032e 	bgeu	r3,r2,b0b8 <__umoddi3+0x238>
    b0ac:	1cc7883a 	add	r3,r3,r19
    b0b0:	1cc00136 	bltu	r3,r19,b0b8 <__umoddi3+0x238>
    b0b4:	1880f136 	bltu	r3,r2,b47c <__umoddi3+0x5fc>
    b0b8:	18a1c83a 	sub	r16,r3,r2
    b0bc:	8009883a 	mov	r4,r16
    b0c0:	a80b883a 	mov	r5,r21
    b0c4:	000b5c00 	call	b5c0 <__umodsi3>
    b0c8:	8009883a 	mov	r4,r16
    b0cc:	a80b883a 	mov	r5,r21
    b0d0:	1023883a 	mov	r17,r2
    b0d4:	000b5b80 	call	b5b8 <__udivsi3>
    b0d8:	1009883a 	mov	r4,r2
    b0dc:	b00b883a 	mov	r5,r22
    b0e0:	8822943a 	slli	r17,r17,16
    b0e4:	0000dc40 	call	dc4 <__mulsi3>
    b0e8:	a13fffcc 	andi	r4,r20,65535
    b0ec:	8906b03a 	or	r3,r17,r4
    b0f0:	1880042e 	bgeu	r3,r2,b104 <__umoddi3+0x284>
    b0f4:	1cc7883a 	add	r3,r3,r19
    b0f8:	1cc00236 	bltu	r3,r19,b104 <__umoddi3+0x284>
    b0fc:	1880012e 	bgeu	r3,r2,b104 <__umoddi3+0x284>
    b100:	1cc7883a 	add	r3,r3,r19
    b104:	1887c83a 	sub	r3,r3,r2
    b108:	1c84d83a 	srl	r2,r3,r18
    b10c:	0007883a 	mov	r3,zero
    b110:	00000206 	br	b11c <__umoddi3+0x29c>
    b114:	2005883a 	mov	r2,r4
    b118:	2807883a 	mov	r3,r5
    b11c:	dfc00b17 	ldw	ra,44(sp)
    b120:	df000a17 	ldw	fp,40(sp)
    b124:	ddc00917 	ldw	r23,36(sp)
    b128:	dd800817 	ldw	r22,32(sp)
    b12c:	dd400717 	ldw	r21,28(sp)
    b130:	dd000617 	ldw	r20,24(sp)
    b134:	dcc00517 	ldw	r19,20(sp)
    b138:	dc800417 	ldw	r18,16(sp)
    b13c:	dc400317 	ldw	r17,12(sp)
    b140:	dc000217 	ldw	r16,8(sp)
    b144:	dec00c04 	addi	sp,sp,48
    b148:	f800283a 	ret
    b14c:	00803fc4 	movi	r2,255
    b150:	11c0b02e 	bgeu	r2,r7,b414 <__umoddi3+0x594>
    b154:	01400204 	movi	r5,8
    b158:	282b883a 	mov	r21,r5
    b15c:	003f9b06 	br	afcc <__umoddi3+0x14c>
    b160:	00804034 	movhi	r2,256
    b164:	10bfffc4 	addi	r2,r2,-1
    b168:	1180b02e 	bgeu	r2,r6,b42c <__umoddi3+0x5ac>
    b16c:	01400604 	movi	r5,24
    b170:	2805883a 	mov	r2,r5
    b174:	003f5a06 	br	aee0 <__umoddi3+0x60>
    b178:	00803fc4 	movi	r2,255
    b17c:	14c0ae2e 	bgeu	r2,r19,b438 <__umoddi3+0x5b8>
    b180:	00800204 	movi	r2,8
    b184:	1007883a 	mov	r3,r2
    b188:	003fad06 	br	b040 <__umoddi3+0x1c0>
    b18c:	3d0a983a 	sll	r5,r7,r20
    b190:	356cd83a 	srl	r22,r6,r21
    b194:	8d78d83a 	srl	fp,r17,r21
    b198:	8d10983a 	sll	r8,r17,r20
    b19c:	2dacb03a 	or	r22,r5,r22
    b1a0:	b02ed43a 	srli	r23,r22,16
    b1a4:	8564d83a 	srl	r18,r16,r21
    b1a8:	e009883a 	mov	r4,fp
    b1ac:	b80b883a 	mov	r5,r23
    b1b0:	44a4b03a 	or	r18,r8,r18
    b1b4:	3526983a 	sll	r19,r6,r20
    b1b8:	000b5c00 	call	b5c0 <__umodsi3>
    b1bc:	e009883a 	mov	r4,fp
    b1c0:	b80b883a 	mov	r5,r23
    b1c4:	b47fffcc 	andi	r17,r22,65535
    b1c8:	d8800015 	stw	r2,0(sp)
    b1cc:	000b5b80 	call	b5b8 <__udivsi3>
    b1d0:	1009883a 	mov	r4,r2
    b1d4:	880b883a 	mov	r5,r17
    b1d8:	1039883a 	mov	fp,r2
    b1dc:	0000dc40 	call	dc4 <__mulsi3>
    b1e0:	d9800017 	ldw	r6,0(sp)
    b1e4:	9008d43a 	srli	r4,r18,16
    b1e8:	8520983a 	sll	r16,r16,r20
    b1ec:	300c943a 	slli	r6,r6,16
    b1f0:	3106b03a 	or	r3,r6,r4
    b1f4:	1880042e 	bgeu	r3,r2,b208 <__umoddi3+0x388>
    b1f8:	1d87883a 	add	r3,r3,r22
    b1fc:	e13fffc4 	addi	r4,fp,-1
    b200:	1d809a2e 	bgeu	r3,r22,b46c <__umoddi3+0x5ec>
    b204:	2039883a 	mov	fp,r4
    b208:	1887c83a 	sub	r3,r3,r2
    b20c:	1809883a 	mov	r4,r3
    b210:	b80b883a 	mov	r5,r23
    b214:	d8c00115 	stw	r3,4(sp)
    b218:	000b5c00 	call	b5c0 <__umodsi3>
    b21c:	d8c00117 	ldw	r3,4(sp)
    b220:	b80b883a 	mov	r5,r23
    b224:	d8800015 	stw	r2,0(sp)
    b228:	1809883a 	mov	r4,r3
    b22c:	000b5b80 	call	b5b8 <__udivsi3>
    b230:	880b883a 	mov	r5,r17
    b234:	1009883a 	mov	r4,r2
    b238:	102f883a 	mov	r23,r2
    b23c:	0000dc40 	call	dc4 <__mulsi3>
    b240:	d9800017 	ldw	r6,0(sp)
    b244:	947fffcc 	andi	r17,r18,65535
    b248:	300c943a 	slli	r6,r6,16
    b24c:	3464b03a 	or	r18,r6,r17
    b250:	9080042e 	bgeu	r18,r2,b264 <__umoddi3+0x3e4>
    b254:	95a5883a 	add	r18,r18,r22
    b258:	b8ffffc4 	addi	r3,r23,-1
    b25c:	95807f2e 	bgeu	r18,r22,b45c <__umoddi3+0x5dc>
    b260:	182f883a 	mov	r23,r3
    b264:	e038943a 	slli	fp,fp,16
    b268:	980cd43a 	srli	r6,r19,16
    b26c:	98ffffcc 	andi	r3,r19,65535
    b270:	bf38b03a 	or	fp,r23,fp
    b274:	e02ed43a 	srli	r23,fp,16
    b278:	e73fffcc 	andi	fp,fp,65535
    b27c:	180b883a 	mov	r5,r3
    b280:	e009883a 	mov	r4,fp
    b284:	d9800015 	stw	r6,0(sp)
    b288:	d8c00115 	stw	r3,4(sp)
    b28c:	90a5c83a 	sub	r18,r18,r2
    b290:	0000dc40 	call	dc4 <__mulsi3>
    b294:	d8c00117 	ldw	r3,4(sp)
    b298:	b809883a 	mov	r4,r23
    b29c:	1023883a 	mov	r17,r2
    b2a0:	180b883a 	mov	r5,r3
    b2a4:	0000dc40 	call	dc4 <__mulsi3>
    b2a8:	d9800017 	ldw	r6,0(sp)
    b2ac:	b809883a 	mov	r4,r23
    b2b0:	d8800115 	stw	r2,4(sp)
    b2b4:	300b883a 	mov	r5,r6
    b2b8:	302f883a 	mov	r23,r6
    b2bc:	0000dc40 	call	dc4 <__mulsi3>
    b2c0:	e009883a 	mov	r4,fp
    b2c4:	b80b883a 	mov	r5,r23
    b2c8:	d8800015 	stw	r2,0(sp)
    b2cc:	0000dc40 	call	dc4 <__mulsi3>
    b2d0:	d8c00117 	ldw	r3,4(sp)
    b2d4:	880cd43a 	srli	r6,r17,16
    b2d8:	d9c00017 	ldw	r7,0(sp)
    b2dc:	1885883a 	add	r2,r3,r2
    b2e0:	118d883a 	add	r6,r2,r6
    b2e4:	30c0022e 	bgeu	r6,r3,b2f0 <__umoddi3+0x470>
    b2e8:	00800074 	movhi	r2,1
    b2ec:	388f883a 	add	r7,r7,r2
    b2f0:	3006d43a 	srli	r3,r6,16
    b2f4:	300c943a 	slli	r6,r6,16
    b2f8:	8c7fffcc 	andi	r17,r17,65535
    b2fc:	38c7883a 	add	r3,r7,r3
    b300:	3463883a 	add	r17,r6,r17
    b304:	90c03d36 	bltu	r18,r3,b3fc <__umoddi3+0x57c>
    b308:	90c06026 	beq	r18,r3,b48c <__umoddi3+0x60c>
    b30c:	90c9c83a 	sub	r4,r18,r3
    b310:	880f883a 	mov	r7,r17
    b314:	81cfc83a 	sub	r7,r16,r7
    b318:	81c7803a 	cmpltu	r3,r16,r7
    b31c:	20c7c83a 	sub	r3,r4,r3
    b320:	1d44983a 	sll	r2,r3,r21
    b324:	3d0ed83a 	srl	r7,r7,r20
    b328:	1d06d83a 	srl	r3,r3,r20
    b32c:	11c4b03a 	or	r2,r2,r7
    b330:	003f7a06 	br	b11c <__umoddi3+0x29c>
    b334:	0025883a 	mov	r18,zero
    b338:	003ef806 	br	af1c <__umoddi3+0x9c>
    b33c:	98a6983a 	sll	r19,r19,r2
    b340:	88e8d83a 	srl	r20,r17,r3
    b344:	80c6d83a 	srl	r3,r16,r3
    b348:	982ad43a 	srli	r21,r19,16
    b34c:	88a2983a 	sll	r17,r17,r2
    b350:	a009883a 	mov	r4,r20
    b354:	a80b883a 	mov	r5,r21
    b358:	88eeb03a 	or	r23,r17,r3
    b35c:	1025883a 	mov	r18,r2
    b360:	000b5c00 	call	b5c0 <__umodsi3>
    b364:	a009883a 	mov	r4,r20
    b368:	a80b883a 	mov	r5,r21
    b36c:	1023883a 	mov	r17,r2
    b370:	9dbfffcc 	andi	r22,r19,65535
    b374:	000b5b80 	call	b5b8 <__udivsi3>
    b378:	1009883a 	mov	r4,r2
    b37c:	b00b883a 	mov	r5,r22
    b380:	0000dc40 	call	dc4 <__mulsi3>
    b384:	8822943a 	slli	r17,r17,16
    b388:	b808d43a 	srli	r4,r23,16
    b38c:	84a8983a 	sll	r20,r16,r18
    b390:	8906b03a 	or	r3,r17,r4
    b394:	1880042e 	bgeu	r3,r2,b3a8 <__umoddi3+0x528>
    b398:	1cc7883a 	add	r3,r3,r19
    b39c:	1cc00236 	bltu	r3,r19,b3a8 <__umoddi3+0x528>
    b3a0:	1880012e 	bgeu	r3,r2,b3a8 <__umoddi3+0x528>
    b3a4:	1cc7883a 	add	r3,r3,r19
    b3a8:	18a1c83a 	sub	r16,r3,r2
    b3ac:	8009883a 	mov	r4,r16
    b3b0:	a80b883a 	mov	r5,r21
    b3b4:	000b5c00 	call	b5c0 <__umodsi3>
    b3b8:	8009883a 	mov	r4,r16
    b3bc:	a80b883a 	mov	r5,r21
    b3c0:	1039883a 	mov	fp,r2
    b3c4:	000b5b80 	call	b5b8 <__udivsi3>
    b3c8:	1009883a 	mov	r4,r2
    b3cc:	b00b883a 	mov	r5,r22
    b3d0:	0000dc40 	call	dc4 <__mulsi3>
    b3d4:	e006943a 	slli	r3,fp,16
    b3d8:	b93fffcc 	andi	r4,r23,65535
    b3dc:	1906b03a 	or	r3,r3,r4
    b3e0:	1880042e 	bgeu	r3,r2,b3f4 <__umoddi3+0x574>
    b3e4:	1cc7883a 	add	r3,r3,r19
    b3e8:	1cc00236 	bltu	r3,r19,b3f4 <__umoddi3+0x574>
    b3ec:	1880012e 	bgeu	r3,r2,b3f4 <__umoddi3+0x574>
    b3f0:	1cc7883a 	add	r3,r3,r19
    b3f4:	18a3c83a 	sub	r17,r3,r2
    b3f8:	003f1e06 	br	b074 <__umoddi3+0x1f4>
    b3fc:	8ccfc83a 	sub	r7,r17,r19
    b400:	1d89c83a 	sub	r4,r3,r22
    b404:	89e3803a 	cmpltu	r17,r17,r7
    b408:	2463c83a 	sub	r17,r4,r17
    b40c:	9449c83a 	sub	r4,r18,r17
    b410:	003fc006 	br	b314 <__umoddi3+0x494>
    b414:	000b883a 	mov	r5,zero
    b418:	002b883a 	mov	r21,zero
    b41c:	003eeb06 	br	afcc <__umoddi3+0x14c>
    b420:	01400404 	movi	r5,16
    b424:	282b883a 	mov	r21,r5
    b428:	003ee806 	br	afcc <__umoddi3+0x14c>
    b42c:	01400404 	movi	r5,16
    b430:	2805883a 	mov	r2,r5
    b434:	003eaa06 	br	aee0 <__umoddi3+0x60>
    b438:	0005883a 	mov	r2,zero
    b43c:	0007883a 	mov	r3,zero
    b440:	003eff06 	br	b040 <__umoddi3+0x1c0>
    b444:	00800404 	movi	r2,16
    b448:	1007883a 	mov	r3,r2
    b44c:	003efc06 	br	b040 <__umoddi3+0x1c0>
    b450:	000b883a 	mov	r5,zero
    b454:	0005883a 	mov	r2,zero
    b458:	003ea106 	br	aee0 <__umoddi3+0x60>
    b45c:	90bf802e 	bgeu	r18,r2,b260 <__umoddi3+0x3e0>
    b460:	bdffff84 	addi	r23,r23,-2
    b464:	95a5883a 	add	r18,r18,r22
    b468:	003f7e06 	br	b264 <__umoddi3+0x3e4>
    b46c:	18bf652e 	bgeu	r3,r2,b204 <__umoddi3+0x384>
    b470:	e73fff84 	addi	fp,fp,-2
    b474:	1d87883a 	add	r3,r3,r22
    b478:	003f6306 	br	b208 <__umoddi3+0x388>
    b47c:	1cc7883a 	add	r3,r3,r19
    b480:	003f0d06 	br	b0b8 <__umoddi3+0x238>
    b484:	8005883a 	mov	r2,r16
    b488:	003edf06 	br	b008 <__umoddi3+0x188>
    b48c:	847fdb36 	bltu	r16,r17,b3fc <__umoddi3+0x57c>
    b490:	880f883a 	mov	r7,r17
    b494:	0009883a 	mov	r4,zero
    b498:	003f9e06 	br	b314 <__umoddi3+0x494>

0000b49c <udivmodsi4>:
    b49c:	2900182e 	bgeu	r5,r4,b500 <udivmodsi4+0x64>
    b4a0:	28001716 	blt	r5,zero,b500 <udivmodsi4+0x64>
    b4a4:	00800804 	movi	r2,32
    b4a8:	00c00044 	movi	r3,1
    b4ac:	00000206 	br	b4b8 <udivmodsi4+0x1c>
    b4b0:	10001126 	beq	r2,zero,b4f8 <udivmodsi4+0x5c>
    b4b4:	28000516 	blt	r5,zero,b4cc <udivmodsi4+0x30>
    b4b8:	294b883a 	add	r5,r5,r5
    b4bc:	10bfffc4 	addi	r2,r2,-1
    b4c0:	18c7883a 	add	r3,r3,r3
    b4c4:	293ffa36 	bltu	r5,r4,b4b0 <udivmodsi4+0x14>
    b4c8:	18000b26 	beq	r3,zero,b4f8 <udivmodsi4+0x5c>
    b4cc:	0005883a 	mov	r2,zero
    b4d0:	21400236 	bltu	r4,r5,b4dc <udivmodsi4+0x40>
    b4d4:	2149c83a 	sub	r4,r4,r5
    b4d8:	10c4b03a 	or	r2,r2,r3
    b4dc:	1806d07a 	srli	r3,r3,1
    b4e0:	280ad07a 	srli	r5,r5,1
    b4e4:	183ffa1e 	bne	r3,zero,b4d0 <udivmodsi4+0x34>
    b4e8:	3000011e 	bne	r6,zero,b4f0 <udivmodsi4+0x54>
    b4ec:	f800283a 	ret
    b4f0:	2005883a 	mov	r2,r4
    b4f4:	f800283a 	ret
    b4f8:	0005883a 	mov	r2,zero
    b4fc:	003ffa06 	br	b4e8 <udivmodsi4+0x4c>
    b500:	00c00044 	movi	r3,1
    b504:	003ff106 	br	b4cc <udivmodsi4+0x30>

0000b508 <__divsi3>:
    b508:	defffe04 	addi	sp,sp,-8
    b50c:	dfc00115 	stw	ra,4(sp)
    b510:	dc000015 	stw	r16,0(sp)
    b514:	20000b16 	blt	r4,zero,b544 <__divsi3+0x3c>
    b518:	0021883a 	mov	r16,zero
    b51c:	28000c16 	blt	r5,zero,b550 <__divsi3+0x48>
    b520:	000d883a 	mov	r6,zero
    b524:	000b49c0 	call	b49c <udivmodsi4>
    b528:	0407c83a 	sub	r3,zero,r16
    b52c:	1884f03a 	xor	r2,r3,r2
    b530:	1405883a 	add	r2,r2,r16
    b534:	dfc00117 	ldw	ra,4(sp)
    b538:	dc000017 	ldw	r16,0(sp)
    b53c:	dec00204 	addi	sp,sp,8
    b540:	f800283a 	ret
    b544:	0109c83a 	sub	r4,zero,r4
    b548:	04000044 	movi	r16,1
    b54c:	283ff40e 	bge	r5,zero,b520 <__divsi3+0x18>
    b550:	014bc83a 	sub	r5,zero,r5
    b554:	8400005c 	xori	r16,r16,1
    b558:	003ff106 	br	b520 <__divsi3+0x18>

0000b55c <__modsi3>:
    b55c:	defffd04 	addi	sp,sp,-12
    b560:	dfc00215 	stw	ra,8(sp)
    b564:	dc400115 	stw	r17,4(sp)
    b568:	dc000015 	stw	r16,0(sp)
    b56c:	20000c16 	blt	r4,zero,b5a0 <__modsi3+0x44>
    b570:	0023883a 	mov	r17,zero
    b574:	0021883a 	mov	r16,zero
    b578:	28000d16 	blt	r5,zero,b5b0 <__modsi3+0x54>
    b57c:	01800044 	movi	r6,1
    b580:	000b49c0 	call	b49c <udivmodsi4>
    b584:	1404f03a 	xor	r2,r2,r16
    b588:	8885883a 	add	r2,r17,r2
    b58c:	dfc00217 	ldw	ra,8(sp)
    b590:	dc400117 	ldw	r17,4(sp)
    b594:	dc000017 	ldw	r16,0(sp)
    b598:	dec00304 	addi	sp,sp,12
    b59c:	f800283a 	ret
    b5a0:	0109c83a 	sub	r4,zero,r4
    b5a4:	04400044 	movi	r17,1
    b5a8:	043fffc4 	movi	r16,-1
    b5ac:	283ff30e 	bge	r5,zero,b57c <__modsi3+0x20>
    b5b0:	014bc83a 	sub	r5,zero,r5
    b5b4:	003ff106 	br	b57c <__modsi3+0x20>

0000b5b8 <__udivsi3>:
    b5b8:	000d883a 	mov	r6,zero
    b5bc:	000b49c1 	jmpi	b49c <udivmodsi4>

0000b5c0 <__umodsi3>:
    b5c0:	01800044 	movi	r6,1
    b5c4:	000b49c1 	jmpi	b49c <udivmodsi4>

0000b5c8 <__adddf3>:
    b5c8:	02000434 	movhi	r8,16
    b5cc:	423fffc4 	addi	r8,r8,-1
    b5d0:	defffb04 	addi	sp,sp,-20
    b5d4:	2a12703a 	and	r9,r5,r8
    b5d8:	2806d7fa 	srli	r3,r5,31
    b5dc:	3a10703a 	and	r8,r7,r8
    b5e0:	3804d53a 	srli	r2,r7,20
    b5e4:	3014d77a 	srli	r10,r6,29
    b5e8:	dc000015 	stw	r16,0(sp)
    b5ec:	481290fa 	slli	r9,r9,3
    b5f0:	2820d53a 	srli	r16,r5,20
    b5f4:	401090fa 	slli	r8,r8,3
    b5f8:	200ad77a 	srli	r5,r4,29
    b5fc:	380ed7fa 	srli	r7,r7,31
    b600:	dc800215 	stw	r18,8(sp)
    b604:	dc400115 	stw	r17,4(sp)
    b608:	dfc00415 	stw	ra,16(sp)
    b60c:	dcc00315 	stw	r19,12(sp)
    b610:	1c803fcc 	andi	r18,r3,255
    b614:	8401ffcc 	andi	r16,r16,2047
    b618:	494ab03a 	or	r5,r9,r5
    b61c:	202290fa 	slli	r17,r4,3
    b620:	1081ffcc 	andi	r2,r2,2047
    b624:	4290b03a 	or	r8,r8,r10
    b628:	300c90fa 	slli	r6,r6,3
    b62c:	91c07026 	beq	r18,r7,b7f0 <__adddf3+0x228>
    b630:	8087c83a 	sub	r3,r16,r2
    b634:	00c0b30e 	bge	zero,r3,b904 <__adddf3+0x33c>
    b638:	10002a1e 	bne	r2,zero,b6e4 <__adddf3+0x11c>
    b63c:	4184b03a 	or	r2,r8,r6
    b640:	1000991e 	bne	r2,zero,b8a8 <__adddf3+0x2e0>
    b644:	888001cc 	andi	r2,r17,7
    b648:	10005b26 	beq	r2,zero,b7b8 <__adddf3+0x1f0>
    b64c:	88c003cc 	andi	r3,r17,15
    b650:	00800104 	movi	r2,4
    b654:	18805826 	beq	r3,r2,b7b8 <__adddf3+0x1f0>
    b658:	89800104 	addi	r6,r17,4
    b65c:	3463803a 	cmpltu	r17,r6,r17
    b660:	2c4b883a 	add	r5,r5,r17
    b664:	2880202c 	andhi	r2,r5,128
    b668:	9007883a 	mov	r3,r18
    b66c:	3023883a 	mov	r17,r6
    b670:	10005426 	beq	r2,zero,b7c4 <__adddf3+0x1fc>
    b674:	84000044 	addi	r16,r16,1
    b678:	0081ffc4 	movi	r2,2047
    b67c:	8080c126 	beq	r16,r2,b984 <__adddf3+0x3bc>
    b680:	013fe034 	movhi	r4,65408
    b684:	213fffc4 	addi	r4,r4,-1
    b688:	290a703a 	and	r5,r5,r4
    b68c:	2804977a 	slli	r2,r5,29
    b690:	280a927a 	slli	r5,r5,9
    b694:	8822d0fa 	srli	r17,r17,3
    b698:	8401ffcc 	andi	r16,r16,2047
    b69c:	2808d33a 	srli	r4,r5,12
    b6a0:	1444b03a 	or	r2,r2,r17
    b6a4:	8401ffcc 	andi	r16,r16,2047
    b6a8:	800a953a 	slli	r5,r16,20
    b6ac:	18c03fcc 	andi	r3,r3,255
    b6b0:	04000434 	movhi	r16,16
    b6b4:	180697fa 	slli	r3,r3,31
    b6b8:	843fffc4 	addi	r16,r16,-1
    b6bc:	2420703a 	and	r16,r4,r16
    b6c0:	8160b03a 	or	r16,r16,r5
    b6c4:	80c6b03a 	or	r3,r16,r3
    b6c8:	dfc00417 	ldw	ra,16(sp)
    b6cc:	dcc00317 	ldw	r19,12(sp)
    b6d0:	dc800217 	ldw	r18,8(sp)
    b6d4:	dc400117 	ldw	r17,4(sp)
    b6d8:	dc000017 	ldw	r16,0(sp)
    b6dc:	dec00504 	addi	sp,sp,20
    b6e0:	f800283a 	ret
    b6e4:	0081ffc4 	movi	r2,2047
    b6e8:	80bfd626 	beq	r16,r2,b644 <__adddf3+0x7c>
    b6ec:	42002034 	orhi	r8,r8,128
    b6f0:	00800e04 	movi	r2,56
    b6f4:	10c0a616 	blt	r2,r3,b990 <__adddf3+0x3c8>
    b6f8:	008007c4 	movi	r2,31
    b6fc:	10c0c916 	blt	r2,r3,ba24 <__adddf3+0x45c>
    b700:	00800804 	movi	r2,32
    b704:	10c5c83a 	sub	r2,r2,r3
    b708:	408e983a 	sll	r7,r8,r2
    b70c:	30c8d83a 	srl	r4,r6,r3
    b710:	3084983a 	sll	r2,r6,r2
    b714:	40c6d83a 	srl	r3,r8,r3
    b718:	390cb03a 	or	r6,r7,r4
    b71c:	1004c03a 	cmpne	r2,r2,zero
    b720:	308cb03a 	or	r6,r6,r2
    b724:	898dc83a 	sub	r6,r17,r6
    b728:	89a3803a 	cmpltu	r17,r17,r6
    b72c:	28cbc83a 	sub	r5,r5,r3
    b730:	2c4bc83a 	sub	r5,r5,r17
    b734:	3023883a 	mov	r17,r6
    b738:	2880202c 	andhi	r2,r5,128
    b73c:	10006d26 	beq	r2,zero,b8f4 <__adddf3+0x32c>
    b740:	04c02034 	movhi	r19,128
    b744:	9cffffc4 	addi	r19,r19,-1
    b748:	2ce6703a 	and	r19,r5,r19
    b74c:	98007e26 	beq	r19,zero,b948 <__adddf3+0x380>
    b750:	9809883a 	mov	r4,r19
    b754:	000145c0 	call	145c <__clzsi2>
    b758:	10fffe04 	addi	r3,r2,-8
    b75c:	010007c4 	movi	r4,31
    b760:	20c07f16 	blt	r4,r3,b960 <__adddf3+0x398>
    b764:	01400a04 	movi	r5,40
    b768:	2885c83a 	sub	r2,r5,r2
    b76c:	888ad83a 	srl	r5,r17,r2
    b770:	98e6983a 	sll	r19,r19,r3
    b774:	88e2983a 	sll	r17,r17,r3
    b778:	2ce6b03a 	or	r19,r5,r19
    b77c:	1c007c16 	blt	r3,r16,b970 <__adddf3+0x3a8>
    b780:	1c21c83a 	sub	r16,r3,r16
    b784:	81400044 	addi	r5,r16,1
    b788:	00c007c4 	movi	r3,31
    b78c:	19409816 	blt	r3,r5,b9f0 <__adddf3+0x428>
    b790:	1c21c83a 	sub	r16,r3,r16
    b794:	8c08983a 	sll	r4,r17,r16
    b798:	8946d83a 	srl	r3,r17,r5
    b79c:	9c20983a 	sll	r16,r19,r16
    b7a0:	2008c03a 	cmpne	r4,r4,zero
    b7a4:	994ad83a 	srl	r5,r19,r5
    b7a8:	1c06b03a 	or	r3,r3,r16
    b7ac:	1922b03a 	or	r17,r3,r4
    b7b0:	0021883a 	mov	r16,zero
    b7b4:	003fa306 	br	b644 <__adddf3+0x7c>
    b7b8:	2880202c 	andhi	r2,r5,128
    b7bc:	9007883a 	mov	r3,r18
    b7c0:	103fac1e 	bne	r2,zero,b674 <__adddf3+0xac>
    b7c4:	2804977a 	slli	r2,r5,29
    b7c8:	8822d0fa 	srli	r17,r17,3
    b7cc:	0101ffc4 	movi	r4,2047
    b7d0:	280ad0fa 	srli	r5,r5,3
    b7d4:	1444b03a 	or	r2,r2,r17
    b7d8:	81002c26 	beq	r16,r4,b88c <__adddf3+0x2c4>
    b7dc:	8120703a 	and	r16,r16,r4
    b7e0:	01000434 	movhi	r4,16
    b7e4:	213fffc4 	addi	r4,r4,-1
    b7e8:	2908703a 	and	r4,r5,r4
    b7ec:	003fad06 	br	b6a4 <__adddf3+0xdc>
    b7f0:	8089c83a 	sub	r4,r16,r2
    b7f4:	01006a0e 	bge	zero,r4,b9a0 <__adddf3+0x3d8>
    b7f8:	10003326 	beq	r2,zero,b8c8 <__adddf3+0x300>
    b7fc:	0081ffc4 	movi	r2,2047
    b800:	80bf9026 	beq	r16,r2,b644 <__adddf3+0x7c>
    b804:	42002034 	orhi	r8,r8,128
    b808:	00800e04 	movi	r2,56
    b80c:	1100b116 	blt	r2,r4,bad4 <__adddf3+0x50c>
    b810:	008007c4 	movi	r2,31
    b814:	1100e216 	blt	r2,r4,bba0 <__adddf3+0x5d8>
    b818:	00800804 	movi	r2,32
    b81c:	1105c83a 	sub	r2,r2,r4
    b820:	4092983a 	sll	r9,r8,r2
    b824:	310ed83a 	srl	r7,r6,r4
    b828:	3084983a 	sll	r2,r6,r2
    b82c:	4110d83a 	srl	r8,r8,r4
    b830:	49ccb03a 	or	r6,r9,r7
    b834:	1004c03a 	cmpne	r2,r2,zero
    b838:	308cb03a 	or	r6,r6,r2
    b83c:	344d883a 	add	r6,r6,r17
    b840:	3463803a 	cmpltu	r17,r6,r17
    b844:	414b883a 	add	r5,r8,r5
    b848:	2c4b883a 	add	r5,r5,r17
    b84c:	3023883a 	mov	r17,r6
    b850:	2880202c 	andhi	r2,r5,128
    b854:	10002726 	beq	r2,zero,b8f4 <__adddf3+0x32c>
    b858:	84000044 	addi	r16,r16,1
    b85c:	0081ffc4 	movi	r2,2047
    b860:	8080ae26 	beq	r16,r2,bb1c <__adddf3+0x554>
    b864:	00bfe034 	movhi	r2,65408
    b868:	10bfffc4 	addi	r2,r2,-1
    b86c:	288a703a 	and	r5,r5,r2
    b870:	880cd07a 	srli	r6,r17,1
    b874:	280897fa 	slli	r4,r5,31
    b878:	88c0004c 	andi	r3,r17,1
    b87c:	30e2b03a 	or	r17,r6,r3
    b880:	280ad07a 	srli	r5,r5,1
    b884:	8922b03a 	or	r17,r17,r4
    b888:	003f6e06 	br	b644 <__adddf3+0x7c>
    b88c:	1148b03a 	or	r4,r2,r5
    b890:	20003c26 	beq	r4,zero,b984 <__adddf3+0x3bc>
    b894:	29000234 	orhi	r4,r5,8
    b898:	01400434 	movhi	r5,16
    b89c:	297fffc4 	addi	r5,r5,-1
    b8a0:	2148703a 	and	r4,r4,r5
    b8a4:	003f7f06 	br	b6a4 <__adddf3+0xdc>
    b8a8:	18ffffc4 	addi	r3,r3,-1
    b8ac:	18004d1e 	bne	r3,zero,b9e4 <__adddf3+0x41c>
    b8b0:	898dc83a 	sub	r6,r17,r6
    b8b4:	89a3803a 	cmpltu	r17,r17,r6
    b8b8:	2a0bc83a 	sub	r5,r5,r8
    b8bc:	2c4bc83a 	sub	r5,r5,r17
    b8c0:	3023883a 	mov	r17,r6
    b8c4:	003f9c06 	br	b738 <__adddf3+0x170>
    b8c8:	4184b03a 	or	r2,r8,r6
    b8cc:	103f5d26 	beq	r2,zero,b644 <__adddf3+0x7c>
    b8d0:	213fffc4 	addi	r4,r4,-1
    b8d4:	203fd926 	beq	r4,zero,b83c <__adddf3+0x274>
    b8d8:	0081ffc4 	movi	r2,2047
    b8dc:	80bfca1e 	bne	r16,r2,b808 <__adddf3+0x240>
    b8e0:	003f5806 	br	b644 <__adddf3+0x7c>
    b8e4:	10c8b03a 	or	r4,r2,r3
    b8e8:	20008b26 	beq	r4,zero,bb18 <__adddf3+0x550>
    b8ec:	100b883a 	mov	r5,r2
    b8f0:	1823883a 	mov	r17,r3
    b8f4:	888001cc 	andi	r2,r17,7
    b8f8:	103f541e 	bne	r2,zero,b64c <__adddf3+0x84>
    b8fc:	9007883a 	mov	r3,r18
    b900:	003fb006 	br	b7c4 <__adddf3+0x1fc>
    b904:	1800531e 	bne	r3,zero,ba54 <__adddf3+0x48c>
    b908:	80800044 	addi	r2,r16,1
    b90c:	1081ffcc 	andi	r2,r2,2047
    b910:	00c00044 	movi	r3,1
    b914:	1880990e 	bge	r3,r2,bb7c <__adddf3+0x5b4>
    b918:	8985c83a 	sub	r2,r17,r6
    b91c:	8887803a 	cmpltu	r3,r17,r2
    b920:	2a27c83a 	sub	r19,r5,r8
    b924:	98e7c83a 	sub	r19,r19,r3
    b928:	98c0202c 	andhi	r3,r19,128
    b92c:	18006226 	beq	r3,zero,bab8 <__adddf3+0x4f0>
    b930:	3463c83a 	sub	r17,r6,r17
    b934:	4151c83a 	sub	r8,r8,r5
    b938:	344d803a 	cmpltu	r6,r6,r17
    b93c:	41a7c83a 	sub	r19,r8,r6
    b940:	3825883a 	mov	r18,r7
    b944:	983f821e 	bne	r19,zero,b750 <__adddf3+0x188>
    b948:	8809883a 	mov	r4,r17
    b94c:	000145c0 	call	145c <__clzsi2>
    b950:	10800804 	addi	r2,r2,32
    b954:	10fffe04 	addi	r3,r2,-8
    b958:	010007c4 	movi	r4,31
    b95c:	20ff810e 	bge	r4,r3,b764 <__adddf3+0x19c>
    b960:	14fff604 	addi	r19,r2,-40
    b964:	8ce6983a 	sll	r19,r17,r19
    b968:	0023883a 	mov	r17,zero
    b96c:	1c3f840e 	bge	r3,r16,b780 <__adddf3+0x1b8>
    b970:	017fe034 	movhi	r5,65408
    b974:	297fffc4 	addi	r5,r5,-1
    b978:	80e1c83a 	sub	r16,r16,r3
    b97c:	994a703a 	and	r5,r19,r5
    b980:	003f3006 	br	b644 <__adddf3+0x7c>
    b984:	0009883a 	mov	r4,zero
    b988:	0005883a 	mov	r2,zero
    b98c:	003f4506 	br	b6a4 <__adddf3+0xdc>
    b990:	418cb03a 	or	r6,r8,r6
    b994:	300cc03a 	cmpne	r6,r6,zero
    b998:	0007883a 	mov	r3,zero
    b99c:	003f6106 	br	b724 <__adddf3+0x15c>
    b9a0:	2000921e 	bne	r4,zero,bbec <__adddf3+0x624>
    b9a4:	80800044 	addi	r2,r16,1
    b9a8:	11c1ffcc 	andi	r7,r2,2047
    b9ac:	01000044 	movi	r4,1
    b9b0:	21c0610e 	bge	r4,r7,bb38 <__adddf3+0x570>
    b9b4:	0101ffc4 	movi	r4,2047
    b9b8:	1100a326 	beq	r2,r4,bc48 <__adddf3+0x680>
    b9bc:	344d883a 	add	r6,r6,r17
    b9c0:	3463803a 	cmpltu	r17,r6,r17
    b9c4:	414b883a 	add	r5,r8,r5
    b9c8:	2c4b883a 	add	r5,r5,r17
    b9cc:	282297fa 	slli	r17,r5,31
    b9d0:	300cd07a 	srli	r6,r6,1
    b9d4:	280ad07a 	srli	r5,r5,1
    b9d8:	1021883a 	mov	r16,r2
    b9dc:	89a2b03a 	or	r17,r17,r6
    b9e0:	003f1806 	br	b644 <__adddf3+0x7c>
    b9e4:	0081ffc4 	movi	r2,2047
    b9e8:	80bf411e 	bne	r16,r2,b6f0 <__adddf3+0x128>
    b9ec:	003f1506 	br	b644 <__adddf3+0x7c>
    b9f0:	80bff844 	addi	r2,r16,-31
    b9f4:	00c00804 	movi	r3,32
    b9f8:	9884d83a 	srl	r2,r19,r2
    b9fc:	28c04a26 	beq	r5,r3,bb28 <__adddf3+0x560>
    ba00:	00c00fc4 	movi	r3,63
    ba04:	1c21c83a 	sub	r16,r3,r16
    ba08:	9c26983a 	sll	r19,r19,r16
    ba0c:	9c62b03a 	or	r17,r19,r17
    ba10:	8822c03a 	cmpne	r17,r17,zero
    ba14:	88a2b03a 	or	r17,r17,r2
    ba18:	000b883a 	mov	r5,zero
    ba1c:	0021883a 	mov	r16,zero
    ba20:	003fb406 	br	b8f4 <__adddf3+0x32c>
    ba24:	18bff804 	addi	r2,r3,-32
    ba28:	01000804 	movi	r4,32
    ba2c:	4084d83a 	srl	r2,r8,r2
    ba30:	19003f26 	beq	r3,r4,bb30 <__adddf3+0x568>
    ba34:	01001004 	movi	r4,64
    ba38:	20c7c83a 	sub	r3,r4,r3
    ba3c:	40d0983a 	sll	r8,r8,r3
    ba40:	418cb03a 	or	r6,r8,r6
    ba44:	300cc03a 	cmpne	r6,r6,zero
    ba48:	308cb03a 	or	r6,r6,r2
    ba4c:	0007883a 	mov	r3,zero
    ba50:	003f3406 	br	b724 <__adddf3+0x15c>
    ba54:	80002326 	beq	r16,zero,bae4 <__adddf3+0x51c>
    ba58:	0101ffc4 	movi	r4,2047
    ba5c:	11005e26 	beq	r2,r4,bbd8 <__adddf3+0x610>
    ba60:	00c7c83a 	sub	r3,zero,r3
    ba64:	29402034 	orhi	r5,r5,128
    ba68:	01000e04 	movi	r4,56
    ba6c:	20c07216 	blt	r4,r3,bc38 <__adddf3+0x670>
    ba70:	010007c4 	movi	r4,31
    ba74:	20c0ce16 	blt	r4,r3,bdb0 <__adddf3+0x7e8>
    ba78:	01000804 	movi	r4,32
    ba7c:	20c9c83a 	sub	r4,r4,r3
    ba80:	2914983a 	sll	r10,r5,r4
    ba84:	88d2d83a 	srl	r9,r17,r3
    ba88:	8908983a 	sll	r4,r17,r4
    ba8c:	28c6d83a 	srl	r3,r5,r3
    ba90:	5262b03a 	or	r17,r10,r9
    ba94:	2008c03a 	cmpne	r4,r4,zero
    ba98:	8922b03a 	or	r17,r17,r4
    ba9c:	3463c83a 	sub	r17,r6,r17
    baa0:	40c7c83a 	sub	r3,r8,r3
    baa4:	344d803a 	cmpltu	r6,r6,r17
    baa8:	198bc83a 	sub	r5,r3,r6
    baac:	1021883a 	mov	r16,r2
    bab0:	3825883a 	mov	r18,r7
    bab4:	003f2006 	br	b738 <__adddf3+0x170>
    bab8:	9886b03a 	or	r3,r19,r2
    babc:	1800141e 	bne	r3,zero,bb10 <__adddf3+0x548>
    bac0:	0007883a 	mov	r3,zero
    bac4:	000b883a 	mov	r5,zero
    bac8:	0023883a 	mov	r17,zero
    bacc:	0021883a 	mov	r16,zero
    bad0:	003f3c06 	br	b7c4 <__adddf3+0x1fc>
    bad4:	418cb03a 	or	r6,r8,r6
    bad8:	300cc03a 	cmpne	r6,r6,zero
    badc:	0011883a 	mov	r8,zero
    bae0:	003f5606 	br	b83c <__adddf3+0x274>
    bae4:	2c48b03a 	or	r4,r5,r17
    bae8:	20003b26 	beq	r4,zero,bbd8 <__adddf3+0x610>
    baec:	00c6303a 	nor	r3,zero,r3
    baf0:	1800371e 	bne	r3,zero,bbd0 <__adddf3+0x608>
    baf4:	3463c83a 	sub	r17,r6,r17
    baf8:	414bc83a 	sub	r5,r8,r5
    bafc:	344d803a 	cmpltu	r6,r6,r17
    bb00:	298bc83a 	sub	r5,r5,r6
    bb04:	1021883a 	mov	r16,r2
    bb08:	3825883a 	mov	r18,r7
    bb0c:	003f0a06 	br	b738 <__adddf3+0x170>
    bb10:	1023883a 	mov	r17,r2
    bb14:	003f0d06 	br	b74c <__adddf3+0x184>
    bb18:	0007883a 	mov	r3,zero
    bb1c:	000b883a 	mov	r5,zero
    bb20:	0023883a 	mov	r17,zero
    bb24:	003f2706 	br	b7c4 <__adddf3+0x1fc>
    bb28:	0027883a 	mov	r19,zero
    bb2c:	003fb706 	br	ba0c <__adddf3+0x444>
    bb30:	0011883a 	mov	r8,zero
    bb34:	003fc206 	br	ba40 <__adddf3+0x478>
    bb38:	2c44b03a 	or	r2,r5,r17
    bb3c:	8000871e 	bne	r16,zero,bd5c <__adddf3+0x794>
    bb40:	1000b126 	beq	r2,zero,be08 <__adddf3+0x840>
    bb44:	4184b03a 	or	r2,r8,r6
    bb48:	103ebe26 	beq	r2,zero,b644 <__adddf3+0x7c>
    bb4c:	3445883a 	add	r2,r6,r17
    bb50:	1463803a 	cmpltu	r17,r2,r17
    bb54:	414b883a 	add	r5,r8,r5
    bb58:	2c4b883a 	add	r5,r5,r17
    bb5c:	28c0202c 	andhi	r3,r5,128
    bb60:	1023883a 	mov	r17,r2
    bb64:	183f6326 	beq	r3,zero,b8f4 <__adddf3+0x32c>
    bb68:	00bfe034 	movhi	r2,65408
    bb6c:	10bfffc4 	addi	r2,r2,-1
    bb70:	2021883a 	mov	r16,r4
    bb74:	288a703a 	and	r5,r5,r2
    bb78:	003eb206 	br	b644 <__adddf3+0x7c>
    bb7c:	2c44b03a 	or	r2,r5,r17
    bb80:	8000251e 	bne	r16,zero,bc18 <__adddf3+0x650>
    bb84:	10004b1e 	bne	r2,zero,bcb4 <__adddf3+0x6ec>
    bb88:	4184b03a 	or	r2,r8,r6
    bb8c:	103fe226 	beq	r2,zero,bb18 <__adddf3+0x550>
    bb90:	400b883a 	mov	r5,r8
    bb94:	3023883a 	mov	r17,r6
    bb98:	3825883a 	mov	r18,r7
    bb9c:	003ea906 	br	b644 <__adddf3+0x7c>
    bba0:	20bff804 	addi	r2,r4,-32
    bba4:	01c00804 	movi	r7,32
    bba8:	4084d83a 	srl	r2,r8,r2
    bbac:	21c07e26 	beq	r4,r7,bda8 <__adddf3+0x7e0>
    bbb0:	01c01004 	movi	r7,64
    bbb4:	3909c83a 	sub	r4,r7,r4
    bbb8:	4110983a 	sll	r8,r8,r4
    bbbc:	418cb03a 	or	r6,r8,r6
    bbc0:	300cc03a 	cmpne	r6,r6,zero
    bbc4:	308cb03a 	or	r6,r6,r2
    bbc8:	0011883a 	mov	r8,zero
    bbcc:	003f1b06 	br	b83c <__adddf3+0x274>
    bbd0:	0101ffc4 	movi	r4,2047
    bbd4:	113fa41e 	bne	r2,r4,ba68 <__adddf3+0x4a0>
    bbd8:	400b883a 	mov	r5,r8
    bbdc:	3023883a 	mov	r17,r6
    bbe0:	1021883a 	mov	r16,r2
    bbe4:	3825883a 	mov	r18,r7
    bbe8:	003e9606 	br	b644 <__adddf3+0x7c>
    bbec:	80001a1e 	bne	r16,zero,bc58 <__adddf3+0x690>
    bbf0:	2c4eb03a 	or	r7,r5,r17
    bbf4:	38005526 	beq	r7,zero,bd4c <__adddf3+0x784>
    bbf8:	0108303a 	nor	r4,zero,r4
    bbfc:	2000511e 	bne	r4,zero,bd44 <__adddf3+0x77c>
    bc00:	89a3883a 	add	r17,r17,r6
    bc04:	414b883a 	add	r5,r8,r5
    bc08:	898d803a 	cmpltu	r6,r17,r6
    bc0c:	298b883a 	add	r5,r5,r6
    bc10:	1021883a 	mov	r16,r2
    bc14:	003f0e06 	br	b850 <__adddf3+0x288>
    bc18:	1000341e 	bne	r2,zero,bcec <__adddf3+0x724>
    bc1c:	4184b03a 	or	r2,r8,r6
    bc20:	10006f26 	beq	r2,zero,bde0 <__adddf3+0x818>
    bc24:	400b883a 	mov	r5,r8
    bc28:	3023883a 	mov	r17,r6
    bc2c:	3825883a 	mov	r18,r7
    bc30:	0401ffc4 	movi	r16,2047
    bc34:	003e8306 	br	b644 <__adddf3+0x7c>
    bc38:	2c62b03a 	or	r17,r5,r17
    bc3c:	8822c03a 	cmpne	r17,r17,zero
    bc40:	0007883a 	mov	r3,zero
    bc44:	003f9506 	br	ba9c <__adddf3+0x4d4>
    bc48:	1021883a 	mov	r16,r2
    bc4c:	000b883a 	mov	r5,zero
    bc50:	0023883a 	mov	r17,zero
    bc54:	003edb06 	br	b7c4 <__adddf3+0x1fc>
    bc58:	01c1ffc4 	movi	r7,2047
    bc5c:	11c03b26 	beq	r2,r7,bd4c <__adddf3+0x784>
    bc60:	0109c83a 	sub	r4,zero,r4
    bc64:	29402034 	orhi	r5,r5,128
    bc68:	01c00e04 	movi	r7,56
    bc6c:	39006216 	blt	r7,r4,bdf8 <__adddf3+0x830>
    bc70:	01c007c4 	movi	r7,31
    bc74:	39006b16 	blt	r7,r4,be24 <__adddf3+0x85c>
    bc78:	01c00804 	movi	r7,32
    bc7c:	390fc83a 	sub	r7,r7,r4
    bc80:	29d4983a 	sll	r10,r5,r7
    bc84:	8912d83a 	srl	r9,r17,r4
    bc88:	89ce983a 	sll	r7,r17,r7
    bc8c:	2908d83a 	srl	r4,r5,r4
    bc90:	5262b03a 	or	r17,r10,r9
    bc94:	380ac03a 	cmpne	r5,r7,zero
    bc98:	8962b03a 	or	r17,r17,r5
    bc9c:	89a3883a 	add	r17,r17,r6
    bca0:	2211883a 	add	r8,r4,r8
    bca4:	898d803a 	cmpltu	r6,r17,r6
    bca8:	418b883a 	add	r5,r8,r6
    bcac:	1021883a 	mov	r16,r2
    bcb0:	003ee706 	br	b850 <__adddf3+0x288>
    bcb4:	4184b03a 	or	r2,r8,r6
    bcb8:	103e6226 	beq	r2,zero,b644 <__adddf3+0x7c>
    bcbc:	8987c83a 	sub	r3,r17,r6
    bcc0:	88c9803a 	cmpltu	r4,r17,r3
    bcc4:	2a05c83a 	sub	r2,r5,r8
    bcc8:	1105c83a 	sub	r2,r2,r4
    bccc:	1100202c 	andhi	r4,r2,128
    bcd0:	203f0426 	beq	r4,zero,b8e4 <__adddf3+0x31c>
    bcd4:	3463c83a 	sub	r17,r6,r17
    bcd8:	414bc83a 	sub	r5,r8,r5
    bcdc:	344d803a 	cmpltu	r6,r6,r17
    bce0:	298bc83a 	sub	r5,r5,r6
    bce4:	3825883a 	mov	r18,r7
    bce8:	003e5606 	br	b644 <__adddf3+0x7c>
    bcec:	4184b03a 	or	r2,r8,r6
    bcf0:	10002b26 	beq	r2,zero,bda0 <__adddf3+0x7d8>
    bcf4:	2804d0fa 	srli	r2,r5,3
    bcf8:	8822d0fa 	srli	r17,r17,3
    bcfc:	280a977a 	slli	r5,r5,29
    bd00:	10c0022c 	andhi	r3,r2,8
    bd04:	2c62b03a 	or	r17,r5,r17
    bd08:	18000826 	beq	r3,zero,bd2c <__adddf3+0x764>
    bd0c:	4008d0fa 	srli	r4,r8,3
    bd10:	20c0022c 	andhi	r3,r4,8
    bd14:	1800051e 	bne	r3,zero,bd2c <__adddf3+0x764>
    bd18:	300cd0fa 	srli	r6,r6,3
    bd1c:	4010977a 	slli	r8,r8,29
    bd20:	2005883a 	mov	r2,r4
    bd24:	3825883a 	mov	r18,r7
    bd28:	41a2b03a 	or	r17,r8,r6
    bd2c:	880ad77a 	srli	r5,r17,29
    bd30:	100490fa 	slli	r2,r2,3
    bd34:	882290fa 	slli	r17,r17,3
    bd38:	0401ffc4 	movi	r16,2047
    bd3c:	288ab03a 	or	r5,r5,r2
    bd40:	003e4006 	br	b644 <__adddf3+0x7c>
    bd44:	01c1ffc4 	movi	r7,2047
    bd48:	11ffc71e 	bne	r2,r7,bc68 <__adddf3+0x6a0>
    bd4c:	400b883a 	mov	r5,r8
    bd50:	3023883a 	mov	r17,r6
    bd54:	1021883a 	mov	r16,r2
    bd58:	003e3a06 	br	b644 <__adddf3+0x7c>
    bd5c:	10002d26 	beq	r2,zero,be14 <__adddf3+0x84c>
    bd60:	4184b03a 	or	r2,r8,r6
    bd64:	10000e26 	beq	r2,zero,bda0 <__adddf3+0x7d8>
    bd68:	2804d0fa 	srli	r2,r5,3
    bd6c:	8822d0fa 	srli	r17,r17,3
    bd70:	280a977a 	slli	r5,r5,29
    bd74:	10c0022c 	andhi	r3,r2,8
    bd78:	2c62b03a 	or	r17,r5,r17
    bd7c:	183feb26 	beq	r3,zero,bd2c <__adddf3+0x764>
    bd80:	4008d0fa 	srli	r4,r8,3
    bd84:	20c0022c 	andhi	r3,r4,8
    bd88:	183fe81e 	bne	r3,zero,bd2c <__adddf3+0x764>
    bd8c:	300cd0fa 	srli	r6,r6,3
    bd90:	4010977a 	slli	r8,r8,29
    bd94:	2005883a 	mov	r2,r4
    bd98:	41a2b03a 	or	r17,r8,r6
    bd9c:	003fe306 	br	bd2c <__adddf3+0x764>
    bda0:	0401ffc4 	movi	r16,2047
    bda4:	003e2706 	br	b644 <__adddf3+0x7c>
    bda8:	0011883a 	mov	r8,zero
    bdac:	003f8306 	br	bbbc <__adddf3+0x5f4>
    bdb0:	193ff804 	addi	r4,r3,-32
    bdb4:	02400804 	movi	r9,32
    bdb8:	2908d83a 	srl	r4,r5,r4
    bdbc:	1a402526 	beq	r3,r9,be54 <__adddf3+0x88c>
    bdc0:	02401004 	movi	r9,64
    bdc4:	48c7c83a 	sub	r3,r9,r3
    bdc8:	28ca983a 	sll	r5,r5,r3
    bdcc:	2c62b03a 	or	r17,r5,r17
    bdd0:	8822c03a 	cmpne	r17,r17,zero
    bdd4:	8922b03a 	or	r17,r17,r4
    bdd8:	0007883a 	mov	r3,zero
    bddc:	003f2f06 	br	ba9c <__adddf3+0x4d4>
    bde0:	01402034 	movhi	r5,128
    bde4:	0007883a 	mov	r3,zero
    bde8:	297fffc4 	addi	r5,r5,-1
    bdec:	047ffe04 	movi	r17,-8
    bdf0:	0401ffc4 	movi	r16,2047
    bdf4:	003e7306 	br	b7c4 <__adddf3+0x1fc>
    bdf8:	2c62b03a 	or	r17,r5,r17
    bdfc:	8822c03a 	cmpne	r17,r17,zero
    be00:	0009883a 	mov	r4,zero
    be04:	003fa506 	br	bc9c <__adddf3+0x6d4>
    be08:	400b883a 	mov	r5,r8
    be0c:	3023883a 	mov	r17,r6
    be10:	003e0c06 	br	b644 <__adddf3+0x7c>
    be14:	400b883a 	mov	r5,r8
    be18:	3023883a 	mov	r17,r6
    be1c:	0401ffc4 	movi	r16,2047
    be20:	003e0806 	br	b644 <__adddf3+0x7c>
    be24:	21fff804 	addi	r7,r4,-32
    be28:	02400804 	movi	r9,32
    be2c:	29ced83a 	srl	r7,r5,r7
    be30:	22400a26 	beq	r4,r9,be5c <__adddf3+0x894>
    be34:	02401004 	movi	r9,64
    be38:	4909c83a 	sub	r4,r9,r4
    be3c:	290a983a 	sll	r5,r5,r4
    be40:	2c62b03a 	or	r17,r5,r17
    be44:	8822c03a 	cmpne	r17,r17,zero
    be48:	89e2b03a 	or	r17,r17,r7
    be4c:	0009883a 	mov	r4,zero
    be50:	003f9206 	br	bc9c <__adddf3+0x6d4>
    be54:	000b883a 	mov	r5,zero
    be58:	003fdc06 	br	bdcc <__adddf3+0x804>
    be5c:	000b883a 	mov	r5,zero
    be60:	003ff706 	br	be40 <__adddf3+0x878>

0000be64 <__divdf3>:
    be64:	defff004 	addi	sp,sp,-64
    be68:	dc800815 	stw	r18,32(sp)
    be6c:	2824d53a 	srli	r18,r5,20
    be70:	dd800c15 	stw	r22,48(sp)
    be74:	282cd7fa 	srli	r22,r5,31
    be78:	dc000615 	stw	r16,24(sp)
    be7c:	04000434 	movhi	r16,16
    be80:	df000e15 	stw	fp,56(sp)
    be84:	dd000a15 	stw	r20,40(sp)
    be88:	dcc00915 	stw	r19,36(sp)
    be8c:	dc400715 	stw	r17,28(sp)
    be90:	843fffc4 	addi	r16,r16,-1
    be94:	dfc00f15 	stw	ra,60(sp)
    be98:	ddc00d15 	stw	r23,52(sp)
    be9c:	dd400b15 	stw	r21,44(sp)
    bea0:	9481ffcc 	andi	r18,r18,2047
    bea4:	2029883a 	mov	r20,r4
    bea8:	2027883a 	mov	r19,r4
    beac:	2c22703a 	and	r17,r5,r16
    beb0:	b7003fcc 	andi	fp,r22,255
    beb4:	90005e26 	beq	r18,zero,c030 <__divdf3+0x1cc>
    beb8:	0081ffc4 	movi	r2,2047
    bebc:	90803526 	beq	r18,r2,bf94 <__divdf3+0x130>
    bec0:	8c000434 	orhi	r16,r17,16
    bec4:	2004d77a 	srli	r2,r4,29
    bec8:	802090fa 	slli	r16,r16,3
    becc:	202690fa 	slli	r19,r4,3
    bed0:	94bf0044 	addi	r18,r18,-1023
    bed4:	80a2b03a 	or	r17,r16,r2
    bed8:	0029883a 	mov	r20,zero
    bedc:	0011883a 	mov	r8,zero
    bee0:	380ad53a 	srli	r5,r7,20
    bee4:	382ed7fa 	srli	r23,r7,31
    bee8:	04000434 	movhi	r16,16
    beec:	843fffc4 	addi	r16,r16,-1
    bef0:	2941ffcc 	andi	r5,r5,2047
    bef4:	302b883a 	mov	r21,r6
    bef8:	3c20703a 	and	r16,r7,r16
    befc:	ba403fcc 	andi	r9,r23,255
    bf00:	28006726 	beq	r5,zero,c0a0 <__divdf3+0x23c>
    bf04:	0081ffc4 	movi	r2,2047
    bf08:	28805f26 	beq	r5,r2,c088 <__divdf3+0x224>
    bf0c:	84000434 	orhi	r16,r16,16
    bf10:	3004d77a 	srli	r2,r6,29
    bf14:	802090fa 	slli	r16,r16,3
    bf18:	302a90fa 	slli	r21,r6,3
    bf1c:	297f0044 	addi	r5,r5,-1023
    bf20:	80a0b03a 	or	r16,r16,r2
    bf24:	000f883a 	mov	r7,zero
    bf28:	3d06b03a 	or	r3,r7,r20
    bf2c:	180690ba 	slli	r3,r3,2
    bf30:	00800074 	movhi	r2,1
    bf34:	10afd504 	addi	r2,r2,-16556
    bf38:	1885883a 	add	r2,r3,r2
    bf3c:	10800017 	ldw	r2,0(r2)
    bf40:	b5c8f03a 	xor	r4,r22,r23
    bf44:	200d883a 	mov	r6,r4
    bf48:	25003fcc 	andi	r20,r4,255
    bf4c:	9165c83a 	sub	r18,r18,r5
    bf50:	1000683a 	jmp	r2
    bf54:	0000c19c 	xori	zero,zero,774
    bf58:	0000bfcc 	andi	zero,zero,767
    bf5c:	0000c160 	cmpeqi	zero,zero,773
    bf60:	0000bfb0 	cmpltui	zero,zero,766
    bf64:	0000c160 	cmpeqi	zero,zero,773
    bf68:	0000c134 	movhi	zero,772
    bf6c:	0000c160 	cmpeqi	zero,zero,773
    bf70:	0000bfb0 	cmpltui	zero,zero,766
    bf74:	0000bfcc 	andi	zero,zero,767
    bf78:	0000bfcc 	andi	zero,zero,767
    bf7c:	0000c134 	movhi	zero,772
    bf80:	0000bfb0 	cmpltui	zero,zero,766
    bf84:	0000bfc0 	call	bfc <uart_init+0x38>
    bf88:	0000bfc0 	call	bfc <uart_init+0x38>
    bf8c:	0000bfc0 	call	bfc <uart_init+0x38>
    bf90:	0000c170 	cmpltui	zero,zero,773
    bf94:	8904b03a 	or	r2,r17,r4
    bf98:	1000631e 	bne	r2,zero,c128 <__divdf3+0x2c4>
    bf9c:	05000204 	movi	r20,8
    bfa0:	0023883a 	mov	r17,zero
    bfa4:	0027883a 	mov	r19,zero
    bfa8:	02000084 	movi	r8,2
    bfac:	003fcc06 	br	bee0 <__divdf3+0x7c>
    bfb0:	8023883a 	mov	r17,r16
    bfb4:	a827883a 	mov	r19,r21
    bfb8:	4839883a 	mov	fp,r9
    bfbc:	3811883a 	mov	r8,r7
    bfc0:	00800084 	movi	r2,2
    bfc4:	4081531e 	bne	r8,r2,c514 <__divdf3+0x6b0>
    bfc8:	e029883a 	mov	r20,fp
    bfcc:	a180004c 	andi	r6,r20,1
    bfd0:	0201ffc4 	movi	r8,2047
    bfd4:	000b883a 	mov	r5,zero
    bfd8:	0027883a 	mov	r19,zero
    bfdc:	4010953a 	slli	r8,r8,20
    bfe0:	30c03fcc 	andi	r3,r6,255
    bfe4:	04000434 	movhi	r16,16
    bfe8:	180697fa 	slli	r3,r3,31
    bfec:	843fffc4 	addi	r16,r16,-1
    bff0:	2c20703a 	and	r16,r5,r16
    bff4:	8220b03a 	or	r16,r16,r8
    bff8:	80c6b03a 	or	r3,r16,r3
    bffc:	9805883a 	mov	r2,r19
    c000:	dfc00f17 	ldw	ra,60(sp)
    c004:	df000e17 	ldw	fp,56(sp)
    c008:	ddc00d17 	ldw	r23,52(sp)
    c00c:	dd800c17 	ldw	r22,48(sp)
    c010:	dd400b17 	ldw	r21,44(sp)
    c014:	dd000a17 	ldw	r20,40(sp)
    c018:	dcc00917 	ldw	r19,36(sp)
    c01c:	dc800817 	ldw	r18,32(sp)
    c020:	dc400717 	ldw	r17,28(sp)
    c024:	dc000617 	ldw	r16,24(sp)
    c028:	dec01004 	addi	sp,sp,64
    c02c:	f800283a 	ret
    c030:	8904b03a 	or	r2,r17,r4
    c034:	10003726 	beq	r2,zero,c114 <__divdf3+0x2b0>
    c038:	88014d26 	beq	r17,zero,c570 <__divdf3+0x70c>
    c03c:	8809883a 	mov	r4,r17
    c040:	d9800215 	stw	r6,8(sp)
    c044:	d9c00515 	stw	r7,20(sp)
    c048:	000145c0 	call	145c <__clzsi2>
    c04c:	d9800217 	ldw	r6,8(sp)
    c050:	d9c00517 	ldw	r7,20(sp)
    c054:	1007883a 	mov	r3,r2
    c058:	01000a04 	movi	r4,40
    c05c:	1cfffe04 	addi	r19,r3,-8
    c060:	20c9c83a 	sub	r4,r4,r3
    c064:	8cca983a 	sll	r5,r17,r19
    c068:	a108d83a 	srl	r4,r20,r4
    c06c:	a4e6983a 	sll	r19,r20,r19
    c070:	2162b03a 	or	r17,r4,r5
    c074:	04bf0344 	movi	r18,-1011
    c078:	90e5c83a 	sub	r18,r18,r3
    c07c:	0029883a 	mov	r20,zero
    c080:	0011883a 	mov	r8,zero
    c084:	003f9606 	br	bee0 <__divdf3+0x7c>
    c088:	8184b03a 	or	r2,r16,r6
    c08c:	10001f1e 	bne	r2,zero,c10c <__divdf3+0x2a8>
    c090:	0021883a 	mov	r16,zero
    c094:	002b883a 	mov	r21,zero
    c098:	01c00084 	movi	r7,2
    c09c:	003fa206 	br	bf28 <__divdf3+0xc4>
    c0a0:	8184b03a 	or	r2,r16,r6
    c0a4:	10001526 	beq	r2,zero,c0fc <__divdf3+0x298>
    c0a8:	80013d26 	beq	r16,zero,c5a0 <__divdf3+0x73c>
    c0ac:	8009883a 	mov	r4,r16
    c0b0:	d9800215 	stw	r6,8(sp)
    c0b4:	da000315 	stw	r8,12(sp)
    c0b8:	da400415 	stw	r9,16(sp)
    c0bc:	000145c0 	call	145c <__clzsi2>
    c0c0:	d9800217 	ldw	r6,8(sp)
    c0c4:	da000317 	ldw	r8,12(sp)
    c0c8:	da400417 	ldw	r9,16(sp)
    c0cc:	1007883a 	mov	r3,r2
    c0d0:	01000a04 	movi	r4,40
    c0d4:	1d7ffe04 	addi	r21,r3,-8
    c0d8:	20c9c83a 	sub	r4,r4,r3
    c0dc:	8560983a 	sll	r16,r16,r21
    c0e0:	3108d83a 	srl	r4,r6,r4
    c0e4:	356a983a 	sll	r21,r6,r21
    c0e8:	2420b03a 	or	r16,r4,r16
    c0ec:	017f0344 	movi	r5,-1011
    c0f0:	28cbc83a 	sub	r5,r5,r3
    c0f4:	000f883a 	mov	r7,zero
    c0f8:	003f8b06 	br	bf28 <__divdf3+0xc4>
    c0fc:	0021883a 	mov	r16,zero
    c100:	002b883a 	mov	r21,zero
    c104:	01c00044 	movi	r7,1
    c108:	003f8706 	br	bf28 <__divdf3+0xc4>
    c10c:	01c000c4 	movi	r7,3
    c110:	003f8506 	br	bf28 <__divdf3+0xc4>
    c114:	05000104 	movi	r20,4
    c118:	0023883a 	mov	r17,zero
    c11c:	0027883a 	mov	r19,zero
    c120:	02000044 	movi	r8,1
    c124:	003f6e06 	br	bee0 <__divdf3+0x7c>
    c128:	05000304 	movi	r20,12
    c12c:	020000c4 	movi	r8,3
    c130:	003f6b06 	br	bee0 <__divdf3+0x7c>
    c134:	01400434 	movhi	r5,16
    c138:	000d883a 	mov	r6,zero
    c13c:	297fffc4 	addi	r5,r5,-1
    c140:	04ffffc4 	movi	r19,-1
    c144:	0201ffc4 	movi	r8,2047
    c148:	003fa406 	br	bfdc <__divdf3+0x178>
    c14c:	043f0084 	movi	r16,-1022
    c150:	84a1c83a 	sub	r16,r16,r18
    c154:	00800e04 	movi	r2,56
    c158:	14014d0e 	bge	r2,r16,c690 <__divdf3+0x82c>
    c15c:	a180004c 	andi	r6,r20,1
    c160:	0011883a 	mov	r8,zero
    c164:	000b883a 	mov	r5,zero
    c168:	0027883a 	mov	r19,zero
    c16c:	003f9b06 	br	bfdc <__divdf3+0x178>
    c170:	8880022c 	andhi	r2,r17,8
    c174:	1000f026 	beq	r2,zero,c538 <__divdf3+0x6d4>
    c178:	8080022c 	andhi	r2,r16,8
    c17c:	1000ee1e 	bne	r2,zero,c538 <__divdf3+0x6d4>
    c180:	00800434 	movhi	r2,16
    c184:	81400234 	orhi	r5,r16,8
    c188:	10bfffc4 	addi	r2,r2,-1
    c18c:	b80d883a 	mov	r6,r23
    c190:	288a703a 	and	r5,r5,r2
    c194:	a827883a 	mov	r19,r21
    c198:	003fea06 	br	c144 <__divdf3+0x2e0>
    c19c:	84411c36 	bltu	r16,r17,c610 <__divdf3+0x7ac>
    c1a0:	8c011a26 	beq	r17,r16,c60c <__divdf3+0x7a8>
    c1a4:	94bfffc4 	addi	r18,r18,-1
    c1a8:	dcc00015 	stw	r19,0(sp)
    c1ac:	8811883a 	mov	r8,r17
    c1b0:	002d883a 	mov	r22,zero
    c1b4:	a80cd63a 	srli	r6,r21,24
    c1b8:	8020923a 	slli	r16,r16,8
    c1bc:	a82a923a 	slli	r21,r21,8
    c1c0:	4009883a 	mov	r4,r8
    c1c4:	342eb03a 	or	r23,r6,r16
    c1c8:	dd400115 	stw	r21,4(sp)
    c1cc:	b82ad43a 	srli	r21,r23,16
    c1d0:	da000315 	stw	r8,12(sp)
    c1d4:	bcffffcc 	andi	r19,r23,65535
    c1d8:	a80b883a 	mov	r5,r21
    c1dc:	000b5b80 	call	b5b8 <__udivsi3>
    c1e0:	1009883a 	mov	r4,r2
    c1e4:	980b883a 	mov	r5,r19
    c1e8:	1023883a 	mov	r17,r2
    c1ec:	0000dc40 	call	dc4 <__mulsi3>
    c1f0:	da000317 	ldw	r8,12(sp)
    c1f4:	a80b883a 	mov	r5,r21
    c1f8:	1039883a 	mov	fp,r2
    c1fc:	4009883a 	mov	r4,r8
    c200:	000b5c00 	call	b5c0 <__umodsi3>
    c204:	d8c00017 	ldw	r3,0(sp)
    c208:	1004943a 	slli	r2,r2,16
    c20c:	1810d43a 	srli	r8,r3,16
    c210:	120eb03a 	or	r7,r2,r8
    c214:	3f00062e 	bgeu	r7,fp,c230 <__divdf3+0x3cc>
    c218:	3dcf883a 	add	r7,r7,r23
    c21c:	88bfffc4 	addi	r2,r17,-1
    c220:	3dc10a36 	bltu	r7,r23,c64c <__divdf3+0x7e8>
    c224:	3f01092e 	bgeu	r7,fp,c64c <__divdf3+0x7e8>
    c228:	8c7fff84 	addi	r17,r17,-2
    c22c:	3dcf883a 	add	r7,r7,r23
    c230:	3f39c83a 	sub	fp,r7,fp
    c234:	e009883a 	mov	r4,fp
    c238:	a80b883a 	mov	r5,r21
    c23c:	000b5b80 	call	b5b8 <__udivsi3>
    c240:	1009883a 	mov	r4,r2
    c244:	980b883a 	mov	r5,r19
    c248:	1021883a 	mov	r16,r2
    c24c:	0000dc40 	call	dc4 <__mulsi3>
    c250:	e009883a 	mov	r4,fp
    c254:	a80b883a 	mov	r5,r21
    c258:	d8800315 	stw	r2,12(sp)
    c25c:	000b5c00 	call	b5c0 <__umodsi3>
    c260:	d9000017 	ldw	r4,0(sp)
    c264:	1004943a 	slli	r2,r2,16
    c268:	da000317 	ldw	r8,12(sp)
    c26c:	20ffffcc 	andi	r3,r4,65535
    c270:	10ceb03a 	or	r7,r2,r3
    c274:	3a00062e 	bgeu	r7,r8,c290 <__divdf3+0x42c>
    c278:	3dcf883a 	add	r7,r7,r23
    c27c:	80bfffc4 	addi	r2,r16,-1
    c280:	3dc0f036 	bltu	r7,r23,c644 <__divdf3+0x7e0>
    c284:	3a00ef2e 	bgeu	r7,r8,c644 <__divdf3+0x7e0>
    c288:	843fff84 	addi	r16,r16,-2
    c28c:	3dcf883a 	add	r7,r7,r23
    c290:	d8c00117 	ldw	r3,4(sp)
    c294:	8822943a 	slli	r17,r17,16
    c298:	3a0fc83a 	sub	r7,r7,r8
    c29c:	1806d43a 	srli	r3,r3,16
    c2a0:	8462b03a 	or	r17,r16,r17
    c2a4:	8affffcc 	andi	r11,r17,65535
    c2a8:	d8c00015 	stw	r3,0(sp)
    c2ac:	d8c00117 	ldw	r3,4(sp)
    c2b0:	8820d43a 	srli	r16,r17,16
    c2b4:	5809883a 	mov	r4,r11
    c2b8:	1f3fffcc 	andi	fp,r3,65535
    c2bc:	e00b883a 	mov	r5,fp
    c2c0:	d9c00515 	stw	r7,20(sp)
    c2c4:	dac00215 	stw	r11,8(sp)
    c2c8:	0000dc40 	call	dc4 <__mulsi3>
    c2cc:	8009883a 	mov	r4,r16
    c2d0:	e00b883a 	mov	r5,fp
    c2d4:	d8800415 	stw	r2,16(sp)
    c2d8:	0000dc40 	call	dc4 <__mulsi3>
    c2dc:	d9400017 	ldw	r5,0(sp)
    c2e0:	8009883a 	mov	r4,r16
    c2e4:	d8800315 	stw	r2,12(sp)
    c2e8:	0000dc40 	call	dc4 <__mulsi3>
    c2ec:	dac00217 	ldw	r11,8(sp)
    c2f0:	d9400017 	ldw	r5,0(sp)
    c2f4:	d8800215 	stw	r2,8(sp)
    c2f8:	5809883a 	mov	r4,r11
    c2fc:	0000dc40 	call	dc4 <__mulsi3>
    c300:	da400417 	ldw	r9,16(sp)
    c304:	da800317 	ldw	r10,12(sp)
    c308:	d9c00517 	ldw	r7,20(sp)
    c30c:	480ad43a 	srli	r5,r9,16
    c310:	5085883a 	add	r2,r10,r2
    c314:	db000217 	ldw	r12,8(sp)
    c318:	1151883a 	add	r8,r2,r5
    c31c:	4280022e 	bgeu	r8,r10,c328 <__divdf3+0x4c4>
    c320:	00800074 	movhi	r2,1
    c324:	6099883a 	add	r12,r12,r2
    c328:	400ad43a 	srli	r5,r8,16
    c32c:	4010943a 	slli	r8,r8,16
    c330:	4c3fffcc 	andi	r16,r9,65535
    c334:	6149883a 	add	r4,r12,r5
    c338:	4411883a 	add	r8,r8,r16
    c33c:	3900a736 	bltu	r7,r4,c5dc <__divdf3+0x778>
    c340:	3900c426 	beq	r7,r4,c654 <__divdf3+0x7f0>
    c344:	3909c83a 	sub	r4,r7,r4
    c348:	b221c83a 	sub	r16,r22,r8
    c34c:	b42d803a 	cmpltu	r22,r22,r16
    c350:	25adc83a 	sub	r22,r4,r22
    c354:	b5c0c626 	beq	r22,r23,c670 <__divdf3+0x80c>
    c358:	b009883a 	mov	r4,r22
    c35c:	a80b883a 	mov	r5,r21
    c360:	000b5b80 	call	b5b8 <__udivsi3>
    c364:	1009883a 	mov	r4,r2
    c368:	980b883a 	mov	r5,r19
    c36c:	d8800315 	stw	r2,12(sp)
    c370:	0000dc40 	call	dc4 <__mulsi3>
    c374:	a80b883a 	mov	r5,r21
    c378:	b009883a 	mov	r4,r22
    c37c:	d8800415 	stw	r2,16(sp)
    c380:	000b5c00 	call	b5c0 <__umodsi3>
    c384:	1004943a 	slli	r2,r2,16
    c388:	800ed43a 	srli	r7,r16,16
    c38c:	da400417 	ldw	r9,16(sp)
    c390:	da000317 	ldw	r8,12(sp)
    c394:	11cab03a 	or	r5,r2,r7
    c398:	2a40062e 	bgeu	r5,r9,c3b4 <__divdf3+0x550>
    c39c:	2dcb883a 	add	r5,r5,r23
    c3a0:	40bfffc4 	addi	r2,r8,-1
    c3a4:	2dc0b436 	bltu	r5,r23,c678 <__divdf3+0x814>
    c3a8:	2a40b32e 	bgeu	r5,r9,c678 <__divdf3+0x814>
    c3ac:	423fff84 	addi	r8,r8,-2
    c3b0:	2dcb883a 	add	r5,r5,r23
    c3b4:	2a6dc83a 	sub	r22,r5,r9
    c3b8:	b009883a 	mov	r4,r22
    c3bc:	a80b883a 	mov	r5,r21
    c3c0:	da000315 	stw	r8,12(sp)
    c3c4:	000b5b80 	call	b5b8 <__udivsi3>
    c3c8:	980b883a 	mov	r5,r19
    c3cc:	1009883a 	mov	r4,r2
    c3d0:	d8800415 	stw	r2,16(sp)
    c3d4:	0000dc40 	call	dc4 <__mulsi3>
    c3d8:	b009883a 	mov	r4,r22
    c3dc:	a80b883a 	mov	r5,r21
    c3e0:	1027883a 	mov	r19,r2
    c3e4:	000b5c00 	call	b5c0 <__umodsi3>
    c3e8:	1004943a 	slli	r2,r2,16
    c3ec:	843fffcc 	andi	r16,r16,65535
    c3f0:	da000317 	ldw	r8,12(sp)
    c3f4:	140eb03a 	or	r7,r2,r16
    c3f8:	da400417 	ldw	r9,16(sp)
    c3fc:	3cc0062e 	bgeu	r7,r19,c418 <__divdf3+0x5b4>
    c400:	3dcf883a 	add	r7,r7,r23
    c404:	48bfffc4 	addi	r2,r9,-1
    c408:	3dc09d36 	bltu	r7,r23,c680 <__divdf3+0x81c>
    c40c:	3cc09c2e 	bgeu	r7,r19,c680 <__divdf3+0x81c>
    c410:	4a7fff84 	addi	r9,r9,-2
    c414:	3dcf883a 	add	r7,r7,r23
    c418:	4010943a 	slli	r8,r8,16
    c41c:	3cebc83a 	sub	r21,r7,r19
    c420:	e00b883a 	mov	r5,fp
    c424:	4a26b03a 	or	r19,r9,r8
    c428:	99ffffcc 	andi	r7,r19,65535
    c42c:	9820d43a 	srli	r16,r19,16
    c430:	3809883a 	mov	r4,r7
    c434:	d9c00515 	stw	r7,20(sp)
    c438:	0000dc40 	call	dc4 <__mulsi3>
    c43c:	8009883a 	mov	r4,r16
    c440:	e00b883a 	mov	r5,fp
    c444:	102d883a 	mov	r22,r2
    c448:	0000dc40 	call	dc4 <__mulsi3>
    c44c:	d9400017 	ldw	r5,0(sp)
    c450:	8009883a 	mov	r4,r16
    c454:	1039883a 	mov	fp,r2
    c458:	0000dc40 	call	dc4 <__mulsi3>
    c45c:	d9c00517 	ldw	r7,20(sp)
    c460:	d9400017 	ldw	r5,0(sp)
    c464:	1021883a 	mov	r16,r2
    c468:	3809883a 	mov	r4,r7
    c46c:	0000dc40 	call	dc4 <__mulsi3>
    c470:	b008d43a 	srli	r4,r22,16
    c474:	e085883a 	add	r2,fp,r2
    c478:	1109883a 	add	r4,r2,r4
    c47c:	2700022e 	bgeu	r4,fp,c488 <__divdf3+0x624>
    c480:	00800074 	movhi	r2,1
    c484:	80a1883a 	add	r16,r16,r2
    c488:	200ad43a 	srli	r5,r4,16
    c48c:	2008943a 	slli	r4,r4,16
    c490:	b5bfffcc 	andi	r22,r22,65535
    c494:	8145883a 	add	r2,r16,r5
    c498:	2589883a 	add	r4,r4,r22
    c49c:	a8802c36 	bltu	r21,r2,c550 <__divdf3+0x6ec>
    c4a0:	a880a426 	beq	r21,r2,c734 <__divdf3+0x8d0>
    c4a4:	9cc00054 	ori	r19,r19,1
    c4a8:	9200ffc4 	addi	r8,r18,1023
    c4ac:	023f270e 	bge	zero,r8,c14c <__divdf3+0x2e8>
    c4b0:	988001cc 	andi	r2,r19,7
    c4b4:	10000726 	beq	r2,zero,c4d4 <__divdf3+0x670>
    c4b8:	990003cc 	andi	r4,r19,15
    c4bc:	00800104 	movi	r2,4
    c4c0:	20800426 	beq	r4,r2,c4d4 <__divdf3+0x670>
    c4c4:	9885883a 	add	r2,r19,r2
    c4c8:	14e7803a 	cmpltu	r19,r2,r19
    c4cc:	8ce3883a 	add	r17,r17,r19
    c4d0:	1027883a 	mov	r19,r2
    c4d4:	8880402c 	andhi	r2,r17,256
    c4d8:	10000426 	beq	r2,zero,c4ec <__divdf3+0x688>
    c4dc:	00bfc034 	movhi	r2,65280
    c4e0:	10bfffc4 	addi	r2,r2,-1
    c4e4:	92010004 	addi	r8,r18,1024
    c4e8:	88a2703a 	and	r17,r17,r2
    c4ec:	0081ff84 	movi	r2,2046
    c4f0:	123eb616 	blt	r2,r8,bfcc <__divdf3+0x168>
    c4f4:	9826d0fa 	srli	r19,r19,3
    c4f8:	8804977a 	slli	r2,r17,29
    c4fc:	8820927a 	slli	r16,r17,9
    c500:	4201ffcc 	andi	r8,r8,2047
    c504:	14e6b03a 	or	r19,r2,r19
    c508:	800ad33a 	srli	r5,r16,12
    c50c:	a180004c 	andi	r6,r20,1
    c510:	003eb206 	br	bfdc <__divdf3+0x178>
    c514:	008000c4 	movi	r2,3
    c518:	4080ac26 	beq	r8,r2,c7cc <__divdf3+0x968>
    c51c:	00800044 	movi	r2,1
    c520:	4080591e 	bne	r8,r2,c688 <__divdf3+0x824>
    c524:	e00d883a 	mov	r6,fp
    c528:	0011883a 	mov	r8,zero
    c52c:	000b883a 	mov	r5,zero
    c530:	0027883a 	mov	r19,zero
    c534:	003ea906 	br	bfdc <__divdf3+0x178>
    c538:	00800434 	movhi	r2,16
    c53c:	89400234 	orhi	r5,r17,8
    c540:	10bfffc4 	addi	r2,r2,-1
    c544:	b00d883a 	mov	r6,r22
    c548:	288a703a 	and	r5,r5,r2
    c54c:	003efd06 	br	c144 <__divdf3+0x2e0>
    c550:	adcf883a 	add	r7,r21,r23
    c554:	997fffc4 	addi	r5,r19,-1
    c558:	3dc0412e 	bgeu	r7,r23,c660 <__divdf3+0x7fc>
    c55c:	2827883a 	mov	r19,r5
    c560:	38bfd01e 	bne	r7,r2,c4a4 <__divdf3+0x640>
    c564:	d8c00117 	ldw	r3,4(sp)
    c568:	193fce1e 	bne	r3,r4,c4a4 <__divdf3+0x640>
    c56c:	003fce06 	br	c4a8 <__divdf3+0x644>
    c570:	d9800215 	stw	r6,8(sp)
    c574:	d9c00515 	stw	r7,20(sp)
    c578:	000145c0 	call	145c <__clzsi2>
    c57c:	10c00804 	addi	r3,r2,32
    c580:	010009c4 	movi	r4,39
    c584:	d9800217 	ldw	r6,8(sp)
    c588:	d9c00517 	ldw	r7,20(sp)
    c58c:	20feb20e 	bge	r4,r3,c058 <__divdf3+0x1f4>
    c590:	117ffe04 	addi	r5,r2,-8
    c594:	a162983a 	sll	r17,r20,r5
    c598:	0027883a 	mov	r19,zero
    c59c:	003eb506 	br	c074 <__divdf3+0x210>
    c5a0:	3009883a 	mov	r4,r6
    c5a4:	d9800215 	stw	r6,8(sp)
    c5a8:	da000315 	stw	r8,12(sp)
    c5ac:	da400415 	stw	r9,16(sp)
    c5b0:	000145c0 	call	145c <__clzsi2>
    c5b4:	10c00804 	addi	r3,r2,32
    c5b8:	010009c4 	movi	r4,39
    c5bc:	d9800217 	ldw	r6,8(sp)
    c5c0:	da000317 	ldw	r8,12(sp)
    c5c4:	da400417 	ldw	r9,16(sp)
    c5c8:	20fec10e 	bge	r4,r3,c0d0 <__divdf3+0x26c>
    c5cc:	10bffe04 	addi	r2,r2,-8
    c5d0:	a8a0983a 	sll	r16,r21,r2
    c5d4:	002b883a 	mov	r21,zero
    c5d8:	003ec406 	br	c0ec <__divdf3+0x288>
    c5dc:	d8c00117 	ldw	r3,4(sp)
    c5e0:	b0ed883a 	add	r22,r22,r3
    c5e4:	b0c5803a 	cmpltu	r2,r22,r3
    c5e8:	15c5883a 	add	r2,r2,r23
    c5ec:	11cf883a 	add	r7,r2,r7
    c5f0:	88bfffc4 	addi	r2,r17,-1
    c5f4:	b9c00d2e 	bgeu	r23,r7,c62c <__divdf3+0x7c8>
    c5f8:	39003f36 	bltu	r7,r4,c6f8 <__divdf3+0x894>
    c5fc:	21c06a26 	beq	r4,r7,c7a8 <__divdf3+0x944>
    c600:	3909c83a 	sub	r4,r7,r4
    c604:	1023883a 	mov	r17,r2
    c608:	003f4f06 	br	c348 <__divdf3+0x4e4>
    c60c:	9d7ee536 	bltu	r19,r21,c1a4 <__divdf3+0x340>
    c610:	982ed07a 	srli	r23,r19,1
    c614:	880497fa 	slli	r2,r17,31
    c618:	8810d07a 	srli	r8,r17,1
    c61c:	982c97fa 	slli	r22,r19,31
    c620:	b884b03a 	or	r2,r23,r2
    c624:	d8800015 	stw	r2,0(sp)
    c628:	003ee206 	br	c1b4 <__divdf3+0x350>
    c62c:	3dfff41e 	bne	r7,r23,c600 <__divdf3+0x79c>
    c630:	d8c00117 	ldw	r3,4(sp)
    c634:	b0fff02e 	bgeu	r22,r3,c5f8 <__divdf3+0x794>
    c638:	b909c83a 	sub	r4,r23,r4
    c63c:	1023883a 	mov	r17,r2
    c640:	003f4106 	br	c348 <__divdf3+0x4e4>
    c644:	1021883a 	mov	r16,r2
    c648:	003f1106 	br	c290 <__divdf3+0x42c>
    c64c:	1023883a 	mov	r17,r2
    c650:	003ef706 	br	c230 <__divdf3+0x3cc>
    c654:	b23fe136 	bltu	r22,r8,c5dc <__divdf3+0x778>
    c658:	0009883a 	mov	r4,zero
    c65c:	003f3a06 	br	c348 <__divdf3+0x4e4>
    c660:	38802c36 	bltu	r7,r2,c714 <__divdf3+0x8b0>
    c664:	11c05326 	beq	r2,r7,c7b4 <__divdf3+0x950>
    c668:	2827883a 	mov	r19,r5
    c66c:	003f8d06 	br	c4a4 <__divdf3+0x640>
    c670:	04ffffc4 	movi	r19,-1
    c674:	003f8c06 	br	c4a8 <__divdf3+0x644>
    c678:	1011883a 	mov	r8,r2
    c67c:	003f4d06 	br	c3b4 <__divdf3+0x550>
    c680:	1013883a 	mov	r9,r2
    c684:	003f6406 	br	c418 <__divdf3+0x5b4>
    c688:	e029883a 	mov	r20,fp
    c68c:	003f8606 	br	c4a8 <__divdf3+0x644>
    c690:	008007c4 	movi	r2,31
    c694:	14002a16 	blt	r2,r16,c740 <__divdf3+0x8dc>
    c698:	91410784 	addi	r5,r18,1054
    c69c:	9c0cd83a 	srl	r6,r19,r16
    c6a0:	8948983a 	sll	r4,r17,r5
    c6a4:	9944983a 	sll	r2,r19,r5
    c6a8:	8c20d83a 	srl	r16,r17,r16
    c6ac:	3108b03a 	or	r4,r6,r4
    c6b0:	1004c03a 	cmpne	r2,r2,zero
    c6b4:	2084b03a 	or	r2,r4,r2
    c6b8:	110001cc 	andi	r4,r2,7
    c6bc:	20000726 	beq	r4,zero,c6dc <__divdf3+0x878>
    c6c0:	114003cc 	andi	r5,r2,15
    c6c4:	01000104 	movi	r4,4
    c6c8:	29000426 	beq	r5,r4,c6dc <__divdf3+0x878>
    c6cc:	11000104 	addi	r4,r2,4
    c6d0:	2085803a 	cmpltu	r2,r4,r2
    c6d4:	80a1883a 	add	r16,r16,r2
    c6d8:	2005883a 	mov	r2,r4
    c6dc:	8100202c 	andhi	r4,r16,128
    c6e0:	20002d26 	beq	r4,zero,c798 <__divdf3+0x934>
    c6e4:	a180004c 	andi	r6,r20,1
    c6e8:	02000044 	movi	r8,1
    c6ec:	000b883a 	mov	r5,zero
    c6f0:	0027883a 	mov	r19,zero
    c6f4:	003e3906 	br	bfdc <__divdf3+0x178>
    c6f8:	d8c00117 	ldw	r3,4(sp)
    c6fc:	8c7fff84 	addi	r17,r17,-2
    c700:	b0ed883a 	add	r22,r22,r3
    c704:	b0c5803a 	cmpltu	r2,r22,r3
    c708:	15c5883a 	add	r2,r2,r23
    c70c:	11cf883a 	add	r7,r2,r7
    c710:	003f0c06 	br	c344 <__divdf3+0x4e0>
    c714:	d8c00117 	ldw	r3,4(sp)
    c718:	997fff84 	addi	r5,r19,-2
    c71c:	18d1883a 	add	r8,r3,r3
    c720:	40c7803a 	cmpltu	r3,r8,r3
    c724:	1dcd883a 	add	r6,r3,r23
    c728:	398f883a 	add	r7,r7,r6
    c72c:	da000115 	stw	r8,4(sp)
    c730:	003f8a06 	br	c55c <__divdf3+0x6f8>
    c734:	203f861e 	bne	r4,zero,c550 <__divdf3+0x6ec>
    c738:	d8000115 	stw	zero,4(sp)
    c73c:	003f8906 	br	c564 <__divdf3+0x700>
    c740:	00bef884 	movi	r2,-1054
    c744:	1485c83a 	sub	r2,r2,r18
    c748:	01000804 	movi	r4,32
    c74c:	8884d83a 	srl	r2,r17,r2
    c750:	81001c26 	beq	r16,r4,c7c4 <__divdf3+0x960>
    c754:	91010f84 	addi	r4,r18,1086
    c758:	8908983a 	sll	r4,r17,r4
    c75c:	24c8b03a 	or	r4,r4,r19
    c760:	2008c03a 	cmpne	r4,r4,zero
    c764:	2084b03a 	or	r2,r4,r2
    c768:	140001cc 	andi	r16,r2,7
    c76c:	8000061e 	bne	r16,zero,c788 <__divdf3+0x924>
    c770:	000b883a 	mov	r5,zero
    c774:	1004d0fa 	srli	r2,r2,3
    c778:	a180004c 	andi	r6,r20,1
    c77c:	0011883a 	mov	r8,zero
    c780:	1426b03a 	or	r19,r2,r16
    c784:	003e1506 	br	bfdc <__divdf3+0x178>
    c788:	114003cc 	andi	r5,r2,15
    c78c:	01000104 	movi	r4,4
    c790:	0021883a 	mov	r16,zero
    c794:	293fcd1e 	bne	r5,r4,c6cc <__divdf3+0x868>
    c798:	800a927a 	slli	r5,r16,9
    c79c:	8020977a 	slli	r16,r16,29
    c7a0:	280ad33a 	srli	r5,r5,12
    c7a4:	003ff306 	br	c774 <__divdf3+0x910>
    c7a8:	b23fd336 	bltu	r22,r8,c6f8 <__divdf3+0x894>
    c7ac:	1023883a 	mov	r17,r2
    c7b0:	003fa906 	br	c658 <__divdf3+0x7f4>
    c7b4:	d8c00117 	ldw	r3,4(sp)
    c7b8:	193fd636 	bltu	r3,r4,c714 <__divdf3+0x8b0>
    c7bc:	2827883a 	mov	r19,r5
    c7c0:	003f6806 	br	c564 <__divdf3+0x700>
    c7c4:	0009883a 	mov	r4,zero
    c7c8:	003fe406 	br	c75c <__divdf3+0x8f8>
    c7cc:	00800434 	movhi	r2,16
    c7d0:	89400234 	orhi	r5,r17,8
    c7d4:	10bfffc4 	addi	r2,r2,-1
    c7d8:	e00d883a 	mov	r6,fp
    c7dc:	288a703a 	and	r5,r5,r2
    c7e0:	003e5806 	br	c144 <__divdf3+0x2e0>

0000c7e4 <__eqdf2>:
    c7e4:	2804d53a 	srli	r2,r5,20
    c7e8:	3806d53a 	srli	r3,r7,20
    c7ec:	02000434 	movhi	r8,16
    c7f0:	423fffc4 	addi	r8,r8,-1
    c7f4:	1081ffcc 	andi	r2,r2,2047
    c7f8:	0241ffc4 	movi	r9,2047
    c7fc:	2a14703a 	and	r10,r5,r8
    c800:	18c1ffcc 	andi	r3,r3,2047
    c804:	3a10703a 	and	r8,r7,r8
    c808:	280ad7fa 	srli	r5,r5,31
    c80c:	380ed7fa 	srli	r7,r7,31
    c810:	12400f26 	beq	r2,r9,c850 <__eqdf2+0x6c>
    c814:	0241ffc4 	movi	r9,2047
    c818:	1a400326 	beq	r3,r9,c828 <__eqdf2+0x44>
    c81c:	10c00526 	beq	r2,r3,c834 <__eqdf2+0x50>
    c820:	00800044 	movi	r2,1
    c824:	f800283a 	ret
    c828:	4192b03a 	or	r9,r8,r6
    c82c:	483ffc1e 	bne	r9,zero,c820 <__eqdf2+0x3c>
    c830:	10fffb1e 	bne	r2,r3,c820 <__eqdf2+0x3c>
    c834:	523ffa1e 	bne	r10,r8,c820 <__eqdf2+0x3c>
    c838:	21bff91e 	bne	r4,r6,c820 <__eqdf2+0x3c>
    c83c:	29c00826 	beq	r5,r7,c860 <__eqdf2+0x7c>
    c840:	103ff71e 	bne	r2,zero,c820 <__eqdf2+0x3c>
    c844:	5104b03a 	or	r2,r10,r4
    c848:	1004c03a 	cmpne	r2,r2,zero
    c84c:	f800283a 	ret
    c850:	5112b03a 	or	r9,r10,r4
    c854:	483fef26 	beq	r9,zero,c814 <__eqdf2+0x30>
    c858:	00800044 	movi	r2,1
    c85c:	f800283a 	ret
    c860:	0005883a 	mov	r2,zero
    c864:	f800283a 	ret

0000c868 <__gedf2>:
    c868:	2804d53a 	srli	r2,r5,20
    c86c:	3806d53a 	srli	r3,r7,20
    c870:	02000434 	movhi	r8,16
    c874:	423fffc4 	addi	r8,r8,-1
    c878:	0241ffc4 	movi	r9,2047
    c87c:	1081ffcc 	andi	r2,r2,2047
    c880:	2a14703a 	and	r10,r5,r8
    c884:	1a46703a 	and	r3,r3,r9
    c888:	3a10703a 	and	r8,r7,r8
    c88c:	280ad7fa 	srli	r5,r5,31
    c890:	380ed7fa 	srli	r7,r7,31
    c894:	12400b26 	beq	r2,r9,c8c4 <__gedf2+0x5c>
    c898:	1a401626 	beq	r3,r9,c8f4 <__gedf2+0x8c>
    c89c:	10000c1e 	bne	r2,zero,c8d0 <__gedf2+0x68>
    c8a0:	5112b03a 	or	r9,r10,r4
    c8a4:	4813003a 	cmpeq	r9,r9,zero
    c8a8:	4817883a 	mov	r11,r9
    c8ac:	18000c1e 	bne	r3,zero,c8e0 <__gedf2+0x78>
    c8b0:	4198b03a 	or	r12,r8,r6
    c8b4:	60000a1e 	bne	r12,zero,c8e0 <__gedf2+0x78>
    c8b8:	48001326 	beq	r9,zero,c908 <__gedf2+0xa0>
    c8bc:	0005883a 	mov	r2,zero
    c8c0:	f800283a 	ret
    c8c4:	5112b03a 	or	r9,r10,r4
    c8c8:	4800191e 	bne	r9,zero,c930 <__gedf2+0xc8>
    c8cc:	18800926 	beq	r3,r2,c8f4 <__gedf2+0x8c>
    c8d0:	18000b1e 	bne	r3,zero,c900 <__gedf2+0x98>
    c8d4:	4192b03a 	or	r9,r8,r6
    c8d8:	0017883a 	mov	r11,zero
    c8dc:	48000a26 	beq	r9,zero,c908 <__gedf2+0xa0>
    c8e0:	39c03fcc 	andi	r7,r7,255
    c8e4:	58000726 	beq	r11,zero,c904 <__gedf2+0x9c>
    c8e8:	3800081e 	bne	r7,zero,c90c <__gedf2+0xa4>
    c8ec:	00bfffc4 	movi	r2,-1
    c8f0:	f800283a 	ret
    c8f4:	4192b03a 	or	r9,r8,r6
    c8f8:	48000d1e 	bne	r9,zero,c930 <__gedf2+0xc8>
    c8fc:	103fe826 	beq	r2,zero,c8a0 <__gedf2+0x38>
    c900:	39c03fcc 	andi	r7,r7,255
    c904:	29c00326 	beq	r5,r7,c914 <__gedf2+0xac>
    c908:	283ff81e 	bne	r5,zero,c8ec <__gedf2+0x84>
    c90c:	00800044 	movi	r2,1
    c910:	f800283a 	ret
    c914:	18bffc16 	blt	r3,r2,c908 <__gedf2+0xa0>
    c918:	10c00316 	blt	r2,r3,c928 <__gedf2+0xc0>
    c91c:	42bffa36 	bltu	r8,r10,c908 <__gedf2+0xa0>
    c920:	52000526 	beq	r10,r8,c938 <__gedf2+0xd0>
    c924:	523fe52e 	bgeu	r10,r8,c8bc <__gedf2+0x54>
    c928:	283ff026 	beq	r5,zero,c8ec <__gedf2+0x84>
    c92c:	003ff706 	br	c90c <__gedf2+0xa4>
    c930:	00bfff84 	movi	r2,-2
    c934:	f800283a 	ret
    c938:	313ff336 	bltu	r6,r4,c908 <__gedf2+0xa0>
    c93c:	21bfdf2e 	bgeu	r4,r6,c8bc <__gedf2+0x54>
    c940:	283fea26 	beq	r5,zero,c8ec <__gedf2+0x84>
    c944:	003ff106 	br	c90c <__gedf2+0xa4>

0000c948 <__ledf2>:
    c948:	2804d53a 	srli	r2,r5,20
    c94c:	3810d53a 	srli	r8,r7,20
    c950:	00c00434 	movhi	r3,16
    c954:	18ffffc4 	addi	r3,r3,-1
    c958:	0241ffc4 	movi	r9,2047
    c95c:	1081ffcc 	andi	r2,r2,2047
    c960:	28d4703a 	and	r10,r5,r3
    c964:	4250703a 	and	r8,r8,r9
    c968:	38c6703a 	and	r3,r7,r3
    c96c:	280ad7fa 	srli	r5,r5,31
    c970:	380ed7fa 	srli	r7,r7,31
    c974:	12400b26 	beq	r2,r9,c9a4 <__ledf2+0x5c>
    c978:	42401926 	beq	r8,r9,c9e0 <__ledf2+0x98>
    c97c:	10000c1e 	bne	r2,zero,c9b0 <__ledf2+0x68>
    c980:	5112b03a 	or	r9,r10,r4
    c984:	4813003a 	cmpeq	r9,r9,zero
    c988:	4817883a 	mov	r11,r9
    c98c:	40000f26 	beq	r8,zero,c9cc <__ledf2+0x84>
    c990:	39c03fcc 	andi	r7,r7,255
    c994:	58001826 	beq	r11,zero,c9f8 <__ledf2+0xb0>
    c998:	38000a1e 	bne	r7,zero,c9c4 <__ledf2+0x7c>
    c99c:	00bfffc4 	movi	r2,-1
    c9a0:	f800283a 	ret
    c9a4:	5112b03a 	or	r9,r10,r4
    c9a8:	48000f1e 	bne	r9,zero,c9e8 <__ledf2+0xa0>
    c9ac:	40800c26 	beq	r8,r2,c9e0 <__ledf2+0x98>
    c9b0:	4000101e 	bne	r8,zero,c9f4 <__ledf2+0xac>
    c9b4:	1992b03a 	or	r9,r3,r6
    c9b8:	0017883a 	mov	r11,zero
    c9bc:	483ff41e 	bne	r9,zero,c990 <__ledf2+0x48>
    c9c0:	283ff61e 	bne	r5,zero,c99c <__ledf2+0x54>
    c9c4:	00800044 	movi	r2,1
    c9c8:	f800283a 	ret
    c9cc:	1998b03a 	or	r12,r3,r6
    c9d0:	603fef1e 	bne	r12,zero,c990 <__ledf2+0x48>
    c9d4:	483ffa26 	beq	r9,zero,c9c0 <__ledf2+0x78>
    c9d8:	0005883a 	mov	r2,zero
    c9dc:	f800283a 	ret
    c9e0:	1992b03a 	or	r9,r3,r6
    c9e4:	48000226 	beq	r9,zero,c9f0 <__ledf2+0xa8>
    c9e8:	00800084 	movi	r2,2
    c9ec:	f800283a 	ret
    c9f0:	103fe326 	beq	r2,zero,c980 <__ledf2+0x38>
    c9f4:	39c03fcc 	andi	r7,r7,255
    c9f8:	29fff11e 	bne	r5,r7,c9c0 <__ledf2+0x78>
    c9fc:	40bff016 	blt	r8,r2,c9c0 <__ledf2+0x78>
    ca00:	12000316 	blt	r2,r8,ca10 <__ledf2+0xc8>
    ca04:	1abfee36 	bltu	r3,r10,c9c0 <__ledf2+0x78>
    ca08:	50c00326 	beq	r10,r3,ca18 <__ledf2+0xd0>
    ca0c:	50fff22e 	bgeu	r10,r3,c9d8 <__ledf2+0x90>
    ca10:	283fe226 	beq	r5,zero,c99c <__ledf2+0x54>
    ca14:	003feb06 	br	c9c4 <__ledf2+0x7c>
    ca18:	313fe936 	bltu	r6,r4,c9c0 <__ledf2+0x78>
    ca1c:	21bfee2e 	bgeu	r4,r6,c9d8 <__ledf2+0x90>
    ca20:	283fde26 	beq	r5,zero,c99c <__ledf2+0x54>
    ca24:	003fe706 	br	c9c4 <__ledf2+0x7c>

0000ca28 <__muldf3>:
    ca28:	deffee04 	addi	sp,sp,-72
    ca2c:	dd000c15 	stw	r20,48(sp)
    ca30:	2828d53a 	srli	r20,r5,20
    ca34:	dd400d15 	stw	r21,52(sp)
    ca38:	282ad7fa 	srli	r21,r5,31
    ca3c:	dc000815 	stw	r16,32(sp)
    ca40:	04000434 	movhi	r16,16
    ca44:	ddc00f15 	stw	r23,60(sp)
    ca48:	dcc00b15 	stw	r19,44(sp)
    ca4c:	dc800a15 	stw	r18,40(sp)
    ca50:	843fffc4 	addi	r16,r16,-1
    ca54:	dfc01115 	stw	ra,68(sp)
    ca58:	df001015 	stw	fp,64(sp)
    ca5c:	dd800e15 	stw	r22,56(sp)
    ca60:	dc400915 	stw	r17,36(sp)
    ca64:	a501ffcc 	andi	r20,r20,2047
    ca68:	2025883a 	mov	r18,r4
    ca6c:	202f883a 	mov	r23,r4
    ca70:	2c20703a 	and	r16,r5,r16
    ca74:	a827883a 	mov	r19,r21
    ca78:	aa403fcc 	andi	r9,r21,255
    ca7c:	a0005926 	beq	r20,zero,cbe4 <__muldf3+0x1bc>
    ca80:	0081ffc4 	movi	r2,2047
    ca84:	a0803426 	beq	r20,r2,cb58 <__muldf3+0x130>
    ca88:	84000434 	orhi	r16,r16,16
    ca8c:	2004d77a 	srli	r2,r4,29
    ca90:	802090fa 	slli	r16,r16,3
    ca94:	202e90fa 	slli	r23,r4,3
    ca98:	a53f0044 	addi	r20,r20,-1023
    ca9c:	80a0b03a 	or	r16,r16,r2
    caa0:	000b883a 	mov	r5,zero
    caa4:	0039883a 	mov	fp,zero
    caa8:	3806d53a 	srli	r3,r7,20
    caac:	382cd7fa 	srli	r22,r7,31
    cab0:	00800434 	movhi	r2,16
    cab4:	10bfffc4 	addi	r2,r2,-1
    cab8:	18c1ffcc 	andi	r3,r3,2047
    cabc:	3025883a 	mov	r18,r6
    cac0:	38a2703a 	and	r17,r7,r2
    cac4:	b2803fcc 	andi	r10,r22,255
    cac8:	18006426 	beq	r3,zero,cc5c <__muldf3+0x234>
    cacc:	0081ffc4 	movi	r2,2047
    cad0:	18805c26 	beq	r3,r2,cc44 <__muldf3+0x21c>
    cad4:	8c400434 	orhi	r17,r17,16
    cad8:	3004d77a 	srli	r2,r6,29
    cadc:	882290fa 	slli	r17,r17,3
    cae0:	302490fa 	slli	r18,r6,3
    cae4:	18ff0044 	addi	r3,r3,-1023
    cae8:	88a2b03a 	or	r17,r17,r2
    caec:	000f883a 	mov	r7,zero
    caf0:	394ab03a 	or	r5,r7,r5
    caf4:	280a90ba 	slli	r5,r5,2
    caf8:	00800074 	movhi	r2,1
    cafc:	10b2c604 	addi	r2,r2,-13544
    cb00:	288b883a 	add	r5,r5,r2
    cb04:	28800017 	ldw	r2,0(r5)
    cb08:	a0c7883a 	add	r3,r20,r3
    cb0c:	b54cf03a 	xor	r6,r22,r21
    cb10:	1a000044 	addi	r8,r3,1
    cb14:	1000683a 	jmp	r2
    cb18:	0000cd5c 	xori	zero,zero,821
    cb1c:	0000cd48 	cmpgei	zero,zero,821
    cb20:	0000cd48 	cmpgei	zero,zero,821
    cb24:	0000cd34 	movhi	zero,820
    cb28:	0000cb74 	movhi	zero,813
    cb2c:	0000cb74 	movhi	zero,813
    cb30:	0000cd1c 	xori	zero,zero,820
    cb34:	0000cd34 	movhi	zero,820
    cb38:	0000cb74 	movhi	zero,813
    cb3c:	0000cd1c 	xori	zero,zero,820
    cb40:	0000cb74 	movhi	zero,813
    cb44:	0000cd34 	movhi	zero,820
    cb48:	0000cb78 	rdprs	zero,zero,813
    cb4c:	0000cb78 	rdprs	zero,zero,813
    cb50:	0000cb78 	rdprs	zero,zero,813
    cb54:	0000d098 	cmpnei	zero,zero,834
    cb58:	8104b03a 	or	r2,r16,r4
    cb5c:	10006c1e 	bne	r2,zero,cd10 <__muldf3+0x2e8>
    cb60:	01400204 	movi	r5,8
    cb64:	0021883a 	mov	r16,zero
    cb68:	002f883a 	mov	r23,zero
    cb6c:	07000084 	movi	fp,2
    cb70:	003fcd06 	br	caa8 <__muldf3+0x80>
    cb74:	3013883a 	mov	r9,r6
    cb78:	00800084 	movi	r2,2
    cb7c:	e080501e 	bne	fp,r2,ccc0 <__muldf3+0x298>
    cb80:	4cc0004c 	andi	r19,r9,1
    cb84:	0101ffc4 	movi	r4,2047
    cb88:	0021883a 	mov	r16,zero
    cb8c:	002f883a 	mov	r23,zero
    cb90:	2008953a 	slli	r4,r4,20
    cb94:	98c03fcc 	andi	r3,r19,255
    cb98:	04400434 	movhi	r17,16
    cb9c:	8c7fffc4 	addi	r17,r17,-1
    cba0:	180697fa 	slli	r3,r3,31
    cba4:	8460703a 	and	r16,r16,r17
    cba8:	8120b03a 	or	r16,r16,r4
    cbac:	80c6b03a 	or	r3,r16,r3
    cbb0:	b805883a 	mov	r2,r23
    cbb4:	dfc01117 	ldw	ra,68(sp)
    cbb8:	df001017 	ldw	fp,64(sp)
    cbbc:	ddc00f17 	ldw	r23,60(sp)
    cbc0:	dd800e17 	ldw	r22,56(sp)
    cbc4:	dd400d17 	ldw	r21,52(sp)
    cbc8:	dd000c17 	ldw	r20,48(sp)
    cbcc:	dcc00b17 	ldw	r19,44(sp)
    cbd0:	dc800a17 	ldw	r18,40(sp)
    cbd4:	dc400917 	ldw	r17,36(sp)
    cbd8:	dc000817 	ldw	r16,32(sp)
    cbdc:	dec01204 	addi	sp,sp,72
    cbe0:	f800283a 	ret
    cbe4:	8104b03a 	or	r2,r16,r4
    cbe8:	10004426 	beq	r2,zero,ccfc <__muldf3+0x2d4>
    cbec:	80014b26 	beq	r16,zero,d11c <__muldf3+0x6f4>
    cbf0:	8009883a 	mov	r4,r16
    cbf4:	d9800715 	stw	r6,28(sp)
    cbf8:	d9c00215 	stw	r7,8(sp)
    cbfc:	da400415 	stw	r9,16(sp)
    cc00:	000145c0 	call	145c <__clzsi2>
    cc04:	d9800717 	ldw	r6,28(sp)
    cc08:	d9c00217 	ldw	r7,8(sp)
    cc0c:	da400417 	ldw	r9,16(sp)
    cc10:	1007883a 	mov	r3,r2
    cc14:	01000a04 	movi	r4,40
    cc18:	1dfffe04 	addi	r23,r3,-8
    cc1c:	20c9c83a 	sub	r4,r4,r3
    cc20:	85e0983a 	sll	r16,r16,r23
    cc24:	9108d83a 	srl	r4,r18,r4
    cc28:	95ee983a 	sll	r23,r18,r23
    cc2c:	2420b03a 	or	r16,r4,r16
    cc30:	053f0344 	movi	r20,-1011
    cc34:	a0e9c83a 	sub	r20,r20,r3
    cc38:	000b883a 	mov	r5,zero
    cc3c:	0039883a 	mov	fp,zero
    cc40:	003f9906 	br	caa8 <__muldf3+0x80>
    cc44:	8984b03a 	or	r2,r17,r6
    cc48:	10002a1e 	bne	r2,zero,ccf4 <__muldf3+0x2cc>
    cc4c:	0023883a 	mov	r17,zero
    cc50:	0025883a 	mov	r18,zero
    cc54:	01c00084 	movi	r7,2
    cc58:	003fa506 	br	caf0 <__muldf3+0xc8>
    cc5c:	8984b03a 	or	r2,r17,r6
    cc60:	10002026 	beq	r2,zero,cce4 <__muldf3+0x2bc>
    cc64:	88011c26 	beq	r17,zero,d0d8 <__muldf3+0x6b0>
    cc68:	8809883a 	mov	r4,r17
    cc6c:	d9400215 	stw	r5,8(sp)
    cc70:	d9800715 	stw	r6,28(sp)
    cc74:	da400415 	stw	r9,16(sp)
    cc78:	da800315 	stw	r10,12(sp)
    cc7c:	000145c0 	call	145c <__clzsi2>
    cc80:	d9400217 	ldw	r5,8(sp)
    cc84:	d9800717 	ldw	r6,28(sp)
    cc88:	da400417 	ldw	r9,16(sp)
    cc8c:	da800317 	ldw	r10,12(sp)
    cc90:	1007883a 	mov	r3,r2
    cc94:	01000a04 	movi	r4,40
    cc98:	1cbffe04 	addi	r18,r3,-8
    cc9c:	20c9c83a 	sub	r4,r4,r3
    cca0:	8ca2983a 	sll	r17,r17,r18
    cca4:	3108d83a 	srl	r4,r6,r4
    cca8:	34a4983a 	sll	r18,r6,r18
    ccac:	2462b03a 	or	r17,r4,r17
    ccb0:	00bf0344 	movi	r2,-1011
    ccb4:	10c7c83a 	sub	r3,r2,r3
    ccb8:	000f883a 	mov	r7,zero
    ccbc:	003f8c06 	br	caf0 <__muldf3+0xc8>
    ccc0:	008000c4 	movi	r2,3
    ccc4:	e0816d26 	beq	fp,r2,d27c <__muldf3+0x854>
    ccc8:	00800044 	movi	r2,1
    cccc:	e081321e 	bne	fp,r2,d198 <__muldf3+0x770>
    ccd0:	48a6703a 	and	r19,r9,r2
    ccd4:	0009883a 	mov	r4,zero
    ccd8:	0021883a 	mov	r16,zero
    ccdc:	002f883a 	mov	r23,zero
    cce0:	003fab06 	br	cb90 <__muldf3+0x168>
    cce4:	0023883a 	mov	r17,zero
    cce8:	0025883a 	mov	r18,zero
    ccec:	01c00044 	movi	r7,1
    ccf0:	003f7f06 	br	caf0 <__muldf3+0xc8>
    ccf4:	01c000c4 	movi	r7,3
    ccf8:	003f7d06 	br	caf0 <__muldf3+0xc8>
    ccfc:	01400104 	movi	r5,4
    cd00:	0021883a 	mov	r16,zero
    cd04:	002f883a 	mov	r23,zero
    cd08:	07000044 	movi	fp,1
    cd0c:	003f6606 	br	caa8 <__muldf3+0x80>
    cd10:	01400304 	movi	r5,12
    cd14:	070000c4 	movi	fp,3
    cd18:	003f6306 	br	caa8 <__muldf3+0x80>
    cd1c:	04000434 	movhi	r16,16
    cd20:	0027883a 	mov	r19,zero
    cd24:	843fffc4 	addi	r16,r16,-1
    cd28:	05ffffc4 	movi	r23,-1
    cd2c:	0101ffc4 	movi	r4,2047
    cd30:	003f9706 	br	cb90 <__muldf3+0x168>
    cd34:	8821883a 	mov	r16,r17
    cd38:	902f883a 	mov	r23,r18
    cd3c:	5013883a 	mov	r9,r10
    cd40:	3839883a 	mov	fp,r7
    cd44:	003f8c06 	br	cb78 <__muldf3+0x150>
    cd48:	8821883a 	mov	r16,r17
    cd4c:	902f883a 	mov	r23,r18
    cd50:	3013883a 	mov	r9,r6
    cd54:	3839883a 	mov	fp,r7
    cd58:	003f8706 	br	cb78 <__muldf3+0x150>
    cd5c:	b82ad43a 	srli	r21,r23,16
    cd60:	9038d43a 	srli	fp,r18,16
    cd64:	bdffffcc 	andi	r23,r23,65535
    cd68:	94bfffcc 	andi	r18,r18,65535
    cd6c:	9009883a 	mov	r4,r18
    cd70:	b80b883a 	mov	r5,r23
    cd74:	d8c00515 	stw	r3,20(sp)
    cd78:	d9800715 	stw	r6,28(sp)
    cd7c:	da000615 	stw	r8,24(sp)
    cd80:	0000dc40 	call	dc4 <__mulsi3>
    cd84:	9009883a 	mov	r4,r18
    cd88:	a80b883a 	mov	r5,r21
    cd8c:	1029883a 	mov	r20,r2
    cd90:	0000dc40 	call	dc4 <__mulsi3>
    cd94:	e009883a 	mov	r4,fp
    cd98:	a80b883a 	mov	r5,r21
    cd9c:	102d883a 	mov	r22,r2
    cda0:	0000dc40 	call	dc4 <__mulsi3>
    cda4:	e009883a 	mov	r4,fp
    cda8:	b80b883a 	mov	r5,r23
    cdac:	1027883a 	mov	r19,r2
    cdb0:	0000dc40 	call	dc4 <__mulsi3>
    cdb4:	a008d43a 	srli	r4,r20,16
    cdb8:	b085883a 	add	r2,r22,r2
    cdbc:	d8c00517 	ldw	r3,20(sp)
    cdc0:	110f883a 	add	r7,r2,r4
    cdc4:	d9800717 	ldw	r6,28(sp)
    cdc8:	da000617 	ldw	r8,24(sp)
    cdcc:	3d80022e 	bgeu	r7,r22,cdd8 <__muldf3+0x3b0>
    cdd0:	00800074 	movhi	r2,1
    cdd4:	98a7883a 	add	r19,r19,r2
    cdd8:	3804943a 	slli	r2,r7,16
    cddc:	380ed43a 	srli	r7,r7,16
    cde0:	882cd43a 	srli	r22,r17,16
    cde4:	a53fffcc 	andi	r20,r20,65535
    cde8:	8c7fffcc 	andi	r17,r17,65535
    cdec:	1529883a 	add	r20,r2,r20
    cdf0:	8809883a 	mov	r4,r17
    cdf4:	b80b883a 	mov	r5,r23
    cdf8:	d8c00515 	stw	r3,20(sp)
    cdfc:	d9800715 	stw	r6,28(sp)
    ce00:	da000615 	stw	r8,24(sp)
    ce04:	d9c00015 	stw	r7,0(sp)
    ce08:	dd000115 	stw	r20,4(sp)
    ce0c:	0000dc40 	call	dc4 <__mulsi3>
    ce10:	a80b883a 	mov	r5,r21
    ce14:	8809883a 	mov	r4,r17
    ce18:	d8800415 	stw	r2,16(sp)
    ce1c:	0000dc40 	call	dc4 <__mulsi3>
    ce20:	a80b883a 	mov	r5,r21
    ce24:	b009883a 	mov	r4,r22
    ce28:	1029883a 	mov	r20,r2
    ce2c:	0000dc40 	call	dc4 <__mulsi3>
    ce30:	b009883a 	mov	r4,r22
    ce34:	b80b883a 	mov	r5,r23
    ce38:	102b883a 	mov	r21,r2
    ce3c:	0000dc40 	call	dc4 <__mulsi3>
    ce40:	da400417 	ldw	r9,16(sp)
    ce44:	a085883a 	add	r2,r20,r2
    ce48:	d8c00517 	ldw	r3,20(sp)
    ce4c:	4808d43a 	srli	r4,r9,16
    ce50:	d9800717 	ldw	r6,28(sp)
    ce54:	da000617 	ldw	r8,24(sp)
    ce58:	1109883a 	add	r4,r2,r4
    ce5c:	2500022e 	bgeu	r4,r20,ce68 <__muldf3+0x440>
    ce60:	00800074 	movhi	r2,1
    ce64:	a8ab883a 	add	r21,r21,r2
    ce68:	200e943a 	slli	r7,r4,16
    ce6c:	2004d43a 	srli	r2,r4,16
    ce70:	802ed43a 	srli	r23,r16,16
    ce74:	843fffcc 	andi	r16,r16,65535
    ce78:	4d3fffcc 	andi	r20,r9,65535
    ce7c:	9009883a 	mov	r4,r18
    ce80:	800b883a 	mov	r5,r16
    ce84:	3d29883a 	add	r20,r7,r20
    ce88:	d8c00515 	stw	r3,20(sp)
    ce8c:	d9800715 	stw	r6,28(sp)
    ce90:	da000615 	stw	r8,24(sp)
    ce94:	a8ab883a 	add	r21,r21,r2
    ce98:	0000dc40 	call	dc4 <__mulsi3>
    ce9c:	9009883a 	mov	r4,r18
    cea0:	b80b883a 	mov	r5,r23
    cea4:	d8800315 	stw	r2,12(sp)
    cea8:	0000dc40 	call	dc4 <__mulsi3>
    ceac:	e009883a 	mov	r4,fp
    ceb0:	b80b883a 	mov	r5,r23
    ceb4:	1025883a 	mov	r18,r2
    ceb8:	0000dc40 	call	dc4 <__mulsi3>
    cebc:	e009883a 	mov	r4,fp
    cec0:	800b883a 	mov	r5,r16
    cec4:	d8800215 	stw	r2,8(sp)
    cec8:	0000dc40 	call	dc4 <__mulsi3>
    cecc:	da800317 	ldw	r10,12(sp)
    ced0:	d9400017 	ldw	r5,0(sp)
    ced4:	9085883a 	add	r2,r18,r2
    ced8:	5008d43a 	srli	r4,r10,16
    cedc:	a153883a 	add	r9,r20,r5
    cee0:	d8c00517 	ldw	r3,20(sp)
    cee4:	1109883a 	add	r4,r2,r4
    cee8:	d9800717 	ldw	r6,28(sp)
    ceec:	da000617 	ldw	r8,24(sp)
    cef0:	dac00217 	ldw	r11,8(sp)
    cef4:	2480022e 	bgeu	r4,r18,cf00 <__muldf3+0x4d8>
    cef8:	00800074 	movhi	r2,1
    cefc:	5897883a 	add	r11,r11,r2
    cf00:	200e943a 	slli	r7,r4,16
    cf04:	2038d43a 	srli	fp,r4,16
    cf08:	52bfffcc 	andi	r10,r10,65535
    cf0c:	3a8f883a 	add	r7,r7,r10
    cf10:	8809883a 	mov	r4,r17
    cf14:	800b883a 	mov	r5,r16
    cf18:	d8c00515 	stw	r3,20(sp)
    cf1c:	d9800715 	stw	r6,28(sp)
    cf20:	d9c00215 	stw	r7,8(sp)
    cf24:	da000615 	stw	r8,24(sp)
    cf28:	da400415 	stw	r9,16(sp)
    cf2c:	5f39883a 	add	fp,r11,fp
    cf30:	0000dc40 	call	dc4 <__mulsi3>
    cf34:	8809883a 	mov	r4,r17
    cf38:	b80b883a 	mov	r5,r23
    cf3c:	1025883a 	mov	r18,r2
    cf40:	0000dc40 	call	dc4 <__mulsi3>
    cf44:	b009883a 	mov	r4,r22
    cf48:	b80b883a 	mov	r5,r23
    cf4c:	d8800315 	stw	r2,12(sp)
    cf50:	0000dc40 	call	dc4 <__mulsi3>
    cf54:	b009883a 	mov	r4,r22
    cf58:	800b883a 	mov	r5,r16
    cf5c:	1023883a 	mov	r17,r2
    cf60:	0000dc40 	call	dc4 <__mulsi3>
    cf64:	da800317 	ldw	r10,12(sp)
    cf68:	9008d43a 	srli	r4,r18,16
    cf6c:	d8c00517 	ldw	r3,20(sp)
    cf70:	5085883a 	add	r2,r10,r2
    cf74:	1109883a 	add	r4,r2,r4
    cf78:	d9800717 	ldw	r6,28(sp)
    cf7c:	d9c00217 	ldw	r7,8(sp)
    cf80:	da000617 	ldw	r8,24(sp)
    cf84:	da400417 	ldw	r9,16(sp)
    cf88:	2280022e 	bgeu	r4,r10,cf94 <__muldf3+0x56c>
    cf8c:	00800074 	movhi	r2,1
    cf90:	88a3883a 	add	r17,r17,r2
    cf94:	2004943a 	slli	r2,r4,16
    cf98:	94bfffcc 	andi	r18,r18,65535
    cf9c:	4ce7883a 	add	r19,r9,r19
    cfa0:	14a5883a 	add	r18,r2,r18
    cfa4:	9d29803a 	cmpltu	r20,r19,r20
    cfa8:	9565883a 	add	r18,r18,r21
    cfac:	9505883a 	add	r2,r18,r20
    cfb0:	99e7883a 	add	r19,r19,r7
    cfb4:	99cf803a 	cmpltu	r7,r19,r7
    cfb8:	e08b883a 	add	r5,fp,r2
    cfbc:	2008d43a 	srli	r4,r4,16
    cfc0:	29ef883a 	add	r23,r5,r7
    cfc4:	1529803a 	cmpltu	r20,r2,r20
    cfc8:	956b803a 	cmpltu	r21,r18,r21
    cfcc:	b9cf803a 	cmpltu	r7,r23,r7
    cfd0:	a564b03a 	or	r18,r20,r21
    cfd4:	2f39803a 	cmpltu	fp,r5,fp
    cfd8:	9125883a 	add	r18,r18,r4
    cfdc:	3f38b03a 	or	fp,r7,fp
    cfe0:	9725883a 	add	r18,r18,fp
    cfe4:	9804927a 	slli	r2,r19,9
    cfe8:	9463883a 	add	r17,r18,r17
    cfec:	d9000117 	ldw	r4,4(sp)
    cff0:	b820d5fa 	srli	r16,r23,23
    cff4:	8822927a 	slli	r17,r17,9
    cff8:	9826d5fa 	srli	r19,r19,23
    cffc:	1104b03a 	or	r2,r2,r4
    d000:	b82e927a 	slli	r23,r23,9
    d004:	1004c03a 	cmpne	r2,r2,zero
    d008:	8c20b03a 	or	r16,r17,r16
    d00c:	14e6b03a 	or	r19,r2,r19
    d010:	8080402c 	andhi	r2,r16,256
    d014:	9deeb03a 	or	r23,r19,r23
    d018:	10000726 	beq	r2,zero,d038 <__muldf3+0x610>
    d01c:	b804d07a 	srli	r2,r23,1
    d020:	800697fa 	slli	r3,r16,31
    d024:	bdc0004c 	andi	r23,r23,1
    d028:	8020d07a 	srli	r16,r16,1
    d02c:	b8aeb03a 	or	r23,r23,r2
    d030:	b8eeb03a 	or	r23,r23,r3
    d034:	4007883a 	mov	r3,r8
    d038:	1900ffc4 	addi	r4,r3,1023
    d03c:	01004d0e 	bge	zero,r4,d174 <__muldf3+0x74c>
    d040:	b88001cc 	andi	r2,r23,7
    d044:	10000726 	beq	r2,zero,d064 <__muldf3+0x63c>
    d048:	b94003cc 	andi	r5,r23,15
    d04c:	00800104 	movi	r2,4
    d050:	28800426 	beq	r5,r2,d064 <__muldf3+0x63c>
    d054:	b885883a 	add	r2,r23,r2
    d058:	15ef803a 	cmpltu	r23,r2,r23
    d05c:	85e1883a 	add	r16,r16,r23
    d060:	102f883a 	mov	r23,r2
    d064:	8080402c 	andhi	r2,r16,256
    d068:	10000426 	beq	r2,zero,d07c <__muldf3+0x654>
    d06c:	00bfc034 	movhi	r2,65280
    d070:	10bfffc4 	addi	r2,r2,-1
    d074:	19010004 	addi	r4,r3,1024
    d078:	80a0703a 	and	r16,r16,r2
    d07c:	0081ff84 	movi	r2,2046
    d080:	1100340e 	bge	r2,r4,d154 <__muldf3+0x72c>
    d084:	34c0004c 	andi	r19,r6,1
    d088:	0101ffc4 	movi	r4,2047
    d08c:	0021883a 	mov	r16,zero
    d090:	002f883a 	mov	r23,zero
    d094:	003ebe06 	br	cb90 <__muldf3+0x168>
    d098:	8080022c 	andhi	r2,r16,8
    d09c:	10000926 	beq	r2,zero,d0c4 <__muldf3+0x69c>
    d0a0:	8880022c 	andhi	r2,r17,8
    d0a4:	1000071e 	bne	r2,zero,d0c4 <__muldf3+0x69c>
    d0a8:	00800434 	movhi	r2,16
    d0ac:	8c000234 	orhi	r16,r17,8
    d0b0:	10bfffc4 	addi	r2,r2,-1
    d0b4:	b027883a 	mov	r19,r22
    d0b8:	80a0703a 	and	r16,r16,r2
    d0bc:	902f883a 	mov	r23,r18
    d0c0:	003f1a06 	br	cd2c <__muldf3+0x304>
    d0c4:	00800434 	movhi	r2,16
    d0c8:	84000234 	orhi	r16,r16,8
    d0cc:	10bfffc4 	addi	r2,r2,-1
    d0d0:	80a0703a 	and	r16,r16,r2
    d0d4:	003f1506 	br	cd2c <__muldf3+0x304>
    d0d8:	3009883a 	mov	r4,r6
    d0dc:	d9400215 	stw	r5,8(sp)
    d0e0:	d9800715 	stw	r6,28(sp)
    d0e4:	da400415 	stw	r9,16(sp)
    d0e8:	da800315 	stw	r10,12(sp)
    d0ec:	000145c0 	call	145c <__clzsi2>
    d0f0:	10c00804 	addi	r3,r2,32
    d0f4:	010009c4 	movi	r4,39
    d0f8:	d9400217 	ldw	r5,8(sp)
    d0fc:	d9800717 	ldw	r6,28(sp)
    d100:	da400417 	ldw	r9,16(sp)
    d104:	da800317 	ldw	r10,12(sp)
    d108:	20fee20e 	bge	r4,r3,cc94 <__muldf3+0x26c>
    d10c:	147ffe04 	addi	r17,r2,-8
    d110:	9462983a 	sll	r17,r18,r17
    d114:	0025883a 	mov	r18,zero
    d118:	003ee506 	br	ccb0 <__muldf3+0x288>
    d11c:	d9800715 	stw	r6,28(sp)
    d120:	d9c00215 	stw	r7,8(sp)
    d124:	da400415 	stw	r9,16(sp)
    d128:	000145c0 	call	145c <__clzsi2>
    d12c:	10c00804 	addi	r3,r2,32
    d130:	010009c4 	movi	r4,39
    d134:	d9800717 	ldw	r6,28(sp)
    d138:	d9c00217 	ldw	r7,8(sp)
    d13c:	da400417 	ldw	r9,16(sp)
    d140:	20feb40e 	bge	r4,r3,cc14 <__muldf3+0x1ec>
    d144:	143ffe04 	addi	r16,r2,-8
    d148:	9420983a 	sll	r16,r18,r16
    d14c:	002f883a 	mov	r23,zero
    d150:	003eb706 	br	cc30 <__muldf3+0x208>
    d154:	8004977a 	slli	r2,r16,29
    d158:	b82ed0fa 	srli	r23,r23,3
    d15c:	8020927a 	slli	r16,r16,9
    d160:	2101ffcc 	andi	r4,r4,2047
    d164:	15eeb03a 	or	r23,r2,r23
    d168:	8020d33a 	srli	r16,r16,12
    d16c:	34c0004c 	andi	r19,r6,1
    d170:	003e8706 	br	cb90 <__muldf3+0x168>
    d174:	00bf0084 	movi	r2,-1022
    d178:	10c5c83a 	sub	r2,r2,r3
    d17c:	01000e04 	movi	r4,56
    d180:	2080080e 	bge	r4,r2,d1a4 <__muldf3+0x77c>
    d184:	34c0004c 	andi	r19,r6,1
    d188:	0009883a 	mov	r4,zero
    d18c:	0021883a 	mov	r16,zero
    d190:	002f883a 	mov	r23,zero
    d194:	003e7e06 	br	cb90 <__muldf3+0x168>
    d198:	4007883a 	mov	r3,r8
    d19c:	480d883a 	mov	r6,r9
    d1a0:	003fa506 	br	d038 <__muldf3+0x610>
    d1a4:	010007c4 	movi	r4,31
    d1a8:	20801816 	blt	r4,r2,d20c <__muldf3+0x7e4>
    d1ac:	18c10784 	addi	r3,r3,1054
    d1b0:	80c8983a 	sll	r4,r16,r3
    d1b4:	b88ad83a 	srl	r5,r23,r2
    d1b8:	b8c6983a 	sll	r3,r23,r3
    d1bc:	80a0d83a 	srl	r16,r16,r2
    d1c0:	2908b03a 	or	r4,r5,r4
    d1c4:	1804c03a 	cmpne	r2,r3,zero
    d1c8:	2088b03a 	or	r4,r4,r2
    d1cc:	208001cc 	andi	r2,r4,7
    d1d0:	10000726 	beq	r2,zero,d1f0 <__muldf3+0x7c8>
    d1d4:	20c003cc 	andi	r3,r4,15
    d1d8:	00800104 	movi	r2,4
    d1dc:	18800426 	beq	r3,r2,d1f0 <__muldf3+0x7c8>
    d1e0:	20c00104 	addi	r3,r4,4
    d1e4:	1905803a 	cmpltu	r2,r3,r4
    d1e8:	80a1883a 	add	r16,r16,r2
    d1ec:	1809883a 	mov	r4,r3
    d1f0:	8080202c 	andhi	r2,r16,128
    d1f4:	10001b26 	beq	r2,zero,d264 <__muldf3+0x83c>
    d1f8:	34c0004c 	andi	r19,r6,1
    d1fc:	01000044 	movi	r4,1
    d200:	0021883a 	mov	r16,zero
    d204:	002f883a 	mov	r23,zero
    d208:	003e6106 	br	cb90 <__muldf3+0x168>
    d20c:	013ef884 	movi	r4,-1054
    d210:	20c9c83a 	sub	r4,r4,r3
    d214:	01400804 	movi	r5,32
    d218:	8108d83a 	srl	r4,r16,r4
    d21c:	11401526 	beq	r2,r5,d274 <__muldf3+0x84c>
    d220:	18c10f84 	addi	r3,r3,1086
    d224:	80e0983a 	sll	r16,r16,r3
    d228:	85eeb03a 	or	r23,r16,r23
    d22c:	b804c03a 	cmpne	r2,r23,zero
    d230:	1108b03a 	or	r4,r2,r4
    d234:	20c001cc 	andi	r3,r4,7
    d238:	1800061e 	bne	r3,zero,d254 <__muldf3+0x82c>
    d23c:	0021883a 	mov	r16,zero
    d240:	202ed0fa 	srli	r23,r4,3
    d244:	34c0004c 	andi	r19,r6,1
    d248:	0009883a 	mov	r4,zero
    d24c:	b8eeb03a 	or	r23,r23,r3
    d250:	003e4f06 	br	cb90 <__muldf3+0x168>
    d254:	20c003cc 	andi	r3,r4,15
    d258:	00800104 	movi	r2,4
    d25c:	0021883a 	mov	r16,zero
    d260:	18bfdf1e 	bne	r3,r2,d1e0 <__muldf3+0x7b8>
    d264:	8004927a 	slli	r2,r16,9
    d268:	8006977a 	slli	r3,r16,29
    d26c:	1020d33a 	srli	r16,r2,12
    d270:	003ff306 	br	d240 <__muldf3+0x818>
    d274:	0021883a 	mov	r16,zero
    d278:	003feb06 	br	d228 <__muldf3+0x800>
    d27c:	00800434 	movhi	r2,16
    d280:	84000234 	orhi	r16,r16,8
    d284:	10bfffc4 	addi	r2,r2,-1
    d288:	4cc0004c 	andi	r19,r9,1
    d28c:	80a0703a 	and	r16,r16,r2
    d290:	003ea606 	br	cd2c <__muldf3+0x304>

0000d294 <__subdf3>:
    d294:	00c00434 	movhi	r3,16
    d298:	18ffffc4 	addi	r3,r3,-1
    d29c:	defffb04 	addi	sp,sp,-20
    d2a0:	28d2703a 	and	r9,r5,r3
    d2a4:	3814d53a 	srli	r10,r7,20
    d2a8:	38c6703a 	and	r3,r7,r3
    d2ac:	3004d77a 	srli	r2,r6,29
    d2b0:	dc800215 	stw	r18,8(sp)
    d2b4:	dc000015 	stw	r16,0(sp)
    d2b8:	2824d7fa 	srli	r18,r5,31
    d2bc:	2820d53a 	srli	r16,r5,20
    d2c0:	481290fa 	slli	r9,r9,3
    d2c4:	200ad77a 	srli	r5,r4,29
    d2c8:	180690fa 	slli	r3,r3,3
    d2cc:	dc400115 	stw	r17,4(sp)
    d2d0:	dfc00415 	stw	ra,16(sp)
    d2d4:	202290fa 	slli	r17,r4,3
    d2d8:	dcc00315 	stw	r19,12(sp)
    d2dc:	5281ffcc 	andi	r10,r10,2047
    d2e0:	0101ffc4 	movi	r4,2047
    d2e4:	9011883a 	mov	r8,r18
    d2e8:	8401ffcc 	andi	r16,r16,2047
    d2ec:	94803fcc 	andi	r18,r18,255
    d2f0:	494ab03a 	or	r5,r9,r5
    d2f4:	380ed7fa 	srli	r7,r7,31
    d2f8:	1886b03a 	or	r3,r3,r2
    d2fc:	300c90fa 	slli	r6,r6,3
    d300:	51009026 	beq	r10,r4,d544 <__subdf3+0x2b0>
    d304:	39c0005c 	xori	r7,r7,1
    d308:	8285c83a 	sub	r2,r16,r10
    d30c:	91c06f26 	beq	r18,r7,d4cc <__subdf3+0x238>
    d310:	0080b10e 	bge	zero,r2,d5d8 <__subdf3+0x344>
    d314:	50002a1e 	bne	r10,zero,d3c0 <__subdf3+0x12c>
    d318:	1988b03a 	or	r4,r3,r6
    d31c:	2000941e 	bne	r4,zero,d570 <__subdf3+0x2dc>
    d320:	888001cc 	andi	r2,r17,7
    d324:	10005b26 	beq	r2,zero,d494 <__subdf3+0x200>
    d328:	88c003cc 	andi	r3,r17,15
    d32c:	00800104 	movi	r2,4
    d330:	18805826 	beq	r3,r2,d494 <__subdf3+0x200>
    d334:	88c00104 	addi	r3,r17,4
    d338:	1c63803a 	cmpltu	r17,r3,r17
    d33c:	2c4b883a 	add	r5,r5,r17
    d340:	2880202c 	andhi	r2,r5,128
    d344:	9200004c 	andi	r8,r18,1
    d348:	1823883a 	mov	r17,r3
    d34c:	10005426 	beq	r2,zero,d4a0 <__subdf3+0x20c>
    d350:	84000044 	addi	r16,r16,1
    d354:	0081ffc4 	movi	r2,2047
    d358:	8080bf26 	beq	r16,r2,d658 <__subdf3+0x3c4>
    d35c:	013fe034 	movhi	r4,65408
    d360:	213fffc4 	addi	r4,r4,-1
    d364:	290a703a 	and	r5,r5,r4
    d368:	2804977a 	slli	r2,r5,29
    d36c:	280a927a 	slli	r5,r5,9
    d370:	8822d0fa 	srli	r17,r17,3
    d374:	8401ffcc 	andi	r16,r16,2047
    d378:	2808d33a 	srli	r4,r5,12
    d37c:	1444b03a 	or	r2,r2,r17
    d380:	8401ffcc 	andi	r16,r16,2047
    d384:	800a953a 	slli	r5,r16,20
    d388:	40c03fcc 	andi	r3,r8,255
    d38c:	04000434 	movhi	r16,16
    d390:	180697fa 	slli	r3,r3,31
    d394:	843fffc4 	addi	r16,r16,-1
    d398:	2420703a 	and	r16,r4,r16
    d39c:	8160b03a 	or	r16,r16,r5
    d3a0:	80c6b03a 	or	r3,r16,r3
    d3a4:	dfc00417 	ldw	ra,16(sp)
    d3a8:	dcc00317 	ldw	r19,12(sp)
    d3ac:	dc800217 	ldw	r18,8(sp)
    d3b0:	dc400117 	ldw	r17,4(sp)
    d3b4:	dc000017 	ldw	r16,0(sp)
    d3b8:	dec00504 	addi	sp,sp,20
    d3bc:	f800283a 	ret
    d3c0:	0101ffc4 	movi	r4,2047
    d3c4:	813fd626 	beq	r16,r4,d320 <__subdf3+0x8c>
    d3c8:	18c02034 	orhi	r3,r3,128
    d3cc:	01000e04 	movi	r4,56
    d3d0:	2080a416 	blt	r4,r2,d664 <__subdf3+0x3d0>
    d3d4:	010007c4 	movi	r4,31
    d3d8:	2080c716 	blt	r4,r2,d6f8 <__subdf3+0x464>
    d3dc:	01000804 	movi	r4,32
    d3e0:	2089c83a 	sub	r4,r4,r2
    d3e4:	1910983a 	sll	r8,r3,r4
    d3e8:	308ed83a 	srl	r7,r6,r2
    d3ec:	3108983a 	sll	r4,r6,r4
    d3f0:	1884d83a 	srl	r2,r3,r2
    d3f4:	41ccb03a 	or	r6,r8,r7
    d3f8:	2008c03a 	cmpne	r4,r4,zero
    d3fc:	310cb03a 	or	r6,r6,r4
    d400:	898dc83a 	sub	r6,r17,r6
    d404:	89a3803a 	cmpltu	r17,r17,r6
    d408:	288bc83a 	sub	r5,r5,r2
    d40c:	2c4bc83a 	sub	r5,r5,r17
    d410:	3023883a 	mov	r17,r6
    d414:	2880202c 	andhi	r2,r5,128
    d418:	10006b26 	beq	r2,zero,d5c8 <__subdf3+0x334>
    d41c:	04c02034 	movhi	r19,128
    d420:	9cffffc4 	addi	r19,r19,-1
    d424:	2ce6703a 	and	r19,r5,r19
    d428:	98007c26 	beq	r19,zero,d61c <__subdf3+0x388>
    d42c:	9809883a 	mov	r4,r19
    d430:	000145c0 	call	145c <__clzsi2>
    d434:	10fffe04 	addi	r3,r2,-8
    d438:	010007c4 	movi	r4,31
    d43c:	20c07d16 	blt	r4,r3,d634 <__subdf3+0x3a0>
    d440:	01400a04 	movi	r5,40
    d444:	2885c83a 	sub	r2,r5,r2
    d448:	888ad83a 	srl	r5,r17,r2
    d44c:	98e6983a 	sll	r19,r19,r3
    d450:	88e2983a 	sll	r17,r17,r3
    d454:	2ce6b03a 	or	r19,r5,r19
    d458:	1c007a16 	blt	r3,r16,d644 <__subdf3+0x3b0>
    d45c:	1c21c83a 	sub	r16,r3,r16
    d460:	81400044 	addi	r5,r16,1
    d464:	00c007c4 	movi	r3,31
    d468:	19409616 	blt	r3,r5,d6c4 <__subdf3+0x430>
    d46c:	1c21c83a 	sub	r16,r3,r16
    d470:	8c08983a 	sll	r4,r17,r16
    d474:	8946d83a 	srl	r3,r17,r5
    d478:	9c20983a 	sll	r16,r19,r16
    d47c:	2008c03a 	cmpne	r4,r4,zero
    d480:	994ad83a 	srl	r5,r19,r5
    d484:	1c06b03a 	or	r3,r3,r16
    d488:	1922b03a 	or	r17,r3,r4
    d48c:	0021883a 	mov	r16,zero
    d490:	003fa306 	br	d320 <__subdf3+0x8c>
    d494:	2880202c 	andhi	r2,r5,128
    d498:	9200004c 	andi	r8,r18,1
    d49c:	103fac1e 	bne	r2,zero,d350 <__subdf3+0xbc>
    d4a0:	2804977a 	slli	r2,r5,29
    d4a4:	8822d0fa 	srli	r17,r17,3
    d4a8:	00c1ffc4 	movi	r3,2047
    d4ac:	280ad0fa 	srli	r5,r5,3
    d4b0:	1444b03a 	or	r2,r2,r17
    d4b4:	80c02726 	beq	r16,r3,d554 <__subdf3+0x2c0>
    d4b8:	01000434 	movhi	r4,16
    d4bc:	213fffc4 	addi	r4,r4,-1
    d4c0:	80e0703a 	and	r16,r16,r3
    d4c4:	2908703a 	and	r4,r5,r4
    d4c8:	003fad06 	br	d380 <__subdf3+0xec>
    d4cc:	0080690e 	bge	zero,r2,d674 <__subdf3+0x3e0>
    d4d0:	50002f26 	beq	r10,zero,d590 <__subdf3+0x2fc>
    d4d4:	0101ffc4 	movi	r4,2047
    d4d8:	813f9126 	beq	r16,r4,d320 <__subdf3+0x8c>
    d4dc:	18c02034 	orhi	r3,r3,128
    d4e0:	01000e04 	movi	r4,56
    d4e4:	2080b00e 	bge	r4,r2,d7a8 <__subdf3+0x514>
    d4e8:	198cb03a 	or	r6,r3,r6
    d4ec:	300ec03a 	cmpne	r7,r6,zero
    d4f0:	0005883a 	mov	r2,zero
    d4f4:	3c4f883a 	add	r7,r7,r17
    d4f8:	3c63803a 	cmpltu	r17,r7,r17
    d4fc:	114b883a 	add	r5,r2,r5
    d500:	2c4b883a 	add	r5,r5,r17
    d504:	3823883a 	mov	r17,r7
    d508:	2880202c 	andhi	r2,r5,128
    d50c:	10002e26 	beq	r2,zero,d5c8 <__subdf3+0x334>
    d510:	84000044 	addi	r16,r16,1
    d514:	0081ffc4 	movi	r2,2047
    d518:	8080de26 	beq	r16,r2,d894 <__subdf3+0x600>
    d51c:	00bfe034 	movhi	r2,65408
    d520:	10bfffc4 	addi	r2,r2,-1
    d524:	288a703a 	and	r5,r5,r2
    d528:	880cd07a 	srli	r6,r17,1
    d52c:	280897fa 	slli	r4,r5,31
    d530:	88c0004c 	andi	r3,r17,1
    d534:	30e2b03a 	or	r17,r6,r3
    d538:	280ad07a 	srli	r5,r5,1
    d53c:	8922b03a 	or	r17,r17,r4
    d540:	003f7706 	br	d320 <__subdf3+0x8c>
    d544:	1984b03a 	or	r2,r3,r6
    d548:	103f6e26 	beq	r2,zero,d304 <__subdf3+0x70>
    d54c:	39c03fcc 	andi	r7,r7,255
    d550:	003f6d06 	br	d308 <__subdf3+0x74>
    d554:	1146b03a 	or	r3,r2,r5
    d558:	18003f26 	beq	r3,zero,d658 <__subdf3+0x3c4>
    d55c:	00c00434 	movhi	r3,16
    d560:	29000234 	orhi	r4,r5,8
    d564:	18ffffc4 	addi	r3,r3,-1
    d568:	20c8703a 	and	r4,r4,r3
    d56c:	003f8406 	br	d380 <__subdf3+0xec>
    d570:	10bfffc4 	addi	r2,r2,-1
    d574:	1000501e 	bne	r2,zero,d6b8 <__subdf3+0x424>
    d578:	898fc83a 	sub	r7,r17,r6
    d57c:	89e3803a 	cmpltu	r17,r17,r7
    d580:	28cbc83a 	sub	r5,r5,r3
    d584:	2c4bc83a 	sub	r5,r5,r17
    d588:	3823883a 	mov	r17,r7
    d58c:	003fa106 	br	d414 <__subdf3+0x180>
    d590:	1988b03a 	or	r4,r3,r6
    d594:	203f6226 	beq	r4,zero,d320 <__subdf3+0x8c>
    d598:	10bfffc4 	addi	r2,r2,-1
    d59c:	10009b1e 	bne	r2,zero,d80c <__subdf3+0x578>
    d5a0:	344d883a 	add	r6,r6,r17
    d5a4:	3463803a 	cmpltu	r17,r6,r17
    d5a8:	194b883a 	add	r5,r3,r5
    d5ac:	2c4b883a 	add	r5,r5,r17
    d5b0:	3023883a 	mov	r17,r6
    d5b4:	003fd406 	br	d508 <__subdf3+0x274>
    d5b8:	1106b03a 	or	r3,r2,r4
    d5bc:	1800b426 	beq	r3,zero,d890 <__subdf3+0x5fc>
    d5c0:	100b883a 	mov	r5,r2
    d5c4:	2023883a 	mov	r17,r4
    d5c8:	888001cc 	andi	r2,r17,7
    d5cc:	103f561e 	bne	r2,zero,d328 <__subdf3+0x94>
    d5d0:	9200004c 	andi	r8,r18,1
    d5d4:	003fb206 	br	d4a0 <__subdf3+0x20c>
    d5d8:	1000531e 	bne	r2,zero,d728 <__subdf3+0x494>
    d5dc:	80800044 	addi	r2,r16,1
    d5e0:	1081ffcc 	andi	r2,r2,2047
    d5e4:	01000044 	movi	r4,1
    d5e8:	2080a00e 	bge	r4,r2,d86c <__subdf3+0x5d8>
    d5ec:	8985c83a 	sub	r2,r17,r6
    d5f0:	8889803a 	cmpltu	r4,r17,r2
    d5f4:	28e7c83a 	sub	r19,r5,r3
    d5f8:	9927c83a 	sub	r19,r19,r4
    d5fc:	9900202c 	andhi	r4,r19,128
    d600:	20006226 	beq	r4,zero,d78c <__subdf3+0x4f8>
    d604:	3463c83a 	sub	r17,r6,r17
    d608:	194bc83a 	sub	r5,r3,r5
    d60c:	344d803a 	cmpltu	r6,r6,r17
    d610:	29a7c83a 	sub	r19,r5,r6
    d614:	3825883a 	mov	r18,r7
    d618:	983f841e 	bne	r19,zero,d42c <__subdf3+0x198>
    d61c:	8809883a 	mov	r4,r17
    d620:	000145c0 	call	145c <__clzsi2>
    d624:	10800804 	addi	r2,r2,32
    d628:	10fffe04 	addi	r3,r2,-8
    d62c:	010007c4 	movi	r4,31
    d630:	20ff830e 	bge	r4,r3,d440 <__subdf3+0x1ac>
    d634:	14fff604 	addi	r19,r2,-40
    d638:	8ce6983a 	sll	r19,r17,r19
    d63c:	0023883a 	mov	r17,zero
    d640:	1c3f860e 	bge	r3,r16,d45c <__subdf3+0x1c8>
    d644:	017fe034 	movhi	r5,65408
    d648:	297fffc4 	addi	r5,r5,-1
    d64c:	80e1c83a 	sub	r16,r16,r3
    d650:	994a703a 	and	r5,r19,r5
    d654:	003f3206 	br	d320 <__subdf3+0x8c>
    d658:	0009883a 	mov	r4,zero
    d65c:	0005883a 	mov	r2,zero
    d660:	003f4706 	br	d380 <__subdf3+0xec>
    d664:	198cb03a 	or	r6,r3,r6
    d668:	300cc03a 	cmpne	r6,r6,zero
    d66c:	0005883a 	mov	r2,zero
    d670:	003f6306 	br	d400 <__subdf3+0x16c>
    d674:	10009d1e 	bne	r2,zero,d8ec <__subdf3+0x658>
    d678:	81c00044 	addi	r7,r16,1
    d67c:	3881ffcc 	andi	r2,r7,2047
    d680:	02400044 	movi	r9,1
    d684:	4880680e 	bge	r9,r2,d828 <__subdf3+0x594>
    d688:	0081ffc4 	movi	r2,2047
    d68c:	3880ae26 	beq	r7,r2,d948 <__subdf3+0x6b4>
    d690:	344d883a 	add	r6,r6,r17
    d694:	3463803a 	cmpltu	r17,r6,r17
    d698:	194b883a 	add	r5,r3,r5
    d69c:	2c4b883a 	add	r5,r5,r17
    d6a0:	282297fa 	slli	r17,r5,31
    d6a4:	300cd07a 	srli	r6,r6,1
    d6a8:	280ad07a 	srli	r5,r5,1
    d6ac:	3821883a 	mov	r16,r7
    d6b0:	89a2b03a 	or	r17,r17,r6
    d6b4:	003f1a06 	br	d320 <__subdf3+0x8c>
    d6b8:	0101ffc4 	movi	r4,2047
    d6bc:	813f431e 	bne	r16,r4,d3cc <__subdf3+0x138>
    d6c0:	003f1706 	br	d320 <__subdf3+0x8c>
    d6c4:	80bff844 	addi	r2,r16,-31
    d6c8:	00c00804 	movi	r3,32
    d6cc:	9884d83a 	srl	r2,r19,r2
    d6d0:	28c05126 	beq	r5,r3,d818 <__subdf3+0x584>
    d6d4:	00c00fc4 	movi	r3,63
    d6d8:	1c21c83a 	sub	r16,r3,r16
    d6dc:	9c26983a 	sll	r19,r19,r16
    d6e0:	9c62b03a 	or	r17,r19,r17
    d6e4:	8822c03a 	cmpne	r17,r17,zero
    d6e8:	88a2b03a 	or	r17,r17,r2
    d6ec:	000b883a 	mov	r5,zero
    d6f0:	0021883a 	mov	r16,zero
    d6f4:	003fb406 	br	d5c8 <__subdf3+0x334>
    d6f8:	113ff804 	addi	r4,r2,-32
    d6fc:	01c00804 	movi	r7,32
    d700:	1908d83a 	srl	r4,r3,r4
    d704:	11c04626 	beq	r2,r7,d820 <__subdf3+0x58c>
    d708:	01c01004 	movi	r7,64
    d70c:	3885c83a 	sub	r2,r7,r2
    d710:	1884983a 	sll	r2,r3,r2
    d714:	118cb03a 	or	r6,r2,r6
    d718:	300cc03a 	cmpne	r6,r6,zero
    d71c:	310cb03a 	or	r6,r6,r4
    d720:	0005883a 	mov	r2,zero
    d724:	003f3606 	br	d400 <__subdf3+0x16c>
    d728:	80002b26 	beq	r16,zero,d7d8 <__subdf3+0x544>
    d72c:	0101ffc4 	movi	r4,2047
    d730:	51006926 	beq	r10,r4,d8d8 <__subdf3+0x644>
    d734:	0085c83a 	sub	r2,zero,r2
    d738:	29402034 	orhi	r5,r5,128
    d73c:	01000e04 	movi	r4,56
    d740:	20807d16 	blt	r4,r2,d938 <__subdf3+0x6a4>
    d744:	010007c4 	movi	r4,31
    d748:	2080d916 	blt	r4,r2,dab0 <__subdf3+0x81c>
    d74c:	01000804 	movi	r4,32
    d750:	2089c83a 	sub	r4,r4,r2
    d754:	2912983a 	sll	r9,r5,r4
    d758:	8890d83a 	srl	r8,r17,r2
    d75c:	8908983a 	sll	r4,r17,r4
    d760:	2884d83a 	srl	r2,r5,r2
    d764:	4a22b03a 	or	r17,r9,r8
    d768:	2008c03a 	cmpne	r4,r4,zero
    d76c:	8922b03a 	or	r17,r17,r4
    d770:	3463c83a 	sub	r17,r6,r17
    d774:	1885c83a 	sub	r2,r3,r2
    d778:	344d803a 	cmpltu	r6,r6,r17
    d77c:	118bc83a 	sub	r5,r2,r6
    d780:	5021883a 	mov	r16,r10
    d784:	3825883a 	mov	r18,r7
    d788:	003f2206 	br	d414 <__subdf3+0x180>
    d78c:	9886b03a 	or	r3,r19,r2
    d790:	18001c1e 	bne	r3,zero,d804 <__subdf3+0x570>
    d794:	0011883a 	mov	r8,zero
    d798:	000b883a 	mov	r5,zero
    d79c:	0023883a 	mov	r17,zero
    d7a0:	0021883a 	mov	r16,zero
    d7a4:	003f3e06 	br	d4a0 <__subdf3+0x20c>
    d7a8:	010007c4 	movi	r4,31
    d7ac:	20803c16 	blt	r4,r2,d8a0 <__subdf3+0x60c>
    d7b0:	01000804 	movi	r4,32
    d7b4:	2089c83a 	sub	r4,r4,r2
    d7b8:	1912983a 	sll	r9,r3,r4
    d7bc:	308ed83a 	srl	r7,r6,r2
    d7c0:	3108983a 	sll	r4,r6,r4
    d7c4:	1884d83a 	srl	r2,r3,r2
    d7c8:	49ceb03a 	or	r7,r9,r7
    d7cc:	2008c03a 	cmpne	r4,r4,zero
    d7d0:	390eb03a 	or	r7,r7,r4
    d7d4:	003f4706 	br	d4f4 <__subdf3+0x260>
    d7d8:	2c48b03a 	or	r4,r5,r17
    d7dc:	20003e26 	beq	r4,zero,d8d8 <__subdf3+0x644>
    d7e0:	0084303a 	nor	r2,zero,r2
    d7e4:	10003a1e 	bne	r2,zero,d8d0 <__subdf3+0x63c>
    d7e8:	3463c83a 	sub	r17,r6,r17
    d7ec:	194bc83a 	sub	r5,r3,r5
    d7f0:	344d803a 	cmpltu	r6,r6,r17
    d7f4:	298bc83a 	sub	r5,r5,r6
    d7f8:	5021883a 	mov	r16,r10
    d7fc:	3825883a 	mov	r18,r7
    d800:	003f0406 	br	d414 <__subdf3+0x180>
    d804:	1023883a 	mov	r17,r2
    d808:	003f0706 	br	d428 <__subdf3+0x194>
    d80c:	0101ffc4 	movi	r4,2047
    d810:	813f331e 	bne	r16,r4,d4e0 <__subdf3+0x24c>
    d814:	003ec206 	br	d320 <__subdf3+0x8c>
    d818:	0027883a 	mov	r19,zero
    d81c:	003fb006 	br	d6e0 <__subdf3+0x44c>
    d820:	0005883a 	mov	r2,zero
    d824:	003fbb06 	br	d714 <__subdf3+0x480>
    d828:	2c44b03a 	or	r2,r5,r17
    d82c:	80008b1e 	bne	r16,zero,da5c <__subdf3+0x7c8>
    d830:	1000b526 	beq	r2,zero,db08 <__subdf3+0x874>
    d834:	1984b03a 	or	r2,r3,r6
    d838:	103eb926 	beq	r2,zero,d320 <__subdf3+0x8c>
    d83c:	3449883a 	add	r4,r6,r17
    d840:	2463803a 	cmpltu	r17,r4,r17
    d844:	194b883a 	add	r5,r3,r5
    d848:	2c4b883a 	add	r5,r5,r17
    d84c:	2880202c 	andhi	r2,r5,128
    d850:	2023883a 	mov	r17,r4
    d854:	103f5c26 	beq	r2,zero,d5c8 <__subdf3+0x334>
    d858:	00bfe034 	movhi	r2,65408
    d85c:	10bfffc4 	addi	r2,r2,-1
    d860:	4821883a 	mov	r16,r9
    d864:	288a703a 	and	r5,r5,r2
    d868:	003ead06 	br	d320 <__subdf3+0x8c>
    d86c:	2c44b03a 	or	r2,r5,r17
    d870:	8000291e 	bne	r16,zero,d918 <__subdf3+0x684>
    d874:	10004f1e 	bne	r2,zero,d9b4 <__subdf3+0x720>
    d878:	1984b03a 	or	r2,r3,r6
    d87c:	10000426 	beq	r2,zero,d890 <__subdf3+0x5fc>
    d880:	180b883a 	mov	r5,r3
    d884:	3023883a 	mov	r17,r6
    d888:	3825883a 	mov	r18,r7
    d88c:	003ea406 	br	d320 <__subdf3+0x8c>
    d890:	0011883a 	mov	r8,zero
    d894:	000b883a 	mov	r5,zero
    d898:	0023883a 	mov	r17,zero
    d89c:	003f0006 	br	d4a0 <__subdf3+0x20c>
    d8a0:	11fff804 	addi	r7,r2,-32
    d8a4:	19c8d83a 	srl	r4,r3,r7
    d8a8:	01c00804 	movi	r7,32
    d8ac:	11c07e26 	beq	r2,r7,daa8 <__subdf3+0x814>
    d8b0:	01c01004 	movi	r7,64
    d8b4:	3885c83a 	sub	r2,r7,r2
    d8b8:	1884983a 	sll	r2,r3,r2
    d8bc:	118cb03a 	or	r6,r2,r6
    d8c0:	300ec03a 	cmpne	r7,r6,zero
    d8c4:	390eb03a 	or	r7,r7,r4
    d8c8:	0005883a 	mov	r2,zero
    d8cc:	003f0906 	br	d4f4 <__subdf3+0x260>
    d8d0:	0101ffc4 	movi	r4,2047
    d8d4:	513f991e 	bne	r10,r4,d73c <__subdf3+0x4a8>
    d8d8:	180b883a 	mov	r5,r3
    d8dc:	3023883a 	mov	r17,r6
    d8e0:	5021883a 	mov	r16,r10
    d8e4:	3825883a 	mov	r18,r7
    d8e8:	003e8d06 	br	d320 <__subdf3+0x8c>
    d8ec:	80001a1e 	bne	r16,zero,d958 <__subdf3+0x6c4>
    d8f0:	2c48b03a 	or	r4,r5,r17
    d8f4:	20005526 	beq	r4,zero,da4c <__subdf3+0x7b8>
    d8f8:	0084303a 	nor	r2,zero,r2
    d8fc:	1000511e 	bne	r2,zero,da44 <__subdf3+0x7b0>
    d900:	89a3883a 	add	r17,r17,r6
    d904:	194b883a 	add	r5,r3,r5
    d908:	898d803a 	cmpltu	r6,r17,r6
    d90c:	298b883a 	add	r5,r5,r6
    d910:	5021883a 	mov	r16,r10
    d914:	003efc06 	br	d508 <__subdf3+0x274>
    d918:	1000341e 	bne	r2,zero,d9ec <__subdf3+0x758>
    d91c:	1984b03a 	or	r2,r3,r6
    d920:	10006f26 	beq	r2,zero,dae0 <__subdf3+0x84c>
    d924:	180b883a 	mov	r5,r3
    d928:	3023883a 	mov	r17,r6
    d92c:	3825883a 	mov	r18,r7
    d930:	0401ffc4 	movi	r16,2047
    d934:	003e7a06 	br	d320 <__subdf3+0x8c>
    d938:	2c62b03a 	or	r17,r5,r17
    d93c:	8822c03a 	cmpne	r17,r17,zero
    d940:	0005883a 	mov	r2,zero
    d944:	003f8a06 	br	d770 <__subdf3+0x4dc>
    d948:	3821883a 	mov	r16,r7
    d94c:	000b883a 	mov	r5,zero
    d950:	0023883a 	mov	r17,zero
    d954:	003ed206 	br	d4a0 <__subdf3+0x20c>
    d958:	0101ffc4 	movi	r4,2047
    d95c:	51003b26 	beq	r10,r4,da4c <__subdf3+0x7b8>
    d960:	0085c83a 	sub	r2,zero,r2
    d964:	29402034 	orhi	r5,r5,128
    d968:	01000e04 	movi	r4,56
    d96c:	20806216 	blt	r4,r2,daf8 <__subdf3+0x864>
    d970:	010007c4 	movi	r4,31
    d974:	20806b16 	blt	r4,r2,db24 <__subdf3+0x890>
    d978:	01000804 	movi	r4,32
    d97c:	2089c83a 	sub	r4,r4,r2
    d980:	2912983a 	sll	r9,r5,r4
    d984:	888ed83a 	srl	r7,r17,r2
    d988:	8908983a 	sll	r4,r17,r4
    d98c:	2884d83a 	srl	r2,r5,r2
    d990:	49e2b03a 	or	r17,r9,r7
    d994:	2008c03a 	cmpne	r4,r4,zero
    d998:	8922b03a 	or	r17,r17,r4
    d99c:	89a3883a 	add	r17,r17,r6
    d9a0:	10c5883a 	add	r2,r2,r3
    d9a4:	898d803a 	cmpltu	r6,r17,r6
    d9a8:	118b883a 	add	r5,r2,r6
    d9ac:	5021883a 	mov	r16,r10
    d9b0:	003ed506 	br	d508 <__subdf3+0x274>
    d9b4:	1984b03a 	or	r2,r3,r6
    d9b8:	103e5926 	beq	r2,zero,d320 <__subdf3+0x8c>
    d9bc:	8989c83a 	sub	r4,r17,r6
    d9c0:	8911803a 	cmpltu	r8,r17,r4
    d9c4:	28c5c83a 	sub	r2,r5,r3
    d9c8:	1205c83a 	sub	r2,r2,r8
    d9cc:	1200202c 	andhi	r8,r2,128
    d9d0:	403ef926 	beq	r8,zero,d5b8 <__subdf3+0x324>
    d9d4:	3463c83a 	sub	r17,r6,r17
    d9d8:	194bc83a 	sub	r5,r3,r5
    d9dc:	344d803a 	cmpltu	r6,r6,r17
    d9e0:	298bc83a 	sub	r5,r5,r6
    d9e4:	3825883a 	mov	r18,r7
    d9e8:	003e4d06 	br	d320 <__subdf3+0x8c>
    d9ec:	1984b03a 	or	r2,r3,r6
    d9f0:	10002b26 	beq	r2,zero,daa0 <__subdf3+0x80c>
    d9f4:	2808d0fa 	srli	r4,r5,3
    d9f8:	8822d0fa 	srli	r17,r17,3
    d9fc:	280a977a 	slli	r5,r5,29
    da00:	2080022c 	andhi	r2,r4,8
    da04:	2c62b03a 	or	r17,r5,r17
    da08:	10000826 	beq	r2,zero,da2c <__subdf3+0x798>
    da0c:	1810d0fa 	srli	r8,r3,3
    da10:	4080022c 	andhi	r2,r8,8
    da14:	1000051e 	bne	r2,zero,da2c <__subdf3+0x798>
    da18:	300cd0fa 	srli	r6,r6,3
    da1c:	1804977a 	slli	r2,r3,29
    da20:	4009883a 	mov	r4,r8
    da24:	3825883a 	mov	r18,r7
    da28:	11a2b03a 	or	r17,r2,r6
    da2c:	880ad77a 	srli	r5,r17,29
    da30:	200890fa 	slli	r4,r4,3
    da34:	882290fa 	slli	r17,r17,3
    da38:	0401ffc4 	movi	r16,2047
    da3c:	290ab03a 	or	r5,r5,r4
    da40:	003e3706 	br	d320 <__subdf3+0x8c>
    da44:	0101ffc4 	movi	r4,2047
    da48:	513fc71e 	bne	r10,r4,d968 <__subdf3+0x6d4>
    da4c:	180b883a 	mov	r5,r3
    da50:	3023883a 	mov	r17,r6
    da54:	5021883a 	mov	r16,r10
    da58:	003e3106 	br	d320 <__subdf3+0x8c>
    da5c:	10002d26 	beq	r2,zero,db14 <__subdf3+0x880>
    da60:	1984b03a 	or	r2,r3,r6
    da64:	10000e26 	beq	r2,zero,daa0 <__subdf3+0x80c>
    da68:	2808d0fa 	srli	r4,r5,3
    da6c:	8822d0fa 	srli	r17,r17,3
    da70:	280a977a 	slli	r5,r5,29
    da74:	2080022c 	andhi	r2,r4,8
    da78:	2c62b03a 	or	r17,r5,r17
    da7c:	103feb26 	beq	r2,zero,da2c <__subdf3+0x798>
    da80:	180ed0fa 	srli	r7,r3,3
    da84:	3880022c 	andhi	r2,r7,8
    da88:	103fe81e 	bne	r2,zero,da2c <__subdf3+0x798>
    da8c:	300cd0fa 	srli	r6,r6,3
    da90:	1804977a 	slli	r2,r3,29
    da94:	3809883a 	mov	r4,r7
    da98:	11a2b03a 	or	r17,r2,r6
    da9c:	003fe306 	br	da2c <__subdf3+0x798>
    daa0:	0401ffc4 	movi	r16,2047
    daa4:	003e1e06 	br	d320 <__subdf3+0x8c>
    daa8:	0005883a 	mov	r2,zero
    daac:	003f8306 	br	d8bc <__subdf3+0x628>
    dab0:	113ff804 	addi	r4,r2,-32
    dab4:	02000804 	movi	r8,32
    dab8:	2908d83a 	srl	r4,r5,r4
    dabc:	12002526 	beq	r2,r8,db54 <__subdf3+0x8c0>
    dac0:	02001004 	movi	r8,64
    dac4:	4085c83a 	sub	r2,r8,r2
    dac8:	288a983a 	sll	r5,r5,r2
    dacc:	2c62b03a 	or	r17,r5,r17
    dad0:	8822c03a 	cmpne	r17,r17,zero
    dad4:	8922b03a 	or	r17,r17,r4
    dad8:	0005883a 	mov	r2,zero
    dadc:	003f2406 	br	d770 <__subdf3+0x4dc>
    dae0:	01402034 	movhi	r5,128
    dae4:	0011883a 	mov	r8,zero
    dae8:	297fffc4 	addi	r5,r5,-1
    daec:	047ffe04 	movi	r17,-8
    daf0:	0401ffc4 	movi	r16,2047
    daf4:	003e6a06 	br	d4a0 <__subdf3+0x20c>
    daf8:	2c62b03a 	or	r17,r5,r17
    dafc:	8822c03a 	cmpne	r17,r17,zero
    db00:	0005883a 	mov	r2,zero
    db04:	003fa506 	br	d99c <__subdf3+0x708>
    db08:	180b883a 	mov	r5,r3
    db0c:	3023883a 	mov	r17,r6
    db10:	003e0306 	br	d320 <__subdf3+0x8c>
    db14:	180b883a 	mov	r5,r3
    db18:	3023883a 	mov	r17,r6
    db1c:	0401ffc4 	movi	r16,2047
    db20:	003dff06 	br	d320 <__subdf3+0x8c>
    db24:	113ff804 	addi	r4,r2,-32
    db28:	01c00804 	movi	r7,32
    db2c:	2908d83a 	srl	r4,r5,r4
    db30:	11c00a26 	beq	r2,r7,db5c <__subdf3+0x8c8>
    db34:	01c01004 	movi	r7,64
    db38:	3885c83a 	sub	r2,r7,r2
    db3c:	288a983a 	sll	r5,r5,r2
    db40:	2c62b03a 	or	r17,r5,r17
    db44:	8822c03a 	cmpne	r17,r17,zero
    db48:	8922b03a 	or	r17,r17,r4
    db4c:	0005883a 	mov	r2,zero
    db50:	003f9206 	br	d99c <__subdf3+0x708>
    db54:	000b883a 	mov	r5,zero
    db58:	003fdc06 	br	dacc <__subdf3+0x838>
    db5c:	000b883a 	mov	r5,zero
    db60:	003ff706 	br	db40 <__subdf3+0x8ac>

0000db64 <__fixdfsi>:
    db64:	2806d53a 	srli	r3,r5,20
    db68:	00800434 	movhi	r2,16
    db6c:	10bfffc4 	addi	r2,r2,-1
    db70:	18c1ffcc 	andi	r3,r3,2047
    db74:	0180ff84 	movi	r6,1022
    db78:	2884703a 	and	r2,r5,r2
    db7c:	280ad7fa 	srli	r5,r5,31
    db80:	30c0130e 	bge	r6,r3,dbd0 <__fixdfsi+0x6c>
    db84:	01810744 	movi	r6,1053
    db88:	30c00d16 	blt	r6,r3,dbc0 <__fixdfsi+0x5c>
    db8c:	01810cc4 	movi	r6,1075
    db90:	30cdc83a 	sub	r6,r6,r3
    db94:	01c007c4 	movi	r7,31
    db98:	10800434 	orhi	r2,r2,16
    db9c:	39800e0e 	bge	r7,r6,dbd8 <__fixdfsi+0x74>
    dba0:	010104c4 	movi	r4,1043
    dba4:	20c7c83a 	sub	r3,r4,r3
    dba8:	10c6d83a 	srl	r3,r2,r3
    dbac:	29403fcc 	andi	r5,r5,255
    dbb0:	0145c83a 	sub	r2,zero,r5
    dbb4:	1884f03a 	xor	r2,r3,r2
    dbb8:	1145883a 	add	r2,r2,r5
    dbbc:	f800283a 	ret
    dbc0:	00a00034 	movhi	r2,32768
    dbc4:	10bfffc4 	addi	r2,r2,-1
    dbc8:	2885883a 	add	r2,r5,r2
    dbcc:	f800283a 	ret
    dbd0:	0005883a 	mov	r2,zero
    dbd4:	f800283a 	ret
    dbd8:	18fefb44 	addi	r3,r3,-1043
    dbdc:	2188d83a 	srl	r4,r4,r6
    dbe0:	10c6983a 	sll	r3,r2,r3
    dbe4:	20c6b03a 	or	r3,r4,r3
    dbe8:	003ff006 	br	dbac <__fixdfsi+0x48>

0000dbec <__floatsidf>:
    dbec:	defffd04 	addi	sp,sp,-12
    dbf0:	dc400115 	stw	r17,4(sp)
    dbf4:	dfc00215 	stw	ra,8(sp)
    dbf8:	dc000015 	stw	r16,0(sp)
    dbfc:	2023883a 	mov	r17,r4
    dc00:	20001426 	beq	r4,zero,dc54 <__floatsidf+0x68>
    dc04:	2020d7fa 	srli	r16,r4,31
    dc08:	80000126 	beq	r16,zero,dc10 <__floatsidf+0x24>
    dc0c:	0123c83a 	sub	r17,zero,r4
    dc10:	8809883a 	mov	r4,r17
    dc14:	000145c0 	call	145c <__clzsi2>
    dc18:	01410784 	movi	r5,1054
    dc1c:	00c00284 	movi	r3,10
    dc20:	288bc83a 	sub	r5,r5,r2
    dc24:	18801c16 	blt	r3,r2,dc98 <__floatsidf+0xac>
    dc28:	00c002c4 	movi	r3,11
    dc2c:	1887c83a 	sub	r3,r3,r2
    dc30:	88c8d83a 	srl	r4,r17,r3
    dc34:	00c00434 	movhi	r3,16
    dc38:	18ffffc4 	addi	r3,r3,-1
    dc3c:	10800544 	addi	r2,r2,21
    dc40:	20c8703a 	and	r4,r4,r3
    dc44:	8884983a 	sll	r2,r17,r2
    dc48:	28c1ffcc 	andi	r3,r5,2047
    dc4c:	800d883a 	mov	r6,r16
    dc50:	00000406 	br	dc64 <__floatsidf+0x78>
    dc54:	000d883a 	mov	r6,zero
    dc58:	0007883a 	mov	r3,zero
    dc5c:	0009883a 	mov	r4,zero
    dc60:	0005883a 	mov	r2,zero
    dc64:	180a953a 	slli	r5,r3,20
    dc68:	31803fcc 	andi	r6,r6,255
    dc6c:	00c00434 	movhi	r3,16
    dc70:	300c97fa 	slli	r6,r6,31
    dc74:	18ffffc4 	addi	r3,r3,-1
    dc78:	20c6703a 	and	r3,r4,r3
    dc7c:	1946b03a 	or	r3,r3,r5
    dc80:	1986b03a 	or	r3,r3,r6
    dc84:	dfc00217 	ldw	ra,8(sp)
    dc88:	dc400117 	ldw	r17,4(sp)
    dc8c:	dc000017 	ldw	r16,0(sp)
    dc90:	dec00304 	addi	sp,sp,12
    dc94:	f800283a 	ret
    dc98:	10fffd44 	addi	r3,r2,-11
    dc9c:	88c8983a 	sll	r4,r17,r3
    dca0:	00800434 	movhi	r2,16
    dca4:	10bfffc4 	addi	r2,r2,-1
    dca8:	2088703a 	and	r4,r4,r2
    dcac:	28c1ffcc 	andi	r3,r5,2047
    dcb0:	800d883a 	mov	r6,r16
    dcb4:	0005883a 	mov	r2,zero
    dcb8:	003fea06 	br	dc64 <__floatsidf+0x78>

0000dcbc <__floatunsidf>:
    dcbc:	defffe04 	addi	sp,sp,-8
    dcc0:	dc000015 	stw	r16,0(sp)
    dcc4:	dfc00115 	stw	ra,4(sp)
    dcc8:	2021883a 	mov	r16,r4
    dccc:	20001026 	beq	r4,zero,dd10 <__floatunsidf+0x54>
    dcd0:	000145c0 	call	145c <__clzsi2>
    dcd4:	01410784 	movi	r5,1054
    dcd8:	100d883a 	mov	r6,r2
    dcdc:	288bc83a 	sub	r5,r5,r2
    dce0:	00800284 	movi	r2,10
    dce4:	11801616 	blt	r2,r6,dd40 <__floatunsidf+0x84>
    dce8:	008002c4 	movi	r2,11
    dcec:	1185c83a 	sub	r2,r2,r6
    dcf0:	8084d83a 	srl	r2,r16,r2
    dcf4:	00c00434 	movhi	r3,16
    dcf8:	31c00544 	addi	r7,r6,21
    dcfc:	18ffffc4 	addi	r3,r3,-1
    dd00:	81e0983a 	sll	r16,r16,r7
    dd04:	10cc703a 	and	r6,r2,r3
    dd08:	2941ffcc 	andi	r5,r5,2047
    dd0c:	00000206 	br	dd18 <__floatunsidf+0x5c>
    dd10:	000b883a 	mov	r5,zero
    dd14:	000d883a 	mov	r6,zero
    dd18:	280a953a 	slli	r5,r5,20
    dd1c:	00c00434 	movhi	r3,16
    dd20:	18ffffc4 	addi	r3,r3,-1
    dd24:	30c6703a 	and	r3,r6,r3
    dd28:	8005883a 	mov	r2,r16
    dd2c:	1946b03a 	or	r3,r3,r5
    dd30:	dfc00117 	ldw	ra,4(sp)
    dd34:	dc000017 	ldw	r16,0(sp)
    dd38:	dec00204 	addi	sp,sp,8
    dd3c:	f800283a 	ret
    dd40:	31bffd44 	addi	r6,r6,-11
    dd44:	818c983a 	sll	r6,r16,r6
    dd48:	00800434 	movhi	r2,16
    dd4c:	10bfffc4 	addi	r2,r2,-1
    dd50:	2941ffcc 	andi	r5,r5,2047
    dd54:	0021883a 	mov	r16,zero
    dd58:	308c703a 	and	r6,r6,r2
    dd5c:	003fee06 	br	dd18 <__floatunsidf+0x5c>

0000dd60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dd60:	defffe04 	addi	sp,sp,-8
    dd64:	dfc00115 	stw	ra,4(sp)
    dd68:	df000015 	stw	fp,0(sp)
    dd6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dd70:	00800074 	movhi	r2,1
    dd74:	10914704 	addi	r2,r2,17692
    dd78:	10800017 	ldw	r2,0(r2)
    dd7c:	10000526 	beq	r2,zero,dd94 <alt_get_errno+0x34>
    dd80:	00800074 	movhi	r2,1
    dd84:	10914704 	addi	r2,r2,17692
    dd88:	10800017 	ldw	r2,0(r2)
    dd8c:	103ee83a 	callr	r2
    dd90:	00000206 	br	dd9c <alt_get_errno+0x3c>
    dd94:	00800074 	movhi	r2,1
    dd98:	10915404 	addi	r2,r2,17744
}
    dd9c:	e037883a 	mov	sp,fp
    dda0:	dfc00117 	ldw	ra,4(sp)
    dda4:	df000017 	ldw	fp,0(sp)
    dda8:	dec00204 	addi	sp,sp,8
    ddac:	f800283a 	ret

0000ddb0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ddb0:	defffb04 	addi	sp,sp,-20
    ddb4:	dfc00415 	stw	ra,16(sp)
    ddb8:	df000315 	stw	fp,12(sp)
    ddbc:	df000304 	addi	fp,sp,12
    ddc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ddc4:	e0bfff17 	ldw	r2,-4(fp)
    ddc8:	10000816 	blt	r2,zero,ddec <close+0x3c>
    ddcc:	e13fff17 	ldw	r4,-4(fp)
    ddd0:	01400304 	movi	r5,12
    ddd4:	0000dc40 	call	dc4 <__mulsi3>
    ddd8:	1007883a 	mov	r3,r2
    dddc:	00800074 	movhi	r2,1
    dde0:	108b9c04 	addi	r2,r2,11888
    dde4:	1885883a 	add	r2,r3,r2
    dde8:	00000106 	br	ddf0 <close+0x40>
    ddec:	0005883a 	mov	r2,zero
    ddf0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ddf4:	e0bffd17 	ldw	r2,-12(fp)
    ddf8:	10001926 	beq	r2,zero,de60 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ddfc:	e0bffd17 	ldw	r2,-12(fp)
    de00:	10800017 	ldw	r2,0(r2)
    de04:	10800417 	ldw	r2,16(r2)
    de08:	10000626 	beq	r2,zero,de24 <close+0x74>
    de0c:	e0bffd17 	ldw	r2,-12(fp)
    de10:	10800017 	ldw	r2,0(r2)
    de14:	10800417 	ldw	r2,16(r2)
    de18:	e13ffd17 	ldw	r4,-12(fp)
    de1c:	103ee83a 	callr	r2
    de20:	00000106 	br	de28 <close+0x78>
    de24:	0005883a 	mov	r2,zero
    de28:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    de2c:	e13fff17 	ldw	r4,-4(fp)
    de30:	000e3f00 	call	e3f0 <alt_release_fd>
    if (rval < 0)
    de34:	e0bffe17 	ldw	r2,-8(fp)
    de38:	1000070e 	bge	r2,zero,de58 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    de3c:	000dd600 	call	dd60 <alt_get_errno>
    de40:	1007883a 	mov	r3,r2
    de44:	e0bffe17 	ldw	r2,-8(fp)
    de48:	0085c83a 	sub	r2,zero,r2
    de4c:	18800015 	stw	r2,0(r3)
      return -1;
    de50:	00bfffc4 	movi	r2,-1
    de54:	00000706 	br	de74 <close+0xc4>
    }
    return 0;
    de58:	0005883a 	mov	r2,zero
    de5c:	00000506 	br	de74 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    de60:	000dd600 	call	dd60 <alt_get_errno>
    de64:	1007883a 	mov	r3,r2
    de68:	00801444 	movi	r2,81
    de6c:	18800015 	stw	r2,0(r3)
    return -1;
    de70:	00bfffc4 	movi	r2,-1
  }
}
    de74:	e037883a 	mov	sp,fp
    de78:	dfc00117 	ldw	ra,4(sp)
    de7c:	df000017 	ldw	fp,0(sp)
    de80:	dec00204 	addi	sp,sp,8
    de84:	f800283a 	ret

0000de88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    de88:	defffc04 	addi	sp,sp,-16
    de8c:	df000315 	stw	fp,12(sp)
    de90:	df000304 	addi	fp,sp,12
    de94:	e13ffd15 	stw	r4,-12(fp)
    de98:	e17ffe15 	stw	r5,-8(fp)
    de9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    dea0:	e0bfff17 	ldw	r2,-4(fp)
}
    dea4:	e037883a 	mov	sp,fp
    dea8:	df000017 	ldw	fp,0(sp)
    deac:	dec00104 	addi	sp,sp,4
    deb0:	f800283a 	ret

0000deb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    deb4:	defffe04 	addi	sp,sp,-8
    deb8:	dfc00115 	stw	ra,4(sp)
    debc:	df000015 	stw	fp,0(sp)
    dec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dec4:	00800074 	movhi	r2,1
    dec8:	10914704 	addi	r2,r2,17692
    decc:	10800017 	ldw	r2,0(r2)
    ded0:	10000526 	beq	r2,zero,dee8 <alt_get_errno+0x34>
    ded4:	00800074 	movhi	r2,1
    ded8:	10914704 	addi	r2,r2,17692
    dedc:	10800017 	ldw	r2,0(r2)
    dee0:	103ee83a 	callr	r2
    dee4:	00000206 	br	def0 <alt_get_errno+0x3c>
    dee8:	00800074 	movhi	r2,1
    deec:	10915404 	addi	r2,r2,17744
}
    def0:	e037883a 	mov	sp,fp
    def4:	dfc00117 	ldw	ra,4(sp)
    def8:	df000017 	ldw	fp,0(sp)
    defc:	dec00204 	addi	sp,sp,8
    df00:	f800283a 	ret

0000df04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    df04:	defffb04 	addi	sp,sp,-20
    df08:	dfc00415 	stw	ra,16(sp)
    df0c:	df000315 	stw	fp,12(sp)
    df10:	df000304 	addi	fp,sp,12
    df14:	e13ffe15 	stw	r4,-8(fp)
    df18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    df1c:	e0bffe17 	ldw	r2,-8(fp)
    df20:	10000816 	blt	r2,zero,df44 <fstat+0x40>
    df24:	e13ffe17 	ldw	r4,-8(fp)
    df28:	01400304 	movi	r5,12
    df2c:	0000dc40 	call	dc4 <__mulsi3>
    df30:	1007883a 	mov	r3,r2
    df34:	00800074 	movhi	r2,1
    df38:	108b9c04 	addi	r2,r2,11888
    df3c:	1885883a 	add	r2,r3,r2
    df40:	00000106 	br	df48 <fstat+0x44>
    df44:	0005883a 	mov	r2,zero
    df48:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    df4c:	e0bffd17 	ldw	r2,-12(fp)
    df50:	10001026 	beq	r2,zero,df94 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    df54:	e0bffd17 	ldw	r2,-12(fp)
    df58:	10800017 	ldw	r2,0(r2)
    df5c:	10800817 	ldw	r2,32(r2)
    df60:	10000726 	beq	r2,zero,df80 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    df64:	e0bffd17 	ldw	r2,-12(fp)
    df68:	10800017 	ldw	r2,0(r2)
    df6c:	10800817 	ldw	r2,32(r2)
    df70:	e13ffd17 	ldw	r4,-12(fp)
    df74:	e17fff17 	ldw	r5,-4(fp)
    df78:	103ee83a 	callr	r2
    df7c:	00000a06 	br	dfa8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    df80:	e0bfff17 	ldw	r2,-4(fp)
    df84:	00c80004 	movi	r3,8192
    df88:	10c00115 	stw	r3,4(r2)
      return 0;
    df8c:	0005883a 	mov	r2,zero
    df90:	00000506 	br	dfa8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    df94:	000deb40 	call	deb4 <alt_get_errno>
    df98:	1007883a 	mov	r3,r2
    df9c:	00801444 	movi	r2,81
    dfa0:	18800015 	stw	r2,0(r3)
    return -1;
    dfa4:	00bfffc4 	movi	r2,-1
  }
}
    dfa8:	e037883a 	mov	sp,fp
    dfac:	dfc00117 	ldw	ra,4(sp)
    dfb0:	df000017 	ldw	fp,0(sp)
    dfb4:	dec00204 	addi	sp,sp,8
    dfb8:	f800283a 	ret

0000dfbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dfbc:	defffe04 	addi	sp,sp,-8
    dfc0:	dfc00115 	stw	ra,4(sp)
    dfc4:	df000015 	stw	fp,0(sp)
    dfc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dfcc:	00800074 	movhi	r2,1
    dfd0:	10914704 	addi	r2,r2,17692
    dfd4:	10800017 	ldw	r2,0(r2)
    dfd8:	10000526 	beq	r2,zero,dff0 <alt_get_errno+0x34>
    dfdc:	00800074 	movhi	r2,1
    dfe0:	10914704 	addi	r2,r2,17692
    dfe4:	10800017 	ldw	r2,0(r2)
    dfe8:	103ee83a 	callr	r2
    dfec:	00000206 	br	dff8 <alt_get_errno+0x3c>
    dff0:	00800074 	movhi	r2,1
    dff4:	10915404 	addi	r2,r2,17744
}
    dff8:	e037883a 	mov	sp,fp
    dffc:	dfc00117 	ldw	ra,4(sp)
    e000:	df000017 	ldw	fp,0(sp)
    e004:	dec00204 	addi	sp,sp,8
    e008:	f800283a 	ret

0000e00c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e00c:	deffed04 	addi	sp,sp,-76
    e010:	dfc01215 	stw	ra,72(sp)
    e014:	df001115 	stw	fp,68(sp)
    e018:	df001104 	addi	fp,sp,68
    e01c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e020:	e0bfff17 	ldw	r2,-4(fp)
    e024:	10000816 	blt	r2,zero,e048 <isatty+0x3c>
    e028:	e13fff17 	ldw	r4,-4(fp)
    e02c:	01400304 	movi	r5,12
    e030:	0000dc40 	call	dc4 <__mulsi3>
    e034:	1007883a 	mov	r3,r2
    e038:	00800074 	movhi	r2,1
    e03c:	108b9c04 	addi	r2,r2,11888
    e040:	1885883a 	add	r2,r3,r2
    e044:	00000106 	br	e04c <isatty+0x40>
    e048:	0005883a 	mov	r2,zero
    e04c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e050:	e0bfef17 	ldw	r2,-68(fp)
    e054:	10000e26 	beq	r2,zero,e090 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e058:	e0bfef17 	ldw	r2,-68(fp)
    e05c:	10800017 	ldw	r2,0(r2)
    e060:	10800817 	ldw	r2,32(r2)
    e064:	1000021e 	bne	r2,zero,e070 <isatty+0x64>
    {
      return 1;
    e068:	00800044 	movi	r2,1
    e06c:	00000d06 	br	e0a4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e070:	e0bff004 	addi	r2,fp,-64
    e074:	e13fff17 	ldw	r4,-4(fp)
    e078:	100b883a 	mov	r5,r2
    e07c:	000df040 	call	df04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e080:	e0bff117 	ldw	r2,-60(fp)
    e084:	10880020 	cmpeqi	r2,r2,8192
    e088:	10803fcc 	andi	r2,r2,255
    e08c:	00000506 	br	e0a4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e090:	000dfbc0 	call	dfbc <alt_get_errno>
    e094:	1007883a 	mov	r3,r2
    e098:	00801444 	movi	r2,81
    e09c:	18800015 	stw	r2,0(r3)
    return 0;
    e0a0:	0005883a 	mov	r2,zero
  }
}
    e0a4:	e037883a 	mov	sp,fp
    e0a8:	dfc00117 	ldw	ra,4(sp)
    e0ac:	df000017 	ldw	fp,0(sp)
    e0b0:	dec00204 	addi	sp,sp,8
    e0b4:	f800283a 	ret

0000e0b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e0b8:	defffe04 	addi	sp,sp,-8
    e0bc:	dfc00115 	stw	ra,4(sp)
    e0c0:	df000015 	stw	fp,0(sp)
    e0c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e0c8:	00800074 	movhi	r2,1
    e0cc:	10914704 	addi	r2,r2,17692
    e0d0:	10800017 	ldw	r2,0(r2)
    e0d4:	10000526 	beq	r2,zero,e0ec <alt_get_errno+0x34>
    e0d8:	00800074 	movhi	r2,1
    e0dc:	10914704 	addi	r2,r2,17692
    e0e0:	10800017 	ldw	r2,0(r2)
    e0e4:	103ee83a 	callr	r2
    e0e8:	00000206 	br	e0f4 <alt_get_errno+0x3c>
    e0ec:	00800074 	movhi	r2,1
    e0f0:	10915404 	addi	r2,r2,17744
}
    e0f4:	e037883a 	mov	sp,fp
    e0f8:	dfc00117 	ldw	ra,4(sp)
    e0fc:	df000017 	ldw	fp,0(sp)
    e100:	dec00204 	addi	sp,sp,8
    e104:	f800283a 	ret

0000e108 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e108:	defff904 	addi	sp,sp,-28
    e10c:	dfc00615 	stw	ra,24(sp)
    e110:	df000515 	stw	fp,20(sp)
    e114:	df000504 	addi	fp,sp,20
    e118:	e13ffd15 	stw	r4,-12(fp)
    e11c:	e17ffe15 	stw	r5,-8(fp)
    e120:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e124:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e128:	e0bffd17 	ldw	r2,-12(fp)
    e12c:	10000816 	blt	r2,zero,e150 <lseek+0x48>
    e130:	e13ffd17 	ldw	r4,-12(fp)
    e134:	01400304 	movi	r5,12
    e138:	0000dc40 	call	dc4 <__mulsi3>
    e13c:	1007883a 	mov	r3,r2
    e140:	00800074 	movhi	r2,1
    e144:	108b9c04 	addi	r2,r2,11888
    e148:	1885883a 	add	r2,r3,r2
    e14c:	00000106 	br	e154 <lseek+0x4c>
    e150:	0005883a 	mov	r2,zero
    e154:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e158:	e0bffc17 	ldw	r2,-16(fp)
    e15c:	10001026 	beq	r2,zero,e1a0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e160:	e0bffc17 	ldw	r2,-16(fp)
    e164:	10800017 	ldw	r2,0(r2)
    e168:	10800717 	ldw	r2,28(r2)
    e16c:	10000926 	beq	r2,zero,e194 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e170:	e0bffc17 	ldw	r2,-16(fp)
    e174:	10800017 	ldw	r2,0(r2)
    e178:	10800717 	ldw	r2,28(r2)
    e17c:	e13ffc17 	ldw	r4,-16(fp)
    e180:	e17ffe17 	ldw	r5,-8(fp)
    e184:	e1bfff17 	ldw	r6,-4(fp)
    e188:	103ee83a 	callr	r2
    e18c:	e0bffb15 	stw	r2,-20(fp)
    e190:	00000506 	br	e1a8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e194:	00bfde84 	movi	r2,-134
    e198:	e0bffb15 	stw	r2,-20(fp)
    e19c:	00000206 	br	e1a8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    e1a0:	00bfebc4 	movi	r2,-81
    e1a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e1a8:	e0bffb17 	ldw	r2,-20(fp)
    e1ac:	1000070e 	bge	r2,zero,e1cc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    e1b0:	000e0b80 	call	e0b8 <alt_get_errno>
    e1b4:	1007883a 	mov	r3,r2
    e1b8:	e0bffb17 	ldw	r2,-20(fp)
    e1bc:	0085c83a 	sub	r2,zero,r2
    e1c0:	18800015 	stw	r2,0(r3)
    rc = -1;
    e1c4:	00bfffc4 	movi	r2,-1
    e1c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e1cc:	e0bffb17 	ldw	r2,-20(fp)
}
    e1d0:	e037883a 	mov	sp,fp
    e1d4:	dfc00117 	ldw	ra,4(sp)
    e1d8:	df000017 	ldw	fp,0(sp)
    e1dc:	dec00204 	addi	sp,sp,8
    e1e0:	f800283a 	ret

0000e1e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e1e4:	defffd04 	addi	sp,sp,-12
    e1e8:	dfc00215 	stw	ra,8(sp)
    e1ec:	df000115 	stw	fp,4(sp)
    e1f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e1f4:	0009883a 	mov	r4,zero
    e1f8:	000e6a80 	call	e6a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e1fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e200:	000e6dc0 	call	e6dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e204:	01000074 	movhi	r4,1
    e208:	21093c04 	addi	r4,r4,9456
    e20c:	01400074 	movhi	r5,1
    e210:	29493c04 	addi	r5,r5,9456
    e214:	01800074 	movhi	r6,1
    e218:	31893c04 	addi	r6,r6,9456
    e21c:	00114a40 	call	114a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e220:	0010f840 	call	10f84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e224:	01000074 	movhi	r4,1
    e228:	2103f804 	addi	r4,r4,4064
    e22c:	0011df80 	call	11df8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e230:	d1201917 	ldw	r4,-32668(gp)
    e234:	d0e01a17 	ldw	r3,-32664(gp)
    e238:	d0a01b17 	ldw	r2,-32660(gp)
    e23c:	180b883a 	mov	r5,r3
    e240:	100d883a 	mov	r6,r2
    e244:	00001f40 	call	1f4 <main>
    e248:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e24c:	01000044 	movi	r4,1
    e250:	000ddb00 	call	ddb0 <close>
  exit (result);
    e254:	e13fff17 	ldw	r4,-4(fp)
    e258:	0011e0c0 	call	11e0c <exit>

0000e25c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e25c:	defffe04 	addi	sp,sp,-8
    e260:	df000115 	stw	fp,4(sp)
    e264:	df000104 	addi	fp,sp,4
    e268:	e13fff15 	stw	r4,-4(fp)
}
    e26c:	e037883a 	mov	sp,fp
    e270:	df000017 	ldw	fp,0(sp)
    e274:	dec00104 	addi	sp,sp,4
    e278:	f800283a 	ret

0000e27c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e27c:	defffe04 	addi	sp,sp,-8
    e280:	df000115 	stw	fp,4(sp)
    e284:	df000104 	addi	fp,sp,4
    e288:	e13fff15 	stw	r4,-4(fp)
}
    e28c:	e037883a 	mov	sp,fp
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00104 	addi	sp,sp,4
    e298:	f800283a 	ret

0000e29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e29c:	defffe04 	addi	sp,sp,-8
    e2a0:	dfc00115 	stw	ra,4(sp)
    e2a4:	df000015 	stw	fp,0(sp)
    e2a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e2ac:	00800074 	movhi	r2,1
    e2b0:	10914704 	addi	r2,r2,17692
    e2b4:	10800017 	ldw	r2,0(r2)
    e2b8:	10000526 	beq	r2,zero,e2d0 <alt_get_errno+0x34>
    e2bc:	00800074 	movhi	r2,1
    e2c0:	10914704 	addi	r2,r2,17692
    e2c4:	10800017 	ldw	r2,0(r2)
    e2c8:	103ee83a 	callr	r2
    e2cc:	00000206 	br	e2d8 <alt_get_errno+0x3c>
    e2d0:	00800074 	movhi	r2,1
    e2d4:	10915404 	addi	r2,r2,17744
}
    e2d8:	e037883a 	mov	sp,fp
    e2dc:	dfc00117 	ldw	ra,4(sp)
    e2e0:	df000017 	ldw	fp,0(sp)
    e2e4:	dec00204 	addi	sp,sp,8
    e2e8:	f800283a 	ret

0000e2ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e2ec:	defff904 	addi	sp,sp,-28
    e2f0:	dfc00615 	stw	ra,24(sp)
    e2f4:	df000515 	stw	fp,20(sp)
    e2f8:	df000504 	addi	fp,sp,20
    e2fc:	e13ffd15 	stw	r4,-12(fp)
    e300:	e17ffe15 	stw	r5,-8(fp)
    e304:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e308:	e0bffd17 	ldw	r2,-12(fp)
    e30c:	10000816 	blt	r2,zero,e330 <read+0x44>
    e310:	e13ffd17 	ldw	r4,-12(fp)
    e314:	01400304 	movi	r5,12
    e318:	0000dc40 	call	dc4 <__mulsi3>
    e31c:	1007883a 	mov	r3,r2
    e320:	00800074 	movhi	r2,1
    e324:	108b9c04 	addi	r2,r2,11888
    e328:	1885883a 	add	r2,r3,r2
    e32c:	00000106 	br	e334 <read+0x48>
    e330:	0005883a 	mov	r2,zero
    e334:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e338:	e0bffb17 	ldw	r2,-20(fp)
    e33c:	10002226 	beq	r2,zero,e3c8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e340:	e0bffb17 	ldw	r2,-20(fp)
    e344:	10800217 	ldw	r2,8(r2)
    e348:	108000cc 	andi	r2,r2,3
    e34c:	10800060 	cmpeqi	r2,r2,1
    e350:	1000181e 	bne	r2,zero,e3b4 <read+0xc8>
        (fd->dev->read))
    e354:	e0bffb17 	ldw	r2,-20(fp)
    e358:	10800017 	ldw	r2,0(r2)
    e35c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e360:	10001426 	beq	r2,zero,e3b4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e364:	e0bffb17 	ldw	r2,-20(fp)
    e368:	10800017 	ldw	r2,0(r2)
    e36c:	10800517 	ldw	r2,20(r2)
    e370:	e0ffff17 	ldw	r3,-4(fp)
    e374:	e13ffb17 	ldw	r4,-20(fp)
    e378:	e17ffe17 	ldw	r5,-8(fp)
    e37c:	180d883a 	mov	r6,r3
    e380:	103ee83a 	callr	r2
    e384:	e0bffc15 	stw	r2,-16(fp)
    e388:	e0bffc17 	ldw	r2,-16(fp)
    e38c:	1000070e 	bge	r2,zero,e3ac <read+0xc0>
        {
          ALT_ERRNO = -rval;
    e390:	000e29c0 	call	e29c <alt_get_errno>
    e394:	1007883a 	mov	r3,r2
    e398:	e0bffc17 	ldw	r2,-16(fp)
    e39c:	0085c83a 	sub	r2,zero,r2
    e3a0:	18800015 	stw	r2,0(r3)
          return -1;
    e3a4:	00bfffc4 	movi	r2,-1
    e3a8:	00000c06 	br	e3dc <read+0xf0>
        }
        return rval;
    e3ac:	e0bffc17 	ldw	r2,-16(fp)
    e3b0:	00000a06 	br	e3dc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e3b4:	000e29c0 	call	e29c <alt_get_errno>
    e3b8:	1007883a 	mov	r3,r2
    e3bc:	00800344 	movi	r2,13
    e3c0:	18800015 	stw	r2,0(r3)
    e3c4:	00000406 	br	e3d8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e3c8:	000e29c0 	call	e29c <alt_get_errno>
    e3cc:	1007883a 	mov	r3,r2
    e3d0:	00801444 	movi	r2,81
    e3d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e3d8:	00bfffc4 	movi	r2,-1
}
    e3dc:	e037883a 	mov	sp,fp
    e3e0:	dfc00117 	ldw	ra,4(sp)
    e3e4:	df000017 	ldw	fp,0(sp)
    e3e8:	dec00204 	addi	sp,sp,8
    e3ec:	f800283a 	ret

0000e3f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e3f0:	defffc04 	addi	sp,sp,-16
    e3f4:	dfc00315 	stw	ra,12(sp)
    e3f8:	df000215 	stw	fp,8(sp)
    e3fc:	dc000115 	stw	r16,4(sp)
    e400:	df000204 	addi	fp,sp,8
    e404:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    e408:	e0bffe17 	ldw	r2,-8(fp)
    e40c:	108000d0 	cmplti	r2,r2,3
    e410:	1000111e 	bne	r2,zero,e458 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    e414:	04000074 	movhi	r16,1
    e418:	840b9c04 	addi	r16,r16,11888
    e41c:	e0bffe17 	ldw	r2,-8(fp)
    e420:	1009883a 	mov	r4,r2
    e424:	01400304 	movi	r5,12
    e428:	0000dc40 	call	dc4 <__mulsi3>
    e42c:	10800204 	addi	r2,r2,8
    e430:	8085883a 	add	r2,r16,r2
    e434:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e438:	04000074 	movhi	r16,1
    e43c:	840b9c04 	addi	r16,r16,11888
    e440:	e0bffe17 	ldw	r2,-8(fp)
    e444:	1009883a 	mov	r4,r2
    e448:	01400304 	movi	r5,12
    e44c:	0000dc40 	call	dc4 <__mulsi3>
    e450:	8085883a 	add	r2,r16,r2
    e454:	10000015 	stw	zero,0(r2)
  }
}
    e458:	e6ffff04 	addi	sp,fp,-4
    e45c:	dfc00217 	ldw	ra,8(sp)
    e460:	df000117 	ldw	fp,4(sp)
    e464:	dc000017 	ldw	r16,0(sp)
    e468:	dec00304 	addi	sp,sp,12
    e46c:	f800283a 	ret

0000e470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e470:	defff904 	addi	sp,sp,-28
    e474:	df000615 	stw	fp,24(sp)
    e478:	df000604 	addi	fp,sp,24
    e47c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e480:	0005303a 	rdctl	r2,status
    e484:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e488:	e0fffc17 	ldw	r3,-16(fp)
    e48c:	00bfff84 	movi	r2,-2
    e490:	1884703a 	and	r2,r3,r2
    e494:	1001703a 	wrctl	status,r2
  
  return context;
    e498:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e49c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e4a0:	d0a00c17 	ldw	r2,-32720(gp)
    e4a4:	10c000c4 	addi	r3,r2,3
    e4a8:	00bfff04 	movi	r2,-4
    e4ac:	1884703a 	and	r2,r3,r2
    e4b0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e4b4:	d0e00c17 	ldw	r3,-32720(gp)
    e4b8:	e0bfff17 	ldw	r2,-4(fp)
    e4bc:	1887883a 	add	r3,r3,r2
    e4c0:	00808034 	movhi	r2,512
    e4c4:	10800004 	addi	r2,r2,0
    e4c8:	10c0062e 	bgeu	r2,r3,e4e4 <sbrk+0x74>
    e4cc:	e0bffa17 	ldw	r2,-24(fp)
    e4d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4d4:	e0bffd17 	ldw	r2,-12(fp)
    e4d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e4dc:	00bfffc4 	movi	r2,-1
    e4e0:	00000b06 	br	e510 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e4e4:	d0a00c17 	ldw	r2,-32720(gp)
    e4e8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    e4ec:	d0e00c17 	ldw	r3,-32720(gp)
    e4f0:	e0bfff17 	ldw	r2,-4(fp)
    e4f4:	1885883a 	add	r2,r3,r2
    e4f8:	d0a00c15 	stw	r2,-32720(gp)
    e4fc:	e0bffa17 	ldw	r2,-24(fp)
    e500:	e0bffe15 	stw	r2,-8(fp)
    e504:	e0bffe17 	ldw	r2,-8(fp)
    e508:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e50c:	e0bffb17 	ldw	r2,-20(fp)
} 
    e510:	e037883a 	mov	sp,fp
    e514:	df000017 	ldw	fp,0(sp)
    e518:	dec00104 	addi	sp,sp,4
    e51c:	f800283a 	ret

0000e520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e520:	defffe04 	addi	sp,sp,-8
    e524:	dfc00115 	stw	ra,4(sp)
    e528:	df000015 	stw	fp,0(sp)
    e52c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e530:	00800074 	movhi	r2,1
    e534:	10914704 	addi	r2,r2,17692
    e538:	10800017 	ldw	r2,0(r2)
    e53c:	10000526 	beq	r2,zero,e554 <alt_get_errno+0x34>
    e540:	00800074 	movhi	r2,1
    e544:	10914704 	addi	r2,r2,17692
    e548:	10800017 	ldw	r2,0(r2)
    e54c:	103ee83a 	callr	r2
    e550:	00000206 	br	e55c <alt_get_errno+0x3c>
    e554:	00800074 	movhi	r2,1
    e558:	10915404 	addi	r2,r2,17744
}
    e55c:	e037883a 	mov	sp,fp
    e560:	dfc00117 	ldw	ra,4(sp)
    e564:	df000017 	ldw	fp,0(sp)
    e568:	dec00204 	addi	sp,sp,8
    e56c:	f800283a 	ret

0000e570 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e570:	defff904 	addi	sp,sp,-28
    e574:	dfc00615 	stw	ra,24(sp)
    e578:	df000515 	stw	fp,20(sp)
    e57c:	df000504 	addi	fp,sp,20
    e580:	e13ffd15 	stw	r4,-12(fp)
    e584:	e17ffe15 	stw	r5,-8(fp)
    e588:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e58c:	e0bffd17 	ldw	r2,-12(fp)
    e590:	10000816 	blt	r2,zero,e5b4 <write+0x44>
    e594:	e13ffd17 	ldw	r4,-12(fp)
    e598:	01400304 	movi	r5,12
    e59c:	0000dc40 	call	dc4 <__mulsi3>
    e5a0:	1007883a 	mov	r3,r2
    e5a4:	00800074 	movhi	r2,1
    e5a8:	108b9c04 	addi	r2,r2,11888
    e5ac:	1885883a 	add	r2,r3,r2
    e5b0:	00000106 	br	e5b8 <write+0x48>
    e5b4:	0005883a 	mov	r2,zero
    e5b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e5bc:	e0bffb17 	ldw	r2,-20(fp)
    e5c0:	10002126 	beq	r2,zero,e648 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e5c4:	e0bffb17 	ldw	r2,-20(fp)
    e5c8:	10800217 	ldw	r2,8(r2)
    e5cc:	108000cc 	andi	r2,r2,3
    e5d0:	10001826 	beq	r2,zero,e634 <write+0xc4>
    e5d4:	e0bffb17 	ldw	r2,-20(fp)
    e5d8:	10800017 	ldw	r2,0(r2)
    e5dc:	10800617 	ldw	r2,24(r2)
    e5e0:	10001426 	beq	r2,zero,e634 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e5e4:	e0bffb17 	ldw	r2,-20(fp)
    e5e8:	10800017 	ldw	r2,0(r2)
    e5ec:	10800617 	ldw	r2,24(r2)
    e5f0:	e0ffff17 	ldw	r3,-4(fp)
    e5f4:	e13ffb17 	ldw	r4,-20(fp)
    e5f8:	e17ffe17 	ldw	r5,-8(fp)
    e5fc:	180d883a 	mov	r6,r3
    e600:	103ee83a 	callr	r2
    e604:	e0bffc15 	stw	r2,-16(fp)
    e608:	e0bffc17 	ldw	r2,-16(fp)
    e60c:	1000070e 	bge	r2,zero,e62c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e610:	000e5200 	call	e520 <alt_get_errno>
    e614:	1007883a 	mov	r3,r2
    e618:	e0bffc17 	ldw	r2,-16(fp)
    e61c:	0085c83a 	sub	r2,zero,r2
    e620:	18800015 	stw	r2,0(r3)
        return -1;
    e624:	00bfffc4 	movi	r2,-1
    e628:	00000c06 	br	e65c <write+0xec>
      }
      return rval;
    e62c:	e0bffc17 	ldw	r2,-16(fp)
    e630:	00000a06 	br	e65c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e634:	000e5200 	call	e520 <alt_get_errno>
    e638:	1007883a 	mov	r3,r2
    e63c:	00800344 	movi	r2,13
    e640:	18800015 	stw	r2,0(r3)
    e644:	00000406 	br	e658 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e648:	000e5200 	call	e520 <alt_get_errno>
    e64c:	1007883a 	mov	r3,r2
    e650:	00801444 	movi	r2,81
    e654:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e658:	00bfffc4 	movi	r2,-1
}
    e65c:	e037883a 	mov	sp,fp
    e660:	dfc00117 	ldw	ra,4(sp)
    e664:	df000017 	ldw	fp,0(sp)
    e668:	dec00204 	addi	sp,sp,8
    e66c:	f800283a 	ret

0000e670 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e670:	defffd04 	addi	sp,sp,-12
    e674:	dfc00215 	stw	ra,8(sp)
    e678:	df000115 	stw	fp,4(sp)
    e67c:	df000104 	addi	fp,sp,4
    e680:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e684:	e13fff17 	ldw	r4,-4(fp)
    e688:	01400074 	movhi	r5,1
    e68c:	29514404 	addi	r5,r5,17680
    e690:	0010ee00 	call	10ee0 <alt_dev_llist_insert>
}
    e694:	e037883a 	mov	sp,fp
    e698:	dfc00117 	ldw	ra,4(sp)
    e69c:	df000017 	ldw	fp,0(sp)
    e6a0:	dec00204 	addi	sp,sp,8
    e6a4:	f800283a 	ret

0000e6a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e6a8:	defffd04 	addi	sp,sp,-12
    e6ac:	dfc00215 	stw	ra,8(sp)
    e6b0:	df000115 	stw	fp,4(sp)
    e6b4:	df000104 	addi	fp,sp,4
    e6b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    e6bc:	001195c0 	call	1195c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e6c0:	00800044 	movi	r2,1
    e6c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e6c8:	e037883a 	mov	sp,fp
    e6cc:	dfc00117 	ldw	ra,4(sp)
    e6d0:	df000017 	ldw	fp,0(sp)
    e6d4:	dec00204 	addi	sp,sp,8
    e6d8:	f800283a 	ret

0000e6dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e6dc:	defffe04 	addi	sp,sp,-8
    e6e0:	dfc00115 	stw	ra,4(sp)
    e6e4:	df000015 	stw	fp,0(sp)
    e6e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    e6ec:	01008074 	movhi	r4,513
    e6f0:	2128b804 	addi	r4,r4,-23840
    e6f4:	000b883a 	mov	r5,zero
    e6f8:	000d883a 	mov	r6,zero
    e6fc:	01c0fa04 	movi	r7,1000
    e700:	000fdac0 	call	fdac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
    e704:	01000074 	movhi	r4,1
    e708:	210bfc04 	addi	r4,r4,12272
    e70c:	000e82c0 	call	e82c <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e710:	01000074 	movhi	r4,1
    e714:	210c3904 	addi	r4,r4,12516
    e718:	000b883a 	mov	r5,zero
    e71c:	018000c4 	movi	r6,3
    e720:	000f4500 	call	f450 <altera_avalon_jtag_uart_init>
    e724:	01000074 	movhi	r4,1
    e728:	210c2f04 	addi	r4,r4,12476
    e72c:	000e6700 	call	e670 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    e730:	00c00044 	movi	r3,1
    e734:	00808074 	movhi	r2,513
    e738:	10a80004 	addi	r2,r2,-24576
    e73c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
    e740:	01000074 	movhi	r4,1
    e744:	21105104 	addi	r4,r4,16708
    e748:	000b883a 	mov	r5,zero
    e74c:	01800184 	movi	r6,6
    e750:	000ff440 	call	ff44 <altera_avalon_uart_init>
    e754:	01000074 	movhi	r4,1
    e758:	21104704 	addi	r4,r4,16668
    e75c:	000e6700 	call	e670 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
    e760:	01000074 	movhi	r4,1
    e764:	21108204 	addi	r4,r4,16904
    e768:	000b883a 	mov	r5,zero
    e76c:	018001c4 	movi	r6,7
    e770:	000ff440 	call	ff44 <altera_avalon_uart_init>
    e774:	01000074 	movhi	r4,1
    e778:	21107804 	addi	r4,r4,16864
    e77c:	000e6700 	call	e670 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
    e780:	01000074 	movhi	r4,1
    e784:	2110b304 	addi	r4,r4,17100
    e788:	000b883a 	mov	r5,zero
    e78c:	01800204 	movi	r6,8
    e790:	000ff440 	call	ff44 <altera_avalon_uart_init>
    e794:	01000074 	movhi	r4,1
    e798:	2110a904 	addi	r4,r4,17060
    e79c:	000e6700 	call	e670 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
    e7a0:	01000074 	movhi	r4,1
    e7a4:	2110e404 	addi	r4,r4,17296
    e7a8:	000b883a 	mov	r5,zero
    e7ac:	01800244 	movi	r6,9
    e7b0:	000ff440 	call	ff44 <altera_avalon_uart_init>
    e7b4:	01000074 	movhi	r4,1
    e7b8:	2110da04 	addi	r4,r4,17256
    e7bc:	000e6700 	call	e670 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    e7c0:	01000074 	movhi	r4,1
    e7c4:	21111504 	addi	r4,r4,17492
    e7c8:	000b883a 	mov	r5,zero
    e7cc:	01800104 	movi	r6,4
    e7d0:	000ff440 	call	ff44 <altera_avalon_uart_init>
    e7d4:	01000074 	movhi	r4,1
    e7d8:	21110b04 	addi	r4,r4,17452
    e7dc:	000e6700 	call	e670 <alt_dev_reg>
}
    e7e0:	e037883a 	mov	sp,fp
    e7e4:	dfc00117 	ldw	ra,4(sp)
    e7e8:	df000017 	ldw	fp,0(sp)
    e7ec:	dec00204 	addi	sp,sp,8
    e7f0:	f800283a 	ret

0000e7f4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    e7f4:	defffd04 	addi	sp,sp,-12
    e7f8:	dfc00215 	stw	ra,8(sp)
    e7fc:	df000115 	stw	fp,4(sp)
    e800:	df000104 	addi	fp,sp,4
    e804:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    e808:	e13fff17 	ldw	r4,-4(fp)
    e80c:	01400074 	movhi	r5,1
    e810:	29514904 	addi	r5,r5,17700
    e814:	0010ee00 	call	10ee0 <alt_dev_llist_insert>
}
    e818:	e037883a 	mov	sp,fp
    e81c:	dfc00117 	ldw	ra,4(sp)
    e820:	df000017 	ldw	fp,0(sp)
    e824:	dec00204 	addi	sp,sp,8
    e828:	f800283a 	ret

0000e82c <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    e82c:	defffc04 	addi	sp,sp,-16
    e830:	dfc00315 	stw	ra,12(sp)
    e834:	df000215 	stw	fp,8(sp)
    e838:	df000204 	addi	fp,sp,8
    e83c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    e840:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    e844:	e13fff17 	ldw	r4,-4(fp)
    e848:	000e8800 	call	e880 <alt_epcs_flash_query>
    e84c:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    e850:	e0bffe17 	ldw	r2,-8(fp)
    e854:	1000041e 	bne	r2,zero,e868 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    e858:	e0bfff17 	ldw	r2,-4(fp)
    e85c:	1009883a 	mov	r4,r2
    e860:	000e7f40 	call	e7f4 <alt_flash_device_register>
    e864:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    e868:	e0bffe17 	ldw	r2,-8(fp)
}
    e86c:	e037883a 	mov	sp,fp
    e870:	dfc00117 	ldw	ra,4(sp)
    e874:	df000017 	ldw	fp,0(sp)
    e878:	dec00204 	addi	sp,sp,8
    e87c:	f800283a 	ret

0000e880 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    e880:	defffc04 	addi	sp,sp,-16
    e884:	dfc00315 	stw	ra,12(sp)
    e888:	df000215 	stw	fp,8(sp)
    e88c:	df000204 	addi	fp,sp,8
    e890:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    e894:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    e898:	e0bfff17 	ldw	r2,-4(fp)
    e89c:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
    e8a0:	e0bfff17 	ldw	r2,-4(fp)
    e8a4:	10802e17 	ldw	r2,184(r2)
    e8a8:	1009883a 	mov	r4,r2
    e8ac:	0010bb00 	call	10bb0 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
    e8b0:	10c03fcc 	andi	r3,r2,255
    e8b4:	e0bfff17 	ldw	r2,-4(fp)
    e8b8:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    e8bc:	e0bfff17 	ldw	r2,-4(fp)
    e8c0:	10803017 	ldw	r2,192(r2)
    e8c4:	10800598 	cmpnei	r2,r2,22
    e8c8:	10000a1e 	bne	r2,zero,e8f4 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    e8cc:	e0bfff17 	ldw	r2,-4(fp)
    e8d0:	00c02034 	movhi	r3,128
    e8d4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
    e8d8:	e0bfff17 	ldw	r2,-4(fp)
    e8dc:	00c02004 	movi	r3,128
    e8e0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    e8e4:	e0bfff17 	ldw	r2,-4(fp)
    e8e8:	00c00074 	movhi	r3,1
    e8ec:	10c01015 	stw	r3,64(r2)
    e8f0:	0000ce06 	br	ec2c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    e8f4:	e0bfff17 	ldw	r2,-4(fp)
    e8f8:	10803017 	ldw	r2,192(r2)
    e8fc:	10800518 	cmpnei	r2,r2,20
    e900:	10000a1e 	bne	r2,zero,e92c <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    e904:	e0bfff17 	ldw	r2,-4(fp)
    e908:	00c00834 	movhi	r3,32
    e90c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
    e910:	e0bfff17 	ldw	r2,-4(fp)
    e914:	00c00804 	movi	r3,32
    e918:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    e91c:	e0bfff17 	ldw	r2,-4(fp)
    e920:	00c00074 	movhi	r3,1
    e924:	10c01015 	stw	r3,64(r2)
    e928:	0000c006 	br	ec2c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    e92c:	e0bfff17 	ldw	r2,-4(fp)
    e930:	10803017 	ldw	r2,192(r2)
    e934:	108004d8 	cmpnei	r2,r2,19
    e938:	10000a1e 	bne	r2,zero,e964 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    e93c:	e0bfff17 	ldw	r2,-4(fp)
    e940:	00c00434 	movhi	r3,16
    e944:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
    e948:	e0bfff17 	ldw	r2,-4(fp)
    e94c:	00c00404 	movi	r3,16
    e950:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    e954:	e0bfff17 	ldw	r2,-4(fp)
    e958:	00c00074 	movhi	r3,1
    e95c:	10c01015 	stw	r3,64(r2)
    e960:	0000b206 	br	ec2c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    e964:	e0bfff17 	ldw	r2,-4(fp)
    e968:	10803017 	ldw	r2,192(r2)
    e96c:	10800498 	cmpnei	r2,r2,18
    e970:	10000a1e 	bne	r2,zero,e99c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    e974:	e0bfff17 	ldw	r2,-4(fp)
    e978:	00c00234 	movhi	r3,8
    e97c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
    e980:	e0bfff17 	ldw	r2,-4(fp)
    e984:	00c00204 	movi	r3,8
    e988:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    e98c:	e0bfff17 	ldw	r2,-4(fp)
    e990:	00c00074 	movhi	r3,1
    e994:	10c01015 	stw	r3,64(r2)
    e998:	0000a406 	br	ec2c <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    e99c:	e0bfff17 	ldw	r2,-4(fp)
    e9a0:	10803017 	ldw	r2,192(r2)
    e9a4:	10800418 	cmpnei	r2,r2,16
    e9a8:	10000a1e 	bne	r2,zero,e9d4 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    e9ac:	e0bfff17 	ldw	r2,-4(fp)
    e9b0:	00c000b4 	movhi	r3,2
    e9b4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
    e9b8:	e0bfff17 	ldw	r2,-4(fp)
    e9bc:	00c00104 	movi	r3,4
    e9c0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
    e9c4:	e0bfff17 	ldw	r2,-4(fp)
    e9c8:	00e00014 	movui	r3,32768
    e9cc:	10c01015 	stw	r3,64(r2)
    e9d0:	00009606 	br	ec2c <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    e9d4:	e0bfff17 	ldw	r2,-4(fp)
    e9d8:	10802e17 	ldw	r2,184(r2)
    e9dc:	1009883a 	mov	r4,r2
    e9e0:	0010c180 	call	10c18 <epcs_read_device_id>
    e9e4:	1007883a 	mov	r3,r2
    e9e8:	e0bfff17 	ldw	r2,-4(fp)
    e9ec:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
    e9f0:	e0bfff17 	ldw	r2,-4(fp)
    e9f4:	10c03017 	ldw	r3,192(r2)
    e9f8:	00804034 	movhi	r2,256
    e9fc:	10bfffc4 	addi	r2,r2,-1
    ea00:	1886703a 	and	r3,r3,r2
    ea04:	00800874 	movhi	r2,33
    ea08:	10ae8544 	addi	r2,r2,-17899
    ea0c:	18800a1e 	bne	r3,r2,ea38 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    ea10:	e0bfff17 	ldw	r2,-4(fp)
    ea14:	00c00834 	movhi	r3,32
    ea18:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
    ea1c:	e0bfff17 	ldw	r2,-4(fp)
    ea20:	00c00804 	movi	r3,32
    ea24:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ea28:	e0bfff17 	ldw	r2,-4(fp)
    ea2c:	00c00074 	movhi	r3,1
    ea30:	10c01015 	stw	r3,64(r2)
    ea34:	00007d06 	br	ec2c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
    ea38:	e0bfff17 	ldw	r2,-4(fp)
    ea3c:	10c03017 	ldw	r3,192(r2)
    ea40:	00804034 	movhi	r2,256
    ea44:	10bfffc4 	addi	r2,r2,-1
    ea48:	1886703a 	and	r3,r3,r2
    ea4c:	00800874 	movhi	r2,33
    ea50:	10ae8584 	addi	r2,r2,-17898
    ea54:	18800a1e 	bne	r3,r2,ea80 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
    ea58:	e0bfff17 	ldw	r2,-4(fp)
    ea5c:	00c01034 	movhi	r3,64
    ea60:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
    ea64:	e0bfff17 	ldw	r2,-4(fp)
    ea68:	00c01004 	movi	r3,64
    ea6c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ea70:	e0bfff17 	ldw	r2,-4(fp)
    ea74:	00c00074 	movhi	r3,1
    ea78:	10c01015 	stw	r3,64(r2)
    ea7c:	00006b06 	br	ec2c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
    ea80:	e0bfff17 	ldw	r2,-4(fp)
    ea84:	10c03017 	ldw	r3,192(r2)
    ea88:	00804034 	movhi	r2,256
    ea8c:	10bfffc4 	addi	r2,r2,-1
    ea90:	1886703a 	and	r3,r3,r2
    ea94:	00800874 	movhi	r2,33
    ea98:	10ae85c4 	addi	r2,r2,-17897
    ea9c:	18800a1e 	bne	r3,r2,eac8 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    eaa0:	e0bfff17 	ldw	r2,-4(fp)
    eaa4:	00c02034 	movhi	r3,128
    eaa8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
    eaac:	e0bfff17 	ldw	r2,-4(fp)
    eab0:	00c02004 	movi	r3,128
    eab4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    eab8:	e0bfff17 	ldw	r2,-4(fp)
    eabc:	00c00074 	movhi	r3,1
    eac0:	10c01015 	stw	r3,64(r2)
    eac4:	00005906 	br	ec2c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    eac8:	e0bfff17 	ldw	r2,-4(fp)
    eacc:	10c03017 	ldw	r3,192(r2)
    ead0:	00804034 	movhi	r2,256
    ead4:	10bfffc4 	addi	r2,r2,-1
    ead8:	1886703a 	and	r3,r3,r2
    eadc:	00800874 	movhi	r2,33
    eae0:	10ae8604 	addi	r2,r2,-17896
    eae4:	18800a1e 	bne	r3,r2,eb10 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    eae8:	e0bfff17 	ldw	r2,-4(fp)
    eaec:	00c04034 	movhi	r3,256
    eaf0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    eaf4:	e0bfff17 	ldw	r2,-4(fp)
    eaf8:	00c04004 	movi	r3,256
    eafc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    eb00:	e0bfff17 	ldw	r2,-4(fp)
    eb04:	00c00074 	movhi	r3,1
    eb08:	10c01015 	stw	r3,64(r2)
    eb0c:	00004706 	br	ec2c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    eb10:	e0bfff17 	ldw	r2,-4(fp)
    eb14:	10803017 	ldw	r2,192(r2)
    eb18:	10803fcc 	andi	r2,r2,255
    eb1c:	10800618 	cmpnei	r2,r2,24
    eb20:	10000a1e 	bne	r2,zero,eb4c <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    eb24:	e0bfff17 	ldw	r2,-4(fp)
    eb28:	00c04034 	movhi	r3,256
    eb2c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
    eb30:	e0bfff17 	ldw	r2,-4(fp)
    eb34:	00c01004 	movi	r3,64
    eb38:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
    eb3c:	e0bfff17 	ldw	r2,-4(fp)
    eb40:	00c00134 	movhi	r3,4
    eb44:	10c01015 	stw	r3,64(r2)
    eb48:	00003806 	br	ec2c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    eb4c:	e0bfff17 	ldw	r2,-4(fp)
    eb50:	10803017 	ldw	r2,192(r2)
    eb54:	10803fcc 	andi	r2,r2,255
    eb58:	10800658 	cmpnei	r2,r2,25
    eb5c:	10000d1e 	bne	r2,zero,eb94 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    eb60:	e0bfff17 	ldw	r2,-4(fp)
    eb64:	00c08034 	movhi	r3,512
    eb68:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    eb6c:	e0bfff17 	ldw	r2,-4(fp)
    eb70:	00c08004 	movi	r3,512
    eb74:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    eb78:	e0bfff17 	ldw	r2,-4(fp)
    eb7c:	00c00074 	movhi	r3,1
    eb80:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    eb84:	e0bfff17 	ldw	r2,-4(fp)
    eb88:	00c00044 	movi	r3,1
    eb8c:	10c03215 	stw	r3,200(r2)
    eb90:	00002606 	br	ec2c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
    eb94:	e0bfff17 	ldw	r2,-4(fp)
    eb98:	10803017 	ldw	r2,192(r2)
    eb9c:	10803fcc 	andi	r2,r2,255
    eba0:	10800818 	cmpnei	r2,r2,32
    eba4:	10000d1e 	bne	r2,zero,ebdc <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
    eba8:	e0bfff17 	ldw	r2,-4(fp)
    ebac:	00c10034 	movhi	r3,1024
    ebb0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
    ebb4:	e0bfff17 	ldw	r2,-4(fp)
    ebb8:	00c10004 	movi	r3,1024
    ebbc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ebc0:	e0bfff17 	ldw	r2,-4(fp)
    ebc4:	00c00074 	movhi	r3,1
    ebc8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    ebcc:	e0bfff17 	ldw	r2,-4(fp)
    ebd0:	00c00044 	movi	r3,1
    ebd4:	10c03215 	stw	r3,200(r2)
    ebd8:	00001406 	br	ec2c <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
    ebdc:	e0bfff17 	ldw	r2,-4(fp)
    ebe0:	10803017 	ldw	r2,192(r2)
    ebe4:	10803fcc 	andi	r2,r2,255
    ebe8:	10800858 	cmpnei	r2,r2,33
    ebec:	10000d1e 	bne	r2,zero,ec24 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
    ebf0:	e0bfff17 	ldw	r2,-4(fp)
    ebf4:	00c20034 	movhi	r3,2048
    ebf8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
    ebfc:	e0bfff17 	ldw	r2,-4(fp)
    ec00:	00c20004 	movi	r3,2048
    ec04:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ec08:	e0bfff17 	ldw	r2,-4(fp)
    ec0c:	00c00074 	movhi	r3,1
    ec10:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    ec14:	e0bfff17 	ldw	r2,-4(fp)
    ec18:	00c00044 	movi	r3,1
    ec1c:	10c03215 	stw	r3,200(r2)
    ec20:	00000206 	br	ec2c <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    ec24:	00bffb44 	movi	r2,-19
    ec28:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    ec2c:	e0bfff17 	ldw	r2,-4(fp)
    ec30:	10800e17 	ldw	r2,56(r2)
    ec34:	1007883a 	mov	r3,r2
    ec38:	e0bfff17 	ldw	r2,-4(fp)
    ec3c:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
    ec40:	e0bfff17 	ldw	r2,-4(fp)
    ec44:	00c00044 	movi	r3,1
    ec48:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
    ec4c:	e0bfff17 	ldw	r2,-4(fp)
    ec50:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    ec54:	e0bfff17 	ldw	r2,-4(fp)
    ec58:	00c04004 	movi	r3,256
    ec5c:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
    ec60:	e0bffe17 	ldw	r2,-8(fp)
}
    ec64:	e037883a 	mov	sp,fp
    ec68:	dfc00117 	ldw	ra,4(sp)
    ec6c:	df000017 	ldw	fp,0(sp)
    ec70:	dec00204 	addi	sp,sp,8
    ec74:	f800283a 	ret

0000ec78 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    ec78:	deffee04 	addi	sp,sp,-72
    ec7c:	dfc01115 	stw	ra,68(sp)
    ec80:	df001015 	stw	fp,64(sp)
    ec84:	df001004 	addi	fp,sp,64
    ec88:	e13ffc15 	stw	r4,-16(fp)
    ec8c:	e17ffd15 	stw	r5,-12(fp)
    ec90:	e1bffe15 	stw	r6,-8(fp)
    ec94:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    ec98:	00800804 	movi	r2,32
    ec9c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
    eca0:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
    eca4:	00002606 	br	ed40 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    eca8:	e0bff117 	ldw	r2,-60(fp)
    ecac:	e0ffff17 	ldw	r3,-4(fp)
    ecb0:	1880012e 	bgeu	r3,r2,ecb8 <alt_epcs_flash_memcmp+0x40>
    ecb4:	1805883a 	mov	r2,r3
    ecb8:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    ecbc:	e0fffe17 	ldw	r3,-8(fp)
    ecc0:	e0bff017 	ldw	r2,-64(fp)
    ecc4:	1887883a 	add	r3,r3,r2
    ecc8:	e0bff404 	addi	r2,fp,-48
    eccc:	e13ffc17 	ldw	r4,-16(fp)
    ecd0:	180b883a 	mov	r5,r3
    ecd4:	100d883a 	mov	r6,r2
    ecd8:	e1fff217 	ldw	r7,-56(fp)
    ecdc:	000f2540 	call	f254 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    ece0:	1000020e 	bge	r2,zero,ecec <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    ece4:	00bfffc4 	movi	r2,-1
    ece8:	00001806 	br	ed4c <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    ecec:	e0bff017 	ldw	r2,-64(fp)
    ecf0:	e0fffd17 	ldw	r3,-12(fp)
    ecf4:	1889883a 	add	r4,r3,r2
    ecf8:	e0bff217 	ldw	r2,-56(fp)
    ecfc:	e0fff404 	addi	r3,fp,-48
    ed00:	180b883a 	mov	r5,r3
    ed04:	100d883a 	mov	r6,r2
    ed08:	0011e440 	call	11e44 <memcmp>
    ed0c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
    ed10:	e0bff317 	ldw	r2,-52(fp)
    ed14:	10000226 	beq	r2,zero,ed20 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
    ed18:	e0bff317 	ldw	r2,-52(fp)
    ed1c:	00000b06 	br	ed4c <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
    ed20:	e0bff217 	ldw	r2,-56(fp)
    ed24:	e0ffff17 	ldw	r3,-4(fp)
    ed28:	1885c83a 	sub	r2,r3,r2
    ed2c:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
    ed30:	e0fff017 	ldw	r3,-64(fp)
    ed34:	e0bff217 	ldw	r2,-56(fp)
    ed38:	1885883a 	add	r2,r3,r2
    ed3c:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    ed40:	e0bfff17 	ldw	r2,-4(fp)
    ed44:	103fd81e 	bne	r2,zero,eca8 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    ed48:	0005883a 	mov	r2,zero
}
    ed4c:	e037883a 	mov	sp,fp
    ed50:	dfc00117 	ldw	ra,4(sp)
    ed54:	df000017 	ldw	fp,0(sp)
    ed58:	dec00204 	addi	sp,sp,8
    ed5c:	f800283a 	ret

0000ed60 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    ed60:	defff404 	addi	sp,sp,-48
    ed64:	dfc00b15 	stw	ra,44(sp)
    ed68:	df000a15 	stw	fp,40(sp)
    ed6c:	df000a04 	addi	fp,sp,40
    ed70:	e13ffc15 	stw	r4,-16(fp)
    ed74:	e17ffd15 	stw	r5,-12(fp)
    ed78:	e1bffe15 	stw	r6,-8(fp)
    ed7c:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
    ed80:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    ed84:	e03ff815 	stw	zero,-32(fp)
    ed88:	00008306 	br	ef98 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    ed8c:	e0fffc17 	ldw	r3,-16(fp)
    ed90:	e0bff817 	ldw	r2,-32(fp)
    ed94:	1004913a 	slli	r2,r2,4
    ed98:	10800d04 	addi	r2,r2,52
    ed9c:	1885883a 	add	r2,r3,r2
    eda0:	10800017 	ldw	r2,0(r2)
    eda4:	e0fffd17 	ldw	r3,-12(fp)
    eda8:	18807816 	blt	r3,r2,ef8c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
    edac:	e0fffc17 	ldw	r3,-16(fp)
    edb0:	e0bff817 	ldw	r2,-32(fp)
    edb4:	1004913a 	slli	r2,r2,4
    edb8:	10800d04 	addi	r2,r2,52
    edbc:	1885883a 	add	r2,r3,r2
    edc0:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
    edc4:	e13ffc17 	ldw	r4,-16(fp)
    edc8:	e0bff817 	ldw	r2,-32(fp)
    edcc:	1004913a 	slli	r2,r2,4
    edd0:	10800e04 	addi	r2,r2,56
    edd4:	2085883a 	add	r2,r4,r2
    edd8:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
    eddc:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    ede0:	e0fffd17 	ldw	r3,-12(fp)
    ede4:	1880690e 	bge	r3,r2,ef8c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    ede8:	e0fffc17 	ldw	r3,-16(fp)
    edec:	e0bff817 	ldw	r2,-32(fp)
    edf0:	1004913a 	slli	r2,r2,4
    edf4:	10800d04 	addi	r2,r2,52
    edf8:	1885883a 	add	r2,r3,r2
    edfc:	10800017 	ldw	r2,0(r2)
    ee00:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    ee04:	e03ff915 	stw	zero,-28(fp)
    ee08:	00005806 	br	ef6c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
    ee0c:	e0fffd17 	ldw	r3,-12(fp)
    ee10:	e0bffa17 	ldw	r2,-24(fp)
    ee14:	18804916 	blt	r3,r2,ef3c <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
    ee18:	e0fffc17 	ldw	r3,-16(fp)
    ee1c:	e0bff817 	ldw	r2,-32(fp)
    ee20:	10800104 	addi	r2,r2,4
    ee24:	1004913a 	slli	r2,r2,4
    ee28:	1885883a 	add	r2,r3,r2
    ee2c:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
    ee30:	e0bffa17 	ldw	r2,-24(fp)
    ee34:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
    ee38:	e0fffd17 	ldw	r3,-12(fp)
    ee3c:	18803f0e 	bge	r3,r2,ef3c <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    ee40:	e0fffc17 	ldw	r3,-16(fp)
    ee44:	e0bff817 	ldw	r2,-32(fp)
    ee48:	10800104 	addi	r2,r2,4
    ee4c:	1004913a 	slli	r2,r2,4
    ee50:	1885883a 	add	r2,r3,r2
    ee54:	10c00017 	ldw	r3,0(r2)
    ee58:	e0bffa17 	ldw	r2,-24(fp)
    ee5c:	1887883a 	add	r3,r3,r2
    ee60:	e0bffd17 	ldw	r2,-12(fp)
    ee64:	1885c83a 	sub	r2,r3,r2
    ee68:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    ee6c:	e0fffb17 	ldw	r3,-20(fp)
    ee70:	e0bfff17 	ldw	r2,-4(fp)
    ee74:	1880010e 	bge	r3,r2,ee7c <alt_epcs_flash_write+0x11c>
    ee78:	1805883a 	mov	r2,r3
    ee7c:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    ee80:	e0bffb17 	ldw	r2,-20(fp)
    ee84:	e13ffc17 	ldw	r4,-16(fp)
    ee88:	e17ffe17 	ldw	r5,-8(fp)
    ee8c:	e1bffd17 	ldw	r6,-12(fp)
    ee90:	100f883a 	mov	r7,r2
    ee94:	000ec780 	call	ec78 <alt_epcs_flash_memcmp>
    ee98:	10001226 	beq	r2,zero,eee4 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    ee9c:	e0bffc17 	ldw	r2,-16(fp)
    eea0:	10800817 	ldw	r2,32(r2)
    eea4:	e13ffc17 	ldw	r4,-16(fp)
    eea8:	e17ffa17 	ldw	r5,-24(fp)
    eeac:	103ee83a 	callr	r2
    eeb0:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
    eeb4:	e0bff717 	ldw	r2,-36(fp)
    eeb8:	10000a1e 	bne	r2,zero,eee4 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
    eebc:	e0bffc17 	ldw	r2,-16(fp)
    eec0:	10800917 	ldw	r2,36(r2)
    eec4:	e0fffb17 	ldw	r3,-20(fp)
    eec8:	d8c00015 	stw	r3,0(sp)
    eecc:	e13ffc17 	ldw	r4,-16(fp)
    eed0:	e17ffa17 	ldw	r5,-24(fp)
    eed4:	e1bffd17 	ldw	r6,-12(fp)
    eed8:	e1fffe17 	ldw	r7,-8(fp)
    eedc:	103ee83a 	callr	r2
    eee0:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    eee4:	e0ffff17 	ldw	r3,-4(fp)
    eee8:	e0bffb17 	ldw	r2,-20(fp)
    eeec:	18802e26 	beq	r3,r2,efa8 <alt_epcs_flash_write+0x248>
    eef0:	e0bff717 	ldw	r2,-36(fp)
    eef4:	10002c1e 	bne	r2,zero,efa8 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
    eef8:	e0ffff17 	ldw	r3,-4(fp)
    eefc:	e0bffb17 	ldw	r2,-20(fp)
    ef00:	1885c83a 	sub	r2,r3,r2
    ef04:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    ef08:	e0fffc17 	ldw	r3,-16(fp)
    ef0c:	e0bff817 	ldw	r2,-32(fp)
    ef10:	10800104 	addi	r2,r2,4
    ef14:	1004913a 	slli	r2,r2,4
    ef18:	1885883a 	add	r2,r3,r2
    ef1c:	10c00017 	ldw	r3,0(r2)
    ef20:	e0bffa17 	ldw	r2,-24(fp)
    ef24:	1885883a 	add	r2,r3,r2
    ef28:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    ef2c:	e0bffb17 	ldw	r2,-20(fp)
    ef30:	e0fffe17 	ldw	r3,-8(fp)
    ef34:	1885883a 	add	r2,r3,r2
    ef38:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    ef3c:	e0fffc17 	ldw	r3,-16(fp)
    ef40:	e0bff817 	ldw	r2,-32(fp)
    ef44:	10800104 	addi	r2,r2,4
    ef48:	1004913a 	slli	r2,r2,4
    ef4c:	1885883a 	add	r2,r3,r2
    ef50:	10800017 	ldw	r2,0(r2)
    ef54:	e0fffa17 	ldw	r3,-24(fp)
    ef58:	1885883a 	add	r2,r3,r2
    ef5c:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    ef60:	e0bff917 	ldw	r2,-28(fp)
    ef64:	10800044 	addi	r2,r2,1
    ef68:	e0bff915 	stw	r2,-28(fp)
    ef6c:	e0fffc17 	ldw	r3,-16(fp)
    ef70:	e0bff817 	ldw	r2,-32(fp)
    ef74:	1004913a 	slli	r2,r2,4
    ef78:	10800f04 	addi	r2,r2,60
    ef7c:	1885883a 	add	r2,r3,r2
    ef80:	10800017 	ldw	r2,0(r2)
    ef84:	e0fff917 	ldw	r3,-28(fp)
    ef88:	18bfa016 	blt	r3,r2,ee0c <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    ef8c:	e0bff817 	ldw	r2,-32(fp)
    ef90:	10800044 	addi	r2,r2,1
    ef94:	e0bff815 	stw	r2,-32(fp)
    ef98:	e0bffc17 	ldw	r2,-16(fp)
    ef9c:	10800c17 	ldw	r2,48(r2)
    efa0:	e0fff817 	ldw	r3,-32(fp)
    efa4:	18bf7916 	blt	r3,r2,ed8c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    efa8:	e0bff717 	ldw	r2,-36(fp)
}
    efac:	e037883a 	mov	sp,fp
    efb0:	dfc00117 	ldw	ra,4(sp)
    efb4:	df000017 	ldw	fp,0(sp)
    efb8:	dec00204 	addi	sp,sp,8
    efbc:	f800283a 	ret

0000efc0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    efc0:	defffa04 	addi	sp,sp,-24
    efc4:	df000515 	stw	fp,20(sp)
    efc8:	df000504 	addi	fp,sp,20
    efcc:	e13ffd15 	stw	r4,-12(fp)
    efd0:	e17ffe15 	stw	r5,-8(fp)
    efd4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    efd8:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    efdc:	e0bffd17 	ldw	r2,-12(fp)
    efe0:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
    efe4:	e0bffc17 	ldw	r2,-16(fp)
    efe8:	10c00c17 	ldw	r3,48(r2)
    efec:	e0bfff17 	ldw	r2,-4(fp)
    eff0:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    eff4:	e0bffc17 	ldw	r2,-16(fp)
    eff8:	10800c17 	ldw	r2,48(r2)
    effc:	1000031e 	bne	r2,zero,f00c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
    f000:	00bffec4 	movi	r2,-5
    f004:	e0bffb15 	stw	r2,-20(fp)
    f008:	00000b06 	br	f038 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    f00c:	e0bffc17 	ldw	r2,-16(fp)
    f010:	10800c17 	ldw	r2,48(r2)
    f014:	10800250 	cmplti	r2,r2,9
    f018:	1000031e 	bne	r2,zero,f028 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
    f01c:	00bffd04 	movi	r2,-12
    f020:	e0bffb15 	stw	r2,-20(fp)
    f024:	00000406 	br	f038 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
    f028:	e0bffc17 	ldw	r2,-16(fp)
    f02c:	10c00d04 	addi	r3,r2,52
    f030:	e0bffe17 	ldw	r2,-8(fp)
    f034:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    f038:	e0bffb17 	ldw	r2,-20(fp)
}
    f03c:	e037883a 	mov	sp,fp
    f040:	df000017 	ldw	fp,0(sp)
    f044:	dec00104 	addi	sp,sp,4
    f048:	f800283a 	ret

0000f04c <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    f04c:	defff904 	addi	sp,sp,-28
    f050:	df000615 	stw	fp,24(sp)
    f054:	df000604 	addi	fp,sp,24
    f058:	e13ffe15 	stw	r4,-8(fp)
    f05c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    f060:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    f064:	e0bffe17 	ldw	r2,-8(fp)
    f068:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    f06c:	e0bffb17 	ldw	r2,-20(fp)
    f070:	10800c17 	ldw	r2,48(r2)
    f074:	10bfffc4 	addi	r2,r2,-1
    f078:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f07c:	e0fffb17 	ldw	r3,-20(fp)
    f080:	e0bffc17 	ldw	r2,-16(fp)
    f084:	1004913a 	slli	r2,r2,4
    f088:	10800d04 	addi	r2,r2,52
    f08c:	1885883a 	add	r2,r3,r2
    f090:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f094:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    f098:	e13ffb17 	ldw	r4,-20(fp)
    f09c:	e0bffc17 	ldw	r2,-16(fp)
    f0a0:	1004913a 	slli	r2,r2,4
    f0a4:	10800e04 	addi	r2,r2,56
    f0a8:	2085883a 	add	r2,r4,r2
    f0ac:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f0b0:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    f0b4:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    f0b8:	e0bfff17 	ldw	r2,-4(fp)
    f0bc:	e0fffd17 	ldw	r3,-12(fp)
    f0c0:	1880022e 	bgeu	r3,r2,f0cc <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    f0c4:	00bffec4 	movi	r2,-5
    f0c8:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
    f0cc:	e0bffa17 	ldw	r2,-24(fp)
}
    f0d0:	e037883a 	mov	sp,fp
    f0d4:	df000017 	ldw	fp,0(sp)
    f0d8:	dec00104 	addi	sp,sp,4
    f0dc:	f800283a 	ret

0000f0e0 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    f0e0:	defffa04 	addi	sp,sp,-24
    f0e4:	dfc00515 	stw	ra,20(sp)
    f0e8:	df000415 	stw	fp,16(sp)
    f0ec:	df000404 	addi	fp,sp,16
    f0f0:	e13ffe15 	stw	r4,-8(fp)
    f0f4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    f0f8:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    f0fc:	e0bffe17 	ldw	r2,-8(fp)
    f100:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    f104:	e13ffe17 	ldw	r4,-8(fp)
    f108:	e17fff17 	ldw	r5,-4(fp)
    f10c:	000f04c0 	call	f04c <alt_epcs_test_address>
    f110:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
    f114:	e0bffc17 	ldw	r2,-16(fp)
    f118:	10000816 	blt	r2,zero,f13c <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    f11c:	e0bffd17 	ldw	r2,-12(fp)
    f120:	11002e17 	ldw	r4,184(r2)
    f124:	e0ffff17 	ldw	r3,-4(fp)
    f128:	e0bffd17 	ldw	r2,-12(fp)
    f12c:	10803217 	ldw	r2,200(r2)
    f130:	180b883a 	mov	r5,r3
    f134:	100d883a 	mov	r6,r2
    f138:	00107f00 	call	107f0 <epcs_sector_erase>
  }
  return ret_code;
    f13c:	e0bffc17 	ldw	r2,-16(fp)
}
    f140:	e037883a 	mov	sp,fp
    f144:	dfc00117 	ldw	ra,4(sp)
    f148:	df000017 	ldw	fp,0(sp)
    f14c:	dec00204 	addi	sp,sp,8
    f150:	f800283a 	ret

0000f154 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    f154:	defff404 	addi	sp,sp,-48
    f158:	dfc00b15 	stw	ra,44(sp)
    f15c:	df000a15 	stw	fp,40(sp)
    f160:	df000a04 	addi	fp,sp,40
    f164:	e13ffc15 	stw	r4,-16(fp)
    f168:	e17ffd15 	stw	r5,-12(fp)
    f16c:	e1bffe15 	stw	r6,-8(fp)
    f170:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    f174:	e0bffc17 	ldw	r2,-16(fp)
    f178:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    f17c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    f180:	e13ffc17 	ldw	r4,-16(fp)
    f184:	e17ffe17 	ldw	r5,-8(fp)
    f188:	000f04c0 	call	f04c <alt_epcs_test_address>
    f18c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    f190:	e0bff917 	ldw	r2,-28(fp)
    f194:	10002916 	blt	r2,zero,f23c <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    f198:	00002606 	br	f234 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    f19c:	e0bff817 	ldw	r2,-32(fp)
    f1a0:	10c03117 	ldw	r3,196(r2)
    f1a4:	e0bffe17 	ldw	r2,-8(fp)
    f1a8:	1887883a 	add	r3,r3,r2
    f1ac:	e0bff817 	ldw	r2,-32(fp)
    f1b0:	10803117 	ldw	r2,196(r2)
    f1b4:	0085c83a 	sub	r2,zero,r2
    f1b8:	1884703a 	and	r2,r3,r2
    f1bc:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    f1c0:	e0fffa17 	ldw	r3,-24(fp)
    f1c4:	e0bffe17 	ldw	r2,-8(fp)
    f1c8:	1885c83a 	sub	r2,r3,r2
    f1cc:	e0c00217 	ldw	r3,8(fp)
    f1d0:	1880010e 	bge	r3,r2,f1d8 <alt_epcs_flash_write_block+0x84>
    f1d4:	1805883a 	mov	r2,r3
    f1d8:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    f1dc:	e0bff817 	ldw	r2,-32(fp)
    f1e0:	11002e17 	ldw	r4,184(r2)
    f1e4:	e0bff717 	ldw	r2,-36(fp)
    f1e8:	e0ffff17 	ldw	r3,-4(fp)
    f1ec:	1887883a 	add	r3,r3,r2
    f1f0:	e0bff817 	ldw	r2,-32(fp)
    f1f4:	10803217 	ldw	r2,200(r2)
    f1f8:	d8800015 	stw	r2,0(sp)
    f1fc:	e17ffe17 	ldw	r5,-8(fp)
    f200:	180d883a 	mov	r6,r3
    f204:	e1fffb17 	ldw	r7,-20(fp)
    f208:	0010a940 	call	10a94 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    f20c:	e0c00217 	ldw	r3,8(fp)
    f210:	e0bffb17 	ldw	r2,-20(fp)
    f214:	1885c83a 	sub	r2,r3,r2
    f218:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    f21c:	e0fff717 	ldw	r3,-36(fp)
    f220:	e0bffb17 	ldw	r2,-20(fp)
    f224:	1885883a 	add	r2,r3,r2
    f228:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    f22c:	e0bffa17 	ldw	r2,-24(fp)
    f230:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    f234:	e0800217 	ldw	r2,8(fp)
    f238:	103fd81e 	bne	r2,zero,f19c <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    f23c:	e0bff917 	ldw	r2,-28(fp)
}
    f240:	e037883a 	mov	sp,fp
    f244:	dfc00117 	ldw	ra,4(sp)
    f248:	df000017 	ldw	fp,0(sp)
    f24c:	dec00204 	addi	sp,sp,8
    f250:	f800283a 	ret

0000f254 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    f254:	defff704 	addi	sp,sp,-36
    f258:	dfc00815 	stw	ra,32(sp)
    f25c:	df000715 	stw	fp,28(sp)
    f260:	df000704 	addi	fp,sp,28
    f264:	e13ffc15 	stw	r4,-16(fp)
    f268:	e17ffd15 	stw	r5,-12(fp)
    f26c:	e1bffe15 	stw	r6,-8(fp)
    f270:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    f274:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    f278:	e0bffc17 	ldw	r2,-16(fp)
    f27c:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    f280:	e13ffc17 	ldw	r4,-16(fp)
    f284:	e17ffd17 	ldw	r5,-12(fp)
    f288:	000f04c0 	call	f04c <alt_epcs_test_address>
    f28c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
    f290:	e0bffa17 	ldw	r2,-24(fp)
    f294:	10000f16 	blt	r2,zero,f2d4 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    f298:	e0bffb17 	ldw	r2,-20(fp)
    f29c:	10c02e17 	ldw	r3,184(r2)
    f2a0:	e0bffb17 	ldw	r2,-20(fp)
    f2a4:	10803217 	ldw	r2,200(r2)
    f2a8:	d8800015 	stw	r2,0(sp)
    f2ac:	1809883a 	mov	r4,r3
    f2b0:	e17ffd17 	ldw	r5,-12(fp)
    f2b4:	e1bffe17 	ldw	r6,-8(fp)
    f2b8:	e1ffff17 	ldw	r7,-4(fp)
    f2bc:	00108e80 	call	108e8 <epcs_read_buffer>
    f2c0:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    f2c4:	e0fffa17 	ldw	r3,-24(fp)
    f2c8:	e0bfff17 	ldw	r2,-4(fp)
    f2cc:	1880011e 	bne	r3,r2,f2d4 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    f2d0:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
    f2d4:	e0bffa17 	ldw	r2,-24(fp)
}
    f2d8:	e037883a 	mov	sp,fp
    f2dc:	dfc00117 	ldw	ra,4(sp)
    f2e0:	df000017 	ldw	fp,0(sp)
    f2e4:	dec00204 	addi	sp,sp,8
    f2e8:	f800283a 	ret

0000f2ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f2ec:	defffa04 	addi	sp,sp,-24
    f2f0:	dfc00515 	stw	ra,20(sp)
    f2f4:	df000415 	stw	fp,16(sp)
    f2f8:	df000404 	addi	fp,sp,16
    f2fc:	e13ffd15 	stw	r4,-12(fp)
    f300:	e17ffe15 	stw	r5,-8(fp)
    f304:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f308:	e0bffd17 	ldw	r2,-12(fp)
    f30c:	10800017 	ldw	r2,0(r2)
    f310:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f314:	e0bffc17 	ldw	r2,-16(fp)
    f318:	10c00a04 	addi	r3,r2,40
    f31c:	e0bffd17 	ldw	r2,-12(fp)
    f320:	10800217 	ldw	r2,8(r2)
    f324:	1809883a 	mov	r4,r3
    f328:	e17ffe17 	ldw	r5,-8(fp)
    f32c:	e1bfff17 	ldw	r6,-4(fp)
    f330:	100f883a 	mov	r7,r2
    f334:	000f9140 	call	f914 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f338:	e037883a 	mov	sp,fp
    f33c:	dfc00117 	ldw	ra,4(sp)
    f340:	df000017 	ldw	fp,0(sp)
    f344:	dec00204 	addi	sp,sp,8
    f348:	f800283a 	ret

0000f34c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f34c:	defffa04 	addi	sp,sp,-24
    f350:	dfc00515 	stw	ra,20(sp)
    f354:	df000415 	stw	fp,16(sp)
    f358:	df000404 	addi	fp,sp,16
    f35c:	e13ffd15 	stw	r4,-12(fp)
    f360:	e17ffe15 	stw	r5,-8(fp)
    f364:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f368:	e0bffd17 	ldw	r2,-12(fp)
    f36c:	10800017 	ldw	r2,0(r2)
    f370:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f374:	e0bffc17 	ldw	r2,-16(fp)
    f378:	10c00a04 	addi	r3,r2,40
    f37c:	e0bffd17 	ldw	r2,-12(fp)
    f380:	10800217 	ldw	r2,8(r2)
    f384:	1809883a 	mov	r4,r3
    f388:	e17ffe17 	ldw	r5,-8(fp)
    f38c:	e1bfff17 	ldw	r6,-4(fp)
    f390:	100f883a 	mov	r7,r2
    f394:	000fb200 	call	fb20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f398:	e037883a 	mov	sp,fp
    f39c:	dfc00117 	ldw	ra,4(sp)
    f3a0:	df000017 	ldw	fp,0(sp)
    f3a4:	dec00204 	addi	sp,sp,8
    f3a8:	f800283a 	ret

0000f3ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f3ac:	defffc04 	addi	sp,sp,-16
    f3b0:	dfc00315 	stw	ra,12(sp)
    f3b4:	df000215 	stw	fp,8(sp)
    f3b8:	df000204 	addi	fp,sp,8
    f3bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f3c0:	e0bfff17 	ldw	r2,-4(fp)
    f3c4:	10800017 	ldw	r2,0(r2)
    f3c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f3cc:	e0bffe17 	ldw	r2,-8(fp)
    f3d0:	10c00a04 	addi	r3,r2,40
    f3d4:	e0bfff17 	ldw	r2,-4(fp)
    f3d8:	10800217 	ldw	r2,8(r2)
    f3dc:	1809883a 	mov	r4,r3
    f3e0:	100b883a 	mov	r5,r2
    f3e4:	000f7c00 	call	f7c0 <altera_avalon_jtag_uart_close>
}
    f3e8:	e037883a 	mov	sp,fp
    f3ec:	dfc00117 	ldw	ra,4(sp)
    f3f0:	df000017 	ldw	fp,0(sp)
    f3f4:	dec00204 	addi	sp,sp,8
    f3f8:	f800283a 	ret

0000f3fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f3fc:	defffa04 	addi	sp,sp,-24
    f400:	dfc00515 	stw	ra,20(sp)
    f404:	df000415 	stw	fp,16(sp)
    f408:	df000404 	addi	fp,sp,16
    f40c:	e13ffd15 	stw	r4,-12(fp)
    f410:	e17ffe15 	stw	r5,-8(fp)
    f414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f418:	e0bffd17 	ldw	r2,-12(fp)
    f41c:	10800017 	ldw	r2,0(r2)
    f420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f424:	e0bffc17 	ldw	r2,-16(fp)
    f428:	10800a04 	addi	r2,r2,40
    f42c:	1009883a 	mov	r4,r2
    f430:	e17ffe17 	ldw	r5,-8(fp)
    f434:	e1bfff17 	ldw	r6,-4(fp)
    f438:	000f8280 	call	f828 <altera_avalon_jtag_uart_ioctl>
}
    f43c:	e037883a 	mov	sp,fp
    f440:	dfc00117 	ldw	ra,4(sp)
    f444:	df000017 	ldw	fp,0(sp)
    f448:	dec00204 	addi	sp,sp,8
    f44c:	f800283a 	ret

0000f450 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f450:	defffa04 	addi	sp,sp,-24
    f454:	dfc00515 	stw	ra,20(sp)
    f458:	df000415 	stw	fp,16(sp)
    f45c:	df000404 	addi	fp,sp,16
    f460:	e13ffd15 	stw	r4,-12(fp)
    f464:	e17ffe15 	stw	r5,-8(fp)
    f468:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f46c:	e0bffd17 	ldw	r2,-12(fp)
    f470:	00c00044 	movi	r3,1
    f474:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f478:	e0bffd17 	ldw	r2,-12(fp)
    f47c:	10800017 	ldw	r2,0(r2)
    f480:	10800104 	addi	r2,r2,4
    f484:	1007883a 	mov	r3,r2
    f488:	e0bffd17 	ldw	r2,-12(fp)
    f48c:	10800817 	ldw	r2,32(r2)
    f490:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f494:	e0fffe17 	ldw	r3,-8(fp)
    f498:	e0bfff17 	ldw	r2,-4(fp)
    f49c:	d8000015 	stw	zero,0(sp)
    f4a0:	1809883a 	mov	r4,r3
    f4a4:	100b883a 	mov	r5,r2
    f4a8:	01800074 	movhi	r6,1
    f4ac:	31bd4504 	addi	r6,r6,-2796
    f4b0:	e1fffd17 	ldw	r7,-12(fp)
    f4b4:	00110f40 	call	110f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f4b8:	e0bffd17 	ldw	r2,-12(fp)
    f4bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f4c0:	e0bffd17 	ldw	r2,-12(fp)
    f4c4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f4c8:	00800074 	movhi	r2,1
    f4cc:	10915904 	addi	r2,r2,17764
    f4d0:	10800017 	ldw	r2,0(r2)
    f4d4:	1809883a 	mov	r4,r3
    f4d8:	100b883a 	mov	r5,r2
    f4dc:	01800074 	movhi	r6,1
    f4e0:	31bdc604 	addi	r6,r6,-2280
    f4e4:	e1fffd17 	ldw	r7,-12(fp)
    f4e8:	0010d500 	call	10d50 <alt_alarm_start>
    f4ec:	1000040e 	bge	r2,zero,f500 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f4f0:	e0fffd17 	ldw	r3,-12(fp)
    f4f4:	00a00034 	movhi	r2,32768
    f4f8:	10bfffc4 	addi	r2,r2,-1
    f4fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f500:	e037883a 	mov	sp,fp
    f504:	dfc00117 	ldw	ra,4(sp)
    f508:	df000017 	ldw	fp,0(sp)
    f50c:	dec00204 	addi	sp,sp,8
    f510:	f800283a 	ret

0000f514 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f514:	defff804 	addi	sp,sp,-32
    f518:	df000715 	stw	fp,28(sp)
    f51c:	df000704 	addi	fp,sp,28
    f520:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f524:	e0bfff17 	ldw	r2,-4(fp)
    f528:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f52c:	e0bffb17 	ldw	r2,-20(fp)
    f530:	10800017 	ldw	r2,0(r2)
    f534:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f538:	e0bffc17 	ldw	r2,-16(fp)
    f53c:	10800104 	addi	r2,r2,4
    f540:	10800037 	ldwio	r2,0(r2)
    f544:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f548:	e0bffd17 	ldw	r2,-12(fp)
    f54c:	1080c00c 	andi	r2,r2,768
    f550:	1000011e 	bne	r2,zero,f558 <altera_avalon_jtag_uart_irq+0x44>
      break;
    f554:	00006c06 	br	f708 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f558:	e0bffd17 	ldw	r2,-12(fp)
    f55c:	1080400c 	andi	r2,r2,256
    f560:	10003426 	beq	r2,zero,f634 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f564:	00800074 	movhi	r2,1
    f568:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f56c:	e0bffb17 	ldw	r2,-20(fp)
    f570:	10800a17 	ldw	r2,40(r2)
    f574:	10800044 	addi	r2,r2,1
    f578:	1081ffcc 	andi	r2,r2,2047
    f57c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f580:	e0bffb17 	ldw	r2,-20(fp)
    f584:	10c00b17 	ldw	r3,44(r2)
    f588:	e0bffe17 	ldw	r2,-8(fp)
    f58c:	1880011e 	bne	r3,r2,f594 <altera_avalon_jtag_uart_irq+0x80>
          break;
    f590:	00001606 	br	f5ec <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f594:	e0bffc17 	ldw	r2,-16(fp)
    f598:	10800037 	ldwio	r2,0(r2)
    f59c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f5a0:	e0bff917 	ldw	r2,-28(fp)
    f5a4:	10a0000c 	andi	r2,r2,32768
    f5a8:	1000011e 	bne	r2,zero,f5b0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    f5ac:	00000f06 	br	f5ec <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f5b0:	e0bffb17 	ldw	r2,-20(fp)
    f5b4:	10800a17 	ldw	r2,40(r2)
    f5b8:	e0fff917 	ldw	r3,-28(fp)
    f5bc:	1809883a 	mov	r4,r3
    f5c0:	e0fffb17 	ldw	r3,-20(fp)
    f5c4:	1885883a 	add	r2,r3,r2
    f5c8:	10800e04 	addi	r2,r2,56
    f5cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f5d0:	e0bffb17 	ldw	r2,-20(fp)
    f5d4:	10800a17 	ldw	r2,40(r2)
    f5d8:	10800044 	addi	r2,r2,1
    f5dc:	10c1ffcc 	andi	r3,r2,2047
    f5e0:	e0bffb17 	ldw	r2,-20(fp)
    f5e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f5e8:	003fe006 	br	f56c <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f5ec:	e0bff917 	ldw	r2,-28(fp)
    f5f0:	10bfffec 	andhi	r2,r2,65535
    f5f4:	10000f26 	beq	r2,zero,f634 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f5f8:	e0bffb17 	ldw	r2,-20(fp)
    f5fc:	10c00817 	ldw	r3,32(r2)
    f600:	00bfff84 	movi	r2,-2
    f604:	1886703a 	and	r3,r3,r2
    f608:	e0bffb17 	ldw	r2,-20(fp)
    f60c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f610:	e0bffc17 	ldw	r2,-16(fp)
    f614:	10800104 	addi	r2,r2,4
    f618:	1007883a 	mov	r3,r2
    f61c:	e0bffb17 	ldw	r2,-20(fp)
    f620:	10800817 	ldw	r2,32(r2)
    f624:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f628:	e0bffc17 	ldw	r2,-16(fp)
    f62c:	10800104 	addi	r2,r2,4
    f630:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f634:	e0bffd17 	ldw	r2,-12(fp)
    f638:	1080800c 	andi	r2,r2,512
    f63c:	10003126 	beq	r2,zero,f704 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f640:	e0bffd17 	ldw	r2,-12(fp)
    f644:	1004d43a 	srli	r2,r2,16
    f648:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f64c:	00001406 	br	f6a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f650:	e0bffc17 	ldw	r2,-16(fp)
    f654:	e0fffb17 	ldw	r3,-20(fp)
    f658:	18c00d17 	ldw	r3,52(r3)
    f65c:	e13ffb17 	ldw	r4,-20(fp)
    f660:	20c7883a 	add	r3,r4,r3
    f664:	18c20e04 	addi	r3,r3,2104
    f668:	18c00003 	ldbu	r3,0(r3)
    f66c:	18c03fcc 	andi	r3,r3,255
    f670:	18c0201c 	xori	r3,r3,128
    f674:	18ffe004 	addi	r3,r3,-128
    f678:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f67c:	e0bffb17 	ldw	r2,-20(fp)
    f680:	10800d17 	ldw	r2,52(r2)
    f684:	10800044 	addi	r2,r2,1
    f688:	10c1ffcc 	andi	r3,r2,2047
    f68c:	e0bffb17 	ldw	r2,-20(fp)
    f690:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f694:	e0bffa17 	ldw	r2,-24(fp)
    f698:	10bfffc4 	addi	r2,r2,-1
    f69c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f6a0:	e0bffa17 	ldw	r2,-24(fp)
    f6a4:	10000526 	beq	r2,zero,f6bc <altera_avalon_jtag_uart_irq+0x1a8>
    f6a8:	e0bffb17 	ldw	r2,-20(fp)
    f6ac:	10c00d17 	ldw	r3,52(r2)
    f6b0:	e0bffb17 	ldw	r2,-20(fp)
    f6b4:	10800c17 	ldw	r2,48(r2)
    f6b8:	18bfe51e 	bne	r3,r2,f650 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f6bc:	e0bffa17 	ldw	r2,-24(fp)
    f6c0:	10001026 	beq	r2,zero,f704 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f6c4:	e0bffb17 	ldw	r2,-20(fp)
    f6c8:	10c00817 	ldw	r3,32(r2)
    f6cc:	00bfff44 	movi	r2,-3
    f6d0:	1886703a 	and	r3,r3,r2
    f6d4:	e0bffb17 	ldw	r2,-20(fp)
    f6d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f6dc:	e0bffb17 	ldw	r2,-20(fp)
    f6e0:	10800017 	ldw	r2,0(r2)
    f6e4:	10800104 	addi	r2,r2,4
    f6e8:	1007883a 	mov	r3,r2
    f6ec:	e0bffb17 	ldw	r2,-20(fp)
    f6f0:	10800817 	ldw	r2,32(r2)
    f6f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f6f8:	e0bffc17 	ldw	r2,-16(fp)
    f6fc:	10800104 	addi	r2,r2,4
    f700:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f704:	003f8c06 	br	f538 <altera_avalon_jtag_uart_irq+0x24>
}
    f708:	e037883a 	mov	sp,fp
    f70c:	df000017 	ldw	fp,0(sp)
    f710:	dec00104 	addi	sp,sp,4
    f714:	f800283a 	ret

0000f718 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f718:	defff804 	addi	sp,sp,-32
    f71c:	df000715 	stw	fp,28(sp)
    f720:	df000704 	addi	fp,sp,28
    f724:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f728:	e0bffb17 	ldw	r2,-20(fp)
    f72c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f730:	e0bff917 	ldw	r2,-28(fp)
    f734:	10800017 	ldw	r2,0(r2)
    f738:	10800104 	addi	r2,r2,4
    f73c:	10800037 	ldwio	r2,0(r2)
    f740:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f744:	e0bffa17 	ldw	r2,-24(fp)
    f748:	1081000c 	andi	r2,r2,1024
    f74c:	10000b26 	beq	r2,zero,f77c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f750:	e0bff917 	ldw	r2,-28(fp)
    f754:	10800017 	ldw	r2,0(r2)
    f758:	10800104 	addi	r2,r2,4
    f75c:	1007883a 	mov	r3,r2
    f760:	e0bff917 	ldw	r2,-28(fp)
    f764:	10800817 	ldw	r2,32(r2)
    f768:	10810014 	ori	r2,r2,1024
    f76c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f770:	e0bff917 	ldw	r2,-28(fp)
    f774:	10000915 	stw	zero,36(r2)
    f778:	00000a06 	br	f7a4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f77c:	e0bff917 	ldw	r2,-28(fp)
    f780:	10c00917 	ldw	r3,36(r2)
    f784:	00a00034 	movhi	r2,32768
    f788:	10bfff04 	addi	r2,r2,-4
    f78c:	10c00536 	bltu	r2,r3,f7a4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f790:	e0bff917 	ldw	r2,-28(fp)
    f794:	10800917 	ldw	r2,36(r2)
    f798:	10c00044 	addi	r3,r2,1
    f79c:	e0bff917 	ldw	r2,-28(fp)
    f7a0:	10c00915 	stw	r3,36(r2)
    f7a4:	00800074 	movhi	r2,1
    f7a8:	10915904 	addi	r2,r2,17764
    f7ac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f7b0:	e037883a 	mov	sp,fp
    f7b4:	df000017 	ldw	fp,0(sp)
    f7b8:	dec00104 	addi	sp,sp,4
    f7bc:	f800283a 	ret

0000f7c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f7c0:	defffd04 	addi	sp,sp,-12
    f7c4:	df000215 	stw	fp,8(sp)
    f7c8:	df000204 	addi	fp,sp,8
    f7cc:	e13ffe15 	stw	r4,-8(fp)
    f7d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f7d4:	00000506 	br	f7ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f7d8:	e0bfff17 	ldw	r2,-4(fp)
    f7dc:	1090000c 	andi	r2,r2,16384
    f7e0:	10000226 	beq	r2,zero,f7ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f7e4:	00bffd44 	movi	r2,-11
    f7e8:	00000b06 	br	f818 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f7ec:	e0bffe17 	ldw	r2,-8(fp)
    f7f0:	10c00d17 	ldw	r3,52(r2)
    f7f4:	e0bffe17 	ldw	r2,-8(fp)
    f7f8:	10800c17 	ldw	r2,48(r2)
    f7fc:	18800526 	beq	r3,r2,f814 <altera_avalon_jtag_uart_close+0x54>
    f800:	e0bffe17 	ldw	r2,-8(fp)
    f804:	10c00917 	ldw	r3,36(r2)
    f808:	e0bffe17 	ldw	r2,-8(fp)
    f80c:	10800117 	ldw	r2,4(r2)
    f810:	18bff136 	bltu	r3,r2,f7d8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f814:	0005883a 	mov	r2,zero
}
    f818:	e037883a 	mov	sp,fp
    f81c:	df000017 	ldw	fp,0(sp)
    f820:	dec00104 	addi	sp,sp,4
    f824:	f800283a 	ret

0000f828 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f828:	defffa04 	addi	sp,sp,-24
    f82c:	df000515 	stw	fp,20(sp)
    f830:	df000504 	addi	fp,sp,20
    f834:	e13ffd15 	stw	r4,-12(fp)
    f838:	e17ffe15 	stw	r5,-8(fp)
    f83c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f840:	00bff9c4 	movi	r2,-25
    f844:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f848:	e0bffe17 	ldw	r2,-8(fp)
    f84c:	10da8060 	cmpeqi	r3,r2,27137
    f850:	1800031e 	bne	r3,zero,f860 <altera_avalon_jtag_uart_ioctl+0x38>
    f854:	109a80a0 	cmpeqi	r2,r2,27138
    f858:	1000191e 	bne	r2,zero,f8c0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    f85c:	00002806 	br	f900 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f860:	e0bffd17 	ldw	r2,-12(fp)
    f864:	10c00117 	ldw	r3,4(r2)
    f868:	00a00034 	movhi	r2,32768
    f86c:	10bfffc4 	addi	r2,r2,-1
    f870:	18801226 	beq	r3,r2,f8bc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    f874:	e0bfff17 	ldw	r2,-4(fp)
    f878:	10800017 	ldw	r2,0(r2)
    f87c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f880:	e0bffc17 	ldw	r2,-16(fp)
    f884:	10800090 	cmplti	r2,r2,2
    f888:	1000061e 	bne	r2,zero,f8a4 <altera_avalon_jtag_uart_ioctl+0x7c>
    f88c:	e0fffc17 	ldw	r3,-16(fp)
    f890:	00a00034 	movhi	r2,32768
    f894:	10bfffc4 	addi	r2,r2,-1
    f898:	18800226 	beq	r3,r2,f8a4 <altera_avalon_jtag_uart_ioctl+0x7c>
    f89c:	e0bffc17 	ldw	r2,-16(fp)
    f8a0:	00000206 	br	f8ac <altera_avalon_jtag_uart_ioctl+0x84>
    f8a4:	00a00034 	movhi	r2,32768
    f8a8:	10bfff84 	addi	r2,r2,-2
    f8ac:	e0fffd17 	ldw	r3,-12(fp)
    f8b0:	18800115 	stw	r2,4(r3)
      rc = 0;
    f8b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f8b8:	00001106 	br	f900 <altera_avalon_jtag_uart_ioctl+0xd8>
    f8bc:	00001006 	br	f900 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f8c0:	e0bffd17 	ldw	r2,-12(fp)
    f8c4:	10c00117 	ldw	r3,4(r2)
    f8c8:	00a00034 	movhi	r2,32768
    f8cc:	10bfffc4 	addi	r2,r2,-1
    f8d0:	18800a26 	beq	r3,r2,f8fc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f8d4:	e0bffd17 	ldw	r2,-12(fp)
    f8d8:	10c00917 	ldw	r3,36(r2)
    f8dc:	e0bffd17 	ldw	r2,-12(fp)
    f8e0:	10800117 	ldw	r2,4(r2)
    f8e4:	1885803a 	cmpltu	r2,r3,r2
    f8e8:	10c03fcc 	andi	r3,r2,255
    f8ec:	e0bfff17 	ldw	r2,-4(fp)
    f8f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f8f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f8f8:	00000006 	br	f8fc <altera_avalon_jtag_uart_ioctl+0xd4>
    f8fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f900:	e0bffb17 	ldw	r2,-20(fp)
}
    f904:	e037883a 	mov	sp,fp
    f908:	df000017 	ldw	fp,0(sp)
    f90c:	dec00104 	addi	sp,sp,4
    f910:	f800283a 	ret

0000f914 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f914:	defff304 	addi	sp,sp,-52
    f918:	dfc00c15 	stw	ra,48(sp)
    f91c:	df000b15 	stw	fp,44(sp)
    f920:	df000b04 	addi	fp,sp,44
    f924:	e13ffc15 	stw	r4,-16(fp)
    f928:	e17ffd15 	stw	r5,-12(fp)
    f92c:	e1bffe15 	stw	r6,-8(fp)
    f930:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f934:	e0bffd17 	ldw	r2,-12(fp)
    f938:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f93c:	00004906 	br	fa64 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f940:	e0bffc17 	ldw	r2,-16(fp)
    f944:	10800a17 	ldw	r2,40(r2)
    f948:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f94c:	e0bffc17 	ldw	r2,-16(fp)
    f950:	10800b17 	ldw	r2,44(r2)
    f954:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f958:	e0fff717 	ldw	r3,-36(fp)
    f95c:	e0bff817 	ldw	r2,-32(fp)
    f960:	18800536 	bltu	r3,r2,f978 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f964:	e0fff717 	ldw	r3,-36(fp)
    f968:	e0bff817 	ldw	r2,-32(fp)
    f96c:	1885c83a 	sub	r2,r3,r2
    f970:	e0bff615 	stw	r2,-40(fp)
    f974:	00000406 	br	f988 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f978:	00c20004 	movi	r3,2048
    f97c:	e0bff817 	ldw	r2,-32(fp)
    f980:	1885c83a 	sub	r2,r3,r2
    f984:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f988:	e0bff617 	ldw	r2,-40(fp)
    f98c:	1000011e 	bne	r2,zero,f994 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    f990:	00001d06 	br	fa08 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    f994:	e0fffe17 	ldw	r3,-8(fp)
    f998:	e0bff617 	ldw	r2,-40(fp)
    f99c:	1880022e 	bgeu	r3,r2,f9a8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    f9a0:	e0bffe17 	ldw	r2,-8(fp)
    f9a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f9a8:	e0bff817 	ldw	r2,-32(fp)
    f9ac:	10800e04 	addi	r2,r2,56
    f9b0:	e0fffc17 	ldw	r3,-16(fp)
    f9b4:	1885883a 	add	r2,r3,r2
    f9b8:	e13ff517 	ldw	r4,-44(fp)
    f9bc:	100b883a 	mov	r5,r2
    f9c0:	e1bff617 	ldw	r6,-40(fp)
    f9c4:	0006e2c0 	call	6e2c <memcpy>
      ptr   += n;
    f9c8:	e0fff517 	ldw	r3,-44(fp)
    f9cc:	e0bff617 	ldw	r2,-40(fp)
    f9d0:	1885883a 	add	r2,r3,r2
    f9d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f9d8:	e0fffe17 	ldw	r3,-8(fp)
    f9dc:	e0bff617 	ldw	r2,-40(fp)
    f9e0:	1885c83a 	sub	r2,r3,r2
    f9e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f9e8:	e0fff817 	ldw	r3,-32(fp)
    f9ec:	e0bff617 	ldw	r2,-40(fp)
    f9f0:	1885883a 	add	r2,r3,r2
    f9f4:	10c1ffcc 	andi	r3,r2,2047
    f9f8:	e0bffc17 	ldw	r2,-16(fp)
    f9fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fa00:	e0bffe17 	ldw	r2,-8(fp)
    fa04:	00bfce16 	blt	zero,r2,f940 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    fa08:	e0fff517 	ldw	r3,-44(fp)
    fa0c:	e0bffd17 	ldw	r2,-12(fp)
    fa10:	18800126 	beq	r3,r2,fa18 <altera_avalon_jtag_uart_read+0x104>
      break;
    fa14:	00001506 	br	fa6c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fa18:	e0bfff17 	ldw	r2,-4(fp)
    fa1c:	1090000c 	andi	r2,r2,16384
    fa20:	10000126 	beq	r2,zero,fa28 <altera_avalon_jtag_uart_read+0x114>
      break;
    fa24:	00001106 	br	fa6c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fa28:	0001883a 	nop
    fa2c:	e0bffc17 	ldw	r2,-16(fp)
    fa30:	10c00a17 	ldw	r3,40(r2)
    fa34:	e0bff717 	ldw	r2,-36(fp)
    fa38:	1880051e 	bne	r3,r2,fa50 <altera_avalon_jtag_uart_read+0x13c>
    fa3c:	e0bffc17 	ldw	r2,-16(fp)
    fa40:	10c00917 	ldw	r3,36(r2)
    fa44:	e0bffc17 	ldw	r2,-16(fp)
    fa48:	10800117 	ldw	r2,4(r2)
    fa4c:	18bff736 	bltu	r3,r2,fa2c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fa50:	e0bffc17 	ldw	r2,-16(fp)
    fa54:	10c00a17 	ldw	r3,40(r2)
    fa58:	e0bff717 	ldw	r2,-36(fp)
    fa5c:	1880011e 	bne	r3,r2,fa64 <altera_avalon_jtag_uart_read+0x150>
      break;
    fa60:	00000206 	br	fa6c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fa64:	e0bffe17 	ldw	r2,-8(fp)
    fa68:	00bfb516 	blt	zero,r2,f940 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fa6c:	e0fff517 	ldw	r3,-44(fp)
    fa70:	e0bffd17 	ldw	r2,-12(fp)
    fa74:	18801826 	beq	r3,r2,fad8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa78:	0005303a 	rdctl	r2,status
    fa7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa80:	e0fffa17 	ldw	r3,-24(fp)
    fa84:	00bfff84 	movi	r2,-2
    fa88:	1884703a 	and	r2,r3,r2
    fa8c:	1001703a 	wrctl	status,r2
  
  return context;
    fa90:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fa94:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fa98:	e0bffc17 	ldw	r2,-16(fp)
    fa9c:	10800817 	ldw	r2,32(r2)
    faa0:	10c00054 	ori	r3,r2,1
    faa4:	e0bffc17 	ldw	r2,-16(fp)
    faa8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    faac:	e0bffc17 	ldw	r2,-16(fp)
    fab0:	10800017 	ldw	r2,0(r2)
    fab4:	10800104 	addi	r2,r2,4
    fab8:	1007883a 	mov	r3,r2
    fabc:	e0bffc17 	ldw	r2,-16(fp)
    fac0:	10800817 	ldw	r2,32(r2)
    fac4:	18800035 	stwio	r2,0(r3)
    fac8:	e0bff917 	ldw	r2,-28(fp)
    facc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fad0:	e0bffb17 	ldw	r2,-20(fp)
    fad4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fad8:	e0fff517 	ldw	r3,-44(fp)
    fadc:	e0bffd17 	ldw	r2,-12(fp)
    fae0:	18800426 	beq	r3,r2,faf4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    fae4:	e0fff517 	ldw	r3,-44(fp)
    fae8:	e0bffd17 	ldw	r2,-12(fp)
    faec:	1885c83a 	sub	r2,r3,r2
    faf0:	00000606 	br	fb0c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    faf4:	e0bfff17 	ldw	r2,-4(fp)
    faf8:	1090000c 	andi	r2,r2,16384
    fafc:	10000226 	beq	r2,zero,fb08 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    fb00:	00bffd44 	movi	r2,-11
    fb04:	00000106 	br	fb0c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    fb08:	00bffec4 	movi	r2,-5
}
    fb0c:	e037883a 	mov	sp,fp
    fb10:	dfc00117 	ldw	ra,4(sp)
    fb14:	df000017 	ldw	fp,0(sp)
    fb18:	dec00204 	addi	sp,sp,8
    fb1c:	f800283a 	ret

0000fb20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fb20:	defff304 	addi	sp,sp,-52
    fb24:	dfc00c15 	stw	ra,48(sp)
    fb28:	df000b15 	stw	fp,44(sp)
    fb2c:	df000b04 	addi	fp,sp,44
    fb30:	e13ffc15 	stw	r4,-16(fp)
    fb34:	e17ffd15 	stw	r5,-12(fp)
    fb38:	e1bffe15 	stw	r6,-8(fp)
    fb3c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fb40:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fb44:	e0bffd17 	ldw	r2,-12(fp)
    fb48:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fb4c:	00003806 	br	fc30 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fb50:	e0bffc17 	ldw	r2,-16(fp)
    fb54:	10800c17 	ldw	r2,48(r2)
    fb58:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    fb5c:	e0bffc17 	ldw	r2,-16(fp)
    fb60:	10800d17 	ldw	r2,52(r2)
    fb64:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fb68:	e0fff817 	ldw	r3,-32(fp)
    fb6c:	e0bff517 	ldw	r2,-44(fp)
    fb70:	1880062e 	bgeu	r3,r2,fb8c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fb74:	e0fff517 	ldw	r3,-44(fp)
    fb78:	e0bff817 	ldw	r2,-32(fp)
    fb7c:	1885c83a 	sub	r2,r3,r2
    fb80:	10bfffc4 	addi	r2,r2,-1
    fb84:	e0bff615 	stw	r2,-40(fp)
    fb88:	00000b06 	br	fbb8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fb8c:	e0bff517 	ldw	r2,-44(fp)
    fb90:	10000526 	beq	r2,zero,fba8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fb94:	00c20004 	movi	r3,2048
    fb98:	e0bff817 	ldw	r2,-32(fp)
    fb9c:	1885c83a 	sub	r2,r3,r2
    fba0:	e0bff615 	stw	r2,-40(fp)
    fba4:	00000406 	br	fbb8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fba8:	00c1ffc4 	movi	r3,2047
    fbac:	e0bff817 	ldw	r2,-32(fp)
    fbb0:	1885c83a 	sub	r2,r3,r2
    fbb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fbb8:	e0bff617 	ldw	r2,-40(fp)
    fbbc:	1000011e 	bne	r2,zero,fbc4 <altera_avalon_jtag_uart_write+0xa4>
        break;
    fbc0:	00001d06 	br	fc38 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    fbc4:	e0fffe17 	ldw	r3,-8(fp)
    fbc8:	e0bff617 	ldw	r2,-40(fp)
    fbcc:	1880022e 	bgeu	r3,r2,fbd8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    fbd0:	e0bffe17 	ldw	r2,-8(fp)
    fbd4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fbd8:	e0bff817 	ldw	r2,-32(fp)
    fbdc:	10820e04 	addi	r2,r2,2104
    fbe0:	e0fffc17 	ldw	r3,-16(fp)
    fbe4:	1885883a 	add	r2,r3,r2
    fbe8:	1009883a 	mov	r4,r2
    fbec:	e17ffd17 	ldw	r5,-12(fp)
    fbf0:	e1bff617 	ldw	r6,-40(fp)
    fbf4:	0006e2c0 	call	6e2c <memcpy>
      ptr   += n;
    fbf8:	e0fffd17 	ldw	r3,-12(fp)
    fbfc:	e0bff617 	ldw	r2,-40(fp)
    fc00:	1885883a 	add	r2,r3,r2
    fc04:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fc08:	e0fffe17 	ldw	r3,-8(fp)
    fc0c:	e0bff617 	ldw	r2,-40(fp)
    fc10:	1885c83a 	sub	r2,r3,r2
    fc14:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fc18:	e0fff817 	ldw	r3,-32(fp)
    fc1c:	e0bff617 	ldw	r2,-40(fp)
    fc20:	1885883a 	add	r2,r3,r2
    fc24:	10c1ffcc 	andi	r3,r2,2047
    fc28:	e0bffc17 	ldw	r2,-16(fp)
    fc2c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fc30:	e0bffe17 	ldw	r2,-8(fp)
    fc34:	00bfc616 	blt	zero,r2,fb50 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc38:	0005303a 	rdctl	r2,status
    fc3c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc40:	e0fffa17 	ldw	r3,-24(fp)
    fc44:	00bfff84 	movi	r2,-2
    fc48:	1884703a 	and	r2,r3,r2
    fc4c:	1001703a 	wrctl	status,r2
  
  return context;
    fc50:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fc54:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fc58:	e0bffc17 	ldw	r2,-16(fp)
    fc5c:	10800817 	ldw	r2,32(r2)
    fc60:	10c00094 	ori	r3,r2,2
    fc64:	e0bffc17 	ldw	r2,-16(fp)
    fc68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fc6c:	e0bffc17 	ldw	r2,-16(fp)
    fc70:	10800017 	ldw	r2,0(r2)
    fc74:	10800104 	addi	r2,r2,4
    fc78:	1007883a 	mov	r3,r2
    fc7c:	e0bffc17 	ldw	r2,-16(fp)
    fc80:	10800817 	ldw	r2,32(r2)
    fc84:	18800035 	stwio	r2,0(r3)
    fc88:	e0bff917 	ldw	r2,-28(fp)
    fc8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc90:	e0bffb17 	ldw	r2,-20(fp)
    fc94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fc98:	e0bffe17 	ldw	r2,-8(fp)
    fc9c:	0080120e 	bge	zero,r2,fce8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    fca0:	e0bfff17 	ldw	r2,-4(fp)
    fca4:	1090000c 	andi	r2,r2,16384
    fca8:	10000126 	beq	r2,zero,fcb0 <altera_avalon_jtag_uart_write+0x190>
        break;
    fcac:	00001006 	br	fcf0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fcb0:	0001883a 	nop
    fcb4:	e0bffc17 	ldw	r2,-16(fp)
    fcb8:	10c00d17 	ldw	r3,52(r2)
    fcbc:	e0bff517 	ldw	r2,-44(fp)
    fcc0:	1880051e 	bne	r3,r2,fcd8 <altera_avalon_jtag_uart_write+0x1b8>
    fcc4:	e0bffc17 	ldw	r2,-16(fp)
    fcc8:	10c00917 	ldw	r3,36(r2)
    fccc:	e0bffc17 	ldw	r2,-16(fp)
    fcd0:	10800117 	ldw	r2,4(r2)
    fcd4:	18bff736 	bltu	r3,r2,fcb4 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fcd8:	e0bffc17 	ldw	r2,-16(fp)
    fcdc:	10800917 	ldw	r2,36(r2)
    fce0:	10000126 	beq	r2,zero,fce8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    fce4:	00000206 	br	fcf0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    fce8:	e0bffe17 	ldw	r2,-8(fp)
    fcec:	00bf9716 	blt	zero,r2,fb4c <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fcf0:	e0fffd17 	ldw	r3,-12(fp)
    fcf4:	e0bff717 	ldw	r2,-36(fp)
    fcf8:	18800426 	beq	r3,r2,fd0c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    fcfc:	e0fffd17 	ldw	r3,-12(fp)
    fd00:	e0bff717 	ldw	r2,-36(fp)
    fd04:	1885c83a 	sub	r2,r3,r2
    fd08:	00000606 	br	fd24 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    fd0c:	e0bfff17 	ldw	r2,-4(fp)
    fd10:	1090000c 	andi	r2,r2,16384
    fd14:	10000226 	beq	r2,zero,fd20 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    fd18:	00bffd44 	movi	r2,-11
    fd1c:	00000106 	br	fd24 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fd20:	00bffec4 	movi	r2,-5
}
    fd24:	e037883a 	mov	sp,fp
    fd28:	dfc00117 	ldw	ra,4(sp)
    fd2c:	df000017 	ldw	fp,0(sp)
    fd30:	dec00204 	addi	sp,sp,8
    fd34:	f800283a 	ret

0000fd38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fd38:	defffa04 	addi	sp,sp,-24
    fd3c:	dfc00515 	stw	ra,20(sp)
    fd40:	df000415 	stw	fp,16(sp)
    fd44:	df000404 	addi	fp,sp,16
    fd48:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fd4c:	0007883a 	mov	r3,zero
    fd50:	e0bfff17 	ldw	r2,-4(fp)
    fd54:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fd58:	e0bfff17 	ldw	r2,-4(fp)
    fd5c:	10800104 	addi	r2,r2,4
    fd60:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd64:	0005303a 	rdctl	r2,status
    fd68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd6c:	e0fffd17 	ldw	r3,-12(fp)
    fd70:	00bfff84 	movi	r2,-2
    fd74:	1884703a 	and	r2,r3,r2
    fd78:	1001703a 	wrctl	status,r2
  
  return context;
    fd7c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fd80:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fd84:	00118580 	call	11858 <alt_tick>
    fd88:	e0bffc17 	ldw	r2,-16(fp)
    fd8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd90:	e0bffe17 	ldw	r2,-8(fp)
    fd94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fd98:	e037883a 	mov	sp,fp
    fd9c:	dfc00117 	ldw	ra,4(sp)
    fda0:	df000017 	ldw	fp,0(sp)
    fda4:	dec00204 	addi	sp,sp,8
    fda8:	f800283a 	ret

0000fdac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fdac:	defff804 	addi	sp,sp,-32
    fdb0:	dfc00715 	stw	ra,28(sp)
    fdb4:	df000615 	stw	fp,24(sp)
    fdb8:	df000604 	addi	fp,sp,24
    fdbc:	e13ffc15 	stw	r4,-16(fp)
    fdc0:	e17ffd15 	stw	r5,-12(fp)
    fdc4:	e1bffe15 	stw	r6,-8(fp)
    fdc8:	e1ffff15 	stw	r7,-4(fp)
    fdcc:	e0bfff17 	ldw	r2,-4(fp)
    fdd0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fdd4:	00800074 	movhi	r2,1
    fdd8:	10915904 	addi	r2,r2,17764
    fddc:	10800017 	ldw	r2,0(r2)
    fde0:	1000041e 	bne	r2,zero,fdf4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    fde4:	00800074 	movhi	r2,1
    fde8:	10915904 	addi	r2,r2,17764
    fdec:	e0fffb17 	ldw	r3,-20(fp)
    fdf0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fdf4:	e0bffc17 	ldw	r2,-16(fp)
    fdf8:	10800104 	addi	r2,r2,4
    fdfc:	00c001c4 	movi	r3,7
    fe00:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fe04:	d8000015 	stw	zero,0(sp)
    fe08:	e13ffd17 	ldw	r4,-12(fp)
    fe0c:	e17ffe17 	ldw	r5,-8(fp)
    fe10:	01800074 	movhi	r6,1
    fe14:	31bf4e04 	addi	r6,r6,-712
    fe18:	e1fffc17 	ldw	r7,-16(fp)
    fe1c:	00110f40 	call	110f4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fe20:	e037883a 	mov	sp,fp
    fe24:	dfc00117 	ldw	ra,4(sp)
    fe28:	df000017 	ldw	fp,0(sp)
    fe2c:	dec00204 	addi	sp,sp,8
    fe30:	f800283a 	ret

0000fe34 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fe34:	defffa04 	addi	sp,sp,-24
    fe38:	dfc00515 	stw	ra,20(sp)
    fe3c:	df000415 	stw	fp,16(sp)
    fe40:	df000404 	addi	fp,sp,16
    fe44:	e13ffd15 	stw	r4,-12(fp)
    fe48:	e17ffe15 	stw	r5,-8(fp)
    fe4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    fe50:	e0bffd17 	ldw	r2,-12(fp)
    fe54:	10800017 	ldw	r2,0(r2)
    fe58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    fe5c:	e0bffc17 	ldw	r2,-16(fp)
    fe60:	10c00a04 	addi	r3,r2,40
    fe64:	e0bffd17 	ldw	r2,-12(fp)
    fe68:	10800217 	ldw	r2,8(r2)
    fe6c:	1809883a 	mov	r4,r3
    fe70:	e17ffe17 	ldw	r5,-8(fp)
    fe74:	e1bfff17 	ldw	r6,-4(fp)
    fe78:	100f883a 	mov	r7,r2
    fe7c:	001034c0 	call	1034c <altera_avalon_uart_read>
      fd->fd_flags);
}
    fe80:	e037883a 	mov	sp,fp
    fe84:	dfc00117 	ldw	ra,4(sp)
    fe88:	df000017 	ldw	fp,0(sp)
    fe8c:	dec00204 	addi	sp,sp,8
    fe90:	f800283a 	ret

0000fe94 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fe94:	defffa04 	addi	sp,sp,-24
    fe98:	dfc00515 	stw	ra,20(sp)
    fe9c:	df000415 	stw	fp,16(sp)
    fea0:	df000404 	addi	fp,sp,16
    fea4:	e13ffd15 	stw	r4,-12(fp)
    fea8:	e17ffe15 	stw	r5,-8(fp)
    feac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    feb0:	e0bffd17 	ldw	r2,-12(fp)
    feb4:	10800017 	ldw	r2,0(r2)
    feb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    febc:	e0bffc17 	ldw	r2,-16(fp)
    fec0:	10c00a04 	addi	r3,r2,40
    fec4:	e0bffd17 	ldw	r2,-12(fp)
    fec8:	10800217 	ldw	r2,8(r2)
    fecc:	1809883a 	mov	r4,r3
    fed0:	e17ffe17 	ldw	r5,-8(fp)
    fed4:	e1bfff17 	ldw	r6,-4(fp)
    fed8:	100f883a 	mov	r7,r2
    fedc:	00105780 	call	10578 <altera_avalon_uart_write>
      fd->fd_flags);
}
    fee0:	e037883a 	mov	sp,fp
    fee4:	dfc00117 	ldw	ra,4(sp)
    fee8:	df000017 	ldw	fp,0(sp)
    feec:	dec00204 	addi	sp,sp,8
    fef0:	f800283a 	ret

0000fef4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    fef4:	defffc04 	addi	sp,sp,-16
    fef8:	dfc00315 	stw	ra,12(sp)
    fefc:	df000215 	stw	fp,8(sp)
    ff00:	df000204 	addi	fp,sp,8
    ff04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    ff08:	e0bfff17 	ldw	r2,-4(fp)
    ff0c:	10800017 	ldw	r2,0(r2)
    ff10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    ff14:	e0bffe17 	ldw	r2,-8(fp)
    ff18:	10c00a04 	addi	r3,r2,40
    ff1c:	e0bfff17 	ldw	r2,-4(fp)
    ff20:	10800217 	ldw	r2,8(r2)
    ff24:	1809883a 	mov	r4,r3
    ff28:	100b883a 	mov	r5,r2
    ff2c:	00102a80 	call	102a8 <altera_avalon_uart_close>
}
    ff30:	e037883a 	mov	sp,fp
    ff34:	dfc00117 	ldw	ra,4(sp)
    ff38:	df000017 	ldw	fp,0(sp)
    ff3c:	dec00204 	addi	sp,sp,8
    ff40:	f800283a 	ret

0000ff44 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    ff44:	defff804 	addi	sp,sp,-32
    ff48:	dfc00715 	stw	ra,28(sp)
    ff4c:	df000615 	stw	fp,24(sp)
    ff50:	df000604 	addi	fp,sp,24
    ff54:	e13ffd15 	stw	r4,-12(fp)
    ff58:	e17ffe15 	stw	r5,-8(fp)
    ff5c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
    ff60:	e0bffd17 	ldw	r2,-12(fp)
    ff64:	10800017 	ldw	r2,0(r2)
    ff68:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    ff6c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    ff70:	1000041e 	bne	r2,zero,ff84 <altera_avalon_uart_init+0x40>
    ff74:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    ff78:	1000021e 	bne	r2,zero,ff84 <altera_avalon_uart_init+0x40>
    ff7c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    ff80:	10000226 	beq	r2,zero,ff8c <altera_avalon_uart_init+0x48>
    ff84:	00800044 	movi	r2,1
    ff88:	00000106 	br	ff90 <altera_avalon_uart_init+0x4c>
    ff8c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    ff90:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    ff94:	e0bffc17 	ldw	r2,-16(fp)
    ff98:	10000f1e 	bne	r2,zero,ffd8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    ff9c:	e0bffd17 	ldw	r2,-12(fp)
    ffa0:	00c32004 	movi	r3,3200
    ffa4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    ffa8:	e0bffb17 	ldw	r2,-20(fp)
    ffac:	10800304 	addi	r2,r2,12
    ffb0:	e0fffd17 	ldw	r3,-12(fp)
    ffb4:	18c00117 	ldw	r3,4(r3)
    ffb8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    ffbc:	d8000015 	stw	zero,0(sp)
    ffc0:	e13ffe17 	ldw	r4,-8(fp)
    ffc4:	e17fff17 	ldw	r5,-4(fp)
    ffc8:	01800074 	movhi	r6,1
    ffcc:	31bffb04 	addi	r6,r6,-20
    ffd0:	e1fffd17 	ldw	r7,-12(fp)
    ffd4:	00110f40 	call	110f4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    ffd8:	e037883a 	mov	sp,fp
    ffdc:	dfc00117 	ldw	ra,4(sp)
    ffe0:	df000017 	ldw	fp,0(sp)
    ffe4:	dec00204 	addi	sp,sp,8
    ffe8:	f800283a 	ret

0000ffec <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    ffec:	defffa04 	addi	sp,sp,-24
    fff0:	dfc00515 	stw	ra,20(sp)
    fff4:	df000415 	stw	fp,16(sp)
    fff8:	df000404 	addi	fp,sp,16
    fffc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   10000:	e0bfff17 	ldw	r2,-4(fp)
   10004:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   10008:	e0bffc17 	ldw	r2,-16(fp)
   1000c:	10800017 	ldw	r2,0(r2)
   10010:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   10014:	e0bffd17 	ldw	r2,-12(fp)
   10018:	10800204 	addi	r2,r2,8
   1001c:	10800037 	ldwio	r2,0(r2)
   10020:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   10024:	e0bffd17 	ldw	r2,-12(fp)
   10028:	10800204 	addi	r2,r2,8
   1002c:	0007883a 	mov	r3,zero
   10030:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   10034:	e0bffd17 	ldw	r2,-12(fp)
   10038:	10800204 	addi	r2,r2,8
   1003c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   10040:	e0bffe17 	ldw	r2,-8(fp)
   10044:	1080200c 	andi	r2,r2,128
   10048:	10000326 	beq	r2,zero,10058 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   1004c:	e13ffc17 	ldw	r4,-16(fp)
   10050:	e17ffe17 	ldw	r5,-8(fp)
   10054:	00100840 	call	10084 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   10058:	e0bffe17 	ldw	r2,-8(fp)
   1005c:	1081100c 	andi	r2,r2,1088
   10060:	10000326 	beq	r2,zero,10070 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   10064:	e13ffc17 	ldw	r4,-16(fp)
   10068:	e17ffe17 	ldw	r5,-8(fp)
   1006c:	00101640 	call	10164 <altera_avalon_uart_txirq>
  }
  

}
   10070:	e037883a 	mov	sp,fp
   10074:	dfc00117 	ldw	ra,4(sp)
   10078:	df000017 	ldw	fp,0(sp)
   1007c:	dec00204 	addi	sp,sp,8
   10080:	f800283a 	ret

00010084 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   10084:	defffc04 	addi	sp,sp,-16
   10088:	df000315 	stw	fp,12(sp)
   1008c:	df000304 	addi	fp,sp,12
   10090:	e13ffe15 	stw	r4,-8(fp)
   10094:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   10098:	e0bfff17 	ldw	r2,-4(fp)
   1009c:	108000cc 	andi	r2,r2,3
   100a0:	10000126 	beq	r2,zero,100a8 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   100a4:	00002b06 	br	10154 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   100a8:	e0bffe17 	ldw	r2,-8(fp)
   100ac:	10800317 	ldw	r2,12(r2)
   100b0:	e0bffe17 	ldw	r2,-8(fp)
   100b4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   100b8:	e0bffe17 	ldw	r2,-8(fp)
   100bc:	10800317 	ldw	r2,12(r2)
   100c0:	10800044 	addi	r2,r2,1
   100c4:	10800fcc 	andi	r2,r2,63
   100c8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   100cc:	e0bffe17 	ldw	r2,-8(fp)
   100d0:	10800317 	ldw	r2,12(r2)
   100d4:	e0fffe17 	ldw	r3,-8(fp)
   100d8:	18c00017 	ldw	r3,0(r3)
   100dc:	18c00037 	ldwio	r3,0(r3)
   100e0:	1809883a 	mov	r4,r3
   100e4:	e0fffe17 	ldw	r3,-8(fp)
   100e8:	1885883a 	add	r2,r3,r2
   100ec:	10800704 	addi	r2,r2,28
   100f0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   100f4:	e0bffe17 	ldw	r2,-8(fp)
   100f8:	e0fffd17 	ldw	r3,-12(fp)
   100fc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   10100:	e0bffe17 	ldw	r2,-8(fp)
   10104:	10800317 	ldw	r2,12(r2)
   10108:	10800044 	addi	r2,r2,1
   1010c:	10800fcc 	andi	r2,r2,63
   10110:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   10114:	e0bffe17 	ldw	r2,-8(fp)
   10118:	10c00217 	ldw	r3,8(r2)
   1011c:	e0bffd17 	ldw	r2,-12(fp)
   10120:	18800c1e 	bne	r3,r2,10154 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   10124:	e0bffe17 	ldw	r2,-8(fp)
   10128:	10c00117 	ldw	r3,4(r2)
   1012c:	00bfdfc4 	movi	r2,-129
   10130:	1886703a 	and	r3,r3,r2
   10134:	e0bffe17 	ldw	r2,-8(fp)
   10138:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   1013c:	e0bffe17 	ldw	r2,-8(fp)
   10140:	10800017 	ldw	r2,0(r2)
   10144:	10800304 	addi	r2,r2,12
   10148:	e0fffe17 	ldw	r3,-8(fp)
   1014c:	18c00117 	ldw	r3,4(r3)
   10150:	10c00035 	stwio	r3,0(r2)
  }   
}
   10154:	e037883a 	mov	sp,fp
   10158:	df000017 	ldw	fp,0(sp)
   1015c:	dec00104 	addi	sp,sp,4
   10160:	f800283a 	ret

00010164 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   10164:	defffb04 	addi	sp,sp,-20
   10168:	df000415 	stw	fp,16(sp)
   1016c:	df000404 	addi	fp,sp,16
   10170:	e13ffc15 	stw	r4,-16(fp)
   10174:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   10178:	e0bffc17 	ldw	r2,-16(fp)
   1017c:	10c00417 	ldw	r3,16(r2)
   10180:	e0bffc17 	ldw	r2,-16(fp)
   10184:	10800517 	ldw	r2,20(r2)
   10188:	18803226 	beq	r3,r2,10254 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	10800617 	ldw	r2,24(r2)
   10194:	1080008c 	andi	r2,r2,2
   10198:	10000326 	beq	r2,zero,101a8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   101a4:	10001d26 	beq	r2,zero,1021c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   101a8:	e0bffc17 	ldw	r2,-16(fp)
   101ac:	10800417 	ldw	r2,16(r2)
   101b0:	e0bffc17 	ldw	r2,-16(fp)
   101b4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   101b8:	e0bffc17 	ldw	r2,-16(fp)
   101bc:	10800017 	ldw	r2,0(r2)
   101c0:	10800104 	addi	r2,r2,4
   101c4:	e0fffc17 	ldw	r3,-16(fp)
   101c8:	18c00417 	ldw	r3,16(r3)
   101cc:	e13ffc17 	ldw	r4,-16(fp)
   101d0:	20c7883a 	add	r3,r4,r3
   101d4:	18c01704 	addi	r3,r3,92
   101d8:	18c00003 	ldbu	r3,0(r3)
   101dc:	18c03fcc 	andi	r3,r3,255
   101e0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   101e4:	e0bffc17 	ldw	r2,-16(fp)
   101e8:	10800417 	ldw	r2,16(r2)
   101ec:	10800044 	addi	r2,r2,1
   101f0:	e0fffc17 	ldw	r3,-16(fp)
   101f4:	18800415 	stw	r2,16(r3)
   101f8:	10c00fcc 	andi	r3,r2,63
   101fc:	e0bffc17 	ldw	r2,-16(fp)
   10200:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   10204:	e0bffc17 	ldw	r2,-16(fp)
   10208:	10800117 	ldw	r2,4(r2)
   1020c:	10c01014 	ori	r3,r2,64
   10210:	e0bffc17 	ldw	r2,-16(fp)
   10214:	10c00115 	stw	r3,4(r2)
   10218:	00000e06 	br	10254 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   1021c:	e0bffc17 	ldw	r2,-16(fp)
   10220:	10800017 	ldw	r2,0(r2)
   10224:	10800204 	addi	r2,r2,8
   10228:	10800037 	ldwio	r2,0(r2)
   1022c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   10230:	e0bffd17 	ldw	r2,-12(fp)
   10234:	1082000c 	andi	r2,r2,2048
   10238:	1000061e 	bne	r2,zero,10254 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1023c:	e0bffc17 	ldw	r2,-16(fp)
   10240:	10c00117 	ldw	r3,4(r2)
   10244:	00bfefc4 	movi	r2,-65
   10248:	1886703a 	and	r3,r3,r2
   1024c:	e0bffc17 	ldw	r2,-16(fp)
   10250:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   10254:	e0bffc17 	ldw	r2,-16(fp)
   10258:	10c00417 	ldw	r3,16(r2)
   1025c:	e0bffc17 	ldw	r2,-16(fp)
   10260:	10800517 	ldw	r2,20(r2)
   10264:	1880061e 	bne	r3,r2,10280 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   10268:	e0bffc17 	ldw	r2,-16(fp)
   1026c:	10c00117 	ldw	r3,4(r2)
   10270:	00beefc4 	movi	r2,-1089
   10274:	1886703a 	and	r3,r3,r2
   10278:	e0bffc17 	ldw	r2,-16(fp)
   1027c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   10280:	e0bffc17 	ldw	r2,-16(fp)
   10284:	10800017 	ldw	r2,0(r2)
   10288:	10800304 	addi	r2,r2,12
   1028c:	e0fffc17 	ldw	r3,-16(fp)
   10290:	18c00117 	ldw	r3,4(r3)
   10294:	10c00035 	stwio	r3,0(r2)
}
   10298:	e037883a 	mov	sp,fp
   1029c:	df000017 	ldw	fp,0(sp)
   102a0:	dec00104 	addi	sp,sp,4
   102a4:	f800283a 	ret

000102a8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   102a8:	defffd04 	addi	sp,sp,-12
   102ac:	df000215 	stw	fp,8(sp)
   102b0:	df000204 	addi	fp,sp,8
   102b4:	e13ffe15 	stw	r4,-8(fp)
   102b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   102bc:	00000506 	br	102d4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	1090000c 	andi	r2,r2,16384
   102c8:	10000226 	beq	r2,zero,102d4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   102cc:	00bffd44 	movi	r2,-11
   102d0:	00000606 	br	102ec <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   102d4:	e0bffe17 	ldw	r2,-8(fp)
   102d8:	10c00417 	ldw	r3,16(r2)
   102dc:	e0bffe17 	ldw	r2,-8(fp)
   102e0:	10800517 	ldw	r2,20(r2)
   102e4:	18bff61e 	bne	r3,r2,102c0 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   102e8:	0005883a 	mov	r2,zero
}
   102ec:	e037883a 	mov	sp,fp
   102f0:	df000017 	ldw	fp,0(sp)
   102f4:	dec00104 	addi	sp,sp,4
   102f8:	f800283a 	ret

000102fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   102fc:	defffe04 	addi	sp,sp,-8
   10300:	dfc00115 	stw	ra,4(sp)
   10304:	df000015 	stw	fp,0(sp)
   10308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1030c:	00800074 	movhi	r2,1
   10310:	10914704 	addi	r2,r2,17692
   10314:	10800017 	ldw	r2,0(r2)
   10318:	10000526 	beq	r2,zero,10330 <alt_get_errno+0x34>
   1031c:	00800074 	movhi	r2,1
   10320:	10914704 	addi	r2,r2,17692
   10324:	10800017 	ldw	r2,0(r2)
   10328:	103ee83a 	callr	r2
   1032c:	00000206 	br	10338 <alt_get_errno+0x3c>
   10330:	00800074 	movhi	r2,1
   10334:	10915404 	addi	r2,r2,17744
}
   10338:	e037883a 	mov	sp,fp
   1033c:	dfc00117 	ldw	ra,4(sp)
   10340:	df000017 	ldw	fp,0(sp)
   10344:	dec00204 	addi	sp,sp,8
   10348:	f800283a 	ret

0001034c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   1034c:	defff204 	addi	sp,sp,-56
   10350:	dfc00d15 	stw	ra,52(sp)
   10354:	df000c15 	stw	fp,48(sp)
   10358:	df000c04 	addi	fp,sp,48
   1035c:	e13ffc15 	stw	r4,-16(fp)
   10360:	e17ffd15 	stw	r5,-12(fp)
   10364:	e1bffe15 	stw	r6,-8(fp)
   10368:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   1036c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   10370:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   10374:	e0bfff17 	ldw	r2,-4(fp)
   10378:	1090000c 	andi	r2,r2,16384
   1037c:	1005003a 	cmpeq	r2,r2,zero
   10380:	10803fcc 	andi	r2,r2,255
   10384:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   10388:	00001306 	br	103d8 <altera_avalon_uart_read+0x8c>
    {
      count++;
   1038c:	e0bff517 	ldw	r2,-44(fp)
   10390:	10800044 	addi	r2,r2,1
   10394:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   10398:	e0bffd17 	ldw	r2,-12(fp)
   1039c:	10c00044 	addi	r3,r2,1
   103a0:	e0fffd15 	stw	r3,-12(fp)
   103a4:	e0fffc17 	ldw	r3,-16(fp)
   103a8:	18c00217 	ldw	r3,8(r3)
   103ac:	e13ffc17 	ldw	r4,-16(fp)
   103b0:	20c7883a 	add	r3,r4,r3
   103b4:	18c00704 	addi	r3,r3,28
   103b8:	18c00003 	ldbu	r3,0(r3)
   103bc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   103c0:	e0bffc17 	ldw	r2,-16(fp)
   103c4:	10800217 	ldw	r2,8(r2)
   103c8:	10800044 	addi	r2,r2,1
   103cc:	10c00fcc 	andi	r3,r2,63
   103d0:	e0bffc17 	ldw	r2,-16(fp)
   103d4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   103d8:	e0fff517 	ldw	r3,-44(fp)
   103dc:	e0bffe17 	ldw	r2,-8(fp)
   103e0:	1880050e 	bge	r3,r2,103f8 <altera_avalon_uart_read+0xac>
   103e4:	e0bffc17 	ldw	r2,-16(fp)
   103e8:	10c00217 	ldw	r3,8(r2)
   103ec:	e0bffc17 	ldw	r2,-16(fp)
   103f0:	10800317 	ldw	r2,12(r2)
   103f4:	18bfe51e 	bne	r3,r2,1038c <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   103f8:	e0bff517 	ldw	r2,-44(fp)
   103fc:	1000251e 	bne	r2,zero,10494 <altera_avalon_uart_read+0x148>
   10400:	e0bffc17 	ldw	r2,-16(fp)
   10404:	10c00217 	ldw	r3,8(r2)
   10408:	e0bffc17 	ldw	r2,-16(fp)
   1040c:	10800317 	ldw	r2,12(r2)
   10410:	1880201e 	bne	r3,r2,10494 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   10414:	e0bff617 	ldw	r2,-40(fp)
   10418:	1000071e 	bne	r2,zero,10438 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   1041c:	00102fc0 	call	102fc <alt_get_errno>
   10420:	1007883a 	mov	r3,r2
   10424:	008002c4 	movi	r2,11
   10428:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   1042c:	00800044 	movi	r2,1
   10430:	e0bff405 	stb	r2,-48(fp)
        break;
   10434:	00001b06 	br	104a4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10438:	0005303a 	rdctl	r2,status
   1043c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10440:	e0fff817 	ldw	r3,-32(fp)
   10444:	00bfff84 	movi	r2,-2
   10448:	1884703a 	and	r2,r3,r2
   1044c:	1001703a 	wrctl	status,r2
  
  return context;
   10450:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   10454:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	10800117 	ldw	r2,4(r2)
   10460:	10c02014 	ori	r3,r2,128
   10464:	e0bffc17 	ldw	r2,-16(fp)
   10468:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1046c:	e0bffc17 	ldw	r2,-16(fp)
   10470:	10800017 	ldw	r2,0(r2)
   10474:	10800304 	addi	r2,r2,12
   10478:	e0fffc17 	ldw	r3,-16(fp)
   1047c:	18c00117 	ldw	r3,4(r3)
   10480:	10c00035 	stwio	r3,0(r2)
   10484:	e0bff717 	ldw	r2,-36(fp)
   10488:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1048c:	e0bff917 	ldw	r2,-28(fp)
   10490:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   10494:	e0bff517 	ldw	r2,-44(fp)
   10498:	1000021e 	bne	r2,zero,104a4 <altera_avalon_uart_read+0x158>
   1049c:	e0bffe17 	ldw	r2,-8(fp)
   104a0:	103fb91e 	bne	r2,zero,10388 <altera_avalon_uart_read+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104a4:	0005303a 	rdctl	r2,status
   104a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104ac:	e0fffa17 	ldw	r3,-24(fp)
   104b0:	00bfff84 	movi	r2,-2
   104b4:	1884703a 	and	r2,r3,r2
   104b8:	1001703a 	wrctl	status,r2
  
  return context;
   104bc:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   104c0:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   104c4:	e0bffc17 	ldw	r2,-16(fp)
   104c8:	10800117 	ldw	r2,4(r2)
   104cc:	10c02014 	ori	r3,r2,128
   104d0:	e0bffc17 	ldw	r2,-16(fp)
   104d4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   104d8:	e0bffc17 	ldw	r2,-16(fp)
   104dc:	10800017 	ldw	r2,0(r2)
   104e0:	10800304 	addi	r2,r2,12
   104e4:	e0fffc17 	ldw	r3,-16(fp)
   104e8:	18c00117 	ldw	r3,4(r3)
   104ec:	10c00035 	stwio	r3,0(r2)
   104f0:	e0bff717 	ldw	r2,-36(fp)
   104f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104f8:	e0bffb17 	ldw	r2,-20(fp)
   104fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   10500:	e0bff403 	ldbu	r2,-48(fp)
   10504:	10000226 	beq	r2,zero,10510 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   10508:	00bffd44 	movi	r2,-11
   1050c:	00000106 	br	10514 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   10510:	e0bff517 	ldw	r2,-44(fp)
  }
}
   10514:	e037883a 	mov	sp,fp
   10518:	dfc00117 	ldw	ra,4(sp)
   1051c:	df000017 	ldw	fp,0(sp)
   10520:	dec00204 	addi	sp,sp,8
   10524:	f800283a 	ret

00010528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10528:	defffe04 	addi	sp,sp,-8
   1052c:	dfc00115 	stw	ra,4(sp)
   10530:	df000015 	stw	fp,0(sp)
   10534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10538:	00800074 	movhi	r2,1
   1053c:	10914704 	addi	r2,r2,17692
   10540:	10800017 	ldw	r2,0(r2)
   10544:	10000526 	beq	r2,zero,1055c <alt_get_errno+0x34>
   10548:	00800074 	movhi	r2,1
   1054c:	10914704 	addi	r2,r2,17692
   10550:	10800017 	ldw	r2,0(r2)
   10554:	103ee83a 	callr	r2
   10558:	00000206 	br	10564 <alt_get_errno+0x3c>
   1055c:	00800074 	movhi	r2,1
   10560:	10915404 	addi	r2,r2,17744
}
   10564:	e037883a 	mov	sp,fp
   10568:	dfc00117 	ldw	ra,4(sp)
   1056c:	df000017 	ldw	fp,0(sp)
   10570:	dec00204 	addi	sp,sp,8
   10574:	f800283a 	ret

00010578 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   10578:	defff204 	addi	sp,sp,-56
   1057c:	dfc00d15 	stw	ra,52(sp)
   10580:	df000c15 	stw	fp,48(sp)
   10584:	df000c04 	addi	fp,sp,48
   10588:	e13ffc15 	stw	r4,-16(fp)
   1058c:	e17ffd15 	stw	r5,-12(fp)
   10590:	e1bffe15 	stw	r6,-8(fp)
   10594:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   10598:	e0bffe17 	ldw	r2,-8(fp)
   1059c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   105a0:	e0bfff17 	ldw	r2,-4(fp)
   105a4:	1090000c 	andi	r2,r2,16384
   105a8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   105ac:	00003c06 	br	106a0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   105b0:	e0bffc17 	ldw	r2,-16(fp)
   105b4:	10800517 	ldw	r2,20(r2)
   105b8:	10800044 	addi	r2,r2,1
   105bc:	10800fcc 	andi	r2,r2,63
   105c0:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	10c00417 	ldw	r3,16(r2)
   105cc:	e0bff617 	ldw	r2,-40(fp)
   105d0:	1880221e 	bne	r3,r2,1065c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   105d4:	e0bff517 	ldw	r2,-44(fp)
   105d8:	10000526 	beq	r2,zero,105f0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   105dc:	00105280 	call	10528 <alt_get_errno>
   105e0:	1007883a 	mov	r3,r2
   105e4:	008002c4 	movi	r2,11
   105e8:	18800015 	stw	r2,0(r3)
        break;
   105ec:	00002e06 	br	106a8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105f0:	0005303a 	rdctl	r2,status
   105f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105f8:	e0fff817 	ldw	r3,-32(fp)
   105fc:	00bfff84 	movi	r2,-2
   10600:	1884703a 	and	r2,r3,r2
   10604:	1001703a 	wrctl	status,r2
  
  return context;
   10608:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   1060c:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   10610:	e0bffc17 	ldw	r2,-16(fp)
   10614:	10800117 	ldw	r2,4(r2)
   10618:	10c11014 	ori	r3,r2,1088
   1061c:	e0bffc17 	ldw	r2,-16(fp)
   10620:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   10624:	e0bffc17 	ldw	r2,-16(fp)
   10628:	10800017 	ldw	r2,0(r2)
   1062c:	10800304 	addi	r2,r2,12
   10630:	e0fffc17 	ldw	r3,-16(fp)
   10634:	18c00117 	ldw	r3,4(r3)
   10638:	10c00035 	stwio	r3,0(r2)
   1063c:	e0bff717 	ldw	r2,-36(fp)
   10640:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10644:	e0bff917 	ldw	r2,-28(fp)
   10648:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   1064c:	e0bffc17 	ldw	r2,-16(fp)
   10650:	10c00417 	ldw	r3,16(r2)
   10654:	e0bff617 	ldw	r2,-40(fp)
   10658:	18bffc26 	beq	r3,r2,1064c <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
   1065c:	e0bff417 	ldw	r2,-48(fp)
   10660:	10bfffc4 	addi	r2,r2,-1
   10664:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   10668:	e0bffc17 	ldw	r2,-16(fp)
   1066c:	10c00517 	ldw	r3,20(r2)
   10670:	e0bffd17 	ldw	r2,-12(fp)
   10674:	11000044 	addi	r4,r2,1
   10678:	e13ffd15 	stw	r4,-12(fp)
   1067c:	10800003 	ldbu	r2,0(r2)
   10680:	1009883a 	mov	r4,r2
   10684:	e0bffc17 	ldw	r2,-16(fp)
   10688:	10c5883a 	add	r2,r2,r3
   1068c:	10801704 	addi	r2,r2,92
   10690:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   10694:	e0bffc17 	ldw	r2,-16(fp)
   10698:	e0fff617 	ldw	r3,-40(fp)
   1069c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   106a0:	e0bff417 	ldw	r2,-48(fp)
   106a4:	103fc21e 	bne	r2,zero,105b0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106a8:	0005303a 	rdctl	r2,status
   106ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106b0:	e0fffa17 	ldw	r3,-24(fp)
   106b4:	00bfff84 	movi	r2,-2
   106b8:	1884703a 	and	r2,r3,r2
   106bc:	1001703a 	wrctl	status,r2
  
  return context;
   106c0:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   106c4:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   106c8:	e0bffc17 	ldw	r2,-16(fp)
   106cc:	10800117 	ldw	r2,4(r2)
   106d0:	10c11014 	ori	r3,r2,1088
   106d4:	e0bffc17 	ldw	r2,-16(fp)
   106d8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	10800017 	ldw	r2,0(r2)
   106e4:	10800304 	addi	r2,r2,12
   106e8:	e0fffc17 	ldw	r3,-16(fp)
   106ec:	18c00117 	ldw	r3,4(r3)
   106f0:	10c00035 	stwio	r3,0(r2)
   106f4:	e0bff717 	ldw	r2,-36(fp)
   106f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106fc:	e0bffb17 	ldw	r2,-20(fp)
   10700:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   10704:	e0fffe17 	ldw	r3,-8(fp)
   10708:	e0bff417 	ldw	r2,-48(fp)
   1070c:	1885c83a 	sub	r2,r3,r2
}
   10710:	e037883a 	mov	sp,fp
   10714:	dfc00117 	ldw	ra,4(sp)
   10718:	df000017 	ldw	fp,0(sp)
   1071c:	dec00204 	addi	sp,sp,8
   10720:	f800283a 	ret

00010724 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   10724:	defff904 	addi	sp,sp,-28
   10728:	dfc00615 	stw	ra,24(sp)
   1072c:	df000515 	stw	fp,20(sp)
   10730:	df000504 	addi	fp,sp,20
   10734:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   10738:	00800144 	movi	r2,5
   1073c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   10740:	00800044 	movi	r2,1
   10744:	d8800015 	stw	r2,0(sp)
   10748:	e0bffe44 	addi	r2,fp,-7
   1074c:	d8800115 	stw	r2,4(sp)
   10750:	d8000215 	stw	zero,8(sp)
   10754:	e13fff17 	ldw	r4,-4(fp)
   10758:	000b883a 	mov	r5,zero
   1075c:	01800044 	movi	r6,1
   10760:	e1fffe04 	addi	r7,fp,-8
   10764:	001197c0 	call	1197c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   10768:	e0bffe43 	ldbu	r2,-7(fp)
}
   1076c:	e037883a 	mov	sp,fp
   10770:	dfc00117 	ldw	ra,4(sp)
   10774:	df000017 	ldw	fp,0(sp)
   10778:	dec00204 	addi	sp,sp,8
   1077c:	f800283a 	ret

00010780 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   10780:	defffd04 	addi	sp,sp,-12
   10784:	dfc00215 	stw	ra,8(sp)
   10788:	df000115 	stw	fp,4(sp)
   1078c:	df000104 	addi	fp,sp,4
   10790:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   10794:	e13fff17 	ldw	r4,-4(fp)
   10798:	00107240 	call	10724 <epcs_read_status_register>
   1079c:	10803fcc 	andi	r2,r2,255
   107a0:	1080004c 	andi	r2,r2,1
}
   107a4:	e037883a 	mov	sp,fp
   107a8:	dfc00117 	ldw	ra,4(sp)
   107ac:	df000017 	ldw	fp,0(sp)
   107b0:	dec00204 	addi	sp,sp,8
   107b4:	f800283a 	ret

000107b8 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   107b8:	defffd04 	addi	sp,sp,-12
   107bc:	dfc00215 	stw	ra,8(sp)
   107c0:	df000115 	stw	fp,4(sp)
   107c4:	df000104 	addi	fp,sp,4
   107c8:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   107cc:	0001883a 	nop
   107d0:	e13fff17 	ldw	r4,-4(fp)
   107d4:	00107800 	call	10780 <epcs_test_wip>
   107d8:	103ffd1e 	bne	r2,zero,107d0 <epcs_await_wip_released+0x18>
  {
  }
}
   107dc:	e037883a 	mov	sp,fp
   107e0:	dfc00117 	ldw	ra,4(sp)
   107e4:	df000017 	ldw	fp,0(sp)
   107e8:	dec00204 	addi	sp,sp,8
   107ec:	f800283a 	ret

000107f0 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   107f0:	defff604 	addi	sp,sp,-40
   107f4:	dfc00915 	stw	ra,36(sp)
   107f8:	df000815 	stw	fp,32(sp)
   107fc:	df000804 	addi	fp,sp,32
   10800:	e13ffd15 	stw	r4,-12(fp)
   10804:	e17ffe15 	stw	r5,-8(fp)
   10808:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   1080c:	e0bfff17 	ldw	r2,-4(fp)
   10810:	10001226 	beq	r2,zero,1085c <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   10814:	00bff604 	movi	r2,-40
   10818:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   1081c:	e0bffe17 	ldw	r2,-8(fp)
   10820:	1004d63a 	srli	r2,r2,24
   10824:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   10828:	e0bffe17 	ldw	r2,-8(fp)
   1082c:	1004d43a 	srli	r2,r2,16
   10830:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   10834:	e0bffe17 	ldw	r2,-8(fp)
   10838:	1004d23a 	srli	r2,r2,8
   1083c:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   10840:	e0bffe17 	ldw	r2,-8(fp)
   10844:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   10848:	00800144 	movi	r2,5
   1084c:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   10850:	e13ffd17 	ldw	r4,-12(fp)
   10854:	0010c980 	call	10c98 <epcs_enter_4_bytes_mode>
   10858:	00000c06 	br	1088c <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
   1085c:	00bff604 	movi	r2,-40
   10860:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   10864:	e0bffe17 	ldw	r2,-8(fp)
   10868:	1004d43a 	srli	r2,r2,16
   1086c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   10870:	e0bffe17 	ldw	r2,-8(fp)
   10874:	1004d23a 	srli	r2,r2,8
   10878:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   1087c:	e0bffe17 	ldw	r2,-8(fp)
   10880:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   10884:	00800104 	movi	r2,4
   10888:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   1088c:	e13ffd17 	ldw	r4,-12(fp)
   10890:	00109dc0 	call	109dc <epcs_write_enable>

  alt_avalon_spi_command(
   10894:	e0fffb03 	ldbu	r3,-20(fp)
   10898:	e0bffb44 	addi	r2,fp,-19
   1089c:	d8000015 	stw	zero,0(sp)
   108a0:	d8000115 	stw	zero,4(sp)
   108a4:	d8000215 	stw	zero,8(sp)
   108a8:	e13ffd17 	ldw	r4,-12(fp)
   108ac:	000b883a 	mov	r5,zero
   108b0:	180d883a 	mov	r6,r3
   108b4:	100f883a 	mov	r7,r2
   108b8:	001197c0 	call	1197c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   108bc:	e13ffd17 	ldw	r4,-12(fp)
   108c0:	00107b80 	call	107b8 <epcs_await_wip_released>

  if(four_bytes_mode)
   108c4:	e0bfff17 	ldw	r2,-4(fp)
   108c8:	10000226 	beq	r2,zero,108d4 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   108cc:	e13ffd17 	ldw	r4,-12(fp)
   108d0:	0010cf40 	call	10cf4 <epcs_exit_4_bytes_mode>
  }
}
   108d4:	e037883a 	mov	sp,fp
   108d8:	dfc00117 	ldw	ra,4(sp)
   108dc:	df000017 	ldw	fp,0(sp)
   108e0:	dec00204 	addi	sp,sp,8
   108e4:	f800283a 	ret

000108e8 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   108e8:	defff404 	addi	sp,sp,-48
   108ec:	dfc00b15 	stw	ra,44(sp)
   108f0:	df000a15 	stw	fp,40(sp)
   108f4:	df000a04 	addi	fp,sp,40
   108f8:	e13ffc15 	stw	r4,-16(fp)
   108fc:	e17ffd15 	stw	r5,-12(fp)
   10900:	e1bffe15 	stw	r6,-8(fp)
   10904:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   10908:	008000c4 	movi	r2,3
   1090c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   10910:	e0800217 	ldw	r2,8(fp)
   10914:	10001026 	beq	r2,zero,10958 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   10918:	e0bffd17 	ldw	r2,-12(fp)
   1091c:	1004d63a 	srli	r2,r2,24
   10920:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   10924:	e0bffd17 	ldw	r2,-12(fp)
   10928:	1005d43a 	srai	r2,r2,16
   1092c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   10930:	e0bffd17 	ldw	r2,-12(fp)
   10934:	1005d23a 	srai	r2,r2,8
   10938:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   1093c:	e0bffd17 	ldw	r2,-12(fp)
   10940:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   10944:	00800144 	movi	r2,5
   10948:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   1094c:	e13ffc17 	ldw	r4,-16(fp)
   10950:	0010c980 	call	10c98 <epcs_enter_4_bytes_mode>
   10954:	00000a06 	br	10980 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   10958:	e0bffd17 	ldw	r2,-12(fp)
   1095c:	1005d43a 	srai	r2,r2,16
   10960:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   10964:	e0bffd17 	ldw	r2,-12(fp)
   10968:	1005d23a 	srai	r2,r2,8
   1096c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   10970:	e0bffd17 	ldw	r2,-12(fp)
   10974:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   10978:	00800104 	movi	r2,4
   1097c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   10980:	e13ffc17 	ldw	r4,-16(fp)
   10984:	00107b80 	call	107b8 <epcs_await_wip_released>

  alt_avalon_spi_command(
   10988:	e0bfff17 	ldw	r2,-4(fp)
   1098c:	e0fffa04 	addi	r3,fp,-24
   10990:	d8800015 	stw	r2,0(sp)
   10994:	e0bffe17 	ldw	r2,-8(fp)
   10998:	d8800115 	stw	r2,4(sp)
   1099c:	d8000215 	stw	zero,8(sp)
   109a0:	e13ffc17 	ldw	r4,-16(fp)
   109a4:	000b883a 	mov	r5,zero
   109a8:	e1bff917 	ldw	r6,-28(fp)
   109ac:	180f883a 	mov	r7,r3
   109b0:	001197c0 	call	1197c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   109b4:	e0800217 	ldw	r2,8(fp)
   109b8:	10000226 	beq	r2,zero,109c4 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
   109bc:	e13ffc17 	ldw	r4,-16(fp)
   109c0:	0010cf40 	call	10cf4 <epcs_exit_4_bytes_mode>
  }

  return length;
   109c4:	e0bfff17 	ldw	r2,-4(fp)
}
   109c8:	e037883a 	mov	sp,fp
   109cc:	dfc00117 	ldw	ra,4(sp)
   109d0:	df000017 	ldw	fp,0(sp)
   109d4:	dec00204 	addi	sp,sp,8
   109d8:	f800283a 	ret

000109dc <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   109dc:	defff904 	addi	sp,sp,-28
   109e0:	dfc00615 	stw	ra,24(sp)
   109e4:	df000515 	stw	fp,20(sp)
   109e8:	df000504 	addi	fp,sp,20
   109ec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   109f0:	00800184 	movi	r2,6
   109f4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   109f8:	d8000015 	stw	zero,0(sp)
   109fc:	d8000115 	stw	zero,4(sp)
   10a00:	d8000215 	stw	zero,8(sp)
   10a04:	e13fff17 	ldw	r4,-4(fp)
   10a08:	000b883a 	mov	r5,zero
   10a0c:	01800044 	movi	r6,1
   10a10:	e1fffe04 	addi	r7,fp,-8
   10a14:	001197c0 	call	1197c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   10a18:	e037883a 	mov	sp,fp
   10a1c:	dfc00117 	ldw	ra,4(sp)
   10a20:	df000017 	ldw	fp,0(sp)
   10a24:	dec00204 	addi	sp,sp,8
   10a28:	f800283a 	ret

00010a2c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   10a2c:	defff804 	addi	sp,sp,-32
   10a30:	dfc00715 	stw	ra,28(sp)
   10a34:	df000615 	stw	fp,24(sp)
   10a38:	df000604 	addi	fp,sp,24
   10a3c:	e13ffe15 	stw	r4,-8(fp)
   10a40:	2805883a 	mov	r2,r5
   10a44:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   10a48:	00800044 	movi	r2,1
   10a4c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   10a50:	e0bfff03 	ldbu	r2,-4(fp)
   10a54:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   10a58:	d8000015 	stw	zero,0(sp)
   10a5c:	d8000115 	stw	zero,4(sp)
   10a60:	d8000215 	stw	zero,8(sp)
   10a64:	e13ffe17 	ldw	r4,-8(fp)
   10a68:	000b883a 	mov	r5,zero
   10a6c:	01800084 	movi	r6,2
   10a70:	e1fffd04 	addi	r7,fp,-12
   10a74:	001197c0 	call	1197c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   10a78:	e13ffe17 	ldw	r4,-8(fp)
   10a7c:	00107b80 	call	107b8 <epcs_await_wip_released>
}
   10a80:	e037883a 	mov	sp,fp
   10a84:	dfc00117 	ldw	ra,4(sp)
   10a88:	df000017 	ldw	fp,0(sp)
   10a8c:	dec00204 	addi	sp,sp,8
   10a90:	f800283a 	ret

00010a94 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   10a94:	defff404 	addi	sp,sp,-48
   10a98:	dfc00b15 	stw	ra,44(sp)
   10a9c:	df000a15 	stw	fp,40(sp)
   10aa0:	df000a04 	addi	fp,sp,40
   10aa4:	e13ffc15 	stw	r4,-16(fp)
   10aa8:	e17ffd15 	stw	r5,-12(fp)
   10aac:	e1bffe15 	stw	r6,-8(fp)
   10ab0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   10ab4:	00800084 	movi	r2,2
   10ab8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   10abc:	e0800217 	ldw	r2,8(fp)
   10ac0:	10001026 	beq	r2,zero,10b04 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
   10ac4:	e0bffd17 	ldw	r2,-12(fp)
   10ac8:	1004d63a 	srli	r2,r2,24
   10acc:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   10ad0:	e0bffd17 	ldw	r2,-12(fp)
   10ad4:	1005d43a 	srai	r2,r2,16
   10ad8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   10adc:	e0bffd17 	ldw	r2,-12(fp)
   10ae0:	1005d23a 	srai	r2,r2,8
   10ae4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   10ae8:	e0bffd17 	ldw	r2,-12(fp)
   10aec:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   10af0:	00800144 	movi	r2,5
   10af4:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   10af8:	e13ffc17 	ldw	r4,-16(fp)
   10afc:	0010c980 	call	10c98 <epcs_enter_4_bytes_mode>
   10b00:	00000a06 	br	10b2c <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   10b04:	e0bffd17 	ldw	r2,-12(fp)
   10b08:	1005d43a 	srai	r2,r2,16
   10b0c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   10b10:	e0bffd17 	ldw	r2,-12(fp)
   10b14:	1005d23a 	srai	r2,r2,8
   10b18:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   10b1c:	e0bffd17 	ldw	r2,-12(fp)
   10b20:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   10b24:	00800104 	movi	r2,4
   10b28:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   10b2c:	e13ffc17 	ldw	r4,-16(fp)
   10b30:	00109dc0 	call	109dc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   10b34:	e0fffa04 	addi	r3,fp,-24
   10b38:	d8000015 	stw	zero,0(sp)
   10b3c:	d8000115 	stw	zero,4(sp)
   10b40:	00800044 	movi	r2,1
   10b44:	d8800215 	stw	r2,8(sp)
   10b48:	e13ffc17 	ldw	r4,-16(fp)
   10b4c:	000b883a 	mov	r5,zero
   10b50:	e1bff917 	ldw	r6,-28(fp)
   10b54:	180f883a 	mov	r7,r3
   10b58:	001197c0 	call	1197c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   10b5c:	e0bfff17 	ldw	r2,-4(fp)
   10b60:	d8000015 	stw	zero,0(sp)
   10b64:	d8000115 	stw	zero,4(sp)
   10b68:	d8000215 	stw	zero,8(sp)
   10b6c:	e13ffc17 	ldw	r4,-16(fp)
   10b70:	000b883a 	mov	r5,zero
   10b74:	100d883a 	mov	r6,r2
   10b78:	e1fffe17 	ldw	r7,-8(fp)
   10b7c:	001197c0 	call	1197c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   10b80:	e13ffc17 	ldw	r4,-16(fp)
   10b84:	00107b80 	call	107b8 <epcs_await_wip_released>

  if(four_bytes_mode)
   10b88:	e0800217 	ldw	r2,8(fp)
   10b8c:	10000226 	beq	r2,zero,10b98 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
   10b90:	e13ffc17 	ldw	r4,-16(fp)
   10b94:	0010cf40 	call	10cf4 <epcs_exit_4_bytes_mode>
  }

  return length;
   10b98:	e0bfff17 	ldw	r2,-4(fp)
}
   10b9c:	e037883a 	mov	sp,fp
   10ba0:	dfc00117 	ldw	ra,4(sp)
   10ba4:	df000017 	ldw	fp,0(sp)
   10ba8:	dec00204 	addi	sp,sp,8
   10bac:	f800283a 	ret

00010bb0 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   10bb0:	defff804 	addi	sp,sp,-32
   10bb4:	dfc00715 	stw	ra,28(sp)
   10bb8:	df000615 	stw	fp,24(sp)
   10bbc:	df000604 	addi	fp,sp,24
   10bc0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   10bc4:	00bfeac4 	movi	r2,-85
   10bc8:	e0bffd05 	stb	r2,-12(fp)
   10bcc:	e03ffd45 	stb	zero,-11(fp)
   10bd0:	e03ffd85 	stb	zero,-10(fp)
   10bd4:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   10bd8:	00800044 	movi	r2,1
   10bdc:	d8800015 	stw	r2,0(sp)
   10be0:	e0bffe04 	addi	r2,fp,-8
   10be4:	d8800115 	stw	r2,4(sp)
   10be8:	d8000215 	stw	zero,8(sp)
   10bec:	e13fff17 	ldw	r4,-4(fp)
   10bf0:	000b883a 	mov	r5,zero
   10bf4:	01800104 	movi	r6,4
   10bf8:	e1fffd04 	addi	r7,fp,-12
   10bfc:	001197c0 	call	1197c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   10c00:	e0bffe03 	ldbu	r2,-8(fp)
}
   10c04:	e037883a 	mov	sp,fp
   10c08:	dfc00117 	ldw	ra,4(sp)
   10c0c:	df000017 	ldw	fp,0(sp)
   10c10:	dec00204 	addi	sp,sp,8
   10c14:	f800283a 	ret

00010c18 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   10c18:	defff904 	addi	sp,sp,-28
   10c1c:	dfc00615 	stw	ra,24(sp)
   10c20:	df000515 	stw	fp,20(sp)
   10c24:	df000504 	addi	fp,sp,20
   10c28:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   10c2c:	00bfe7c4 	movi	r2,-97
   10c30:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   10c34:	008000c4 	movi	r2,3
   10c38:	d8800015 	stw	r2,0(sp)
   10c3c:	e0bffe44 	addi	r2,fp,-7
   10c40:	d8800115 	stw	r2,4(sp)
   10c44:	d8000215 	stw	zero,8(sp)
   10c48:	e13fff17 	ldw	r4,-4(fp)
   10c4c:	000b883a 	mov	r5,zero
   10c50:	01800044 	movi	r6,1
   10c54:	e1fffe04 	addi	r7,fp,-8
   10c58:	001197c0 	call	1197c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   10c5c:	e0bffe43 	ldbu	r2,-7(fp)
   10c60:	10803fcc 	andi	r2,r2,255
   10c64:	1006943a 	slli	r3,r2,16
   10c68:	e0bffe83 	ldbu	r2,-6(fp)
   10c6c:	10803fcc 	andi	r2,r2,255
   10c70:	1004923a 	slli	r2,r2,8
   10c74:	1886b03a 	or	r3,r3,r2
   10c78:	e0bffec3 	ldbu	r2,-5(fp)
   10c7c:	10803fcc 	andi	r2,r2,255
   10c80:	1884b03a 	or	r2,r3,r2
}
   10c84:	e037883a 	mov	sp,fp
   10c88:	dfc00117 	ldw	ra,4(sp)
   10c8c:	df000017 	ldw	fp,0(sp)
   10c90:	dec00204 	addi	sp,sp,8
   10c94:	f800283a 	ret

00010c98 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   10c98:	defff904 	addi	sp,sp,-28
   10c9c:	dfc00615 	stw	ra,24(sp)
   10ca0:	df000515 	stw	fp,20(sp)
   10ca4:	df000504 	addi	fp,sp,20
   10ca8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   10cac:	00bfedc4 	movi	r2,-73
   10cb0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   10cb4:	e13fff17 	ldw	r4,-4(fp)
   10cb8:	00109dc0 	call	109dc <epcs_write_enable>

  alt_avalon_spi_command(
   10cbc:	d8000015 	stw	zero,0(sp)
   10cc0:	d8000115 	stw	zero,4(sp)
   10cc4:	d8000215 	stw	zero,8(sp)
   10cc8:	e13fff17 	ldw	r4,-4(fp)
   10ccc:	000b883a 	mov	r5,zero
   10cd0:	01800044 	movi	r6,1
   10cd4:	e1fffe04 	addi	r7,fp,-8
   10cd8:	001197c0 	call	1197c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   10cdc:	0001883a 	nop
}
   10ce0:	e037883a 	mov	sp,fp
   10ce4:	dfc00117 	ldw	ra,4(sp)
   10ce8:	df000017 	ldw	fp,0(sp)
   10cec:	dec00204 	addi	sp,sp,8
   10cf0:	f800283a 	ret

00010cf4 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   10cf4:	defff904 	addi	sp,sp,-28
   10cf8:	dfc00615 	stw	ra,24(sp)
   10cfc:	df000515 	stw	fp,20(sp)
   10d00:	df000504 	addi	fp,sp,20
   10d04:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   10d08:	00bffa44 	movi	r2,-23
   10d0c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   10d10:	e13fff17 	ldw	r4,-4(fp)
   10d14:	00109dc0 	call	109dc <epcs_write_enable>

  alt_avalon_spi_command(
   10d18:	d8000015 	stw	zero,0(sp)
   10d1c:	d8000115 	stw	zero,4(sp)
   10d20:	d8000215 	stw	zero,8(sp)
   10d24:	e13fff17 	ldw	r4,-4(fp)
   10d28:	000b883a 	mov	r5,zero
   10d2c:	01800044 	movi	r6,1
   10d30:	e1fffe04 	addi	r7,fp,-8
   10d34:	001197c0 	call	1197c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   10d38:	0001883a 	nop
}
   10d3c:	e037883a 	mov	sp,fp
   10d40:	dfc00117 	ldw	ra,4(sp)
   10d44:	df000017 	ldw	fp,0(sp)
   10d48:	dec00204 	addi	sp,sp,8
   10d4c:	f800283a 	ret

00010d50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10d50:	defff504 	addi	sp,sp,-44
   10d54:	df000a15 	stw	fp,40(sp)
   10d58:	df000a04 	addi	fp,sp,40
   10d5c:	e13ffc15 	stw	r4,-16(fp)
   10d60:	e17ffd15 	stw	r5,-12(fp)
   10d64:	e1bffe15 	stw	r6,-8(fp)
   10d68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10d6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10d70:	00800074 	movhi	r2,1
   10d74:	10915904 	addi	r2,r2,17764
   10d78:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10d7c:	10003f26 	beq	r2,zero,10e7c <alt_alarm_start+0x12c>
  {
    if (alarm)
   10d80:	e0bffc17 	ldw	r2,-16(fp)
   10d84:	10003b26 	beq	r2,zero,10e74 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10d88:	e0bffc17 	ldw	r2,-16(fp)
   10d8c:	e0fffe17 	ldw	r3,-8(fp)
   10d90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10d94:	e0bffc17 	ldw	r2,-16(fp)
   10d98:	e0ffff17 	ldw	r3,-4(fp)
   10d9c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10da0:	0005303a 	rdctl	r2,status
   10da4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10da8:	e0fff817 	ldw	r3,-32(fp)
   10dac:	00bfff84 	movi	r2,-2
   10db0:	1884703a 	and	r2,r3,r2
   10db4:	1001703a 	wrctl	status,r2
  
  return context;
   10db8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10dbc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10dc0:	00800074 	movhi	r2,1
   10dc4:	10915a04 	addi	r2,r2,17768
   10dc8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10dcc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10dd0:	e0fffd17 	ldw	r3,-12(fp)
   10dd4:	e0bff617 	ldw	r2,-40(fp)
   10dd8:	1885883a 	add	r2,r3,r2
   10ddc:	10c00044 	addi	r3,r2,1
   10de0:	e0bffc17 	ldw	r2,-16(fp)
   10de4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10de8:	e0bffc17 	ldw	r2,-16(fp)
   10dec:	10c00217 	ldw	r3,8(r2)
   10df0:	e0bff617 	ldw	r2,-40(fp)
   10df4:	1880042e 	bgeu	r3,r2,10e08 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   10df8:	e0bffc17 	ldw	r2,-16(fp)
   10dfc:	00c00044 	movi	r3,1
   10e00:	10c00405 	stb	r3,16(r2)
   10e04:	00000206 	br	10e10 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   10e08:	e0bffc17 	ldw	r2,-16(fp)
   10e0c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10e10:	e0fffc17 	ldw	r3,-16(fp)
   10e14:	00800074 	movhi	r2,1
   10e18:	10914c04 	addi	r2,r2,17712
   10e1c:	e0bff915 	stw	r2,-28(fp)
   10e20:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10e24:	e0bffa17 	ldw	r2,-24(fp)
   10e28:	e0fff917 	ldw	r3,-28(fp)
   10e2c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10e30:	e0bff917 	ldw	r2,-28(fp)
   10e34:	10c00017 	ldw	r3,0(r2)
   10e38:	e0bffa17 	ldw	r2,-24(fp)
   10e3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10e40:	e0bff917 	ldw	r2,-28(fp)
   10e44:	10800017 	ldw	r2,0(r2)
   10e48:	e0fffa17 	ldw	r3,-24(fp)
   10e4c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10e50:	e0bff917 	ldw	r2,-28(fp)
   10e54:	e0fffa17 	ldw	r3,-24(fp)
   10e58:	10c00015 	stw	r3,0(r2)
   10e5c:	e0bff717 	ldw	r2,-36(fp)
   10e60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e64:	e0bffb17 	ldw	r2,-20(fp)
   10e68:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10e6c:	0005883a 	mov	r2,zero
   10e70:	00000306 	br	10e80 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   10e74:	00bffa84 	movi	r2,-22
   10e78:	00000106 	br	10e80 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   10e7c:	00bfde84 	movi	r2,-134
  }
}
   10e80:	e037883a 	mov	sp,fp
   10e84:	df000017 	ldw	fp,0(sp)
   10e88:	dec00104 	addi	sp,sp,4
   10e8c:	f800283a 	ret

00010e90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10e90:	defffe04 	addi	sp,sp,-8
   10e94:	dfc00115 	stw	ra,4(sp)
   10e98:	df000015 	stw	fp,0(sp)
   10e9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10ea0:	00800074 	movhi	r2,1
   10ea4:	10914704 	addi	r2,r2,17692
   10ea8:	10800017 	ldw	r2,0(r2)
   10eac:	10000526 	beq	r2,zero,10ec4 <alt_get_errno+0x34>
   10eb0:	00800074 	movhi	r2,1
   10eb4:	10914704 	addi	r2,r2,17692
   10eb8:	10800017 	ldw	r2,0(r2)
   10ebc:	103ee83a 	callr	r2
   10ec0:	00000206 	br	10ecc <alt_get_errno+0x3c>
   10ec4:	00800074 	movhi	r2,1
   10ec8:	10915404 	addi	r2,r2,17744
}
   10ecc:	e037883a 	mov	sp,fp
   10ed0:	dfc00117 	ldw	ra,4(sp)
   10ed4:	df000017 	ldw	fp,0(sp)
   10ed8:	dec00204 	addi	sp,sp,8
   10edc:	f800283a 	ret

00010ee0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10ee0:	defffa04 	addi	sp,sp,-24
   10ee4:	dfc00515 	stw	ra,20(sp)
   10ee8:	df000415 	stw	fp,16(sp)
   10eec:	df000404 	addi	fp,sp,16
   10ef0:	e13ffe15 	stw	r4,-8(fp)
   10ef4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10ef8:	e0bffe17 	ldw	r2,-8(fp)
   10efc:	10000326 	beq	r2,zero,10f0c <alt_dev_llist_insert+0x2c>
   10f00:	e0bffe17 	ldw	r2,-8(fp)
   10f04:	10800217 	ldw	r2,8(r2)
   10f08:	1000061e 	bne	r2,zero,10f24 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10f0c:	0010e900 	call	10e90 <alt_get_errno>
   10f10:	1007883a 	mov	r3,r2
   10f14:	00800584 	movi	r2,22
   10f18:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10f1c:	00bffa84 	movi	r2,-22
   10f20:	00001306 	br	10f70 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10f24:	e0bffe17 	ldw	r2,-8(fp)
   10f28:	e0ffff17 	ldw	r3,-4(fp)
   10f2c:	e0fffc15 	stw	r3,-16(fp)
   10f30:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10f34:	e0bffd17 	ldw	r2,-12(fp)
   10f38:	e0fffc17 	ldw	r3,-16(fp)
   10f3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10f40:	e0bffc17 	ldw	r2,-16(fp)
   10f44:	10c00017 	ldw	r3,0(r2)
   10f48:	e0bffd17 	ldw	r2,-12(fp)
   10f4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10f50:	e0bffc17 	ldw	r2,-16(fp)
   10f54:	10800017 	ldw	r2,0(r2)
   10f58:	e0fffd17 	ldw	r3,-12(fp)
   10f5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10f60:	e0bffc17 	ldw	r2,-16(fp)
   10f64:	e0fffd17 	ldw	r3,-12(fp)
   10f68:	10c00015 	stw	r3,0(r2)

  return 0;  
   10f6c:	0005883a 	mov	r2,zero
}
   10f70:	e037883a 	mov	sp,fp
   10f74:	dfc00117 	ldw	ra,4(sp)
   10f78:	df000017 	ldw	fp,0(sp)
   10f7c:	dec00204 	addi	sp,sp,8
   10f80:	f800283a 	ret

00010f84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10f84:	defffd04 	addi	sp,sp,-12
   10f88:	dfc00215 	stw	ra,8(sp)
   10f8c:	df000115 	stw	fp,4(sp)
   10f90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10f94:	00800074 	movhi	r2,1
   10f98:	10886604 	addi	r2,r2,8600
   10f9c:	e0bfff15 	stw	r2,-4(fp)
   10fa0:	00000606 	br	10fbc <_do_ctors+0x38>
        (*ctor) (); 
   10fa4:	e0bfff17 	ldw	r2,-4(fp)
   10fa8:	10800017 	ldw	r2,0(r2)
   10fac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10fb0:	e0bfff17 	ldw	r2,-4(fp)
   10fb4:	10bfff04 	addi	r2,r2,-4
   10fb8:	e0bfff15 	stw	r2,-4(fp)
   10fbc:	e0ffff17 	ldw	r3,-4(fp)
   10fc0:	00800074 	movhi	r2,1
   10fc4:	10886704 	addi	r2,r2,8604
   10fc8:	18bff62e 	bgeu	r3,r2,10fa4 <_do_ctors+0x20>
        (*ctor) (); 
}
   10fcc:	e037883a 	mov	sp,fp
   10fd0:	dfc00117 	ldw	ra,4(sp)
   10fd4:	df000017 	ldw	fp,0(sp)
   10fd8:	dec00204 	addi	sp,sp,8
   10fdc:	f800283a 	ret

00010fe0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10fe0:	defffd04 	addi	sp,sp,-12
   10fe4:	dfc00215 	stw	ra,8(sp)
   10fe8:	df000115 	stw	fp,4(sp)
   10fec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10ff0:	00800074 	movhi	r2,1
   10ff4:	10886604 	addi	r2,r2,8600
   10ff8:	e0bfff15 	stw	r2,-4(fp)
   10ffc:	00000606 	br	11018 <_do_dtors+0x38>
        (*dtor) (); 
   11000:	e0bfff17 	ldw	r2,-4(fp)
   11004:	10800017 	ldw	r2,0(r2)
   11008:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1100c:	e0bfff17 	ldw	r2,-4(fp)
   11010:	10bfff04 	addi	r2,r2,-4
   11014:	e0bfff15 	stw	r2,-4(fp)
   11018:	e0ffff17 	ldw	r3,-4(fp)
   1101c:	00800074 	movhi	r2,1
   11020:	10886704 	addi	r2,r2,8604
   11024:	18bff62e 	bgeu	r3,r2,11000 <_do_dtors+0x20>
        (*dtor) (); 
}
   11028:	e037883a 	mov	sp,fp
   1102c:	dfc00117 	ldw	ra,4(sp)
   11030:	df000017 	ldw	fp,0(sp)
   11034:	dec00204 	addi	sp,sp,8
   11038:	f800283a 	ret

0001103c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   1103c:	defffc04 	addi	sp,sp,-16
   11040:	dfc00315 	stw	ra,12(sp)
   11044:	df000215 	stw	fp,8(sp)
   11048:	df000204 	addi	fp,sp,8
   1104c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   11050:	e13fff17 	ldw	r4,-4(fp)
   11054:	d1600d04 	addi	r5,gp,-32716
   11058:	0011b800 	call	11b80 <alt_find_dev>
   1105c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   11060:	e0bffe17 	ldw	r2,-8(fp)
   11064:	10000926 	beq	r2,zero,1108c <alt_flash_open_dev+0x50>
   11068:	e0bffe17 	ldw	r2,-8(fp)
   1106c:	10800317 	ldw	r2,12(r2)
   11070:	10000626 	beq	r2,zero,1108c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   11074:	e0bffe17 	ldw	r2,-8(fp)
   11078:	10800317 	ldw	r2,12(r2)
   1107c:	e13ffe17 	ldw	r4,-8(fp)
   11080:	e17fff17 	ldw	r5,-4(fp)
   11084:	103ee83a 	callr	r2
   11088:	00000106 	br	11090 <alt_flash_open_dev+0x54>
  }

  return dev;
   1108c:	e0bffe17 	ldw	r2,-8(fp)
}
   11090:	e037883a 	mov	sp,fp
   11094:	dfc00117 	ldw	ra,4(sp)
   11098:	df000017 	ldw	fp,0(sp)
   1109c:	dec00204 	addi	sp,sp,8
   110a0:	f800283a 	ret

000110a4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   110a4:	defffd04 	addi	sp,sp,-12
   110a8:	dfc00215 	stw	ra,8(sp)
   110ac:	df000115 	stw	fp,4(sp)
   110b0:	df000104 	addi	fp,sp,4
   110b4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   110b8:	e0bfff17 	ldw	r2,-4(fp)
   110bc:	10000726 	beq	r2,zero,110dc <alt_flash_close_dev+0x38>
   110c0:	e0bfff17 	ldw	r2,-4(fp)
   110c4:	10800417 	ldw	r2,16(r2)
   110c8:	10000426 	beq	r2,zero,110dc <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
   110cc:	e0bfff17 	ldw	r2,-4(fp)
   110d0:	10800417 	ldw	r2,16(r2)
   110d4:	e13fff17 	ldw	r4,-4(fp)
   110d8:	103ee83a 	callr	r2
  }
  return;
   110dc:	0001883a 	nop
}
   110e0:	e037883a 	mov	sp,fp
   110e4:	dfc00117 	ldw	ra,4(sp)
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00204 	addi	sp,sp,8
   110f0:	f800283a 	ret

000110f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   110f4:	defff904 	addi	sp,sp,-28
   110f8:	dfc00615 	stw	ra,24(sp)
   110fc:	df000515 	stw	fp,20(sp)
   11100:	df000504 	addi	fp,sp,20
   11104:	e13ffc15 	stw	r4,-16(fp)
   11108:	e17ffd15 	stw	r5,-12(fp)
   1110c:	e1bffe15 	stw	r6,-8(fp)
   11110:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11114:	e0800217 	ldw	r2,8(fp)
   11118:	d8800015 	stw	r2,0(sp)
   1111c:	e13ffc17 	ldw	r4,-16(fp)
   11120:	e17ffd17 	ldw	r5,-12(fp)
   11124:	e1bffe17 	ldw	r6,-8(fp)
   11128:	e1ffff17 	ldw	r7,-4(fp)
   1112c:	00112d40 	call	112d4 <alt_iic_isr_register>
}  
   11130:	e037883a 	mov	sp,fp
   11134:	dfc00117 	ldw	ra,4(sp)
   11138:	df000017 	ldw	fp,0(sp)
   1113c:	dec00204 	addi	sp,sp,8
   11140:	f800283a 	ret

00011144 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11144:	defff904 	addi	sp,sp,-28
   11148:	df000615 	stw	fp,24(sp)
   1114c:	df000604 	addi	fp,sp,24
   11150:	e13ffe15 	stw	r4,-8(fp)
   11154:	e17fff15 	stw	r5,-4(fp)
   11158:	e0bfff17 	ldw	r2,-4(fp)
   1115c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11160:	0005303a 	rdctl	r2,status
   11164:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11168:	e0fffb17 	ldw	r3,-20(fp)
   1116c:	00bfff84 	movi	r2,-2
   11170:	1884703a 	and	r2,r3,r2
   11174:	1001703a 	wrctl	status,r2
  
  return context;
   11178:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1117c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11180:	e0bffa17 	ldw	r2,-24(fp)
   11184:	00c00044 	movi	r3,1
   11188:	1884983a 	sll	r2,r3,r2
   1118c:	1007883a 	mov	r3,r2
   11190:	00800074 	movhi	r2,1
   11194:	10915804 	addi	r2,r2,17760
   11198:	10800017 	ldw	r2,0(r2)
   1119c:	1886b03a 	or	r3,r3,r2
   111a0:	00800074 	movhi	r2,1
   111a4:	10915804 	addi	r2,r2,17760
   111a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   111ac:	00800074 	movhi	r2,1
   111b0:	10915804 	addi	r2,r2,17760
   111b4:	10800017 	ldw	r2,0(r2)
   111b8:	100170fa 	wrctl	ienable,r2
   111bc:	e0bffc17 	ldw	r2,-16(fp)
   111c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111c4:	e0bffd17 	ldw	r2,-12(fp)
   111c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   111cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   111d0:	0001883a 	nop
}
   111d4:	e037883a 	mov	sp,fp
   111d8:	df000017 	ldw	fp,0(sp)
   111dc:	dec00104 	addi	sp,sp,4
   111e0:	f800283a 	ret

000111e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   111e4:	defff904 	addi	sp,sp,-28
   111e8:	df000615 	stw	fp,24(sp)
   111ec:	df000604 	addi	fp,sp,24
   111f0:	e13ffe15 	stw	r4,-8(fp)
   111f4:	e17fff15 	stw	r5,-4(fp)
   111f8:	e0bfff17 	ldw	r2,-4(fp)
   111fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11200:	0005303a 	rdctl	r2,status
   11204:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11208:	e0fffb17 	ldw	r3,-20(fp)
   1120c:	00bfff84 	movi	r2,-2
   11210:	1884703a 	and	r2,r3,r2
   11214:	1001703a 	wrctl	status,r2
  
  return context;
   11218:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1121c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11220:	e0bffa17 	ldw	r2,-24(fp)
   11224:	00c00044 	movi	r3,1
   11228:	1884983a 	sll	r2,r3,r2
   1122c:	0084303a 	nor	r2,zero,r2
   11230:	1007883a 	mov	r3,r2
   11234:	00800074 	movhi	r2,1
   11238:	10915804 	addi	r2,r2,17760
   1123c:	10800017 	ldw	r2,0(r2)
   11240:	1886703a 	and	r3,r3,r2
   11244:	00800074 	movhi	r2,1
   11248:	10915804 	addi	r2,r2,17760
   1124c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11250:	00800074 	movhi	r2,1
   11254:	10915804 	addi	r2,r2,17760
   11258:	10800017 	ldw	r2,0(r2)
   1125c:	100170fa 	wrctl	ienable,r2
   11260:	e0bffc17 	ldw	r2,-16(fp)
   11264:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11268:	e0bffd17 	ldw	r2,-12(fp)
   1126c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11270:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11274:	0001883a 	nop
}
   11278:	e037883a 	mov	sp,fp
   1127c:	df000017 	ldw	fp,0(sp)
   11280:	dec00104 	addi	sp,sp,4
   11284:	f800283a 	ret

00011288 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11288:	defffc04 	addi	sp,sp,-16
   1128c:	df000315 	stw	fp,12(sp)
   11290:	df000304 	addi	fp,sp,12
   11294:	e13ffe15 	stw	r4,-8(fp)
   11298:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1129c:	000530fa 	rdctl	r2,ienable
   112a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   112a4:	e0bfff17 	ldw	r2,-4(fp)
   112a8:	00c00044 	movi	r3,1
   112ac:	1884983a 	sll	r2,r3,r2
   112b0:	1007883a 	mov	r3,r2
   112b4:	e0bffd17 	ldw	r2,-12(fp)
   112b8:	1884703a 	and	r2,r3,r2
   112bc:	1004c03a 	cmpne	r2,r2,zero
   112c0:	10803fcc 	andi	r2,r2,255
}
   112c4:	e037883a 	mov	sp,fp
   112c8:	df000017 	ldw	fp,0(sp)
   112cc:	dec00104 	addi	sp,sp,4
   112d0:	f800283a 	ret

000112d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   112d4:	defff504 	addi	sp,sp,-44
   112d8:	dfc00a15 	stw	ra,40(sp)
   112dc:	df000915 	stw	fp,36(sp)
   112e0:	df000904 	addi	fp,sp,36
   112e4:	e13ffc15 	stw	r4,-16(fp)
   112e8:	e17ffd15 	stw	r5,-12(fp)
   112ec:	e1bffe15 	stw	r6,-8(fp)
   112f0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   112f4:	00bffa84 	movi	r2,-22
   112f8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   112fc:	e0bffd17 	ldw	r2,-12(fp)
   11300:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11304:	e0bff817 	ldw	r2,-32(fp)
   11308:	10800808 	cmpgei	r2,r2,32
   1130c:	1000271e 	bne	r2,zero,113ac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11310:	0005303a 	rdctl	r2,status
   11314:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11318:	e0fffa17 	ldw	r3,-24(fp)
   1131c:	00bfff84 	movi	r2,-2
   11320:	1884703a 	and	r2,r3,r2
   11324:	1001703a 	wrctl	status,r2
  
  return context;
   11328:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1132c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   11330:	00800074 	movhi	r2,1
   11334:	10916504 	addi	r2,r2,17812
   11338:	e0fff817 	ldw	r3,-32(fp)
   1133c:	180690fa 	slli	r3,r3,3
   11340:	10c5883a 	add	r2,r2,r3
   11344:	e0fffe17 	ldw	r3,-8(fp)
   11348:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1134c:	00800074 	movhi	r2,1
   11350:	10916504 	addi	r2,r2,17812
   11354:	e0fff817 	ldw	r3,-32(fp)
   11358:	180690fa 	slli	r3,r3,3
   1135c:	18c00104 	addi	r3,r3,4
   11360:	10c5883a 	add	r2,r2,r3
   11364:	e0ffff17 	ldw	r3,-4(fp)
   11368:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1136c:	e0bffe17 	ldw	r2,-8(fp)
   11370:	10000526 	beq	r2,zero,11388 <alt_iic_isr_register+0xb4>
   11374:	e0bff817 	ldw	r2,-32(fp)
   11378:	e13ffc17 	ldw	r4,-16(fp)
   1137c:	100b883a 	mov	r5,r2
   11380:	00111440 	call	11144 <alt_ic_irq_enable>
   11384:	00000406 	br	11398 <alt_iic_isr_register+0xc4>
   11388:	e0bff817 	ldw	r2,-32(fp)
   1138c:	e13ffc17 	ldw	r4,-16(fp)
   11390:	100b883a 	mov	r5,r2
   11394:	00111e40 	call	111e4 <alt_ic_irq_disable>
   11398:	e0bff715 	stw	r2,-36(fp)
   1139c:	e0bff917 	ldw	r2,-28(fp)
   113a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113a4:	e0bffb17 	ldw	r2,-20(fp)
   113a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   113ac:	e0bff717 	ldw	r2,-36(fp)
}
   113b0:	e037883a 	mov	sp,fp
   113b4:	dfc00117 	ldw	ra,4(sp)
   113b8:	df000017 	ldw	fp,0(sp)
   113bc:	dec00204 	addi	sp,sp,8
   113c0:	f800283a 	ret

000113c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   113c4:	defff804 	addi	sp,sp,-32
   113c8:	dfc00715 	stw	ra,28(sp)
   113cc:	df000615 	stw	fp,24(sp)
   113d0:	dc000515 	stw	r16,20(sp)
   113d4:	df000604 	addi	fp,sp,24
   113d8:	e13ffb15 	stw	r4,-20(fp)
   113dc:	e17ffc15 	stw	r5,-16(fp)
   113e0:	e1bffd15 	stw	r6,-12(fp)
   113e4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   113e8:	e13ffc17 	ldw	r4,-16(fp)
   113ec:	e17ffd17 	ldw	r5,-12(fp)
   113f0:	e1bffe17 	ldw	r6,-8(fp)
   113f4:	00116600 	call	11660 <open>
   113f8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   113fc:	e0bffa17 	ldw	r2,-24(fp)
   11400:	10002216 	blt	r2,zero,1148c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11404:	04000074 	movhi	r16,1
   11408:	840b9c04 	addi	r16,r16,11888
   1140c:	e0bffa17 	ldw	r2,-24(fp)
   11410:	1009883a 	mov	r4,r2
   11414:	01400304 	movi	r5,12
   11418:	0000dc40 	call	dc4 <__mulsi3>
   1141c:	8085883a 	add	r2,r16,r2
   11420:	10c00017 	ldw	r3,0(r2)
   11424:	e0bffb17 	ldw	r2,-20(fp)
   11428:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1142c:	04000074 	movhi	r16,1
   11430:	840b9c04 	addi	r16,r16,11888
   11434:	e0bffa17 	ldw	r2,-24(fp)
   11438:	1009883a 	mov	r4,r2
   1143c:	01400304 	movi	r5,12
   11440:	0000dc40 	call	dc4 <__mulsi3>
   11444:	10800104 	addi	r2,r2,4
   11448:	8085883a 	add	r2,r16,r2
   1144c:	10c00017 	ldw	r3,0(r2)
   11450:	e0bffb17 	ldw	r2,-20(fp)
   11454:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11458:	04000074 	movhi	r16,1
   1145c:	840b9c04 	addi	r16,r16,11888
   11460:	e0bffa17 	ldw	r2,-24(fp)
   11464:	1009883a 	mov	r4,r2
   11468:	01400304 	movi	r5,12
   1146c:	0000dc40 	call	dc4 <__mulsi3>
   11470:	10800204 	addi	r2,r2,8
   11474:	8085883a 	add	r2,r16,r2
   11478:	10c00017 	ldw	r3,0(r2)
   1147c:	e0bffb17 	ldw	r2,-20(fp)
   11480:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11484:	e13ffa17 	ldw	r4,-24(fp)
   11488:	000e3f00 	call	e3f0 <alt_release_fd>
  }
} 
   1148c:	e6ffff04 	addi	sp,fp,-4
   11490:	dfc00217 	ldw	ra,8(sp)
   11494:	df000117 	ldw	fp,4(sp)
   11498:	dc000017 	ldw	r16,0(sp)
   1149c:	dec00304 	addi	sp,sp,12
   114a0:	f800283a 	ret

000114a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   114a4:	defffb04 	addi	sp,sp,-20
   114a8:	dfc00415 	stw	ra,16(sp)
   114ac:	df000315 	stw	fp,12(sp)
   114b0:	df000304 	addi	fp,sp,12
   114b4:	e13ffd15 	stw	r4,-12(fp)
   114b8:	e17ffe15 	stw	r5,-8(fp)
   114bc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   114c0:	01000074 	movhi	r4,1
   114c4:	210b9f04 	addi	r4,r4,11900
   114c8:	e17ffd17 	ldw	r5,-12(fp)
   114cc:	01800044 	movi	r6,1
   114d0:	01c07fc4 	movi	r7,511
   114d4:	00113c40 	call	113c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   114d8:	01000074 	movhi	r4,1
   114dc:	210b9c04 	addi	r4,r4,11888
   114e0:	e17ffe17 	ldw	r5,-8(fp)
   114e4:	000d883a 	mov	r6,zero
   114e8:	01c07fc4 	movi	r7,511
   114ec:	00113c40 	call	113c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   114f0:	01000074 	movhi	r4,1
   114f4:	210ba204 	addi	r4,r4,11912
   114f8:	e17fff17 	ldw	r5,-4(fp)
   114fc:	01800044 	movi	r6,1
   11500:	01c07fc4 	movi	r7,511
   11504:	00113c40 	call	113c4 <alt_open_fd>
}  
   11508:	e037883a 	mov	sp,fp
   1150c:	dfc00117 	ldw	ra,4(sp)
   11510:	df000017 	ldw	fp,0(sp)
   11514:	dec00204 	addi	sp,sp,8
   11518:	f800283a 	ret

0001151c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1151c:	defffe04 	addi	sp,sp,-8
   11520:	dfc00115 	stw	ra,4(sp)
   11524:	df000015 	stw	fp,0(sp)
   11528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1152c:	00800074 	movhi	r2,1
   11530:	10914704 	addi	r2,r2,17692
   11534:	10800017 	ldw	r2,0(r2)
   11538:	10000526 	beq	r2,zero,11550 <alt_get_errno+0x34>
   1153c:	00800074 	movhi	r2,1
   11540:	10914704 	addi	r2,r2,17692
   11544:	10800017 	ldw	r2,0(r2)
   11548:	103ee83a 	callr	r2
   1154c:	00000206 	br	11558 <alt_get_errno+0x3c>
   11550:	00800074 	movhi	r2,1
   11554:	10915404 	addi	r2,r2,17744
}
   11558:	e037883a 	mov	sp,fp
   1155c:	dfc00117 	ldw	ra,4(sp)
   11560:	df000017 	ldw	fp,0(sp)
   11564:	dec00204 	addi	sp,sp,8
   11568:	f800283a 	ret

0001156c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1156c:	defffb04 	addi	sp,sp,-20
   11570:	dfc00415 	stw	ra,16(sp)
   11574:	df000315 	stw	fp,12(sp)
   11578:	dc000215 	stw	r16,8(sp)
   1157c:	df000304 	addi	fp,sp,12
   11580:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11584:	e0bffe17 	ldw	r2,-8(fp)
   11588:	10800217 	ldw	r2,8(r2)
   1158c:	10d00034 	orhi	r3,r2,16384
   11590:	e0bffe17 	ldw	r2,-8(fp)
   11594:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11598:	e03ffd15 	stw	zero,-12(fp)
   1159c:	00002306 	br	1162c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   115a0:	04000074 	movhi	r16,1
   115a4:	840b9c04 	addi	r16,r16,11888
   115a8:	e0bffd17 	ldw	r2,-12(fp)
   115ac:	1009883a 	mov	r4,r2
   115b0:	01400304 	movi	r5,12
   115b4:	0000dc40 	call	dc4 <__mulsi3>
   115b8:	8085883a 	add	r2,r16,r2
   115bc:	10c00017 	ldw	r3,0(r2)
   115c0:	e0bffe17 	ldw	r2,-8(fp)
   115c4:	10800017 	ldw	r2,0(r2)
   115c8:	1880151e 	bne	r3,r2,11620 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   115cc:	04000074 	movhi	r16,1
   115d0:	840b9c04 	addi	r16,r16,11888
   115d4:	e0bffd17 	ldw	r2,-12(fp)
   115d8:	1009883a 	mov	r4,r2
   115dc:	01400304 	movi	r5,12
   115e0:	0000dc40 	call	dc4 <__mulsi3>
   115e4:	10800204 	addi	r2,r2,8
   115e8:	8085883a 	add	r2,r16,r2
   115ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   115f0:	10000b0e 	bge	r2,zero,11620 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   115f4:	e13ffd17 	ldw	r4,-12(fp)
   115f8:	01400304 	movi	r5,12
   115fc:	0000dc40 	call	dc4 <__mulsi3>
   11600:	1007883a 	mov	r3,r2
   11604:	00800074 	movhi	r2,1
   11608:	108b9c04 	addi	r2,r2,11888
   1160c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11610:	e0bffe17 	ldw	r2,-8(fp)
   11614:	18800226 	beq	r3,r2,11620 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11618:	00bffcc4 	movi	r2,-13
   1161c:	00000a06 	br	11648 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11620:	e0bffd17 	ldw	r2,-12(fp)
   11624:	10800044 	addi	r2,r2,1
   11628:	e0bffd15 	stw	r2,-12(fp)
   1162c:	00800074 	movhi	r2,1
   11630:	10914604 	addi	r2,r2,17688
   11634:	10800017 	ldw	r2,0(r2)
   11638:	1007883a 	mov	r3,r2
   1163c:	e0bffd17 	ldw	r2,-12(fp)
   11640:	18bfd72e 	bgeu	r3,r2,115a0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11644:	0005883a 	mov	r2,zero
}
   11648:	e6ffff04 	addi	sp,fp,-4
   1164c:	dfc00217 	ldw	ra,8(sp)
   11650:	df000117 	ldw	fp,4(sp)
   11654:	dc000017 	ldw	r16,0(sp)
   11658:	dec00304 	addi	sp,sp,12
   1165c:	f800283a 	ret

00011660 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11660:	defff604 	addi	sp,sp,-40
   11664:	dfc00915 	stw	ra,36(sp)
   11668:	df000815 	stw	fp,32(sp)
   1166c:	df000804 	addi	fp,sp,32
   11670:	e13ffd15 	stw	r4,-12(fp)
   11674:	e17ffe15 	stw	r5,-8(fp)
   11678:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1167c:	00bfffc4 	movi	r2,-1
   11680:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11684:	00bffb44 	movi	r2,-19
   11688:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1168c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11690:	e13ffd17 	ldw	r4,-12(fp)
   11694:	01400074 	movhi	r5,1
   11698:	29514404 	addi	r5,r5,17680
   1169c:	0011b800 	call	11b80 <alt_find_dev>
   116a0:	e0bff815 	stw	r2,-32(fp)
   116a4:	e0bff817 	ldw	r2,-32(fp)
   116a8:	1000051e 	bne	r2,zero,116c0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   116ac:	e13ffd17 	ldw	r4,-12(fp)
   116b0:	0011c100 	call	11c10 <alt_find_file>
   116b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   116b8:	00800044 	movi	r2,1
   116bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   116c0:	e0bff817 	ldw	r2,-32(fp)
   116c4:	10002b26 	beq	r2,zero,11774 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   116c8:	e13ff817 	ldw	r4,-32(fp)
   116cc:	0011d240 	call	11d24 <alt_get_fd>
   116d0:	e0bff915 	stw	r2,-28(fp)
   116d4:	e0bff917 	ldw	r2,-28(fp)
   116d8:	1000030e 	bge	r2,zero,116e8 <open+0x88>
    {
      status = index;
   116dc:	e0bff917 	ldw	r2,-28(fp)
   116e0:	e0bffa15 	stw	r2,-24(fp)
   116e4:	00002506 	br	1177c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   116e8:	e13ff917 	ldw	r4,-28(fp)
   116ec:	01400304 	movi	r5,12
   116f0:	0000dc40 	call	dc4 <__mulsi3>
   116f4:	1007883a 	mov	r3,r2
   116f8:	00800074 	movhi	r2,1
   116fc:	108b9c04 	addi	r2,r2,11888
   11700:	1885883a 	add	r2,r3,r2
   11704:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11708:	e0fffe17 	ldw	r3,-8(fp)
   1170c:	00900034 	movhi	r2,16384
   11710:	10bfffc4 	addi	r2,r2,-1
   11714:	1886703a 	and	r3,r3,r2
   11718:	e0bffc17 	ldw	r2,-16(fp)
   1171c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11720:	e0bffb17 	ldw	r2,-20(fp)
   11724:	1000051e 	bne	r2,zero,1173c <open+0xdc>
   11728:	e13ffc17 	ldw	r4,-16(fp)
   1172c:	001156c0 	call	1156c <alt_file_locked>
   11730:	e0bffa15 	stw	r2,-24(fp)
   11734:	e0bffa17 	ldw	r2,-24(fp)
   11738:	10001016 	blt	r2,zero,1177c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1173c:	e0bff817 	ldw	r2,-32(fp)
   11740:	10800317 	ldw	r2,12(r2)
   11744:	10000826 	beq	r2,zero,11768 <open+0x108>
   11748:	e0bff817 	ldw	r2,-32(fp)
   1174c:	10800317 	ldw	r2,12(r2)
   11750:	e13ffc17 	ldw	r4,-16(fp)
   11754:	e17ffd17 	ldw	r5,-12(fp)
   11758:	e1bffe17 	ldw	r6,-8(fp)
   1175c:	e1ffff17 	ldw	r7,-4(fp)
   11760:	103ee83a 	callr	r2
   11764:	00000106 	br	1176c <open+0x10c>
   11768:	0005883a 	mov	r2,zero
   1176c:	e0bffa15 	stw	r2,-24(fp)
   11770:	00000206 	br	1177c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11774:	00bffb44 	movi	r2,-19
   11778:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1177c:	e0bffa17 	ldw	r2,-24(fp)
   11780:	1000090e 	bge	r2,zero,117a8 <open+0x148>
  {
    alt_release_fd (index);  
   11784:	e13ff917 	ldw	r4,-28(fp)
   11788:	000e3f00 	call	e3f0 <alt_release_fd>
    ALT_ERRNO = -status;
   1178c:	001151c0 	call	1151c <alt_get_errno>
   11790:	1007883a 	mov	r3,r2
   11794:	e0bffa17 	ldw	r2,-24(fp)
   11798:	0085c83a 	sub	r2,zero,r2
   1179c:	18800015 	stw	r2,0(r3)
    return -1;
   117a0:	00bfffc4 	movi	r2,-1
   117a4:	00000106 	br	117ac <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   117a8:	e0bff917 	ldw	r2,-28(fp)
}
   117ac:	e037883a 	mov	sp,fp
   117b0:	dfc00117 	ldw	ra,4(sp)
   117b4:	df000017 	ldw	fp,0(sp)
   117b8:	dec00204 	addi	sp,sp,8
   117bc:	f800283a 	ret

000117c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   117c0:	defffa04 	addi	sp,sp,-24
   117c4:	df000515 	stw	fp,20(sp)
   117c8:	df000504 	addi	fp,sp,20
   117cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117d0:	0005303a 	rdctl	r2,status
   117d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117d8:	e0fffc17 	ldw	r3,-16(fp)
   117dc:	00bfff84 	movi	r2,-2
   117e0:	1884703a 	and	r2,r3,r2
   117e4:	1001703a 	wrctl	status,r2
  
  return context;
   117e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   117ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   117f0:	e0bfff17 	ldw	r2,-4(fp)
   117f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   117f8:	e0bffd17 	ldw	r2,-12(fp)
   117fc:	10800017 	ldw	r2,0(r2)
   11800:	e0fffd17 	ldw	r3,-12(fp)
   11804:	18c00117 	ldw	r3,4(r3)
   11808:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1180c:	e0bffd17 	ldw	r2,-12(fp)
   11810:	10800117 	ldw	r2,4(r2)
   11814:	e0fffd17 	ldw	r3,-12(fp)
   11818:	18c00017 	ldw	r3,0(r3)
   1181c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11820:	e0bffd17 	ldw	r2,-12(fp)
   11824:	e0fffd17 	ldw	r3,-12(fp)
   11828:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1182c:	e0bffd17 	ldw	r2,-12(fp)
   11830:	e0fffd17 	ldw	r3,-12(fp)
   11834:	10c00015 	stw	r3,0(r2)
   11838:	e0bffb17 	ldw	r2,-20(fp)
   1183c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11840:	e0bffe17 	ldw	r2,-8(fp)
   11844:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11848:	e037883a 	mov	sp,fp
   1184c:	df000017 	ldw	fp,0(sp)
   11850:	dec00104 	addi	sp,sp,4
   11854:	f800283a 	ret

00011858 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11858:	defffb04 	addi	sp,sp,-20
   1185c:	dfc00415 	stw	ra,16(sp)
   11860:	df000315 	stw	fp,12(sp)
   11864:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11868:	d0a01017 	ldw	r2,-32704(gp)
   1186c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11870:	d0a01e17 	ldw	r2,-32648(gp)
   11874:	10800044 	addi	r2,r2,1
   11878:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1187c:	00002e06 	br	11938 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11880:	e0bffd17 	ldw	r2,-12(fp)
   11884:	10800017 	ldw	r2,0(r2)
   11888:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1188c:	e0bffd17 	ldw	r2,-12(fp)
   11890:	10800403 	ldbu	r2,16(r2)
   11894:	10803fcc 	andi	r2,r2,255
   11898:	10000426 	beq	r2,zero,118ac <alt_tick+0x54>
   1189c:	d0a01e17 	ldw	r2,-32648(gp)
   118a0:	1000021e 	bne	r2,zero,118ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
   118a4:	e0bffd17 	ldw	r2,-12(fp)
   118a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   118ac:	e0bffd17 	ldw	r2,-12(fp)
   118b0:	10800217 	ldw	r2,8(r2)
   118b4:	d0e01e17 	ldw	r3,-32648(gp)
   118b8:	18801d36 	bltu	r3,r2,11930 <alt_tick+0xd8>
   118bc:	e0bffd17 	ldw	r2,-12(fp)
   118c0:	10800403 	ldbu	r2,16(r2)
   118c4:	10803fcc 	andi	r2,r2,255
   118c8:	1000191e 	bne	r2,zero,11930 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   118cc:	e0bffd17 	ldw	r2,-12(fp)
   118d0:	10800317 	ldw	r2,12(r2)
   118d4:	e0fffd17 	ldw	r3,-12(fp)
   118d8:	18c00517 	ldw	r3,20(r3)
   118dc:	1809883a 	mov	r4,r3
   118e0:	103ee83a 	callr	r2
   118e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   118e8:	e0bfff17 	ldw	r2,-4(fp)
   118ec:	1000031e 	bne	r2,zero,118fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   118f0:	e13ffd17 	ldw	r4,-12(fp)
   118f4:	00117c00 	call	117c0 <alt_alarm_stop>
   118f8:	00000d06 	br	11930 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   118fc:	e0bffd17 	ldw	r2,-12(fp)
   11900:	10c00217 	ldw	r3,8(r2)
   11904:	e0bfff17 	ldw	r2,-4(fp)
   11908:	1887883a 	add	r3,r3,r2
   1190c:	e0bffd17 	ldw	r2,-12(fp)
   11910:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11914:	e0bffd17 	ldw	r2,-12(fp)
   11918:	10c00217 	ldw	r3,8(r2)
   1191c:	d0a01e17 	ldw	r2,-32648(gp)
   11920:	1880032e 	bgeu	r3,r2,11930 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11924:	e0bffd17 	ldw	r2,-12(fp)
   11928:	00c00044 	movi	r3,1
   1192c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11930:	e0bffe17 	ldw	r2,-8(fp)
   11934:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11938:	e0fffd17 	ldw	r3,-12(fp)
   1193c:	d0a01004 	addi	r2,gp,-32704
   11940:	18bfcf1e 	bne	r3,r2,11880 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11944:	0001883a 	nop
}
   11948:	e037883a 	mov	sp,fp
   1194c:	dfc00117 	ldw	ra,4(sp)
   11950:	df000017 	ldw	fp,0(sp)
   11954:	dec00204 	addi	sp,sp,8
   11958:	f800283a 	ret

0001195c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1195c:	deffff04 	addi	sp,sp,-4
   11960:	df000015 	stw	fp,0(sp)
   11964:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11968:	000170fa 	wrctl	ienable,zero
}
   1196c:	e037883a 	mov	sp,fp
   11970:	df000017 	ldw	fp,0(sp)
   11974:	dec00104 	addi	sp,sp,4
   11978:	f800283a 	ret

0001197c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   1197c:	defff404 	addi	sp,sp,-48
   11980:	df000b15 	stw	fp,44(sp)
   11984:	df000b04 	addi	fp,sp,44
   11988:	e13ffc15 	stw	r4,-16(fp)
   1198c:	e17ffd15 	stw	r5,-12(fp)
   11990:	e1bffe15 	stw	r6,-8(fp)
   11994:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   11998:	e0ffff17 	ldw	r3,-4(fp)
   1199c:	e0bffe17 	ldw	r2,-8(fp)
   119a0:	1885883a 	add	r2,r3,r2
   119a4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   119a8:	e0c00217 	ldw	r3,8(fp)
   119ac:	e0800117 	ldw	r2,4(fp)
   119b0:	1885883a 	add	r2,r3,r2
   119b4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   119b8:	e0800117 	ldw	r2,4(fp)
   119bc:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   119c0:	e0bffe17 	ldw	r2,-8(fp)
   119c4:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   119c8:	00800044 	movi	r2,1
   119cc:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   119d0:	e0bffc17 	ldw	r2,-16(fp)
   119d4:	10800504 	addi	r2,r2,20
   119d8:	1009883a 	mov	r4,r2
   119dc:	e0bffd17 	ldw	r2,-12(fp)
   119e0:	00c00044 	movi	r3,1
   119e4:	1884983a 	sll	r2,r3,r2
   119e8:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   119ec:	e0800317 	ldw	r2,12(fp)
   119f0:	1080008c 	andi	r2,r2,2
   119f4:	1000051e 	bne	r2,zero,11a0c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   119f8:	e0bffc17 	ldw	r2,-16(fp)
   119fc:	10800304 	addi	r2,r2,12
   11a00:	1007883a 	mov	r3,r2
   11a04:	00810004 	movi	r2,1024
   11a08:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   11a0c:	e0bffc17 	ldw	r2,-16(fp)
   11a10:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   11a14:	e0bffc17 	ldw	r2,-16(fp)
   11a18:	10800204 	addi	r2,r2,8
   11a1c:	10800037 	ldwio	r2,0(r2)
   11a20:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11a24:	e0bffa17 	ldw	r2,-24(fp)
   11a28:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   11a2c:	10000226 	beq	r2,zero,11a38 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11a30:	e0bff717 	ldw	r2,-36(fp)
   11a34:	1000031e 	bne	r2,zero,11a44 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   11a38:	e0bffa17 	ldw	r2,-24(fp)
   11a3c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11a40:	103ff426 	beq	r2,zero,11a14 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   11a44:	e0bffa17 	ldw	r2,-24(fp)
   11a48:	1080100c 	andi	r2,r2,64
   11a4c:	10001e26 	beq	r2,zero,11ac8 <alt_avalon_spi_command+0x14c>
   11a50:	e0bff717 	ldw	r2,-36(fp)
   11a54:	00801c0e 	bge	zero,r2,11ac8 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   11a58:	e0bff717 	ldw	r2,-36(fp)
   11a5c:	10bfffc4 	addi	r2,r2,-1
   11a60:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   11a64:	e0ffff17 	ldw	r3,-4(fp)
   11a68:	e0bff817 	ldw	r2,-32(fp)
   11a6c:	18800a2e 	bgeu	r3,r2,11a98 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   11a70:	e0bffc17 	ldw	r2,-16(fp)
   11a74:	10800104 	addi	r2,r2,4
   11a78:	1009883a 	mov	r4,r2
   11a7c:	e0bfff17 	ldw	r2,-4(fp)
   11a80:	10c00044 	addi	r3,r2,1
   11a84:	e0ffff15 	stw	r3,-4(fp)
   11a88:	10800003 	ldbu	r2,0(r2)
   11a8c:	10803fcc 	andi	r2,r2,255
   11a90:	20800035 	stwio	r2,0(r4)
   11a94:	00000c06 	br	11ac8 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   11a98:	e0bff517 	ldw	r2,-44(fp)
   11a9c:	10000826 	beq	r2,zero,11ac0 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   11aa0:	e0bff517 	ldw	r2,-44(fp)
   11aa4:	10bfffc4 	addi	r2,r2,-1
   11aa8:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   11aac:	e0bffc17 	ldw	r2,-16(fp)
   11ab0:	10800104 	addi	r2,r2,4
   11ab4:	0007883a 	mov	r3,zero
   11ab8:	10c00035 	stwio	r3,0(r2)
   11abc:	00000206 	br	11ac8 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   11ac0:	00bf0004 	movi	r2,-1024
   11ac4:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   11ac8:	e0bffa17 	ldw	r2,-24(fp)
   11acc:	1080200c 	andi	r2,r2,128
   11ad0:	10001726 	beq	r2,zero,11b30 <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   11ad4:	e0bffc17 	ldw	r2,-16(fp)
   11ad8:	10800037 	ldwio	r2,0(r2)
   11adc:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   11ae0:	e0bff617 	ldw	r2,-40(fp)
   11ae4:	10000426 	beq	r2,zero,11af8 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   11ae8:	e0bff617 	ldw	r2,-40(fp)
   11aec:	10bfffc4 	addi	r2,r2,-1
   11af0:	e0bff615 	stw	r2,-40(fp)
   11af4:	00000506 	br	11b0c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   11af8:	e0800217 	ldw	r2,8(fp)
   11afc:	10c00044 	addi	r3,r2,1
   11b00:	e0c00215 	stw	r3,8(fp)
   11b04:	e0fffb17 	ldw	r3,-20(fp)
   11b08:	10c00005 	stb	r3,0(r2)
      credits++;
   11b0c:	e0bff717 	ldw	r2,-36(fp)
   11b10:	10800044 	addi	r2,r2,1
   11b14:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   11b18:	e0bff617 	ldw	r2,-40(fp)
   11b1c:	1000041e 	bne	r2,zero,11b30 <alt_avalon_spi_command+0x1b4>
   11b20:	e0c00217 	ldw	r3,8(fp)
   11b24:	e0bff917 	ldw	r2,-28(fp)
   11b28:	1880011e 	bne	r3,r2,11b30 <alt_avalon_spi_command+0x1b4>
        break;
   11b2c:	00000106 	br	11b34 <alt_avalon_spi_command+0x1b8>
    }
    
  }
   11b30:	003fb806 	br	11a14 <alt_avalon_spi_command+0x98>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   11b34:	e0bffc17 	ldw	r2,-16(fp)
   11b38:	10800204 	addi	r2,r2,8
   11b3c:	10800037 	ldwio	r2,0(r2)
   11b40:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   11b44:	e0bffa17 	ldw	r2,-24(fp)
   11b48:	1080080c 	andi	r2,r2,32
   11b4c:	103ff926 	beq	r2,zero,11b34 <alt_avalon_spi_command+0x1b8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   11b50:	e0800317 	ldw	r2,12(fp)
   11b54:	1080004c 	andi	r2,r2,1
   11b58:	1000041e 	bne	r2,zero,11b6c <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   11b5c:	e0bffc17 	ldw	r2,-16(fp)
   11b60:	10800304 	addi	r2,r2,12
   11b64:	0007883a 	mov	r3,zero
   11b68:	10c00035 	stwio	r3,0(r2)

  return read_length;
   11b6c:	e0800117 	ldw	r2,4(fp)
}
   11b70:	e037883a 	mov	sp,fp
   11b74:	df000017 	ldw	fp,0(sp)
   11b78:	dec00104 	addi	sp,sp,4
   11b7c:	f800283a 	ret

00011b80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11b80:	defffa04 	addi	sp,sp,-24
   11b84:	dfc00515 	stw	ra,20(sp)
   11b88:	df000415 	stw	fp,16(sp)
   11b8c:	df000404 	addi	fp,sp,16
   11b90:	e13ffe15 	stw	r4,-8(fp)
   11b94:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11b98:	e0bfff17 	ldw	r2,-4(fp)
   11b9c:	10800017 	ldw	r2,0(r2)
   11ba0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11ba4:	e13ffe17 	ldw	r4,-8(fp)
   11ba8:	00015e40 	call	15e4 <strlen>
   11bac:	10800044 	addi	r2,r2,1
   11bb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11bb4:	00000d06 	br	11bec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11bb8:	e0bffc17 	ldw	r2,-16(fp)
   11bbc:	10c00217 	ldw	r3,8(r2)
   11bc0:	e0bffd17 	ldw	r2,-12(fp)
   11bc4:	1809883a 	mov	r4,r3
   11bc8:	e17ffe17 	ldw	r5,-8(fp)
   11bcc:	100d883a 	mov	r6,r2
   11bd0:	0011e440 	call	11e44 <memcmp>
   11bd4:	1000021e 	bne	r2,zero,11be0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11bd8:	e0bffc17 	ldw	r2,-16(fp)
   11bdc:	00000706 	br	11bfc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11be0:	e0bffc17 	ldw	r2,-16(fp)
   11be4:	10800017 	ldw	r2,0(r2)
   11be8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11bec:	e0fffc17 	ldw	r3,-16(fp)
   11bf0:	e0bfff17 	ldw	r2,-4(fp)
   11bf4:	18bff01e 	bne	r3,r2,11bb8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11bf8:	0005883a 	mov	r2,zero
}
   11bfc:	e037883a 	mov	sp,fp
   11c00:	dfc00117 	ldw	ra,4(sp)
   11c04:	df000017 	ldw	fp,0(sp)
   11c08:	dec00204 	addi	sp,sp,8
   11c0c:	f800283a 	ret

00011c10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11c10:	defffb04 	addi	sp,sp,-20
   11c14:	dfc00415 	stw	ra,16(sp)
   11c18:	df000315 	stw	fp,12(sp)
   11c1c:	df000304 	addi	fp,sp,12
   11c20:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11c24:	00800074 	movhi	r2,1
   11c28:	10914204 	addi	r2,r2,17672
   11c2c:	10800017 	ldw	r2,0(r2)
   11c30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11c34:	00003106 	br	11cfc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   11c38:	e0bffd17 	ldw	r2,-12(fp)
   11c3c:	10800217 	ldw	r2,8(r2)
   11c40:	1009883a 	mov	r4,r2
   11c44:	00015e40 	call	15e4 <strlen>
   11c48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11c4c:	e0bffd17 	ldw	r2,-12(fp)
   11c50:	10c00217 	ldw	r3,8(r2)
   11c54:	e0bffe17 	ldw	r2,-8(fp)
   11c58:	10bfffc4 	addi	r2,r2,-1
   11c5c:	1885883a 	add	r2,r3,r2
   11c60:	10800003 	ldbu	r2,0(r2)
   11c64:	10803fcc 	andi	r2,r2,255
   11c68:	1080201c 	xori	r2,r2,128
   11c6c:	10bfe004 	addi	r2,r2,-128
   11c70:	10800bd8 	cmpnei	r2,r2,47
   11c74:	1000031e 	bne	r2,zero,11c84 <alt_find_file+0x74>
    {
      len -= 1;
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	10bfffc4 	addi	r2,r2,-1
   11c80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11c84:	e0bffe17 	ldw	r2,-8(fp)
   11c88:	e0ffff17 	ldw	r3,-4(fp)
   11c8c:	1885883a 	add	r2,r3,r2
   11c90:	10800003 	ldbu	r2,0(r2)
   11c94:	10803fcc 	andi	r2,r2,255
   11c98:	1080201c 	xori	r2,r2,128
   11c9c:	10bfe004 	addi	r2,r2,-128
   11ca0:	10800be0 	cmpeqi	r2,r2,47
   11ca4:	1000081e 	bne	r2,zero,11cc8 <alt_find_file+0xb8>
   11ca8:	e0bffe17 	ldw	r2,-8(fp)
   11cac:	e0ffff17 	ldw	r3,-4(fp)
   11cb0:	1885883a 	add	r2,r3,r2
   11cb4:	10800003 	ldbu	r2,0(r2)
   11cb8:	10803fcc 	andi	r2,r2,255
   11cbc:	1080201c 	xori	r2,r2,128
   11cc0:	10bfe004 	addi	r2,r2,-128
   11cc4:	10000a1e 	bne	r2,zero,11cf0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11cc8:	e0bffd17 	ldw	r2,-12(fp)
   11ccc:	10c00217 	ldw	r3,8(r2)
   11cd0:	e0bffe17 	ldw	r2,-8(fp)
   11cd4:	1809883a 	mov	r4,r3
   11cd8:	e17fff17 	ldw	r5,-4(fp)
   11cdc:	100d883a 	mov	r6,r2
   11ce0:	0011e440 	call	11e44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11ce4:	1000021e 	bne	r2,zero,11cf0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11ce8:	e0bffd17 	ldw	r2,-12(fp)
   11cec:	00000806 	br	11d10 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   11cf0:	e0bffd17 	ldw	r2,-12(fp)
   11cf4:	10800017 	ldw	r2,0(r2)
   11cf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11cfc:	e0fffd17 	ldw	r3,-12(fp)
   11d00:	00800074 	movhi	r2,1
   11d04:	10914204 	addi	r2,r2,17672
   11d08:	18bfcb1e 	bne	r3,r2,11c38 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11d0c:	0005883a 	mov	r2,zero
}
   11d10:	e037883a 	mov	sp,fp
   11d14:	dfc00117 	ldw	ra,4(sp)
   11d18:	df000017 	ldw	fp,0(sp)
   11d1c:	dec00204 	addi	sp,sp,8
   11d20:	f800283a 	ret

00011d24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11d24:	defffa04 	addi	sp,sp,-24
   11d28:	dfc00515 	stw	ra,20(sp)
   11d2c:	df000415 	stw	fp,16(sp)
   11d30:	dc000315 	stw	r16,12(sp)
   11d34:	df000404 	addi	fp,sp,16
   11d38:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11d3c:	00bffa04 	movi	r2,-24
   11d40:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11d44:	e03ffc15 	stw	zero,-16(fp)
   11d48:	00002106 	br	11dd0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   11d4c:	04000074 	movhi	r16,1
   11d50:	840b9c04 	addi	r16,r16,11888
   11d54:	e0bffc17 	ldw	r2,-16(fp)
   11d58:	1009883a 	mov	r4,r2
   11d5c:	01400304 	movi	r5,12
   11d60:	0000dc40 	call	dc4 <__mulsi3>
   11d64:	8085883a 	add	r2,r16,r2
   11d68:	10800017 	ldw	r2,0(r2)
   11d6c:	1000151e 	bne	r2,zero,11dc4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   11d70:	04000074 	movhi	r16,1
   11d74:	840b9c04 	addi	r16,r16,11888
   11d78:	e0bffc17 	ldw	r2,-16(fp)
   11d7c:	1009883a 	mov	r4,r2
   11d80:	01400304 	movi	r5,12
   11d84:	0000dc40 	call	dc4 <__mulsi3>
   11d88:	8085883a 	add	r2,r16,r2
   11d8c:	e0fffe17 	ldw	r3,-8(fp)
   11d90:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11d94:	00800074 	movhi	r2,1
   11d98:	10914604 	addi	r2,r2,17688
   11d9c:	10c00017 	ldw	r3,0(r2)
   11da0:	e0bffc17 	ldw	r2,-16(fp)
   11da4:	1880040e 	bge	r3,r2,11db8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   11da8:	00800074 	movhi	r2,1
   11dac:	10914604 	addi	r2,r2,17688
   11db0:	e0fffc17 	ldw	r3,-16(fp)
   11db4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11db8:	e0bffc17 	ldw	r2,-16(fp)
   11dbc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11dc0:	00000606 	br	11ddc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11dc4:	e0bffc17 	ldw	r2,-16(fp)
   11dc8:	10800044 	addi	r2,r2,1
   11dcc:	e0bffc15 	stw	r2,-16(fp)
   11dd0:	e0bffc17 	ldw	r2,-16(fp)
   11dd4:	10800810 	cmplti	r2,r2,32
   11dd8:	103fdc1e 	bne	r2,zero,11d4c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11ddc:	e0bffd17 	ldw	r2,-12(fp)
}
   11de0:	e6ffff04 	addi	sp,fp,-4
   11de4:	dfc00217 	ldw	ra,8(sp)
   11de8:	df000117 	ldw	fp,4(sp)
   11dec:	dc000017 	ldw	r16,0(sp)
   11df0:	dec00304 	addi	sp,sp,12
   11df4:	f800283a 	ret

00011df8 <atexit>:
   11df8:	200b883a 	mov	r5,r4
   11dfc:	000d883a 	mov	r6,zero
   11e00:	0009883a 	mov	r4,zero
   11e04:	000f883a 	mov	r7,zero
   11e08:	0011ec01 	jmpi	11ec0 <__register_exitproc>

00011e0c <exit>:
   11e0c:	defffe04 	addi	sp,sp,-8
   11e10:	000b883a 	mov	r5,zero
   11e14:	dc000015 	stw	r16,0(sp)
   11e18:	dfc00115 	stw	ra,4(sp)
   11e1c:	2021883a 	mov	r16,r4
   11e20:	0011fd40 	call	11fd4 <__call_exitprocs>
   11e24:	00800074 	movhi	r2,1
   11e28:	10913c04 	addi	r2,r2,17648
   11e2c:	11000017 	ldw	r4,0(r2)
   11e30:	20800f17 	ldw	r2,60(r4)
   11e34:	10000126 	beq	r2,zero,11e3c <exit+0x30>
   11e38:	103ee83a 	callr	r2
   11e3c:	8009883a 	mov	r4,r16
   11e40:	00121680 	call	12168 <_exit>

00011e44 <memcmp>:
   11e44:	01c000c4 	movi	r7,3
   11e48:	3980192e 	bgeu	r7,r6,11eb0 <memcmp+0x6c>
   11e4c:	2144b03a 	or	r2,r4,r5
   11e50:	11c4703a 	and	r2,r2,r7
   11e54:	10000f26 	beq	r2,zero,11e94 <memcmp+0x50>
   11e58:	20800003 	ldbu	r2,0(r4)
   11e5c:	28c00003 	ldbu	r3,0(r5)
   11e60:	10c0151e 	bne	r2,r3,11eb8 <memcmp+0x74>
   11e64:	31bfff84 	addi	r6,r6,-2
   11e68:	01ffffc4 	movi	r7,-1
   11e6c:	00000406 	br	11e80 <memcmp+0x3c>
   11e70:	20800003 	ldbu	r2,0(r4)
   11e74:	28c00003 	ldbu	r3,0(r5)
   11e78:	31bfffc4 	addi	r6,r6,-1
   11e7c:	10c00e1e 	bne	r2,r3,11eb8 <memcmp+0x74>
   11e80:	21000044 	addi	r4,r4,1
   11e84:	29400044 	addi	r5,r5,1
   11e88:	31fff91e 	bne	r6,r7,11e70 <memcmp+0x2c>
   11e8c:	0005883a 	mov	r2,zero
   11e90:	f800283a 	ret
   11e94:	20c00017 	ldw	r3,0(r4)
   11e98:	28800017 	ldw	r2,0(r5)
   11e9c:	1880041e 	bne	r3,r2,11eb0 <memcmp+0x6c>
   11ea0:	31bfff04 	addi	r6,r6,-4
   11ea4:	21000104 	addi	r4,r4,4
   11ea8:	29400104 	addi	r5,r5,4
   11eac:	39bff936 	bltu	r7,r6,11e94 <memcmp+0x50>
   11eb0:	303fe91e 	bne	r6,zero,11e58 <memcmp+0x14>
   11eb4:	003ff506 	br	11e8c <memcmp+0x48>
   11eb8:	10c5c83a 	sub	r2,r2,r3
   11ebc:	f800283a 	ret

00011ec0 <__register_exitproc>:
   11ec0:	00800074 	movhi	r2,1
   11ec4:	defffa04 	addi	sp,sp,-24
   11ec8:	10913c04 	addi	r2,r2,17648
   11ecc:	dc000315 	stw	r16,12(sp)
   11ed0:	14000017 	ldw	r16,0(r2)
   11ed4:	dc400415 	stw	r17,16(sp)
   11ed8:	dfc00515 	stw	ra,20(sp)
   11edc:	80805217 	ldw	r2,328(r16)
   11ee0:	2023883a 	mov	r17,r4
   11ee4:	10003626 	beq	r2,zero,11fc0 <__register_exitproc+0x100>
   11ee8:	10c00117 	ldw	r3,4(r2)
   11eec:	010007c4 	movi	r4,31
   11ef0:	20c00e16 	blt	r4,r3,11f2c <__register_exitproc+0x6c>
   11ef4:	1a400044 	addi	r9,r3,1
   11ef8:	8800211e 	bne	r17,zero,11f80 <__register_exitproc+0xc0>
   11efc:	18c00084 	addi	r3,r3,2
   11f00:	18c7883a 	add	r3,r3,r3
   11f04:	18c7883a 	add	r3,r3,r3
   11f08:	12400115 	stw	r9,4(r2)
   11f0c:	10c7883a 	add	r3,r2,r3
   11f10:	19400015 	stw	r5,0(r3)
   11f14:	0005883a 	mov	r2,zero
   11f18:	dfc00517 	ldw	ra,20(sp)
   11f1c:	dc400417 	ldw	r17,16(sp)
   11f20:	dc000317 	ldw	r16,12(sp)
   11f24:	dec00604 	addi	sp,sp,24
   11f28:	f800283a 	ret
   11f2c:	00800034 	movhi	r2,0
   11f30:	10800004 	addi	r2,r2,0
   11f34:	10002526 	beq	r2,zero,11fcc <__register_exitproc+0x10c>
   11f38:	01006404 	movi	r4,400
   11f3c:	d9400015 	stw	r5,0(sp)
   11f40:	d9800115 	stw	r6,4(sp)
   11f44:	d9c00215 	stw	r7,8(sp)
   11f48:	00000000 	call	0 <__alt_mem_sdram>
   11f4c:	d9400017 	ldw	r5,0(sp)
   11f50:	d9800117 	ldw	r6,4(sp)
   11f54:	d9c00217 	ldw	r7,8(sp)
   11f58:	10001c26 	beq	r2,zero,11fcc <__register_exitproc+0x10c>
   11f5c:	80c05217 	ldw	r3,328(r16)
   11f60:	10000115 	stw	zero,4(r2)
   11f64:	02400044 	movi	r9,1
   11f68:	10c00015 	stw	r3,0(r2)
   11f6c:	80805215 	stw	r2,328(r16)
   11f70:	10006215 	stw	zero,392(r2)
   11f74:	10006315 	stw	zero,396(r2)
   11f78:	0007883a 	mov	r3,zero
   11f7c:	883fdf26 	beq	r17,zero,11efc <__register_exitproc+0x3c>
   11f80:	18d1883a 	add	r8,r3,r3
   11f84:	4211883a 	add	r8,r8,r8
   11f88:	1211883a 	add	r8,r2,r8
   11f8c:	41802215 	stw	r6,136(r8)
   11f90:	01000044 	movi	r4,1
   11f94:	11806217 	ldw	r6,392(r2)
   11f98:	20c8983a 	sll	r4,r4,r3
   11f9c:	310cb03a 	or	r6,r6,r4
   11fa0:	11806215 	stw	r6,392(r2)
   11fa4:	41c04215 	stw	r7,264(r8)
   11fa8:	01800084 	movi	r6,2
   11fac:	89bfd31e 	bne	r17,r6,11efc <__register_exitproc+0x3c>
   11fb0:	11806317 	ldw	r6,396(r2)
   11fb4:	3108b03a 	or	r4,r6,r4
   11fb8:	11006315 	stw	r4,396(r2)
   11fbc:	003fcf06 	br	11efc <__register_exitproc+0x3c>
   11fc0:	80805304 	addi	r2,r16,332
   11fc4:	80805215 	stw	r2,328(r16)
   11fc8:	003fc706 	br	11ee8 <__register_exitproc+0x28>
   11fcc:	00bfffc4 	movi	r2,-1
   11fd0:	003fd106 	br	11f18 <__register_exitproc+0x58>

00011fd4 <__call_exitprocs>:
   11fd4:	00800074 	movhi	r2,1
   11fd8:	10913c04 	addi	r2,r2,17648
   11fdc:	10800017 	ldw	r2,0(r2)
   11fe0:	defff404 	addi	sp,sp,-48
   11fe4:	dd800815 	stw	r22,32(sp)
   11fe8:	d8800015 	stw	r2,0(sp)
   11fec:	10805204 	addi	r2,r2,328
   11ff0:	dd000615 	stw	r20,24(sp)
   11ff4:	dc800415 	stw	r18,16(sp)
   11ff8:	dfc00b15 	stw	ra,44(sp)
   11ffc:	df000a15 	stw	fp,40(sp)
   12000:	ddc00915 	stw	r23,36(sp)
   12004:	dd400715 	stw	r21,28(sp)
   12008:	dcc00515 	stw	r19,20(sp)
   1200c:	dc400315 	stw	r17,12(sp)
   12010:	dc000215 	stw	r16,8(sp)
   12014:	2025883a 	mov	r18,r4
   12018:	2829883a 	mov	r20,r5
   1201c:	d8800115 	stw	r2,4(sp)
   12020:	05bfffc4 	movi	r22,-1
   12024:	d8800017 	ldw	r2,0(sp)
   12028:	14c05217 	ldw	r19,328(r2)
   1202c:	98001d26 	beq	r19,zero,120a4 <__call_exitprocs+0xd0>
   12030:	dd400117 	ldw	r21,4(sp)
   12034:	98800117 	ldw	r2,4(r19)
   12038:	173fffc4 	addi	fp,r2,-1
   1203c:	e0000d16 	blt	fp,zero,12074 <__call_exitprocs+0xa0>
   12040:	14000044 	addi	r16,r2,1
   12044:	8421883a 	add	r16,r16,r16
   12048:	8421883a 	add	r16,r16,r16
   1204c:	84402004 	addi	r17,r16,128
   12050:	9c63883a 	add	r17,r19,r17
   12054:	9c21883a 	add	r16,r19,r16
   12058:	a0001e26 	beq	r20,zero,120d4 <__call_exitprocs+0x100>
   1205c:	80804017 	ldw	r2,256(r16)
   12060:	15001c26 	beq	r2,r20,120d4 <__call_exitprocs+0x100>
   12064:	e73fffc4 	addi	fp,fp,-1
   12068:	843fff04 	addi	r16,r16,-4
   1206c:	8c7fff04 	addi	r17,r17,-4
   12070:	e5bff91e 	bne	fp,r22,12058 <__call_exitprocs+0x84>
   12074:	00800034 	movhi	r2,0
   12078:	10800004 	addi	r2,r2,0
   1207c:	10000926 	beq	r2,zero,120a4 <__call_exitprocs+0xd0>
   12080:	98800117 	ldw	r2,4(r19)
   12084:	1000311e 	bne	r2,zero,1214c <__call_exitprocs+0x178>
   12088:	98800017 	ldw	r2,0(r19)
   1208c:	10003426 	beq	r2,zero,12160 <__call_exitprocs+0x18c>
   12090:	9809883a 	mov	r4,r19
   12094:	a8800015 	stw	r2,0(r21)
   12098:	00000000 	call	0 <__alt_mem_sdram>
   1209c:	acc00017 	ldw	r19,0(r21)
   120a0:	983fe41e 	bne	r19,zero,12034 <__call_exitprocs+0x60>
   120a4:	dfc00b17 	ldw	ra,44(sp)
   120a8:	df000a17 	ldw	fp,40(sp)
   120ac:	ddc00917 	ldw	r23,36(sp)
   120b0:	dd800817 	ldw	r22,32(sp)
   120b4:	dd400717 	ldw	r21,28(sp)
   120b8:	dd000617 	ldw	r20,24(sp)
   120bc:	dcc00517 	ldw	r19,20(sp)
   120c0:	dc800417 	ldw	r18,16(sp)
   120c4:	dc400317 	ldw	r17,12(sp)
   120c8:	dc000217 	ldw	r16,8(sp)
   120cc:	dec00c04 	addi	sp,sp,48
   120d0:	f800283a 	ret
   120d4:	98800117 	ldw	r2,4(r19)
   120d8:	80c00017 	ldw	r3,0(r16)
   120dc:	10bfffc4 	addi	r2,r2,-1
   120e0:	17001526 	beq	r2,fp,12138 <__call_exitprocs+0x164>
   120e4:	80000015 	stw	zero,0(r16)
   120e8:	183fde26 	beq	r3,zero,12064 <__call_exitprocs+0x90>
   120ec:	00800044 	movi	r2,1
   120f0:	1708983a 	sll	r4,r2,fp
   120f4:	98806217 	ldw	r2,392(r19)
   120f8:	9dc00117 	ldw	r23,4(r19)
   120fc:	2084703a 	and	r2,r4,r2
   12100:	1000061e 	bne	r2,zero,1211c <__call_exitprocs+0x148>
   12104:	183ee83a 	callr	r3
   12108:	98800117 	ldw	r2,4(r19)
   1210c:	15ffc51e 	bne	r2,r23,12024 <__call_exitprocs+0x50>
   12110:	a8800017 	ldw	r2,0(r21)
   12114:	14ffd326 	beq	r2,r19,12064 <__call_exitprocs+0x90>
   12118:	003fc206 	br	12024 <__call_exitprocs+0x50>
   1211c:	98806317 	ldw	r2,396(r19)
   12120:	2084703a 	and	r2,r4,r2
   12124:	1000061e 	bne	r2,zero,12140 <__call_exitprocs+0x16c>
   12128:	89400017 	ldw	r5,0(r17)
   1212c:	9009883a 	mov	r4,r18
   12130:	183ee83a 	callr	r3
   12134:	003ff406 	br	12108 <__call_exitprocs+0x134>
   12138:	9f000115 	stw	fp,4(r19)
   1213c:	003fea06 	br	120e8 <__call_exitprocs+0x114>
   12140:	89000017 	ldw	r4,0(r17)
   12144:	183ee83a 	callr	r3
   12148:	003fef06 	br	12108 <__call_exitprocs+0x134>
   1214c:	98800017 	ldw	r2,0(r19)
   12150:	982b883a 	mov	r21,r19
   12154:	1027883a 	mov	r19,r2
   12158:	983fb61e 	bne	r19,zero,12034 <__call_exitprocs+0x60>
   1215c:	003fd106 	br	120a4 <__call_exitprocs+0xd0>
   12160:	0005883a 	mov	r2,zero
   12164:	003ffa06 	br	12150 <__call_exitprocs+0x17c>

00012168 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12168:	defffd04 	addi	sp,sp,-12
   1216c:	df000215 	stw	fp,8(sp)
   12170:	df000204 	addi	fp,sp,8
   12174:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12178:	0001883a 	nop
   1217c:	e0bfff17 	ldw	r2,-4(fp)
   12180:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12184:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12188:	10000226 	beq	r2,zero,12194 <_exit+0x2c>
    ALT_SIM_FAIL();
   1218c:	002af070 	cmpltui	zero,zero,43969
   12190:	00000106 	br	12198 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12194:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12198:	003fff06 	br	12198 <_exit+0x30>
