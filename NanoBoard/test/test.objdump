
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014610 memsz 0x0001476c flags rwx
    LOAD off    0x00016000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000120cc  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000414  00012288  00012288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f94  0001269c  0001269c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00014630  00014630  00015630  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0001478c  0001478c  00016000  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  02004000  02004000  00016000  2**0
                  CONTENTS
  8 .epcs_flash_controller_0 00000000  02009020  02009020  00016000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00016000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001078  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000265cc  00000000  00000000  000170a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009fa0  00000000  00000000  0003d66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c2ec  00000000  00000000  0004760c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000028dc  00000000  00000000  000538f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003be3  00000000  00000000  000561d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001769d  00000000  00000000  00059db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00071454  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000018a8  00000000  00000000  00071468  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00076698  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0007669b  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000766a7  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000766a8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000766a9  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000766b4  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000766bf  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  000766ca  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000037  00000000  00000000  000766d2  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000e0f1e  00000000  00000000  00076709  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
00012288 l    d  .rodata	00000000 .rodata
0001269c l    d  .rwdata	00000000 .rwdata
00014630 l    d  .bss	00000000 .bss
0001478c l    d  .sdram	00000000 .sdram
02004000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
02009020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 motor_setting.c
00000000 l    df *ABS*	00000000 pin_tests.c
00000000 l    df *ABS*	00000000 raspberry_uart.c
00000000 l    df *ABS*	00000000 steering_setting.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 ultrasound.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012456 l     O .rodata	00000010 zeroes.4255
000037e4 l     F .text	000000bc __sbprintf
00012466 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000039f4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000055d8 l     F .text	00000008 __fp_lock
000055e0 l     F .text	00000008 __fp_unlock
000055f4 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001269c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00012ae0 l     O .rwdata	00000020 lc_ctype_charset
00012ac0 l     O .rwdata	00000020 lc_message_charset
00012b00 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012498 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008b3c l     F .text	000000fc __sprint_r.part.0
000125bc l     O .rodata	00000010 zeroes.4200
000125cc l     O .rodata	00000010 blanks.4199
00009f64 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000b588 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000de4c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000df74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000dfa0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e0a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e1a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e388 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014618 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e60c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e75c l     F .text	00000038 alt_dev_reg
000130e8 l     O .rwdata	000000cc epcs_flash_controller_0
000131b4 l     O .rwdata	00001060 jtag_uart_0
00014214 l     O .rwdata	000000c4 New_UltraSound0
000142d8 l     O .rwdata	000000c4 New_UltraSound1
0001439c l     O .rwdata	000000c4 New_UltraSound2
00014460 l     O .rwdata	000000c4 New_UltraSound3
00014524 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0000e8e0 l     F .text	00000038 alt_flash_device_register
0000e96c l     F .text	000003f8 alt_epcs_flash_query
0000ed64 l     F .text	000000e8 alt_epcs_flash_memcmp
0000f138 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f600 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000f804 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fe24 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000100d8 l     F .text	00000098 altera_avalon_uart_irq
00010170 l     F .text	000000e0 altera_avalon_uart_rxirq
00010250 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000103e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00010614 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0001086c l     F .text	00000038 epcs_test_wip
000108a4 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010f7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000114b0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011608 l     F .text	00000050 alt_get_errno
00011658 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000081b4 g     F .text	00000074 _mprec_log10
0000f0ac g     F .text	0000008c alt_epcs_flash_get_info
000082a0 g     F .text	0000008c __any_on
0000a4e4 g     F .text	00000054 _isatty_r
000124a4 g     O .rodata	00000028 __mprec_tinytens
0000e2d0 g     F .text	00000078 alt_main
00001614 g     F .text	000000a8 _puts_r
0001468c g     O .bss	00000100 alt_irq
0000a538 g     F .text	0000005c _lseek_r
0000c8d0 g     F .text	00000084 .hidden __eqdf2
0001478c g       *ABS*	00000000 __alt_heap_start
000015d8 g     F .text	0000003c printf
0000a744 g     F .text	0000009c _wcrtomb_r
00008a34 g     F .text	0000005c __sseek
00005938 g     F .text	00000010 __sinit
0000a5f0 g     F .text	00000138 __swbuf_r
000063f0 g     F .text	0000007c _setlocale_r
00005790 g     F .text	00000078 __sfmoreglue
0000e368 g     F .text	00000020 __malloc_unlock
00000ed8 g     F .text	00000450 .hidden __divsf3
00000dc8 g     F .text	00000034 ultrasound_init
00007050 g     F .text	0000015c memmove
00005920 g     F .text	00000018 _cleanup
000072d0 g     F .text	000000a8 _Balloc
0000c954 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
000108dc g     F .text	000000f8 epcs_sector_erase
02009000 g     F .entry	00000000 __reset
000007bc g     F .text	000001e4 test_motor
0000a48c g     F .text	00000058 _fstat_r
00014648 g     O .bss	00000004 errno
000089b0 g     F .text	00000008 __seofread
00014650 g     O .bss	00000004 alt_argv
0001c5e8 g       *ABS*	00000000 _gp
00012f68 g     O .rwdata	00000180 alt_fd_list
00010b18 g     F .text	00000068 epcs_write_status_register
00011c6c g     F .text	00000090 alt_find_dev
00006f18 g     F .text	00000138 memcpy
000055e8 g     F .text	0000000c _cleanup_r
0000dcd8 g     F .text	000000d0 .hidden __floatsidf
00011590 g     F .text	00000078 alt_io_redirect
0000ca34 g     F .text	000000e0 .hidden __ltdf2
00012288 g       *ABS*	00000000 __DTOR_END__
000016bc g     F .text	00000014 puts
0000f240 g     F .text	00000100 alt_epcs_flash_write_block
00008894 g     F .text	00000074 __fpclassifyd
00008110 g     F .text	000000a4 __ratio
00009f40 g     F .text	00000024 __vfiprintf_internal
0000fa00 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000015ac g     F .text	0000002c _printf_r
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b6a4 g     F .text	00000008 .hidden __udivsi3
0000e0f8 g     F .text	000000ac isatty
000124f4 g     O .rodata	000000c8 __mprec_tens
0000646c g     F .text	0000000c __locale_charset
00014644 g     O .bss	00000004 __malloc_top_pad
000145f0 g     O .rwdata	00000004 __mb_cur_max
0000649c g     F .text	0000000c _localeconv_r
00007704 g     F .text	0000003c __i2b
00005d9c g     F .text	000004cc __sfvwrite_r
00008908 g     F .text	00000054 _sbrk_r
0000a594 g     F .text	0000005c _read_r
00014610 g     O .rwdata	00000004 alt_max_fd
0000a1a8 g     F .text	000000f0 _fclose_r
000055a8 g     F .text	00000030 fflush
00014640 g     O .bss	00000004 __malloc_max_sbrked_mem
00001438 g     F .text	00000110 .hidden __extendsfdf2
0000b6b4 g     F .text	0000089c .hidden __adddf3
000005e4 g     F .text	000001d8 test_stearing
0000f1cc g     F .text	00000074 alt_epcs_flash_erase_block
00007eb8 g     F .text	0000011c __b2d
0000af6c g     F .text	0000061c .hidden __umoddi3
0000e1f4 g     F .text	000000dc lseek
000145e8 g     O .rwdata	00000004 _global_impure_ptr
00010de0 g     F .text	0000005c epcs_exit_4_bytes_mode
0000832c g     F .text	00000568 _realloc_r
0001478c g       *ABS*	00000000 __bss_end
000113c0 g     F .text	000000f0 alt_iic_isr_register
00011944 g     F .text	00000104 alt_tick
0000a92c g     F .text	00000640 .hidden __udivdi3
00000500 g     F .text	000000e4 motor_setting
0000a2ac g     F .text	00000184 _fputwc_r
000124cc g     O .rodata	00000028 __mprec_bigtens
000074e8 g     F .text	00000104 __s2b
0000dda8 g     F .text	000000a4 .hidden __floatunsidf
00007c60 g     F .text	00000060 __mcmp
00010030 g     F .text	000000a8 altera_avalon_uart_init
00005958 g     F .text	00000018 __fp_lock_all
00011374 g     F .text	0000004c alt_ic_irq_enabled
000118ac g     F .text	00000098 alt_alarm_stop
00014658 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
00012f40 g     O .rwdata	00000028 alt_dev_null
000075ec g     F .text	00000068 __hi0bits
0000dc50 g     F .text	00000088 .hidden __fixdfsi
00000a40 g     F .text	000000bc steering_setting
00014608 g     O .rwdata	00000008 alt_dev_list
0000e65c g     F .text	00000100 write
0000dff0 g     F .text	000000b8 fstat
0000ca34 g     F .text	000000e0 .hidden __ledf2
000079d0 g     F .text	00000140 __pow5mult
00008c50 g     F .text	000012f0 ___vfiprintf_internal_r
00014638 g     O .bss	00000004 __nlocale_changed
0000b6ac g     F .text	00000008 .hidden __umodsi3
00010c9c g     F .text	00000068 epcs_read_electronic_signature
0001478c g       *ABS*	00000000 end
00010664 g     F .text	000001ac altera_avalon_uart_write
0000f53c g     F .text	000000c4 altera_avalon_jtag_uart_init
00012288 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000fe98 g     F .text	00000088 alt_avalon_timer_sc_init
0000ff80 g     F .text	00000060 altera_avalon_uart_write_fd
00001548 g     F .text	00000064 .hidden __clzsi2
00000d68 g     F .text	00000060 uart_receive_byte
0000ffe0 g     F .text	00000050 altera_avalon_uart_close_fd
0000fc0c g     F .text	00000218 altera_avalon_jtag_uart_write
00000cb0 g     F .text	0000004c uart_init
000009a0 g     F .text	00000034 raspberry_init
00005948 g     F .text	00000004 __sfp_lock_acquire
00006e30 g     F .text	000000e8 memchr
00001768 g     F .text	00002058 ___vfprintf_internal_r
00005aac g     F .text	000002f0 _free_r
00006478 g     F .text	00000010 __locale_mb_cur_max
000120c0 g     F .text	00000194 __call_exitprocs
00014634 g     O .bss	00000004 __mlocale_changed
000145f4 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	00000038 _start
0001465c g     O .bss	00000004 _alt_tick_rate
00007b10 g     F .text	00000150 __lshift
00011a68 g     F .text	00000204 alt_avalon_spi_command
00014660 g     O .bss	00000004 _alt_nticks
0000e3d8 g     F .text	00000104 read
0000e7c8 g     F .text	00000118 alt_sys_init
00011fac g     F .text	00000114 __register_exitproc
00007740 g     F .text	00000290 __multiply
0000f8ac g     F .text	00000068 altera_avalon_jtag_uart_close
00000eb0 g     F .text	00000028 .hidden __mulsi3
00014664 g     O .bss	00000028 __malloc_current_mallinfo
00007fd4 g     F .text	0000013c __d2b
00010810 g     F .text	0000005c epcs_read_status_register
0000f3d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011e10 g     F .text	000000d4 alt_get_fd
0000a07c g     F .text	00000054 _close_r
00000a04 g     F .text	0000003c raspberry_test
00010d04 g     F .text	00000080 epcs_read_device_id
00011f30 g     F .text	0000007c memcmp
0000f498 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001478c g       *ABS*	00000000 __alt_stack_base
0000f4e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00000dfc g     F .text	000000b4 ultrasound_read
000038a0 g     F .text	00000154 __swsetup_r
0000bf50 g     F .text	00000980 .hidden __divdf3
00005808 g     F .text	00000118 __sfp
00008228 g     F .text	00000078 __copybits
00012b38 g     O .rwdata	00000408 __malloc_av_
00005954 g     F .text	00000004 __sinit_lock_release
0000cb14 g     F .text	0000086c .hidden __muldf3
0000895c g     F .text	00000054 __sread
00011cfc g     F .text	00000114 alt_find_file
00010fcc g     F .text	000000a4 alt_dev_llist_insert
0000e348 g     F .text	00000020 __malloc_lock
0000e55c g     F .text	000000b0 sbrk
0000554c g     F .text	0000005c _fflush_r
0000a0d0 g     F .text	000000d8 _calloc_r
0001461c g     O .rwdata	00000008 alt_flash_dev_list
00014630 g       *ABS*	00000000 __bss_start
000071ac g     F .text	00000124 memset
000001f4 g     F .text	0000030c main
00014654 g     O .bss	00000004 alt_envp
0001463c g     O .bss	00000004 __malloc_max_total_mem
0000f438 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a728 g     F .text	0000001c __swbuf
00008a90 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000a298 g     F .text	00000014 fclose
00003c1c g     F .text	00001728 _dtoa_r
00006688 g     F .text	000007a8 _malloc_r
0000a8a0 g     F .text	00000030 __ascii_wctomb
00014614 g     O .rwdata	00000004 alt_errno
00006268 g     F .text	000000c4 _fwalk
0000b5f4 g     F .text	00000054 .hidden __divsi3
00005988 g     F .text	00000124 _malloc_trim_r
00012288 g       *ABS*	00000000 __CTOR_END__
0000ee4c g     F .text	00000260 alt_epcs_flash_write
00008a98 g     F .text	000000a4 strcmp
00012288 g       *ABS*	00000000 __DTOR_LIST__
0000c8d0 g     F .text	00000084 .hidden __nedf2
0000e794 g     F .text	00000034 alt_irq_init
0000e4dc g     F .text	00000080 alt_release_fd
00012310 g     O .rodata	00000100 .hidden __clz_tab
00014630 g     O .bss	00000004 _PathLocale
00011ee4 g     F .text	00000014 atexit
0000a020 g     F .text	0000005c _write_r
000064a8 g     F .text	0000001c setlocale
000145ec g     O .rwdata	00000004 _impure_ptr
0001464c g     O .bss	00000004 alt_argc
00005344 g     F .text	00000208 __sflush_r
000110cc g     F .text	0000005c _do_dtors
00006494 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00007e58 g     F .text	00000060 __ulp
00005970 g     F .text	00000018 __fp_unlock_all
00014600 g     O .rwdata	00000008 alt_fs_list
00000cfc g     F .text	0000006c uart_send_byte
000064c4 g     F .text	0000000c localeconv
000109d4 g     F .text	000000f4 epcs_read_buffer
000009d4 g     F .text	00000030 raspberry_read
0000e918 g     F .text	00000054 alt_epcs_flash_init
000111e0 g     F .text	00000050 alt_ic_isr_register
00014630 g       *ABS*	00000000 _edata
0000ff20 g     F .text	00000060 altera_avalon_uart_read_fd
0001478c g       *ABS*	00000000 _end
00011128 g     F .text	00000068 alt_flash_open_dev
0000f914 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000112d0 g     F .text	000000a4 alt_ic_irq_disable
00010d84 g     F .text	0000005c epcs_enter_4_bytes_mode
000089b8 g     F .text	0000007c __swrite
000145f8 g     O .rwdata	00000004 __malloc_trim_threshold
00011a48 g     F .text	00000020 altera_nios2_qsys_irq_init
00006488 g     F .text	0000000c __locale_msgcharset
00011ef8 g     F .text	00000038 exit
0000632c g     F .text	000000c4 _fwalk_reent
00001328 g     F .text	00000110 .hidden __floatunsisf
00007cc0 g     F .text	00000198 __mdiff
00011190 g     F .text	00000050 alt_flash_close_dev
0000b648 g     F .text	0000005c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000594c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00010394 g     F .text	00000054 altera_avalon_uart_close
00012254 g     F .text	00000034 _exit
00010e3c g     F .text	00000140 alt_alarm_start
000064d0 g     F .text	000001b8 __smakebuf_r
00000afc g     F .text	000001b4 steering_set_level
000016d0 g     F .text	00000098 strlen
00010ac8 g     F .text	00000050 epcs_write_enable
0001174c g     F .text	00000160 open
0000c954 g     F .text	000000e0 .hidden __gedf2
000145fc g     O .rwdata	00000004 __wctomb
00008c38 g     F .text	00000018 __sprint_r
00014624 g     O .rwdata	00000004 alt_priority_mask
00011230 g     F .text	000000a0 alt_ic_irq_enable
000037c0 g     F .text	00000024 __vfprintf_internal
00010438 g     F .text	000001dc altera_avalon_uart_read
0000a8d0 g     F .text	0000005c _wctomb_r
0000d380 g     F .text	000008d0 .hidden __subdf3
0000f340 g     F .text	00000098 alt_epcs_flash_read
00007654 g     F .text	000000b0 __lo0bits
00014628 g     O .rwdata	00000008 alt_alarm_list
00011070 g     F .text	0000005c _do_ctors
0000a7e0 g     F .text	000000c0 wcrtomb
0000de9c g     F .text	000000d8 close
0000a430 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
00005950 g     F .text	00000004 __sinit_lock_acquire
00010b80 g     F .text	0000011c epcs_write_buffer
000073a0 g     F .text	00000148 __multadd
00007378 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	1091a304 	addi	r2,r2,18060
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	1091a304 	addi	r2,r2,18060
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	21000104 	addi	r4,r4,4
 158:	1105883a 	add	r2,r2,r4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d6b17a14 	ori	gp,gp,50664
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d0:	10918c14 	ori	r2,r2,17968

    movhi r3, %hi(__bss_end)
     1d4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d8:	18d1e314 	ori	r3,r3,18316

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000e2d00 	call	e2d0 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <main>:
 */

#include "main.h"

int main()
{
     1f4:	deffe804 	addi	sp,sp,-96
     1f8:	dfc01715 	stw	ra,92(sp)
     1fc:	df001615 	stw	fp,88(sp)
     200:	df001604 	addi	fp,sp,88
	printf("Running!\n");
     204:	01000074 	movhi	r4,1
     208:	2108a204 	addi	r4,r4,8840
     20c:	00016bc0 	call	16bc <puts>

	//Assign motor pins
	unsigned long m_phase1=0x0,m_phase2=0x000,m_duty1=0x0,m_duty2=0x0,m_period=0x186A,m_enable=0x3;
     210:	e03ff215 	stw	zero,-56(fp)
     214:	e03ff315 	stw	zero,-52(fp)
     218:	e03fec15 	stw	zero,-80(fp)
     21c:	e03ff415 	stw	zero,-48(fp)
     220:	00861a84 	movi	r2,6250
     224:	e0bff515 	stw	r2,-44(fp)
     228:	008000c4 	movi	r2,3
     22c:	e0bff615 	stw	r2,-40(fp)
	motor_setting(m_phase1,m_duty1,m_phase2,m_duty2,m_period,m_enable);
     230:	e0bff517 	ldw	r2,-44(fp)
     234:	d8800015 	stw	r2,0(sp)
     238:	e0bff617 	ldw	r2,-40(fp)
     23c:	d8800115 	stw	r2,4(sp)
     240:	e13ff217 	ldw	r4,-56(fp)
     244:	e17fec17 	ldw	r5,-80(fp)
     248:	e1bff317 	ldw	r6,-52(fp)
     24c:	e1fff417 	ldw	r7,-48(fp)
     250:	00005000 	call	500 <motor_setting>

	//Assign steering pins
	unsigned long s_phase1=0x0,s_phase2=0x000,s_duty1=0x0,s_duty2=0x0,s_period=0x186A,s_enable=0x3;
     254:	e03ff715 	stw	zero,-36(fp)
     258:	e03ff815 	stw	zero,-32(fp)
     25c:	e03fed15 	stw	zero,-76(fp)
     260:	e03fee15 	stw	zero,-72(fp)
     264:	00861a84 	movi	r2,6250
     268:	e0bff915 	stw	r2,-28(fp)
     26c:	008000c4 	movi	r2,3
     270:	e0bffa15 	stw	r2,-24(fp)
	steering_setting(s_phase1,s_duty1,s_phase2,s_duty2,s_period,s_enable);
     274:	e0bff917 	ldw	r2,-28(fp)
     278:	d8800015 	stw	r2,0(sp)
     27c:	e0bffa17 	ldw	r2,-24(fp)
     280:	d8800115 	stw	r2,4(sp)
     284:	e13ff717 	ldw	r4,-36(fp)
     288:	e17fed17 	ldw	r5,-76(fp)
     28c:	e1bff817 	ldw	r6,-32(fp)
     290:	e1ffee17 	ldw	r7,-72(fp)
     294:	0000a400 	call	a40 <steering_setting>


	//Intit Ultrasound
	unsigned int distance0, distance1, distance2, i, j = 0;
     298:	e03ff015 	stw	zero,-64(fp)
	ultrasound_init(NEW_ULTRASOUND0_BASE);
     29c:	01008074 	movhi	r4,513
     2a0:	21288804 	addi	r4,r4,-24032
     2a4:	0000dc80 	call	dc8 <ultrasound_init>
	ultrasound_init(NEW_ULTRASOUND1_BASE);
     2a8:	01008074 	movhi	r4,513
     2ac:	21288004 	addi	r4,r4,-24064
     2b0:	0000dc80 	call	dc8 <ultrasound_init>
	ultrasound_init(NEW_ULTRASOUND2_BASE);
     2b4:	01008074 	movhi	r4,513
     2b8:	21287804 	addi	r4,r4,-24096
     2bc:	0000dc80 	call	dc8 <ultrasound_init>
	printf("Ultrasound initialized!\n");
     2c0:	01000074 	movhi	r4,1
     2c4:	2108a504 	addi	r4,r4,8852
     2c8:	00016bc0 	call	16bc <puts>

	//Init Raspberry uart
	raspberry_init(UART_0_BASE);
     2cc:	01008074 	movhi	r4,513
     2d0:	2128a004 	addi	r4,r4,-23936
     2d4:	00009a00 	call	9a0 <raspberry_init>
	int k = 0;
     2d8:	e03ff115 	stw	zero,-60(fp)
	for(k = 0; k<2550; k++); //delay
     2dc:	e03ff115 	stw	zero,-60(fp)
     2e0:	00000306 	br	2f0 <main+0xfc>
     2e4:	e0bff117 	ldw	r2,-60(fp)
     2e8:	10800044 	addi	r2,r2,1
     2ec:	e0bff115 	stw	r2,-60(fp)
     2f0:	e0bff117 	ldw	r2,-60(fp)
     2f4:	10827d90 	cmplti	r2,r2,2550
     2f8:	103ffa1e 	bne	r2,zero,2e4 <main+0xf0>
	printf("Test: %c", raspberry_test(UART_0_BASE));
     2fc:	01008074 	movhi	r4,513
     300:	2128a004 	addi	r4,r4,-23936
     304:	0000a040 	call	a04 <raspberry_test>
     308:	10803fcc 	andi	r2,r2,255
     30c:	01000074 	movhi	r4,1
     310:	2108ab04 	addi	r4,r4,8876
     314:	100b883a 	mov	r5,r2
     318:	00015d80 	call	15d8 <printf>



	while(1){
		//Get sensor values
		distance0 = ultrasound_read(NEW_ULTRASOUND0_BASE) * 170;
     31c:	01008074 	movhi	r4,513
     320:	21288804 	addi	r4,r4,-24032
     324:	0000dfc0 	call	dfc <ultrasound_read>
     328:	1009883a 	mov	r4,r2
     32c:	01402a84 	movi	r5,170
     330:	0000eb00 	call	eb0 <__mulsi3>
     334:	e0bffb15 	stw	r2,-20(fp)
		distance1 = ultrasound_read(NEW_ULTRASOUND1_BASE);
     338:	01008074 	movhi	r4,513
     33c:	21288004 	addi	r4,r4,-24064
     340:	0000dfc0 	call	dfc <ultrasound_read>
     344:	e0bffc15 	stw	r2,-16(fp)
		distance2 = ultrasound_read(NEW_ULTRASOUND2_BASE);
     348:	01008074 	movhi	r4,513
     34c:	21287804 	addi	r4,r4,-24096
     350:	0000dfc0 	call	dfc <ultrasound_read>
     354:	e0bffd15 	stw	r2,-12(fp)

		//Check for possible collision
		if(distance0>50000){
     358:	e0bffb17 	ldw	r2,-20(fp)
     35c:	10b0d470 	cmpltui	r2,r2,50001
     360:	1000031e 	bne	r2,zero,370 <main+0x17c>
			m_duty1 = 0x186A;
     364:	00861a84 	movi	r2,6250
     368:	e0bfec15 	stw	r2,-80(fp)
     36c:	00000106 	br	374 <main+0x180>
		}else{
			m_duty1 = 0x0;
     370:	e03fec15 	stw	zero,-80(fp)
		}


		if(distance1>893){ //893 is about 0,15181m
     374:	e0bffc17 	ldw	r2,-16(fp)
     378:	1080dfb0 	cmpltui	r2,r2,894
     37c:	1000021e 	bne	r2,zero,388 <main+0x194>
			s_duty1 = 0x0;
     380:	e03fed15 	stw	zero,-76(fp)
     384:	00000806 	br	3a8 <main+0x1b4>
		}else{
			//7 and 1000 are constants calculated with a period of 0x186A
			//Add 1000 to have max value at 2,5cm (will result in duty > 100%)
			s_duty1 = s_period - distance1*7 + 1000;
     388:	e13ffc17 	ldw	r4,-16(fp)
     38c:	014001c4 	movi	r5,7
     390:	0000eb00 	call	eb0 <__mulsi3>
     394:	1007883a 	mov	r3,r2
     398:	e0bff917 	ldw	r2,-28(fp)
     39c:	10c5c83a 	sub	r2,r2,r3
     3a0:	1080fa04 	addi	r2,r2,1000
     3a4:	e0bfed15 	stw	r2,-76(fp)
		}
		if(distance2>893){
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	1080dfb0 	cmpltui	r2,r2,894
     3b0:	1000021e 	bne	r2,zero,3bc <main+0x1c8>
			s_duty2 = 0x0;
     3b4:	e03fee15 	stw	zero,-72(fp)
     3b8:	00000806 	br	3dc <main+0x1e8>
		}else{
			s_duty2 = s_period - distance2*7 + 1000;
     3bc:	e13ffd17 	ldw	r4,-12(fp)
     3c0:	014001c4 	movi	r5,7
     3c4:	0000eb00 	call	eb0 <__mulsi3>
     3c8:	1007883a 	mov	r3,r2
     3cc:	e0bff917 	ldw	r2,-28(fp)
     3d0:	10c5c83a 	sub	r2,r2,r3
     3d4:	1080fa04 	addi	r2,r2,1000
     3d8:	e0bfee15 	stw	r2,-72(fp)
		}

		//Set PWM-Signals
		steering_setting(s_phase1,s_duty1,s_phase2,s_duty2,s_period,s_enable);
     3dc:	e0bff917 	ldw	r2,-28(fp)
     3e0:	d8800015 	stw	r2,0(sp)
     3e4:	e0bffa17 	ldw	r2,-24(fp)
     3e8:	d8800115 	stw	r2,4(sp)
     3ec:	e13ff717 	ldw	r4,-36(fp)
     3f0:	e17fed17 	ldw	r5,-76(fp)
     3f4:	e1bff817 	ldw	r6,-32(fp)
     3f8:	e1ffee17 	ldw	r7,-72(fp)
     3fc:	0000a400 	call	a40 <steering_setting>
		motor_setting(m_phase1, m_duty1, m_phase2, m_duty2, m_period, m_enable);
     400:	e0bff517 	ldw	r2,-44(fp)
     404:	d8800015 	stw	r2,0(sp)
     408:	e0bff617 	ldw	r2,-40(fp)
     40c:	d8800115 	stw	r2,4(sp)
     410:	e13ff217 	ldw	r4,-56(fp)
     414:	e17fec17 	ldw	r5,-80(fp)
     418:	e1bff317 	ldw	r6,-52(fp)
     41c:	e1fff417 	ldw	r7,-48(fp)
     420:	00005000 	call	500 <motor_setting>

		float duty1pr = ((float) s_duty1) / 6251.0;
     424:	e13fed17 	ldw	r4,-76(fp)
     428:	00013280 	call	1328 <__floatunsisf>
     42c:	1007883a 	mov	r3,r2
     430:	1809883a 	mov	r4,r3
     434:	015170f4 	movhi	r5,17859
     438:	29560004 	addi	r5,r5,22528
     43c:	0000ed80 	call	ed8 <__divsf3>
     440:	1007883a 	mov	r3,r2
     444:	e0fffe15 	stw	r3,-8(fp)
		float duty2pr = ((float) s_duty2) / 6251.0;
     448:	e13fee17 	ldw	r4,-72(fp)
     44c:	00013280 	call	1328 <__floatunsisf>
     450:	1007883a 	mov	r3,r2
     454:	1809883a 	mov	r4,r3
     458:	015170f4 	movhi	r5,17859
     45c:	29560004 	addi	r5,r5,22528
     460:	0000ed80 	call	ed8 <__divsf3>
     464:	1007883a 	mov	r3,r2
     468:	e0ffff15 	stw	r3,-4(fp)
		printf("Steering duty1 is: %f\twith distance: %i\n", duty1pr, distance1);
     46c:	e13ffe17 	ldw	r4,-8(fp)
     470:	00014380 	call	1438 <__extendsfdf2>
     474:	100d883a 	mov	r6,r2
     478:	180f883a 	mov	r7,r3
     47c:	01000074 	movhi	r4,1
     480:	2108ae04 	addi	r4,r4,8888
     484:	300b883a 	mov	r5,r6
     488:	380d883a 	mov	r6,r7
     48c:	e1fffc17 	ldw	r7,-16(fp)
     490:	00015d80 	call	15d8 <printf>
		printf("Steering duty2 is: %f\twith distance: %i\n", duty2pr, distance2);
     494:	e13fff17 	ldw	r4,-4(fp)
     498:	00014380 	call	1438 <__extendsfdf2>
     49c:	100d883a 	mov	r6,r2
     4a0:	180f883a 	mov	r7,r3
     4a4:	01000074 	movhi	r4,1
     4a8:	2108b904 	addi	r4,r4,8932
     4ac:	300b883a 	mov	r5,r6
     4b0:	380d883a 	mov	r6,r7
     4b4:	e1fffd17 	ldw	r7,-12(fp)
     4b8:	00015d80 	call	15d8 <printf>

		for(i = 0; i<2550; i++){
     4bc:	e03fef15 	stw	zero,-68(fp)
     4c0:	00000b06 	br	4f0 <main+0x2fc>
			for(j = 0; j<10; j++);
     4c4:	e03ff015 	stw	zero,-64(fp)
     4c8:	00000306 	br	4d8 <main+0x2e4>
     4cc:	e0bff017 	ldw	r2,-64(fp)
     4d0:	10800044 	addi	r2,r2,1
     4d4:	e0bff015 	stw	r2,-64(fp)
     4d8:	e0bff017 	ldw	r2,-64(fp)
     4dc:	108002b0 	cmpltui	r2,r2,10
     4e0:	103ffa1e 	bne	r2,zero,4cc <main+0x2d8>
		float duty1pr = ((float) s_duty1) / 6251.0;
		float duty2pr = ((float) s_duty2) / 6251.0;
		printf("Steering duty1 is: %f\twith distance: %i\n", duty1pr, distance1);
		printf("Steering duty2 is: %f\twith distance: %i\n", duty2pr, distance2);

		for(i = 0; i<2550; i++){
     4e4:	e0bfef17 	ldw	r2,-68(fp)
     4e8:	10800044 	addi	r2,r2,1
     4ec:	e0bfef15 	stw	r2,-68(fp)
     4f0:	e0bfef17 	ldw	r2,-68(fp)
     4f4:	10827db0 	cmpltui	r2,r2,2550
     4f8:	103ff21e 	bne	r2,zero,4c4 <main+0x2d0>
			for(j = 0; j<10; j++);
		} //Got delay value through testing; prevents sensors from crashing

	}
     4fc:	003f8706 	br	31c <main+0x128>

00000500 <motor_setting>:
//phase1 -> forward
//phase2 -> backward
//will only set one pin greater zero
void motor_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable)
{
     500:	defff504 	addi	sp,sp,-44
     504:	df000a15 	stw	fp,40(sp)
     508:	df000a04 	addi	fp,sp,40
     50c:	e13ffc15 	stw	r4,-16(fp)
     510:	e17ffd15 	stw	r5,-12(fp)
     514:	e1bffe15 	stw	r6,-8(fp)
     518:	e1ffff15 	stw	r7,-4(fp)
	if(phase1>0 && phase2>0){
     51c:	e0bffc17 	ldw	r2,-16(fp)
     520:	10000826 	beq	r2,zero,544 <motor_setting+0x44>
     524:	e0bffe17 	ldw	r2,-8(fp)
     528:	10000626 	beq	r2,zero,544 <motor_setting+0x44>
		if(phase1>=phase2) phase2 = 0;
     52c:	e0fffc17 	ldw	r3,-16(fp)
     530:	e0bffe17 	ldw	r2,-8(fp)
     534:	18800236 	bltu	r3,r2,540 <motor_setting+0x40>
     538:	e03ffe15 	stw	zero,-8(fp)
     53c:	00000106 	br	544 <motor_setting+0x44>
		else phase1 = 0;
     540:	e03ffc15 	stw	zero,-16(fp)

	}

	unsigned long * pwm_en= (unsigned long *)MOTOR_PWM_EN;
     544:	00808074 	movhi	r2,513
     548:	10a8b004 	addi	r2,r2,-23872
     54c:	e0bff615 	stw	r2,-40(fp)
	unsigned long * pwm_period=(unsigned long *)MOTOR_PWM_PERIOD;
     550:	00808074 	movhi	r2,513
     554:	10a8b104 	addi	r2,r2,-23868
     558:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_phase1=(unsigned long *)MOTOR_PWM_PHASE1;
     55c:	00808074 	movhi	r2,513
     560:	10a8b404 	addi	r2,r2,-23856
     564:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_phase2=(unsigned long *)MOTOR_PWM_PHASE2;
     568:	00808074 	movhi	r2,513
     56c:	10a8b504 	addi	r2,r2,-23852
     570:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_duty1=(unsigned long *)MOTOR_PWM_DUTY1;
     574:	00808074 	movhi	r2,513
     578:	10a8b204 	addi	r2,r2,-23864
     57c:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_duty2=(unsigned long *)MOTOR_PWM_DUTY2;
     580:	00808074 	movhi	r2,513
     584:	10a8b304 	addi	r2,r2,-23860
     588:	e0bffb15 	stw	r2,-20(fp)

	* pwm_en=enable;
     58c:	e0bff617 	ldw	r2,-40(fp)
     590:	e0c00217 	ldw	r3,8(fp)
     594:	10c00015 	stw	r3,0(r2)
	* pwm_period=period;
     598:	e0bff717 	ldw	r2,-36(fp)
     59c:	e0c00117 	ldw	r3,4(fp)
     5a0:	10c00015 	stw	r3,0(r2)
	* pwm_phase1=phase1;
     5a4:	e0bff817 	ldw	r2,-32(fp)
     5a8:	e0fffc17 	ldw	r3,-16(fp)
     5ac:	10c00015 	stw	r3,0(r2)
	* pwm_phase2=phase2;
     5b0:	e0bff917 	ldw	r2,-28(fp)
     5b4:	e0fffe17 	ldw	r3,-8(fp)
     5b8:	10c00015 	stw	r3,0(r2)
	* pwm_duty1=duty1;
     5bc:	e0bffa17 	ldw	r2,-24(fp)
     5c0:	e0fffd17 	ldw	r3,-12(fp)
     5c4:	10c00015 	stw	r3,0(r2)
	* pwm_duty2=duty2;
     5c8:	e0bffb17 	ldw	r2,-20(fp)
     5cc:	e0ffff17 	ldw	r3,-4(fp)
     5d0:	10c00015 	stw	r3,0(r2)

}
     5d4:	e037883a 	mov	sp,fp
     5d8:	df000017 	ldw	fp,0(sp)
     5dc:	dec00104 	addi	sp,sp,4
     5e0:	f800283a 	ret

000005e4 <test_stearing>:
#include "pin_tests.h"

//function to test stearing pins (will not terminate!)
//type 1: alternate on pin 1; sets pin 2 to zero
//type 2: alternate on pin 2; sets pin 1 to zero
void test_stearing(unsigned int test_type, unsigned long s_period){
     5e4:	defff604 	addi	sp,sp,-40
     5e8:	dfc00915 	stw	ra,36(sp)
     5ec:	df000815 	stw	fp,32(sp)
     5f0:	df000804 	addi	fp,sp,32
     5f4:	e13ffe15 	stw	r4,-8(fp)
     5f8:	e17fff15 	stw	r5,-4(fp)

	if(test_type==1){ //test 1
     5fc:	e0bffe17 	ldw	r2,-8(fp)
     600:	10800058 	cmpnei	r2,r2,1
     604:	1000321e 	bne	r2,zero,6d0 <test_stearing+0xec>
		unsigned long s_duty1 = 0;
     608:	e03ffa15 	stw	zero,-24(fp)
		unsigned int i = 0;
     60c:	e03ffb15 	stw	zero,-20(fp)
		while(1){
			while(s_duty1<s_period){
     610:	00001406 	br	664 <test_stearing+0x80>
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	d8800015 	stw	r2,0(sp)
     61c:	00800044 	movi	r2,1
     620:	d8800115 	stw	r2,4(sp)
     624:	0009883a 	mov	r4,zero
     628:	e17ffa17 	ldw	r5,-24(fp)
     62c:	000d883a 	mov	r6,zero
     630:	000f883a 	mov	r7,zero
     634:	0000a400 	call	a40 <steering_setting>
				s_duty1 += 10;
     638:	e0bffa17 	ldw	r2,-24(fp)
     63c:	10800284 	addi	r2,r2,10
     640:	e0bffa15 	stw	r2,-24(fp)
				for(i=0;i<2550;i++); //delay
     644:	e03ffb15 	stw	zero,-20(fp)
     648:	00000306 	br	658 <test_stearing+0x74>
     64c:	e0bffb17 	ldw	r2,-20(fp)
     650:	10800044 	addi	r2,r2,1
     654:	e0bffb15 	stw	r2,-20(fp)
     658:	e0bffb17 	ldw	r2,-20(fp)
     65c:	10827db0 	cmpltui	r2,r2,2550
     660:	103ffa1e 	bne	r2,zero,64c <test_stearing+0x68>

	if(test_type==1){ //test 1
		unsigned long s_duty1 = 0;
		unsigned int i = 0;
		while(1){
			while(s_duty1<s_period){
     664:	e0fffa17 	ldw	r3,-24(fp)
     668:	e0bfff17 	ldw	r2,-4(fp)
     66c:	18bfe936 	bltu	r3,r2,614 <test_stearing+0x30>
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty1>0){
     670:	00001406 	br	6c4 <test_stearing+0xe0>
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
     674:	e0bfff17 	ldw	r2,-4(fp)
     678:	d8800015 	stw	r2,0(sp)
     67c:	00800044 	movi	r2,1
     680:	d8800115 	stw	r2,4(sp)
     684:	0009883a 	mov	r4,zero
     688:	e17ffa17 	ldw	r5,-24(fp)
     68c:	000d883a 	mov	r6,zero
     690:	000f883a 	mov	r7,zero
     694:	0000a400 	call	a40 <steering_setting>
				s_duty1 -= 10;
     698:	e0bffa17 	ldw	r2,-24(fp)
     69c:	10bffd84 	addi	r2,r2,-10
     6a0:	e0bffa15 	stw	r2,-24(fp)
				for(i=0;i<2550;i++); //delay
     6a4:	e03ffb15 	stw	zero,-20(fp)
     6a8:	00000306 	br	6b8 <test_stearing+0xd4>
     6ac:	e0bffb17 	ldw	r2,-20(fp)
     6b0:	10800044 	addi	r2,r2,1
     6b4:	e0bffb15 	stw	r2,-20(fp)
     6b8:	e0bffb17 	ldw	r2,-20(fp)
     6bc:	10827db0 	cmpltui	r2,r2,2550
     6c0:	103ffa1e 	bne	r2,zero,6ac <test_stearing+0xc8>
			while(s_duty1<s_period){
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty1>0){
     6c4:	e0bffa17 	ldw	r2,-24(fp)
     6c8:	103fea1e 	bne	r2,zero,674 <test_stearing+0x90>
				steering_setting(0, s_duty1, 0, 0, s_period, 1);
				s_duty1 -= 10;
				for(i=0;i<2550;i++); //delay
			}
		}
     6cc:	003fd006 	br	610 <test_stearing+0x2c>
	}else if(test_type==2){ //test 2
     6d0:	e0bffe17 	ldw	r2,-8(fp)
     6d4:	10800098 	cmpnei	r2,r2,2
     6d8:	1000321e 	bne	r2,zero,7a4 <test_stearing+0x1c0>
		unsigned long s_duty2 = 0;
     6dc:	e03ffc15 	stw	zero,-16(fp)
		unsigned int i = 0;
     6e0:	e03ffd15 	stw	zero,-12(fp)
		while(1){
			while(s_duty2<s_period){
     6e4:	00001406 	br	738 <test_stearing+0x154>
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	d8800015 	stw	r2,0(sp)
     6f0:	00800084 	movi	r2,2
     6f4:	d8800115 	stw	r2,4(sp)
     6f8:	0009883a 	mov	r4,zero
     6fc:	000b883a 	mov	r5,zero
     700:	000d883a 	mov	r6,zero
     704:	e1fffc17 	ldw	r7,-16(fp)
     708:	0000a400 	call	a40 <steering_setting>
				s_duty2 += 10;
     70c:	e0bffc17 	ldw	r2,-16(fp)
     710:	10800284 	addi	r2,r2,10
     714:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     718:	e03ffd15 	stw	zero,-12(fp)
     71c:	00000306 	br	72c <test_stearing+0x148>
     720:	e0bffd17 	ldw	r2,-12(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffd15 	stw	r2,-12(fp)
     72c:	e0bffd17 	ldw	r2,-12(fp)
     730:	10827db0 	cmpltui	r2,r2,2550
     734:	103ffa1e 	bne	r2,zero,720 <test_stearing+0x13c>
		}
	}else if(test_type==2){ //test 2
		unsigned long s_duty2 = 0;
		unsigned int i = 0;
		while(1){
			while(s_duty2<s_period){
     738:	e0fffc17 	ldw	r3,-16(fp)
     73c:	e0bfff17 	ldw	r2,-4(fp)
     740:	18bfe936 	bltu	r3,r2,6e8 <test_stearing+0x104>
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty2>0){
     744:	00001406 	br	798 <test_stearing+0x1b4>
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
     748:	e0bfff17 	ldw	r2,-4(fp)
     74c:	d8800015 	stw	r2,0(sp)
     750:	00800084 	movi	r2,2
     754:	d8800115 	stw	r2,4(sp)
     758:	0009883a 	mov	r4,zero
     75c:	000b883a 	mov	r5,zero
     760:	000d883a 	mov	r6,zero
     764:	e1fffc17 	ldw	r7,-16(fp)
     768:	0000a400 	call	a40 <steering_setting>
				s_duty2 -= 10;
     76c:	e0bffc17 	ldw	r2,-16(fp)
     770:	10bffd84 	addi	r2,r2,-10
     774:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     778:	e03ffd15 	stw	zero,-12(fp)
     77c:	00000306 	br	78c <test_stearing+0x1a8>
     780:	e0bffd17 	ldw	r2,-12(fp)
     784:	10800044 	addi	r2,r2,1
     788:	e0bffd15 	stw	r2,-12(fp)
     78c:	e0bffd17 	ldw	r2,-12(fp)
     790:	10827db0 	cmpltui	r2,r2,2550
     794:	103ffa1e 	bne	r2,zero,780 <test_stearing+0x19c>
			while(s_duty2<s_period){
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(s_duty2>0){
     798:	e0bffc17 	ldw	r2,-16(fp)
     79c:	103fea1e 	bne	r2,zero,748 <test_stearing+0x164>
				steering_setting(0, 0, 0, s_duty2, s_period, 2);
				s_duty2 -= 10;
				for(i=0;i<2550;i++); //delay
			}
		}
     7a0:	003fd006 	br	6e4 <test_stearing+0x100>
	}
	return;
     7a4:	0001883a 	nop
}
     7a8:	e037883a 	mov	sp,fp
     7ac:	dfc00117 	ldw	ra,4(sp)
     7b0:	df000017 	ldw	fp,0(sp)
     7b4:	dec00204 	addi	sp,sp,8
     7b8:	f800283a 	ret

000007bc <test_motor>:

//function to test motor pin (will not terminate)
//test 1: TODO
//test 2: TODO
//test 3: alternate between max value on pin 1 and on pin 2
void test_motor(unsigned int test_type, unsigned long m_period){
     7bc:	defff704 	addi	sp,sp,-36
     7c0:	dfc00815 	stw	ra,32(sp)
     7c4:	df000715 	stw	fp,28(sp)
     7c8:	df000704 	addi	fp,sp,28
     7cc:	e13ffe15 	stw	r4,-8(fp)
     7d0:	e17fff15 	stw	r5,-4(fp)
	if(test_type==1){ //test 1
     7d4:	e0bffe17 	ldw	r2,-8(fp)
     7d8:	10800060 	cmpeqi	r2,r2,1
     7dc:	10006a1e 	bne	r2,zero,988 <test_motor+0x1cc>

	}else if(test_type==2){//test 2
     7e0:	e0bffe17 	ldw	r2,-8(fp)
     7e4:	108000a0 	cmpeqi	r2,r2,2
     7e8:	1000671e 	bne	r2,zero,988 <test_motor+0x1cc>

	}else if(test_type==3){//test 3
     7ec:	e0bffe17 	ldw	r2,-8(fp)
     7f0:	108000d8 	cmpnei	r2,r2,3
     7f4:	1000641e 	bne	r2,zero,988 <test_motor+0x1cc>
		unsigned long m_duty1 = 0;
     7f8:	e03ffb15 	stw	zero,-20(fp)
		unsigned long m_duty2 = 0;
     7fc:	e03ffc15 	stw	zero,-16(fp)
		unsigned int i = 0;
     800:	e03ffd15 	stw	zero,-12(fp)
		while(1){
			//drive forward
			while(m_duty1<m_period){
     804:	00001406 	br	858 <test_motor+0x9c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     808:	e0bfff17 	ldw	r2,-4(fp)
     80c:	d8800015 	stw	r2,0(sp)
     810:	008000c4 	movi	r2,3
     814:	d8800115 	stw	r2,4(sp)
     818:	0009883a 	mov	r4,zero
     81c:	e17ffb17 	ldw	r5,-20(fp)
     820:	000d883a 	mov	r6,zero
     824:	e1fffc17 	ldw	r7,-16(fp)
     828:	00005000 	call	500 <motor_setting>
				m_duty1 += 10;
     82c:	e0bffb17 	ldw	r2,-20(fp)
     830:	10800284 	addi	r2,r2,10
     834:	e0bffb15 	stw	r2,-20(fp)
				for(i=0;i<2550;i++); //delay
     838:	e03ffd15 	stw	zero,-12(fp)
     83c:	00000306 	br	84c <test_motor+0x90>
     840:	e0bffd17 	ldw	r2,-12(fp)
     844:	10800044 	addi	r2,r2,1
     848:	e0bffd15 	stw	r2,-12(fp)
     84c:	e0bffd17 	ldw	r2,-12(fp)
     850:	10827db0 	cmpltui	r2,r2,2550
     854:	103ffa1e 	bne	r2,zero,840 <test_motor+0x84>
		unsigned long m_duty1 = 0;
		unsigned long m_duty2 = 0;
		unsigned int i = 0;
		while(1){
			//drive forward
			while(m_duty1<m_period){
     858:	e0fffb17 	ldw	r3,-20(fp)
     85c:	e0bfff17 	ldw	r2,-4(fp)
     860:	18bfe936 	bltu	r3,r2,808 <test_motor+0x4c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty1>0){
     864:	00001406 	br	8b8 <test_motor+0xfc>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     868:	e0bfff17 	ldw	r2,-4(fp)
     86c:	d8800015 	stw	r2,0(sp)
     870:	008000c4 	movi	r2,3
     874:	d8800115 	stw	r2,4(sp)
     878:	0009883a 	mov	r4,zero
     87c:	e17ffb17 	ldw	r5,-20(fp)
     880:	000d883a 	mov	r6,zero
     884:	e1fffc17 	ldw	r7,-16(fp)
     888:	00005000 	call	500 <motor_setting>
				m_duty1 -= 10;
     88c:	e0bffb17 	ldw	r2,-20(fp)
     890:	10bffd84 	addi	r2,r2,-10
     894:	e0bffb15 	stw	r2,-20(fp)
				for(i=0;i<2550;i++); //delay
     898:	e03ffd15 	stw	zero,-12(fp)
     89c:	00000306 	br	8ac <test_motor+0xf0>
     8a0:	e0bffd17 	ldw	r2,-12(fp)
     8a4:	10800044 	addi	r2,r2,1
     8a8:	e0bffd15 	stw	r2,-12(fp)
     8ac:	e0bffd17 	ldw	r2,-12(fp)
     8b0:	10827db0 	cmpltui	r2,r2,2550
     8b4:	103ffa1e 	bne	r2,zero,8a0 <test_motor+0xe4>
			while(m_duty1<m_period){
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty1 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty1>0){
     8b8:	e0bffb17 	ldw	r2,-20(fp)
     8bc:	103fea1e 	bne	r2,zero,868 <test_motor+0xac>
				m_duty1 -= 10;
				for(i=0;i<2550;i++); //delay
			}

			//drive backwards
			m_duty1 = 0;
     8c0:	e03ffb15 	stw	zero,-20(fp)
			while(m_duty2<m_period){
     8c4:	00001406 	br	918 <test_motor+0x15c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     8c8:	e0bfff17 	ldw	r2,-4(fp)
     8cc:	d8800015 	stw	r2,0(sp)
     8d0:	008000c4 	movi	r2,3
     8d4:	d8800115 	stw	r2,4(sp)
     8d8:	0009883a 	mov	r4,zero
     8dc:	e17ffb17 	ldw	r5,-20(fp)
     8e0:	000d883a 	mov	r6,zero
     8e4:	e1fffc17 	ldw	r7,-16(fp)
     8e8:	00005000 	call	500 <motor_setting>
				m_duty2 += 10;
     8ec:	e0bffc17 	ldw	r2,-16(fp)
     8f0:	10800284 	addi	r2,r2,10
     8f4:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     8f8:	e03ffd15 	stw	zero,-12(fp)
     8fc:	00000306 	br	90c <test_motor+0x150>
     900:	e0bffd17 	ldw	r2,-12(fp)
     904:	10800044 	addi	r2,r2,1
     908:	e0bffd15 	stw	r2,-12(fp)
     90c:	e0bffd17 	ldw	r2,-12(fp)
     910:	10827db0 	cmpltui	r2,r2,2550
     914:	103ffa1e 	bne	r2,zero,900 <test_motor+0x144>
				for(i=0;i<2550;i++); //delay
			}

			//drive backwards
			m_duty1 = 0;
			while(m_duty2<m_period){
     918:	e0fffc17 	ldw	r3,-16(fp)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	18bfe936 	bltu	r3,r2,8c8 <test_motor+0x10c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty2>0){
     924:	00001406 	br	978 <test_motor+0x1bc>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
     928:	e0bfff17 	ldw	r2,-4(fp)
     92c:	d8800015 	stw	r2,0(sp)
     930:	008000c4 	movi	r2,3
     934:	d8800115 	stw	r2,4(sp)
     938:	0009883a 	mov	r4,zero
     93c:	e17ffb17 	ldw	r5,-20(fp)
     940:	000d883a 	mov	r6,zero
     944:	e1fffc17 	ldw	r7,-16(fp)
     948:	00005000 	call	500 <motor_setting>
				m_duty2 -= 10;
     94c:	e0bffc17 	ldw	r2,-16(fp)
     950:	10bffd84 	addi	r2,r2,-10
     954:	e0bffc15 	stw	r2,-16(fp)
				for(i=0;i<2550;i++); //delay
     958:	e03ffd15 	stw	zero,-12(fp)
     95c:	00000306 	br	96c <test_motor+0x1b0>
     960:	e0bffd17 	ldw	r2,-12(fp)
     964:	10800044 	addi	r2,r2,1
     968:	e0bffd15 	stw	r2,-12(fp)
     96c:	e0bffd17 	ldw	r2,-12(fp)
     970:	10827db0 	cmpltui	r2,r2,2550
     974:	103ffa1e 	bne	r2,zero,960 <test_motor+0x1a4>
			while(m_duty2<m_period){
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 += 10;
				for(i=0;i<2550;i++); //delay
			}
			while(m_duty2>0){
     978:	e0bffc17 	ldw	r2,-16(fp)
     97c:	103fea1e 	bne	r2,zero,928 <test_motor+0x16c>
				motor_setting(0, m_duty1, 0, m_duty2, m_period, 3);
				m_duty2 -= 10;
				for(i=0;i<2550;i++); //delay
			}
			m_duty2 = 0;
     980:	e03ffc15 	stw	zero,-16(fp)
		}
     984:	003f9f06 	br	804 <test_motor+0x48>
	}
	return;
     988:	0001883a 	nop
}
     98c:	e037883a 	mov	sp,fp
     990:	dfc00117 	ldw	ra,4(sp)
     994:	df000017 	ldw	fp,0(sp)
     998:	dec00204 	addi	sp,sp,8
     99c:	f800283a 	ret

000009a0 <raspberry_init>:
 */

#include "uart.h"
#include "raspberry_uart.h"

void raspberry_init(long Address){
     9a0:	defffd04 	addi	sp,sp,-12
     9a4:	dfc00215 	stw	ra,8(sp)
     9a8:	df000115 	stw	fp,4(sp)
     9ac:	df000104 	addi	fp,sp,4
     9b0:	e13fff15 	stw	r4,-4(fp)
	uart_init(Address, 0x0);
     9b4:	e13fff17 	ldw	r4,-4(fp)
     9b8:	000b883a 	mov	r5,zero
     9bc:	0000cb00 	call	cb0 <uart_init>
}
     9c0:	e037883a 	mov	sp,fp
     9c4:	dfc00117 	ldw	ra,4(sp)
     9c8:	df000017 	ldw	fp,0(sp)
     9cc:	dec00204 	addi	sp,sp,8
     9d0:	f800283a 	ret

000009d4 <raspberry_read>:

unsigned char raspberry_read(long Address){
     9d4:	defffd04 	addi	sp,sp,-12
     9d8:	dfc00215 	stw	ra,8(sp)
     9dc:	df000115 	stw	fp,4(sp)
     9e0:	df000104 	addi	fp,sp,4
     9e4:	e13fff15 	stw	r4,-4(fp)
	return uart_receive_byte(Address);
     9e8:	e13fff17 	ldw	r4,-4(fp)
     9ec:	0000d680 	call	d68 <uart_receive_byte>
}
     9f0:	e037883a 	mov	sp,fp
     9f4:	dfc00117 	ldw	ra,4(sp)
     9f8:	df000017 	ldw	fp,0(sp)
     9fc:	dec00204 	addi	sp,sp,8
     a00:	f800283a 	ret

00000a04 <raspberry_test>:

unsigned char raspberry_test(long Address){
     a04:	defffd04 	addi	sp,sp,-12
     a08:	dfc00215 	stw	ra,8(sp)
     a0c:	df000115 	stw	fp,4(sp)
     a10:	df000104 	addi	fp,sp,4
     a14:	e13fff15 	stw	r4,-4(fp)
	uart_send_byte(Address, '1');
     a18:	e13fff17 	ldw	r4,-4(fp)
     a1c:	01400c44 	movi	r5,49
     a20:	0000cfc0 	call	cfc <uart_send_byte>

	return uart_receive_byte(Address);
     a24:	e13fff17 	ldw	r4,-4(fp)
     a28:	0000d680 	call	d68 <uart_receive_byte>
}
     a2c:	e037883a 	mov	sp,fp
     a30:	dfc00117 	ldw	ra,4(sp)
     a34:	df000017 	ldw	fp,0(sp)
     a38:	dec00204 	addi	sp,sp,8
     a3c:	f800283a 	ret

00000a40 <steering_setting>:
 */

#include "steering_setting.h"

void steering_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable){
     a40:	defff504 	addi	sp,sp,-44
     a44:	df000a15 	stw	fp,40(sp)
     a48:	df000a04 	addi	fp,sp,40
     a4c:	e13ffc15 	stw	r4,-16(fp)
     a50:	e17ffd15 	stw	r5,-12(fp)
     a54:	e1bffe15 	stw	r6,-8(fp)
     a58:	e1ffff15 	stw	r7,-4(fp)

	unsigned long * pwm_en= (unsigned long *)STEERING_PWM_EN;
     a5c:	00808074 	movhi	r2,513
     a60:	10a8a804 	addi	r2,r2,-23904
     a64:	e0bff615 	stw	r2,-40(fp)
	unsigned long * pwm_period=(unsigned long *)STEERING_PWM_PERIOD;
     a68:	00808074 	movhi	r2,513
     a6c:	10a8a904 	addi	r2,r2,-23900
     a70:	e0bff715 	stw	r2,-36(fp)
	unsigned long * pwm_phase1=(unsigned long *)STEERING_PWM_PHASE1;
     a74:	00808074 	movhi	r2,513
     a78:	10a8ac04 	addi	r2,r2,-23888
     a7c:	e0bff815 	stw	r2,-32(fp)
	unsigned long * pwm_phase2=(unsigned long *)STEERING_PWM_PHASE2;
     a80:	00808074 	movhi	r2,513
     a84:	10a8ad04 	addi	r2,r2,-23884
     a88:	e0bff915 	stw	r2,-28(fp)
	unsigned long * pwm_duty1=(unsigned long *)STEERING_PWM_DUTY1;
     a8c:	00808074 	movhi	r2,513
     a90:	10a8aa04 	addi	r2,r2,-23896
     a94:	e0bffa15 	stw	r2,-24(fp)
	unsigned long * pwm_duty2=(unsigned long *)STEERING_PWM_DUTY2;
     a98:	00808074 	movhi	r2,513
     a9c:	10a8ab04 	addi	r2,r2,-23892
     aa0:	e0bffb15 	stw	r2,-20(fp)

	* pwm_en=enable;
     aa4:	e0bff617 	ldw	r2,-40(fp)
     aa8:	e0c00217 	ldw	r3,8(fp)
     aac:	10c00015 	stw	r3,0(r2)
	* pwm_period=period;
     ab0:	e0bff717 	ldw	r2,-36(fp)
     ab4:	e0c00117 	ldw	r3,4(fp)
     ab8:	10c00015 	stw	r3,0(r2)
	* pwm_phase1=phase1;
     abc:	e0bff817 	ldw	r2,-32(fp)
     ac0:	e0fffc17 	ldw	r3,-16(fp)
     ac4:	10c00015 	stw	r3,0(r2)
	* pwm_phase2=phase2;
     ac8:	e0bff917 	ldw	r2,-28(fp)
     acc:	e0fffe17 	ldw	r3,-8(fp)
     ad0:	10c00015 	stw	r3,0(r2)
	* pwm_duty1=duty1;
     ad4:	e0bffa17 	ldw	r2,-24(fp)
     ad8:	e0fffd17 	ldw	r3,-12(fp)
     adc:	10c00015 	stw	r3,0(r2)
	* pwm_duty2=duty2;
     ae0:	e0bffb17 	ldw	r2,-20(fp)
     ae4:	e0ffff17 	ldw	r3,-4(fp)
     ae8:	10c00015 	stw	r3,0(r2)
}
     aec:	e037883a 	mov	sp,fp
     af0:	df000017 	ldw	fp,0(sp)
     af4:	dec00104 	addi	sp,sp,4
     af8:	f800283a 	ret

00000afc <steering_set_level>:

//possible levels are from 0 to 14
//straight is 7
void steering_set_level(char level){
     afc:	defff804 	addi	sp,sp,-32
     b00:	dfc00715 	stw	ra,28(sp)
     b04:	df000615 	stw	fp,24(sp)
     b08:	df000604 	addi	fp,sp,24
     b0c:	2005883a 	mov	r2,r4
     b10:	e0bfff05 	stb	r2,-4(fp)
	unsigned long period = 0x186A;
     b14:	00861a84 	movi	r2,6250
     b18:	e0bffe15 	stw	r2,-8(fp)
	unsigned long phase1 = 0;
     b1c:	e03ffc15 	stw	zero,-16(fp)
	unsigned long phase2 = 0;
     b20:	e03ffd15 	stw	zero,-12(fp)
	switch(level){
     b24:	e0bfff07 	ldb	r2,-4(fp)
     b28:	10c003e8 	cmpgeui	r3,r2,15
     b2c:	1800501e 	bne	r3,zero,c70 <steering_set_level+0x174>
     b30:	100690ba 	slli	r3,r2,2
     b34:	00800034 	movhi	r2,0
     b38:	1082d204 	addi	r2,r2,2888
     b3c:	1885883a 	add	r2,r3,r2
     b40:	10800017 	ldw	r2,0(r2)
     b44:	1000683a 	jmp	r2
     b48:	00000b84 	movi	zero,46
     b4c:	00000b94 	movui	zero,46
     b50:	00000ba4 	muli	zero,zero,46
     b54:	00000bb4 	movhi	zero,46
     b58:	00000bc4 	movi	zero,47
     b5c:	00000bd4 	movui	zero,47
     b60:	00000be4 	muli	zero,zero,47
     b64:	00000bf4 	movhi	zero,47
     b68:	00000c00 	call	c0 <alt_exception_unknown+0x2c>
     b6c:	00000c10 	cmplti	zero,zero,48
     b70:	00000c20 	cmpeqi	zero,zero,48
     b74:	00000c30 	cmpltui	zero,zero,48
     b78:	00000c40 	call	c4 <alt_exception_unknown+0x30>
     b7c:	00000c50 	cmplti	zero,zero,49
     b80:	00000c60 	cmpeqi	zero,zero,49
	case 0:	phase1 = 0x186A;
     b84:	00861a84 	movi	r2,6250
     b88:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     b8c:	e03ffd15 	stw	zero,-12(fp)
     b90:	00003906 	br	c78 <steering_set_level+0x17c>
	case 1:	phase1 = 5357;
     b94:	00853b44 	movi	r2,5357
     b98:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     b9c:	e03ffd15 	stw	zero,-12(fp)
     ba0:	00003506 	br	c78 <steering_set_level+0x17c>
	case 2:	phase1 = 4464;
     ba4:	00845c04 	movi	r2,4464
     ba8:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     bac:	e03ffd15 	stw	zero,-12(fp)
     bb0:	00003106 	br	c78 <steering_set_level+0x17c>
	case 3:	phase1 = 3571;
     bb4:	00837cc4 	movi	r2,3571
     bb8:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     bbc:	e03ffd15 	stw	zero,-12(fp)
     bc0:	00002d06 	br	c78 <steering_set_level+0x17c>
	case 4:	phase1 = 2679;
     bc4:	00829dc4 	movi	r2,2679
     bc8:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     bcc:	e03ffd15 	stw	zero,-12(fp)
     bd0:	00002906 	br	c78 <steering_set_level+0x17c>
	case 5:	phase1 = 1786;
     bd4:	0081be84 	movi	r2,1786
     bd8:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     bdc:	e03ffd15 	stw	zero,-12(fp)
     be0:	00002506 	br	c78 <steering_set_level+0x17c>
	case 6: phase1 = 893;
     be4:	0080df44 	movi	r2,893
     be8:	e0bffc15 	stw	r2,-16(fp)
			phase2 = 0; break;
     bec:	e03ffd15 	stw	zero,-12(fp)
     bf0:	00002106 	br	c78 <steering_set_level+0x17c>
	case 7: phase1 = 0;
     bf4:	e03ffc15 	stw	zero,-16(fp)
			phase2 = 0; break;
     bf8:	e03ffd15 	stw	zero,-12(fp)
     bfc:	00001e06 	br	c78 <steering_set_level+0x17c>
	case 8: phase2 = 0x186A;
     c00:	00861a84 	movi	r2,6250
     c04:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     c08:	e03ffc15 	stw	zero,-16(fp)
     c0c:	00001a06 	br	c78 <steering_set_level+0x17c>
	case 9: phase2 = 5357;
     c10:	00853b44 	movi	r2,5357
     c14:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     c18:	e03ffc15 	stw	zero,-16(fp)
     c1c:	00001606 	br	c78 <steering_set_level+0x17c>
	case 10:phase2 = 4464;
     c20:	00845c04 	movi	r2,4464
     c24:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     c28:	e03ffc15 	stw	zero,-16(fp)
     c2c:	00001206 	br	c78 <steering_set_level+0x17c>
	case 11:phase2 = 3571;
     c30:	00837cc4 	movi	r2,3571
     c34:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     c38:	e03ffc15 	stw	zero,-16(fp)
     c3c:	00000e06 	br	c78 <steering_set_level+0x17c>
	case 12:phase2 = 2679;
     c40:	00829dc4 	movi	r2,2679
     c44:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     c48:	e03ffc15 	stw	zero,-16(fp)
     c4c:	00000a06 	br	c78 <steering_set_level+0x17c>
	case 13:phase2 = 1786;
     c50:	0081be84 	movi	r2,1786
     c54:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     c58:	e03ffc15 	stw	zero,-16(fp)
     c5c:	00000606 	br	c78 <steering_set_level+0x17c>
	case 14:phase2 = 893;
     c60:	0080df44 	movi	r2,893
     c64:	e0bffd15 	stw	r2,-12(fp)
			phase1 = 0; break;
     c68:	e03ffc15 	stw	zero,-16(fp)
     c6c:	00000206 	br	c78 <steering_set_level+0x17c>
	default:phase1 = 0;
     c70:	e03ffc15 	stw	zero,-16(fp)
			phase2 = 0;
     c74:	e03ffd15 	stw	zero,-12(fp)
	}
	steering_setting(0, phase1, 0, phase2, period, 3);
     c78:	e0bffe17 	ldw	r2,-8(fp)
     c7c:	d8800015 	stw	r2,0(sp)
     c80:	008000c4 	movi	r2,3
     c84:	d8800115 	stw	r2,4(sp)
     c88:	0009883a 	mov	r4,zero
     c8c:	e17ffc17 	ldw	r5,-16(fp)
     c90:	000d883a 	mov	r6,zero
     c94:	e1fffd17 	ldw	r7,-12(fp)
     c98:	0000a400 	call	a40 <steering_setting>
}
     c9c:	e037883a 	mov	sp,fp
     ca0:	dfc00117 	ldw	ra,4(sp)
     ca4:	df000017 	ldw	fp,0(sp)
     ca8:	dec00204 	addi	sp,sp,8
     cac:	f800283a 	ret

00000cb0 <uart_init>:

  Remarks:
    None
  ***************************************************************************/
void uart_init(long Address, unsigned char flag)
{
     cb0:	defffd04 	addi	sp,sp,-12
     cb4:	df000215 	stw	fp,8(sp)
     cb8:	df000204 	addi	fp,sp,8
     cbc:	e13ffe15 	stw	r4,-8(fp)
     cc0:	2805883a 	mov	r2,r5
     cc4:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL(Address, flag);
     cc8:	e0bffe17 	ldw	r2,-8(fp)
     ccc:	10800304 	addi	r2,r2,12
     cd0:	1007883a 	mov	r3,r2
     cd4:	e0bfff03 	ldbu	r2,-4(fp)
     cd8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_UART_STATUS(Address, 0x00);
     cdc:	e0bffe17 	ldw	r2,-8(fp)
     ce0:	10800204 	addi	r2,r2,8
     ce4:	0007883a 	mov	r3,zero
     ce8:	10c00035 	stwio	r3,0(r2)
}
     cec:	e037883a 	mov	sp,fp
     cf0:	df000017 	ldw	fp,0(sp)
     cf4:	dec00104 	addi	sp,sp,4
     cf8:	f800283a 	ret

00000cfc <uart_send_byte>:

  Remarks:
    None
  ***************************************************************************/
void uart_send_byte(long Address, unsigned char data)
{
     cfc:	defffc04 	addi	sp,sp,-16
     d00:	df000315 	stw	fp,12(sp)
     d04:	df000304 	addi	fp,sp,12
     d08:	e13ffe15 	stw	r4,-8(fp)
     d0c:	2805883a 	mov	r2,r5
     d10:	e0bfff05 	stb	r2,-4(fp)
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
     d14:	e0bffe17 	ldw	r2,-8(fp)
     d18:	10800104 	addi	r2,r2,4
     d1c:	1007883a 	mov	r3,r2
     d20:	e0bfff03 	ldbu	r2,-4(fp)
     d24:	18800035 	stwio	r2,0(r3)
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     d28:	e0bffe17 	ldw	r2,-8(fp)
     d2c:	10800204 	addi	r2,r2,8
     d30:	10800037 	ldwio	r2,0(r2)
     d34:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0040))
     d38:	00000406 	br	d4c <uart_send_byte+0x50>
    {
    	//printf("Status in send is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     d3c:	e0bffe17 	ldw	r2,-8(fp)
     d40:	10800204 	addi	r2,r2,8
     d44:	10800037 	ldwio	r2,0(r2)
     d48:	e0bffd15 	stw	r2,-12(fp)
void uart_send_byte(long Address, unsigned char data)
{
	unsigned int status;
    IOWR_ALTERA_AVALON_UART_TXDATA(Address,data);
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0040))
     d4c:	e0bffd17 	ldw	r2,-12(fp)
     d50:	1080100c 	andi	r2,r2,64
     d54:	103ff926 	beq	r2,zero,d3c <uart_send_byte+0x40>
    {
    	//printf("Status in send is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
}
     d58:	e037883a 	mov	sp,fp
     d5c:	df000017 	ldw	fp,0(sp)
     d60:	dec00104 	addi	sp,sp,4
     d64:	f800283a 	ret

00000d68 <uart_receive_byte>:

  Remarks:
    None
  ***************************************************************************/
unsigned char uart_receive_byte(long Address)
{
     d68:	defffc04 	addi	sp,sp,-16
     d6c:	df000315 	stw	fp,12(sp)
     d70:	df000304 	addi	fp,sp,12
     d74:	e13fff15 	stw	r4,-4(fp)
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     d78:	e0bfff17 	ldw	r2,-4(fp)
     d7c:	10800204 	addi	r2,r2,8
     d80:	10800037 	ldwio	r2,0(r2)
     d84:	e0bffd15 	stw	r2,-12(fp)
    while(!(status&0x0080))
     d88:	00000406 	br	d9c <uart_receive_byte+0x34>
    {
    	//printf("Status in receive is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
     d8c:	e0bfff17 	ldw	r2,-4(fp)
     d90:	10800204 	addi	r2,r2,8
     d94:	10800037 	ldwio	r2,0(r2)
     d98:	e0bffd15 	stw	r2,-12(fp)
unsigned char uart_receive_byte(long Address)
{
	unsigned int  status;
	unsigned char res;
    status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    while(!(status&0x0080))
     d9c:	e0bffd17 	ldw	r2,-12(fp)
     da0:	1080200c 	andi	r2,r2,128
     da4:	103ff926 	beq	r2,zero,d8c <uart_receive_byte+0x24>
    {
    	//printf("Status in receive is: %i\n", status);
    	status=IORD_ALTERA_AVALON_UART_STATUS(Address);
    }
    res=IORD_ALTERA_AVALON_UART_RXDATA(Address);
     da8:	e0bfff17 	ldw	r2,-4(fp)
     dac:	10800037 	ldwio	r2,0(r2)
     db0:	e0bffe05 	stb	r2,-8(fp)
    return res;
     db4:	e0bffe03 	ldbu	r2,-8(fp)
}
     db8:	e037883a 	mov	sp,fp
     dbc:	df000017 	ldw	fp,0(sp)
     dc0:	dec00104 	addi	sp,sp,4
     dc4:	f800283a 	ret

00000dc8 <ultrasound_init>:

  Remarks:
    None
  ***************************************************************************/
void ultrasound_init(long Address)
{
     dc8:	defffd04 	addi	sp,sp,-12
     dcc:	dfc00215 	stw	ra,8(sp)
     dd0:	df000115 	stw	fp,4(sp)
     dd4:	df000104 	addi	fp,sp,4
     dd8:	e13fff15 	stw	r4,-4(fp)
	uart_init(Address, 0x00);
     ddc:	e13fff17 	ldw	r4,-4(fp)
     de0:	000b883a 	mov	r5,zero
     de4:	0000cb00 	call	cb0 <uart_init>
}
     de8:	e037883a 	mov	sp,fp
     dec:	dfc00117 	ldw	ra,4(sp)
     df0:	df000017 	ldw	fp,0(sp)
     df4:	dec00204 	addi	sp,sp,8
     df8:	f800283a 	ret

00000dfc <ultrasound_read>:

  Remarks:
    Distance in meter
  ***************************************************************************/
unsigned int ultrasound_read(long Address)
{
     dfc:	defffb04 	addi	sp,sp,-20
     e00:	dfc00415 	stw	ra,16(sp)
     e04:	df000315 	stw	fp,12(sp)
     e08:	df000304 	addi	fp,sp,12
     e0c:	e13fff15 	stw	r4,-4(fp)
	unsigned int i;
	unsigned char res_l, res_h;
	uart_send_byte(Address, 0xe8);
     e10:	e13fff17 	ldw	r4,-4(fp)
     e14:	01403a04 	movi	r5,232
     e18:	0000cfc0 	call	cfc <uart_send_byte>

	for (i = 0; i < 2000; i++); //delay
     e1c:	e03ffd15 	stw	zero,-12(fp)
     e20:	00000306 	br	e30 <ultrasound_read+0x34>
     e24:	e0bffd17 	ldw	r2,-12(fp)
     e28:	10800044 	addi	r2,r2,1
     e2c:	e0bffd15 	stw	r2,-12(fp)
     e30:	e0bffd17 	ldw	r2,-12(fp)
     e34:	1081f430 	cmpltui	r2,r2,2000
     e38:	103ffa1e 	bne	r2,zero,e24 <ultrasound_read+0x28>

	uart_send_byte(Address, 0x02);
     e3c:	e13fff17 	ldw	r4,-4(fp)
     e40:	01400084 	movi	r5,2
     e44:	0000cfc0 	call	cfc <uart_send_byte>

	for (i = 0; i < 2000; i++); //delay
     e48:	e03ffd15 	stw	zero,-12(fp)
     e4c:	00000306 	br	e5c <ultrasound_read+0x60>
     e50:	e0bffd17 	ldw	r2,-12(fp)
     e54:	10800044 	addi	r2,r2,1
     e58:	e0bffd15 	stw	r2,-12(fp)
     e5c:	e0bffd17 	ldw	r2,-12(fp)
     e60:	1081f430 	cmpltui	r2,r2,2000
     e64:	103ffa1e 	bne	r2,zero,e50 <ultrasound_read+0x54>

	uart_send_byte(Address, 0x0a); //0x0a -> range (0m-1m)
     e68:	e13fff17 	ldw	r4,-4(fp)
     e6c:	01400284 	movi	r5,10
     e70:	0000cfc0 	call	cfc <uart_send_byte>

	res_h = uart_receive_byte(Address);
     e74:	e13fff17 	ldw	r4,-4(fp)
     e78:	0000d680 	call	d68 <uart_receive_byte>
     e7c:	e0bffe05 	stb	r2,-8(fp)

	//for (i = 0; i < 1000; i++); //delay

	res_l = uart_receive_byte(Address);
     e80:	e13fff17 	ldw	r4,-4(fp)
     e84:	0000d680 	call	d68 <uart_receive_byte>
     e88:	e0bffe45 	stb	r2,-7(fp)

	//printf("res_h is %x, res_l is %x.\n", res_h, res_l);

	return (((unsigned int) res_h) << 8) + res_l;
     e8c:	e0bffe03 	ldbu	r2,-8(fp)
     e90:	1006923a 	slli	r3,r2,8
     e94:	e0bffe43 	ldbu	r2,-7(fp)
     e98:	1885883a 	add	r2,r3,r2
}
     e9c:	e037883a 	mov	sp,fp
     ea0:	dfc00117 	ldw	ra,4(sp)
     ea4:	df000017 	ldw	fp,0(sp)
     ea8:	dec00204 	addi	sp,sp,8
     eac:	f800283a 	ret

00000eb0 <__mulsi3>:
     eb0:	0005883a 	mov	r2,zero
     eb4:	20000726 	beq	r4,zero,ed4 <__mulsi3+0x24>
     eb8:	20c0004c 	andi	r3,r4,1
     ebc:	2008d07a 	srli	r4,r4,1
     ec0:	18000126 	beq	r3,zero,ec8 <__mulsi3+0x18>
     ec4:	1145883a 	add	r2,r2,r5
     ec8:	294b883a 	add	r5,r5,r5
     ecc:	203ffa1e 	bne	r4,zero,eb8 <__mulsi3+0x8>
     ed0:	f800283a 	ret
     ed4:	f800283a 	ret

00000ed8 <__divsf3>:
     ed8:	defff504 	addi	sp,sp,-44
     edc:	dd000515 	stw	r20,20(sp)
     ee0:	2028d5fa 	srli	r20,r4,23
     ee4:	dd400615 	stw	r21,24(sp)
     ee8:	202ad7fa 	srli	r21,r4,31
     eec:	00c02034 	movhi	r3,128
     ef0:	dcc00415 	stw	r19,16(sp)
     ef4:	dc800315 	stw	r18,12(sp)
     ef8:	18ffffc4 	addi	r3,r3,-1
     efc:	dfc00a15 	stw	ra,40(sp)
     f00:	df000915 	stw	fp,36(sp)
     f04:	ddc00815 	stw	r23,32(sp)
     f08:	dd800715 	stw	r22,28(sp)
     f0c:	dc400215 	stw	r17,8(sp)
     f10:	dc000115 	stw	r16,4(sp)
     f14:	a5003fcc 	andi	r20,r20,255
     f18:	1924703a 	and	r18,r3,r4
     f1c:	acc03fcc 	andi	r19,r21,255
     f20:	a0004d26 	beq	r20,zero,1058 <__divsf3+0x180>
     f24:	00803fc4 	movi	r2,255
     f28:	a0802e26 	beq	r20,r2,fe4 <__divsf3+0x10c>
     f2c:	91002034 	orhi	r4,r18,128
     f30:	202490fa 	slli	r18,r4,3
     f34:	a53fe044 	addi	r20,r20,-127
     f38:	0021883a 	mov	r16,zero
     f3c:	002f883a 	mov	r23,zero
     f40:	2804d5fa 	srli	r2,r5,23
     f44:	282cd7fa 	srli	r22,r5,31
     f48:	00c02034 	movhi	r3,128
     f4c:	18ffffc4 	addi	r3,r3,-1
     f50:	10803fcc 	andi	r2,r2,255
     f54:	1962703a 	and	r17,r3,r5
     f58:	b7003fcc 	andi	fp,r22,255
     f5c:	10004526 	beq	r2,zero,1074 <__divsf3+0x19c>
     f60:	00c03fc4 	movi	r3,255
     f64:	10c04026 	beq	r2,r3,1068 <__divsf3+0x190>
     f68:	88c02034 	orhi	r3,r17,128
     f6c:	182290fa 	slli	r17,r3,3
     f70:	10bfe044 	addi	r2,r2,-127
     f74:	0009883a 	mov	r4,zero
     f78:	2420b03a 	or	r16,r4,r16
     f7c:	802090ba 	slli	r16,r16,2
     f80:	01c00034 	movhi	r7,0
     f84:	39c3e904 	addi	r7,r7,4004
     f88:	81e1883a 	add	r16,r16,r7
     f8c:	80c00017 	ldw	r3,0(r16)
     f90:	ad8af03a 	xor	r5,r21,r22
     f94:	280d883a 	mov	r6,r5
     f98:	a085c83a 	sub	r2,r20,r2
     f9c:	29403fcc 	andi	r5,r5,255
     fa0:	1800683a 	jmp	r3
     fa4:	000011b0 	cmpltui	zero,zero,70
     fa8:	00001158 	cmpnei	zero,zero,69
     fac:	0000117c 	xorhi	zero,zero,69
     fb0:	00001144 	movi	zero,69
     fb4:	0000117c 	xorhi	zero,zero,69
     fb8:	00000ff4 	movhi	zero,63
     fbc:	0000117c 	xorhi	zero,zero,69
     fc0:	00001144 	movi	zero,69
     fc4:	00001158 	cmpnei	zero,zero,69
     fc8:	00001158 	cmpnei	zero,zero,69
     fcc:	00000ff4 	movhi	zero,63
     fd0:	00001144 	movi	zero,69
     fd4:	00001248 	cmpgei	zero,zero,73
     fd8:	00001248 	cmpgei	zero,zero,73
     fdc:	00001248 	cmpgei	zero,zero,73
     fe0:	00001188 	cmpgei	zero,zero,70
     fe4:	9000531e 	bne	r18,zero,1134 <__divsf3+0x25c>
     fe8:	04000204 	movi	r16,8
     fec:	05c00084 	movi	r23,2
     ff0:	003fd306 	br	f40 <__divsf3+0x68>
     ff4:	00c02034 	movhi	r3,128
     ff8:	000d883a 	mov	r6,zero
     ffc:	18ffffc4 	addi	r3,r3,-1
    1000:	013fffc4 	movi	r4,-1
    1004:	21003fcc 	andi	r4,r4,255
    1008:	200895fa 	slli	r4,r4,23
    100c:	30803fcc 	andi	r2,r6,255
    1010:	01802034 	movhi	r6,128
    1014:	31bfffc4 	addi	r6,r6,-1
    1018:	100497fa 	slli	r2,r2,31
    101c:	1986703a 	and	r3,r3,r6
    1020:	1906b03a 	or	r3,r3,r4
    1024:	1884b03a 	or	r2,r3,r2
    1028:	dfc00a17 	ldw	ra,40(sp)
    102c:	df000917 	ldw	fp,36(sp)
    1030:	ddc00817 	ldw	r23,32(sp)
    1034:	dd800717 	ldw	r22,28(sp)
    1038:	dd400617 	ldw	r21,24(sp)
    103c:	dd000517 	ldw	r20,20(sp)
    1040:	dcc00417 	ldw	r19,16(sp)
    1044:	dc800317 	ldw	r18,12(sp)
    1048:	dc400217 	ldw	r17,8(sp)
    104c:	dc000117 	ldw	r16,4(sp)
    1050:	dec00b04 	addi	sp,sp,44
    1054:	f800283a 	ret
    1058:	90002b1e 	bne	r18,zero,1108 <__divsf3+0x230>
    105c:	04000104 	movi	r16,4
    1060:	05c00044 	movi	r23,1
    1064:	003fb606 	br	f40 <__divsf3+0x68>
    1068:	8800251e 	bne	r17,zero,1100 <__divsf3+0x228>
    106c:	01000084 	movi	r4,2
    1070:	00000206 	br	107c <__divsf3+0x1a4>
    1074:	88001a1e 	bne	r17,zero,10e0 <__divsf3+0x208>
    1078:	01000044 	movi	r4,1
    107c:	2420b03a 	or	r16,r4,r16
    1080:	802090ba 	slli	r16,r16,2
    1084:	00c00034 	movhi	r3,0
    1088:	18c42804 	addi	r3,r3,4256
    108c:	80e1883a 	add	r16,r16,r3
    1090:	80c00017 	ldw	r3,0(r16)
    1094:	ad8af03a 	xor	r5,r21,r22
    1098:	a085c83a 	sub	r2,r20,r2
    109c:	1800683a 	jmp	r3
    10a0:	00001158 	cmpnei	zero,zero,69
    10a4:	00001158 	cmpnei	zero,zero,69
    10a8:	000012a8 	cmpgeui	zero,zero,74
    10ac:	00001140 	call	114 <alt_irq_handler+0x28>
    10b0:	000012a8 	cmpgeui	zero,zero,74
    10b4:	00000ff4 	movhi	zero,63
    10b8:	000012a8 	cmpgeui	zero,zero,74
    10bc:	00001140 	call	114 <alt_irq_handler+0x28>
    10c0:	00001158 	cmpnei	zero,zero,69
    10c4:	00001158 	cmpnei	zero,zero,69
    10c8:	00000ff4 	movhi	zero,63
    10cc:	00001140 	call	114 <alt_irq_handler+0x28>
    10d0:	00001248 	cmpgei	zero,zero,73
    10d4:	00001248 	cmpgei	zero,zero,73
    10d8:	00001248 	cmpgei	zero,zero,73
    10dc:	00001274 	movhi	zero,73
    10e0:	8809883a 	mov	r4,r17
    10e4:	00015480 	call	1548 <__clzsi2>
    10e8:	10fffec4 	addi	r3,r2,-5
    10ec:	88e2983a 	sll	r17,r17,r3
    10f0:	00ffe284 	movi	r3,-118
    10f4:	1885c83a 	sub	r2,r3,r2
    10f8:	0009883a 	mov	r4,zero
    10fc:	003f9e06 	br	f78 <__divsf3+0xa0>
    1100:	010000c4 	movi	r4,3
    1104:	003f9c06 	br	f78 <__divsf3+0xa0>
    1108:	9009883a 	mov	r4,r18
    110c:	d9400015 	stw	r5,0(sp)
    1110:	00015480 	call	1548 <__clzsi2>
    1114:	10fffec4 	addi	r3,r2,-5
    1118:	053fe284 	movi	r20,-118
    111c:	90e4983a 	sll	r18,r18,r3
    1120:	a0a9c83a 	sub	r20,r20,r2
    1124:	0021883a 	mov	r16,zero
    1128:	002f883a 	mov	r23,zero
    112c:	d9400017 	ldw	r5,0(sp)
    1130:	003f8306 	br	f40 <__divsf3+0x68>
    1134:	04000304 	movi	r16,12
    1138:	05c000c4 	movi	r23,3
    113c:	003f8006 	br	f40 <__divsf3+0x68>
    1140:	0023883a 	mov	r17,zero
    1144:	e027883a 	mov	r19,fp
    1148:	202f883a 	mov	r23,r4
    114c:	00c00084 	movi	r3,2
    1150:	980b883a 	mov	r5,r19
    1154:	b8c0501e 	bne	r23,r3,1298 <__divsf3+0x3c0>
    1158:	2980004c 	andi	r6,r5,1
    115c:	013fffc4 	movi	r4,-1
    1160:	0007883a 	mov	r3,zero
    1164:	003fa706 	br	1004 <__divsf3+0x12c>
    1168:	013fe084 	movi	r4,-126
    116c:	2089c83a 	sub	r4,r4,r2
    1170:	00c006c4 	movi	r3,27
    1174:	1900500e 	bge	r3,r4,12b8 <__divsf3+0x3e0>
    1178:	9980004c 	andi	r6,r19,1
    117c:	0009883a 	mov	r4,zero
    1180:	0007883a 	mov	r3,zero
    1184:	003f9f06 	br	1004 <__divsf3+0x12c>
    1188:	9080102c 	andhi	r2,r18,64
    118c:	10000226 	beq	r2,zero,1198 <__divsf3+0x2c0>
    1190:	8880102c 	andhi	r2,r17,64
    1194:	10003a26 	beq	r2,zero,1280 <__divsf3+0x3a8>
    1198:	00802034 	movhi	r2,128
    119c:	90c01034 	orhi	r3,r18,64
    11a0:	10bfffc4 	addi	r2,r2,-1
    11a4:	a80d883a 	mov	r6,r21
    11a8:	1886703a 	and	r3,r3,r2
    11ac:	003f9406 	br	1000 <__divsf3+0x128>
    11b0:	9006917a 	slli	r3,r18,5
    11b4:	8822917a 	slli	r17,r17,5
    11b8:	1c402936 	bltu	r3,r17,1260 <__divsf3+0x388>
    11bc:	1c47c83a 	sub	r3,r3,r17
    11c0:	2827883a 	mov	r19,r5
    11c4:	01800684 	movi	r6,26
    11c8:	01000044 	movi	r4,1
    11cc:	180f883a 	mov	r7,r3
    11d0:	2109883a 	add	r4,r4,r4
    11d4:	18c7883a 	add	r3,r3,r3
    11d8:	38000116 	blt	r7,zero,11e0 <__divsf3+0x308>
    11dc:	1c400236 	bltu	r3,r17,11e8 <__divsf3+0x310>
    11e0:	1c47c83a 	sub	r3,r3,r17
    11e4:	21000054 	ori	r4,r4,1
    11e8:	31bfffc4 	addi	r6,r6,-1
    11ec:	303ff71e 	bne	r6,zero,11cc <__divsf3+0x2f4>
    11f0:	1806c03a 	cmpne	r3,r3,zero
    11f4:	1922b03a 	or	r17,r3,r4
    11f8:	11001fc4 	addi	r4,r2,127
    11fc:	013fda0e 	bge	zero,r4,1168 <__divsf3+0x290>
    1200:	88c001cc 	andi	r3,r17,7
    1204:	18000426 	beq	r3,zero,1218 <__divsf3+0x340>
    1208:	894003cc 	andi	r5,r17,15
    120c:	00c00104 	movi	r3,4
    1210:	28c00126 	beq	r5,r3,1218 <__divsf3+0x340>
    1214:	88e3883a 	add	r17,r17,r3
    1218:	88c2002c 	andhi	r3,r17,2048
    121c:	18000426 	beq	r3,zero,1230 <__divsf3+0x358>
    1220:	11002004 	addi	r4,r2,128
    1224:	00be0034 	movhi	r2,63488
    1228:	10bfffc4 	addi	r2,r2,-1
    122c:	88a2703a 	and	r17,r17,r2
    1230:	00803f84 	movi	r2,254
    1234:	1100060e 	bge	r2,r4,1250 <__divsf3+0x378>
    1238:	9980004c 	andi	r6,r19,1
    123c:	013fffc4 	movi	r4,-1
    1240:	0007883a 	mov	r3,zero
    1244:	003f6f06 	br	1004 <__divsf3+0x12c>
    1248:	9023883a 	mov	r17,r18
    124c:	003fbf06 	br	114c <__divsf3+0x274>
    1250:	880691ba 	slli	r3,r17,6
    1254:	9980004c 	andi	r6,r19,1
    1258:	1806d27a 	srli	r3,r3,9
    125c:	003f6906 	br	1004 <__divsf3+0x12c>
    1260:	10bfffc4 	addi	r2,r2,-1
    1264:	2827883a 	mov	r19,r5
    1268:	018006c4 	movi	r6,27
    126c:	0009883a 	mov	r4,zero
    1270:	003fd606 	br	11cc <__divsf3+0x2f4>
    1274:	9080102c 	andhi	r2,r18,64
    1278:	0023883a 	mov	r17,zero
    127c:	103fc626 	beq	r2,zero,1198 <__divsf3+0x2c0>
    1280:	00802034 	movhi	r2,128
    1284:	88c01034 	orhi	r3,r17,64
    1288:	10bfffc4 	addi	r2,r2,-1
    128c:	b00d883a 	mov	r6,r22
    1290:	1886703a 	and	r3,r3,r2
    1294:	003f5a06 	br	1000 <__divsf3+0x128>
    1298:	00c000c4 	movi	r3,3
    129c:	b8c01c26 	beq	r23,r3,1310 <__divsf3+0x438>
    12a0:	00c00044 	movi	r3,1
    12a4:	b8ffd41e 	bne	r23,r3,11f8 <__divsf3+0x320>
    12a8:	2980004c 	andi	r6,r5,1
    12ac:	0009883a 	mov	r4,zero
    12b0:	0007883a 	mov	r3,zero
    12b4:	003f5306 	br	1004 <__divsf3+0x12c>
    12b8:	10802784 	addi	r2,r2,158
    12bc:	8884983a 	sll	r2,r17,r2
    12c0:	8908d83a 	srl	r4,r17,r4
    12c4:	1022c03a 	cmpne	r17,r2,zero
    12c8:	8908b03a 	or	r4,r17,r4
    12cc:	208001cc 	andi	r2,r4,7
    12d0:	10000426 	beq	r2,zero,12e4 <__divsf3+0x40c>
    12d4:	20c003cc 	andi	r3,r4,15
    12d8:	00800104 	movi	r2,4
    12dc:	18800126 	beq	r3,r2,12e4 <__divsf3+0x40c>
    12e0:	2089883a 	add	r4,r4,r2
    12e4:	2081002c 	andhi	r2,r4,1024
    12e8:	10000426 	beq	r2,zero,12fc <__divsf3+0x424>
    12ec:	9980004c 	andi	r6,r19,1
    12f0:	01000044 	movi	r4,1
    12f4:	0007883a 	mov	r3,zero
    12f8:	003f4206 	br	1004 <__divsf3+0x12c>
    12fc:	200691ba 	slli	r3,r4,6
    1300:	9980004c 	andi	r6,r19,1
    1304:	0009883a 	mov	r4,zero
    1308:	1806d27a 	srli	r3,r3,9
    130c:	003f3d06 	br	1004 <__divsf3+0x12c>
    1310:	00802034 	movhi	r2,128
    1314:	88c01034 	orhi	r3,r17,64
    1318:	10bfffc4 	addi	r2,r2,-1
    131c:	9980004c 	andi	r6,r19,1
    1320:	1886703a 	and	r3,r3,r2
    1324:	003f3606 	br	1000 <__divsf3+0x128>

00001328 <__floatunsisf>:
    1328:	defffe04 	addi	sp,sp,-8
    132c:	dc000015 	stw	r16,0(sp)
    1330:	dfc00115 	stw	ra,4(sp)
    1334:	2021883a 	mov	r16,r4
    1338:	20002626 	beq	r4,zero,13d4 <__floatunsisf+0xac>
    133c:	00015480 	call	1548 <__clzsi2>
    1340:	00c02784 	movi	r3,158
    1344:	1887c83a 	sub	r3,r3,r2
    1348:	01002584 	movi	r4,150
    134c:	20c00816 	blt	r4,r3,1370 <__floatunsisf+0x48>
    1350:	01000204 	movi	r4,8
    1354:	2080340e 	bge	r4,r2,1428 <__floatunsisf+0x100>
    1358:	10bffe04 	addi	r2,r2,-8
    135c:	8088983a 	sll	r4,r16,r2
    1360:	00802034 	movhi	r2,128
    1364:	10bfffc4 	addi	r2,r2,-1
    1368:	2088703a 	and	r4,r4,r2
    136c:	00001b06 	br	13dc <__floatunsisf+0xb4>
    1370:	01002644 	movi	r4,153
    1374:	20c02316 	blt	r4,r3,1404 <__floatunsisf+0xdc>
    1378:	01000144 	movi	r4,5
    137c:	2080020e 	bge	r4,r2,1388 <__floatunsisf+0x60>
    1380:	113ffec4 	addi	r4,r2,-5
    1384:	8120983a 	sll	r16,r16,r4
    1388:	017f0034 	movhi	r5,64512
    138c:	297fffc4 	addi	r5,r5,-1
    1390:	810001cc 	andi	r4,r16,7
    1394:	814a703a 	and	r5,r16,r5
    1398:	20000426 	beq	r4,zero,13ac <__floatunsisf+0x84>
    139c:	840003cc 	andi	r16,r16,15
    13a0:	01000104 	movi	r4,4
    13a4:	81000126 	beq	r16,r4,13ac <__floatunsisf+0x84>
    13a8:	290b883a 	add	r5,r5,r4
    13ac:	2901002c 	andhi	r4,r5,1024
    13b0:	20000526 	beq	r4,zero,13c8 <__floatunsisf+0xa0>
    13b4:	00c027c4 	movi	r3,159
    13b8:	1887c83a 	sub	r3,r3,r2
    13bc:	00bf0034 	movhi	r2,64512
    13c0:	10bfffc4 	addi	r2,r2,-1
    13c4:	288a703a 	and	r5,r5,r2
    13c8:	280891ba 	slli	r4,r5,6
    13cc:	2008d27a 	srli	r4,r4,9
    13d0:	00000206 	br	13dc <__floatunsisf+0xb4>
    13d4:	0007883a 	mov	r3,zero
    13d8:	0009883a 	mov	r4,zero
    13dc:	18c03fcc 	andi	r3,r3,255
    13e0:	180695fa 	slli	r3,r3,23
    13e4:	00802034 	movhi	r2,128
    13e8:	10bfffc4 	addi	r2,r2,-1
    13ec:	2084703a 	and	r2,r4,r2
    13f0:	10c4b03a 	or	r2,r2,r3
    13f4:	dfc00117 	ldw	ra,4(sp)
    13f8:	dc000017 	ldw	r16,0(sp)
    13fc:	dec00204 	addi	sp,sp,8
    1400:	f800283a 	ret
    1404:	01400144 	movi	r5,5
    1408:	110006c4 	addi	r4,r2,27
    140c:	8108983a 	sll	r4,r16,r4
    1410:	288dc83a 	sub	r6,r5,r2
    1414:	81a0d83a 	srl	r16,r16,r6
    1418:	2008c03a 	cmpne	r4,r4,zero
    141c:	2420b03a 	or	r16,r4,r16
    1420:	28bfd90e 	bge	r5,r2,1388 <__floatunsisf+0x60>
    1424:	003fd606 	br	1380 <__floatunsisf+0x58>
    1428:	01402034 	movhi	r5,128
    142c:	297fffc4 	addi	r5,r5,-1
    1430:	8148703a 	and	r4,r16,r5
    1434:	003fe906 	br	13dc <__floatunsisf+0xb4>

00001438 <__extendsfdf2>:
    1438:	200ad5fa 	srli	r5,r4,23
    143c:	defffd04 	addi	sp,sp,-12
    1440:	dc400115 	stw	r17,4(sp)
    1444:	29403fcc 	andi	r5,r5,255
    1448:	29800044 	addi	r6,r5,1
    144c:	04402034 	movhi	r17,128
    1450:	dc000015 	stw	r16,0(sp)
    1454:	8c7fffc4 	addi	r17,r17,-1
    1458:	dfc00215 	stw	ra,8(sp)
    145c:	31803fcc 	andi	r6,r6,255
    1460:	00800044 	movi	r2,1
    1464:	8922703a 	and	r17,r17,r4
    1468:	2020d7fa 	srli	r16,r4,31
    146c:	1180110e 	bge	r2,r6,14b4 <__extendsfdf2+0x7c>
    1470:	880ed0fa 	srli	r7,r17,3
    1474:	8822977a 	slli	r17,r17,29
    1478:	2940e004 	addi	r5,r5,896
    147c:	2941ffcc 	andi	r5,r5,2047
    1480:	280c953a 	slli	r6,r5,20
    1484:	01400434 	movhi	r5,16
    1488:	800697fa 	slli	r3,r16,31
    148c:	297fffc4 	addi	r5,r5,-1
    1490:	394a703a 	and	r5,r7,r5
    1494:	298ab03a 	or	r5,r5,r6
    1498:	8805883a 	mov	r2,r17
    149c:	28c6b03a 	or	r3,r5,r3
    14a0:	dfc00217 	ldw	ra,8(sp)
    14a4:	dc400117 	ldw	r17,4(sp)
    14a8:	dc000017 	ldw	r16,0(sp)
    14ac:	dec00304 	addi	sp,sp,12
    14b0:	f800283a 	ret
    14b4:	2800111e 	bne	r5,zero,14fc <__extendsfdf2+0xc4>
    14b8:	88001c26 	beq	r17,zero,152c <__extendsfdf2+0xf4>
    14bc:	8809883a 	mov	r4,r17
    14c0:	00015480 	call	1548 <__clzsi2>
    14c4:	00c00284 	movi	r3,10
    14c8:	18801b16 	blt	r3,r2,1538 <__extendsfdf2+0x100>
    14cc:	01c002c4 	movi	r7,11
    14d0:	388fc83a 	sub	r7,r7,r2
    14d4:	10c00544 	addi	r3,r2,21
    14d8:	89ced83a 	srl	r7,r17,r7
    14dc:	88e2983a 	sll	r17,r17,r3
    14e0:	0180e244 	movi	r6,905
    14e4:	308bc83a 	sub	r5,r6,r2
    14e8:	01800434 	movhi	r6,16
    14ec:	31bfffc4 	addi	r6,r6,-1
    14f0:	398e703a 	and	r7,r7,r6
    14f4:	2941ffcc 	andi	r5,r5,2047
    14f8:	003fe006 	br	147c <__extendsfdf2+0x44>
    14fc:	88000826 	beq	r17,zero,1520 <__extendsfdf2+0xe8>
    1500:	880ed0fa 	srli	r7,r17,3
    1504:	00800434 	movhi	r2,16
    1508:	10bfffc4 	addi	r2,r2,-1
    150c:	39c00234 	orhi	r7,r7,8
    1510:	8822977a 	slli	r17,r17,29
    1514:	388e703a 	and	r7,r7,r2
    1518:	0141ffc4 	movi	r5,2047
    151c:	003fd706 	br	147c <__extendsfdf2+0x44>
    1520:	0141ffc4 	movi	r5,2047
    1524:	000f883a 	mov	r7,zero
    1528:	003fd406 	br	147c <__extendsfdf2+0x44>
    152c:	000b883a 	mov	r5,zero
    1530:	000f883a 	mov	r7,zero
    1534:	003fd106 	br	147c <__extendsfdf2+0x44>
    1538:	11fffd44 	addi	r7,r2,-11
    153c:	89ce983a 	sll	r7,r17,r7
    1540:	0023883a 	mov	r17,zero
    1544:	003fe606 	br	14e0 <__extendsfdf2+0xa8>

00001548 <__clzsi2>:
    1548:	00bfffd4 	movui	r2,65535
    154c:	11000b36 	bltu	r2,r4,157c <__clzsi2+0x34>
    1550:	00803fc4 	movi	r2,255
    1554:	1100122e 	bgeu	r2,r4,15a0 <__clzsi2+0x58>
    1558:	00c00204 	movi	r3,8
    155c:	01400604 	movi	r5,24
    1560:	20c8d83a 	srl	r4,r4,r3
    1564:	00800074 	movhi	r2,1
    1568:	1088c404 	addi	r2,r2,8976
    156c:	1109883a 	add	r4,r2,r4
    1570:	20800003 	ldbu	r2,0(r4)
    1574:	2885c83a 	sub	r2,r5,r2
    1578:	f800283a 	ret
    157c:	00804034 	movhi	r2,256
    1580:	10bfffc4 	addi	r2,r2,-1
    1584:	11000336 	bltu	r2,r4,1594 <__clzsi2+0x4c>
    1588:	00c00404 	movi	r3,16
    158c:	180b883a 	mov	r5,r3
    1590:	003ff306 	br	1560 <__clzsi2+0x18>
    1594:	00c00604 	movi	r3,24
    1598:	01400204 	movi	r5,8
    159c:	003ff006 	br	1560 <__clzsi2+0x18>
    15a0:	0007883a 	mov	r3,zero
    15a4:	01400804 	movi	r5,32
    15a8:	003fed06 	br	1560 <__clzsi2+0x18>

000015ac <_printf_r>:
    15ac:	defffd04 	addi	sp,sp,-12
    15b0:	dfc00015 	stw	ra,0(sp)
    15b4:	d9800115 	stw	r6,4(sp)
    15b8:	d9c00215 	stw	r7,8(sp)
    15bc:	280d883a 	mov	r6,r5
    15c0:	21400217 	ldw	r5,8(r4)
    15c4:	d9c00104 	addi	r7,sp,4
    15c8:	00017680 	call	1768 <___vfprintf_internal_r>
    15cc:	dfc00017 	ldw	ra,0(sp)
    15d0:	dec00304 	addi	sp,sp,12
    15d4:	f800283a 	ret

000015d8 <printf>:
    15d8:	defffc04 	addi	sp,sp,-16
    15dc:	dfc00015 	stw	ra,0(sp)
    15e0:	d9400115 	stw	r5,4(sp)
    15e4:	d9800215 	stw	r6,8(sp)
    15e8:	d9c00315 	stw	r7,12(sp)
    15ec:	00800074 	movhi	r2,1
    15f0:	10917b04 	addi	r2,r2,17900
    15f4:	10800017 	ldw	r2,0(r2)
    15f8:	200b883a 	mov	r5,r4
    15fc:	d9800104 	addi	r6,sp,4
    1600:	11000217 	ldw	r4,8(r2)
    1604:	00037c00 	call	37c0 <__vfprintf_internal>
    1608:	dfc00017 	ldw	ra,0(sp)
    160c:	dec00404 	addi	sp,sp,16
    1610:	f800283a 	ret

00001614 <_puts_r>:
    1614:	defff604 	addi	sp,sp,-40
    1618:	dc000715 	stw	r16,28(sp)
    161c:	2021883a 	mov	r16,r4
    1620:	2809883a 	mov	r4,r5
    1624:	dc400815 	stw	r17,32(sp)
    1628:	dfc00915 	stw	ra,36(sp)
    162c:	2823883a 	mov	r17,r5
    1630:	00016d00 	call	16d0 <strlen>
    1634:	81400217 	ldw	r5,8(r16)
    1638:	11000044 	addi	r4,r2,1
    163c:	d8800115 	stw	r2,4(sp)
    1640:	00800074 	movhi	r2,1
    1644:	2980030b 	ldhu	r6,12(r5)
    1648:	10890404 	addi	r2,r2,9232
    164c:	d8800215 	stw	r2,8(sp)
    1650:	00800044 	movi	r2,1
    1654:	d8800315 	stw	r2,12(sp)
    1658:	00800084 	movi	r2,2
    165c:	d8800515 	stw	r2,20(sp)
    1660:	dc400015 	stw	r17,0(sp)
    1664:	d9000615 	stw	r4,24(sp)
    1668:	dec00415 	stw	sp,16(sp)
    166c:	3088000c 	andi	r2,r6,8192
    1670:	1000061e 	bne	r2,zero,168c <_puts_r+0x78>
    1674:	29001917 	ldw	r4,100(r5)
    1678:	00b7ffc4 	movi	r2,-8193
    167c:	31880014 	ori	r6,r6,8192
    1680:	2084703a 	and	r2,r4,r2
    1684:	2980030d 	sth	r6,12(r5)
    1688:	28801915 	stw	r2,100(r5)
    168c:	8009883a 	mov	r4,r16
    1690:	d9800404 	addi	r6,sp,16
    1694:	0005d9c0 	call	5d9c <__sfvwrite_r>
    1698:	1000061e 	bne	r2,zero,16b4 <_puts_r+0xa0>
    169c:	00800284 	movi	r2,10
    16a0:	dfc00917 	ldw	ra,36(sp)
    16a4:	dc400817 	ldw	r17,32(sp)
    16a8:	dc000717 	ldw	r16,28(sp)
    16ac:	dec00a04 	addi	sp,sp,40
    16b0:	f800283a 	ret
    16b4:	00bfffc4 	movi	r2,-1
    16b8:	003ff906 	br	16a0 <_puts_r+0x8c>

000016bc <puts>:
    16bc:	00800074 	movhi	r2,1
    16c0:	10917b04 	addi	r2,r2,17900
    16c4:	200b883a 	mov	r5,r4
    16c8:	11000017 	ldw	r4,0(r2)
    16cc:	00016141 	jmpi	1614 <_puts_r>

000016d0 <strlen>:
    16d0:	208000cc 	andi	r2,r4,3
    16d4:	10002026 	beq	r2,zero,1758 <strlen+0x88>
    16d8:	20800007 	ldb	r2,0(r4)
    16dc:	10002026 	beq	r2,zero,1760 <strlen+0x90>
    16e0:	2005883a 	mov	r2,r4
    16e4:	00000206 	br	16f0 <strlen+0x20>
    16e8:	10c00007 	ldb	r3,0(r2)
    16ec:	18001826 	beq	r3,zero,1750 <strlen+0x80>
    16f0:	10800044 	addi	r2,r2,1
    16f4:	10c000cc 	andi	r3,r2,3
    16f8:	183ffb1e 	bne	r3,zero,16e8 <strlen+0x18>
    16fc:	10c00017 	ldw	r3,0(r2)
    1700:	01ffbff4 	movhi	r7,65279
    1704:	39ffbfc4 	addi	r7,r7,-257
    1708:	00ca303a 	nor	r5,zero,r3
    170c:	01a02074 	movhi	r6,32897
    1710:	19c7883a 	add	r3,r3,r7
    1714:	31a02004 	addi	r6,r6,-32640
    1718:	1946703a 	and	r3,r3,r5
    171c:	1986703a 	and	r3,r3,r6
    1720:	1800091e 	bne	r3,zero,1748 <strlen+0x78>
    1724:	10800104 	addi	r2,r2,4
    1728:	10c00017 	ldw	r3,0(r2)
    172c:	19cb883a 	add	r5,r3,r7
    1730:	00c6303a 	nor	r3,zero,r3
    1734:	28c6703a 	and	r3,r5,r3
    1738:	1986703a 	and	r3,r3,r6
    173c:	183ff926 	beq	r3,zero,1724 <strlen+0x54>
    1740:	00000106 	br	1748 <strlen+0x78>
    1744:	10800044 	addi	r2,r2,1
    1748:	10c00007 	ldb	r3,0(r2)
    174c:	183ffd1e 	bne	r3,zero,1744 <strlen+0x74>
    1750:	1105c83a 	sub	r2,r2,r4
    1754:	f800283a 	ret
    1758:	2005883a 	mov	r2,r4
    175c:	003fe706 	br	16fc <strlen+0x2c>
    1760:	0005883a 	mov	r2,zero
    1764:	f800283a 	ret

00001768 <___vfprintf_internal_r>:
    1768:	deffb604 	addi	sp,sp,-296
    176c:	dfc04915 	stw	ra,292(sp)
    1770:	ddc04715 	stw	r23,284(sp)
    1774:	dd804615 	stw	r22,280(sp)
    1778:	202f883a 	mov	r23,r4
    177c:	282d883a 	mov	r22,r5
    1780:	d9802a15 	stw	r6,168(sp)
    1784:	d9c02d15 	stw	r7,180(sp)
    1788:	df004815 	stw	fp,288(sp)
    178c:	dd404515 	stw	r21,276(sp)
    1790:	dd004415 	stw	r20,272(sp)
    1794:	dcc04315 	stw	r19,268(sp)
    1798:	dc804215 	stw	r18,264(sp)
    179c:	dc404115 	stw	r17,260(sp)
    17a0:	dc004015 	stw	r16,256(sp)
    17a4:	000649c0 	call	649c <_localeconv_r>
    17a8:	10800017 	ldw	r2,0(r2)
    17ac:	1009883a 	mov	r4,r2
    17b0:	d8803515 	stw	r2,212(sp)
    17b4:	00016d00 	call	16d0 <strlen>
    17b8:	d8803815 	stw	r2,224(sp)
    17bc:	b8000226 	beq	r23,zero,17c8 <___vfprintf_internal_r+0x60>
    17c0:	b8800e17 	ldw	r2,56(r23)
    17c4:	1000e226 	beq	r2,zero,1b50 <___vfprintf_internal_r+0x3e8>
    17c8:	b080030b 	ldhu	r2,12(r22)
    17cc:	10c8000c 	andi	r3,r2,8192
    17d0:	1800061e 	bne	r3,zero,17ec <___vfprintf_internal_r+0x84>
    17d4:	b1001917 	ldw	r4,100(r22)
    17d8:	00f7ffc4 	movi	r3,-8193
    17dc:	10880014 	ori	r2,r2,8192
    17e0:	20c6703a 	and	r3,r4,r3
    17e4:	b080030d 	sth	r2,12(r22)
    17e8:	b0c01915 	stw	r3,100(r22)
    17ec:	10c0020c 	andi	r3,r2,8
    17f0:	1800a826 	beq	r3,zero,1a94 <___vfprintf_internal_r+0x32c>
    17f4:	b0c00417 	ldw	r3,16(r22)
    17f8:	1800a626 	beq	r3,zero,1a94 <___vfprintf_internal_r+0x32c>
    17fc:	1080068c 	andi	r2,r2,26
    1800:	00c00284 	movi	r3,10
    1804:	10c0ab26 	beq	r2,r3,1ab4 <___vfprintf_internal_r+0x34c>
    1808:	d8801e04 	addi	r2,sp,120
    180c:	d8c01dc4 	addi	r3,sp,119
    1810:	d9000404 	addi	r4,sp,16
    1814:	05000074 	movhi	r20,1
    1818:	10cbc83a 	sub	r5,r2,r3
    181c:	a5091584 	addi	r20,r20,9302
    1820:	d8802815 	stw	r2,160(sp)
    1824:	d8c02915 	stw	r3,164(sp)
    1828:	d9001e15 	stw	r4,120(sp)
    182c:	d8002015 	stw	zero,128(sp)
    1830:	d8001f15 	stw	zero,124(sp)
    1834:	d8003315 	stw	zero,204(sp)
    1838:	d8003715 	stw	zero,220(sp)
    183c:	d8003915 	stw	zero,228(sp)
    1840:	2011883a 	mov	r8,r4
    1844:	d8003b15 	stw	zero,236(sp)
    1848:	d8003a15 	stw	zero,232(sp)
    184c:	d8002f15 	stw	zero,188(sp)
    1850:	d9403c15 	stw	r5,240(sp)
    1854:	d8c02a17 	ldw	r3,168(sp)
    1858:	18800007 	ldb	r2,0(r3)
    185c:	1001f226 	beq	r2,zero,2028 <___vfprintf_internal_r+0x8c0>
    1860:	00c00944 	movi	r3,37
    1864:	dc002a17 	ldw	r16,168(sp)
    1868:	10c0021e 	bne	r2,r3,1874 <___vfprintf_internal_r+0x10c>
    186c:	00001606 	br	18c8 <___vfprintf_internal_r+0x160>
    1870:	10c08526 	beq	r2,r3,1a88 <___vfprintf_internal_r+0x320>
    1874:	84000044 	addi	r16,r16,1
    1878:	80800007 	ldb	r2,0(r16)
    187c:	103ffc1e 	bne	r2,zero,1870 <___vfprintf_internal_r+0x108>
    1880:	d9002a17 	ldw	r4,168(sp)
    1884:	8123c83a 	sub	r17,r16,r4
    1888:	88000f26 	beq	r17,zero,18c8 <___vfprintf_internal_r+0x160>
    188c:	d8802a17 	ldw	r2,168(sp)
    1890:	d8c02017 	ldw	r3,128(sp)
    1894:	44400115 	stw	r17,4(r8)
    1898:	40800015 	stw	r2,0(r8)
    189c:	d8801f17 	ldw	r2,124(sp)
    18a0:	1c47883a 	add	r3,r3,r17
    18a4:	d8c02015 	stw	r3,128(sp)
    18a8:	10800044 	addi	r2,r2,1
    18ac:	d8801f15 	stw	r2,124(sp)
    18b0:	00c001c4 	movi	r3,7
    18b4:	18809416 	blt	r3,r2,1b08 <___vfprintf_internal_r+0x3a0>
    18b8:	42000204 	addi	r8,r8,8
    18bc:	d8c02f17 	ldw	r3,188(sp)
    18c0:	1c47883a 	add	r3,r3,r17
    18c4:	d8c02f15 	stw	r3,188(sp)
    18c8:	80800007 	ldb	r2,0(r16)
    18cc:	10009526 	beq	r2,zero,1b24 <___vfprintf_internal_r+0x3bc>
    18d0:	80800044 	addi	r2,r16,1
    18d4:	84000047 	ldb	r16,1(r16)
    18d8:	0027883a 	mov	r19,zero
    18dc:	0039883a 	mov	fp,zero
    18e0:	dcc02b05 	stb	r19,172(sp)
    18e4:	d8002785 	stb	zero,158(sp)
    18e8:	027fffc4 	movi	r9,-1
    18ec:	d8002e15 	stw	zero,184(sp)
    18f0:	04401604 	movi	r17,88
    18f4:	04800244 	movi	r18,9
    18f8:	da002a15 	stw	r8,168(sp)
    18fc:	e027883a 	mov	r19,fp
    1900:	17000044 	addi	fp,r2,1
    1904:	80bff804 	addi	r2,r16,-32
    1908:	8882ed36 	bltu	r17,r2,24c0 <___vfprintf_internal_r+0xd58>
    190c:	100490ba 	slli	r2,r2,2
    1910:	01000034 	movhi	r4,0
    1914:	21064904 	addi	r4,r4,6436
    1918:	1105883a 	add	r2,r2,r4
    191c:	10800017 	ldw	r2,0(r2)
    1920:	1000683a 	jmp	r2
    1924:	00002308 	cmpgei	zero,zero,140
    1928:	000024c0 	call	24c <main+0x58>
    192c:	000024c0 	call	24c <main+0x58>
    1930:	00002324 	muli	zero,zero,140
    1934:	000024c0 	call	24c <main+0x58>
    1938:	000024c0 	call	24c <main+0x58>
    193c:	000024c0 	call	24c <main+0x58>
    1940:	000024c0 	call	24c <main+0x58>
    1944:	000024c0 	call	24c <main+0x58>
    1948:	000024c0 	call	24c <main+0x58>
    194c:	00002334 	movhi	zero,140
    1950:	0000235c 	xori	zero,zero,141
    1954:	000024c0 	call	24c <main+0x58>
    1958:	00001b5c 	xori	zero,zero,109
    195c:	00001b6c 	andhi	zero,zero,109
    1960:	000024c0 	call	24c <main+0x58>
    1964:	00001bbc 	xorhi	zero,zero,110
    1968:	00001bcc 	andi	zero,zero,111
    196c:	00001bcc 	andi	zero,zero,111
    1970:	00001bcc 	andi	zero,zero,111
    1974:	00001bcc 	andi	zero,zero,111
    1978:	00001bcc 	andi	zero,zero,111
    197c:	00001bcc 	andi	zero,zero,111
    1980:	00001bcc 	andi	zero,zero,111
    1984:	00001bcc 	andi	zero,zero,111
    1988:	00001bcc 	andi	zero,zero,111
    198c:	000024c0 	call	24c <main+0x58>
    1990:	000024c0 	call	24c <main+0x58>
    1994:	000024c0 	call	24c <main+0x58>
    1998:	000024c0 	call	24c <main+0x58>
    199c:	000024c0 	call	24c <main+0x58>
    19a0:	000024c0 	call	24c <main+0x58>
    19a4:	000024c0 	call	24c <main+0x58>
    19a8:	000024c0 	call	24c <main+0x58>
    19ac:	000024c0 	call	24c <main+0x58>
    19b0:	000024c0 	call	24c <main+0x58>
    19b4:	00001c10 	cmplti	zero,zero,112
    19b8:	00002030 	cmpltui	zero,zero,128
    19bc:	000024c0 	call	24c <main+0x58>
    19c0:	00002030 	cmpltui	zero,zero,128
    19c4:	000024c0 	call	24c <main+0x58>
    19c8:	000024c0 	call	24c <main+0x58>
    19cc:	000024c0 	call	24c <main+0x58>
    19d0:	000024c0 	call	24c <main+0x58>
    19d4:	000020d8 	cmpnei	zero,zero,131
    19d8:	000024c0 	call	24c <main+0x58>
    19dc:	000024c0 	call	24c <main+0x58>
    19e0:	000020e8 	cmpgeui	zero,zero,131
    19e4:	000024c0 	call	24c <main+0x58>
    19e8:	000024c0 	call	24c <main+0x58>
    19ec:	000024c0 	call	24c <main+0x58>
    19f0:	000024c0 	call	24c <main+0x58>
    19f4:	000024c0 	call	24c <main+0x58>
    19f8:	00002128 	cmpgeui	zero,zero,132
    19fc:	000024c0 	call	24c <main+0x58>
    1a00:	000024c0 	call	24c <main+0x58>
    1a04:	00002254 	movui	zero,137
    1a08:	000024c0 	call	24c <main+0x58>
    1a0c:	000024c0 	call	24c <main+0x58>
    1a10:	000024c0 	call	24c <main+0x58>
    1a14:	000024c0 	call	24c <main+0x58>
    1a18:	000024c0 	call	24c <main+0x58>
    1a1c:	000024c0 	call	24c <main+0x58>
    1a20:	000024c0 	call	24c <main+0x58>
    1a24:	000024c0 	call	24c <main+0x58>
    1a28:	000024c0 	call	24c <main+0x58>
    1a2c:	000024c0 	call	24c <main+0x58>
    1a30:	000022bc 	xorhi	zero,zero,138
    1a34:	000021a8 	cmpgeui	zero,zero,134
    1a38:	00002030 	cmpltui	zero,zero,128
    1a3c:	00002030 	cmpltui	zero,zero,128
    1a40:	00002030 	cmpltui	zero,zero,128
    1a44:	000021ec 	andhi	zero,zero,135
    1a48:	000021a8 	cmpgeui	zero,zero,134
    1a4c:	000024c0 	call	24c <main+0x58>
    1a50:	000024c0 	call	24c <main+0x58>
    1a54:	000021fc 	xorhi	zero,zero,135
    1a58:	000024c0 	call	24c <main+0x58>
    1a5c:	00002214 	movui	zero,136
    1a60:	00002484 	movi	zero,146
    1a64:	0000215c 	xori	zero,zero,133
    1a68:	00002438 	rdprs	zero,zero,144
    1a6c:	000024c0 	call	24c <main+0x58>
    1a70:	00002370 	cmpltui	zero,zero,141
    1a74:	000024c0 	call	24c <main+0x58>
    1a78:	00002448 	cmpgei	zero,zero,145
    1a7c:	000024c0 	call	24c <main+0x58>
    1a80:	000024c0 	call	24c <main+0x58>
    1a84:	000023ec 	andhi	zero,zero,143
    1a88:	d9402a17 	ldw	r5,168(sp)
    1a8c:	8163c83a 	sub	r17,r16,r5
    1a90:	003f7d06 	br	1888 <___vfprintf_internal_r+0x120>
    1a94:	b809883a 	mov	r4,r23
    1a98:	b00b883a 	mov	r5,r22
    1a9c:	00038a00 	call	38a0 <__swsetup_r>
    1aa0:	10000c1e 	bne	r2,zero,1ad4 <___vfprintf_internal_r+0x36c>
    1aa4:	b080030b 	ldhu	r2,12(r22)
    1aa8:	00c00284 	movi	r3,10
    1aac:	1080068c 	andi	r2,r2,26
    1ab0:	10ff551e 	bne	r2,r3,1808 <___vfprintf_internal_r+0xa0>
    1ab4:	b080038f 	ldh	r2,14(r22)
    1ab8:	103f5316 	blt	r2,zero,1808 <___vfprintf_internal_r+0xa0>
    1abc:	d9802a17 	ldw	r6,168(sp)
    1ac0:	d9c02d17 	ldw	r7,180(sp)
    1ac4:	b809883a 	mov	r4,r23
    1ac8:	b00b883a 	mov	r5,r22
    1acc:	00037e40 	call	37e4 <__sbprintf>
    1ad0:	00000106 	br	1ad8 <___vfprintf_internal_r+0x370>
    1ad4:	00bfffc4 	movi	r2,-1
    1ad8:	dfc04917 	ldw	ra,292(sp)
    1adc:	df004817 	ldw	fp,288(sp)
    1ae0:	ddc04717 	ldw	r23,284(sp)
    1ae4:	dd804617 	ldw	r22,280(sp)
    1ae8:	dd404517 	ldw	r21,276(sp)
    1aec:	dd004417 	ldw	r20,272(sp)
    1af0:	dcc04317 	ldw	r19,268(sp)
    1af4:	dc804217 	ldw	r18,264(sp)
    1af8:	dc404117 	ldw	r17,260(sp)
    1afc:	dc004017 	ldw	r16,256(sp)
    1b00:	dec04a04 	addi	sp,sp,296
    1b04:	f800283a 	ret
    1b08:	b809883a 	mov	r4,r23
    1b0c:	b00b883a 	mov	r5,r22
    1b10:	d9801e04 	addi	r6,sp,120
    1b14:	0008c380 	call	8c38 <__sprint_r>
    1b18:	1000081e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    1b1c:	da000404 	addi	r8,sp,16
    1b20:	003f6606 	br	18bc <___vfprintf_internal_r+0x154>
    1b24:	d8802017 	ldw	r2,128(sp)
    1b28:	10000426 	beq	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    1b2c:	b809883a 	mov	r4,r23
    1b30:	b00b883a 	mov	r5,r22
    1b34:	d9801e04 	addi	r6,sp,120
    1b38:	0008c380 	call	8c38 <__sprint_r>
    1b3c:	b080030b 	ldhu	r2,12(r22)
    1b40:	1080100c 	andi	r2,r2,64
    1b44:	103fe31e 	bne	r2,zero,1ad4 <___vfprintf_internal_r+0x36c>
    1b48:	d8802f17 	ldw	r2,188(sp)
    1b4c:	003fe206 	br	1ad8 <___vfprintf_internal_r+0x370>
    1b50:	b809883a 	mov	r4,r23
    1b54:	00059380 	call	5938 <__sinit>
    1b58:	003f1b06 	br	17c8 <___vfprintf_internal_r+0x60>
    1b5c:	e005883a 	mov	r2,fp
    1b60:	9cc00114 	ori	r19,r19,4
    1b64:	e4000007 	ldb	r16,0(fp)
    1b68:	003f6506 	br	1900 <___vfprintf_internal_r+0x198>
    1b6c:	e4000007 	ldb	r16,0(fp)
    1b70:	01000a84 	movi	r4,42
    1b74:	e0800044 	addi	r2,fp,1
    1b78:	8106ff26 	beq	r16,r4,3778 <___vfprintf_internal_r+0x2010>
    1b7c:	857ff404 	addi	r21,r16,-48
    1b80:	1039883a 	mov	fp,r2
    1b84:	0013883a 	mov	r9,zero
    1b88:	957f5e36 	bltu	r18,r21,1904 <___vfprintf_internal_r+0x19c>
    1b8c:	0009883a 	mov	r4,zero
    1b90:	01400284 	movi	r5,10
    1b94:	0000eb00 	call	eb0 <__mulsi3>
    1b98:	e4000007 	ldb	r16,0(fp)
    1b9c:	a889883a 	add	r4,r21,r2
    1ba0:	e7000044 	addi	fp,fp,1
    1ba4:	857ff404 	addi	r21,r16,-48
    1ba8:	957ff92e 	bgeu	r18,r21,1b90 <___vfprintf_internal_r+0x428>
    1bac:	2013883a 	mov	r9,r4
    1bb0:	203f540e 	bge	r4,zero,1904 <___vfprintf_internal_r+0x19c>
    1bb4:	027fffc4 	movi	r9,-1
    1bb8:	003f5206 	br	1904 <___vfprintf_internal_r+0x19c>
    1bbc:	9cc02014 	ori	r19,r19,128
    1bc0:	e005883a 	mov	r2,fp
    1bc4:	e4000007 	ldb	r16,0(fp)
    1bc8:	003f4d06 	br	1900 <___vfprintf_internal_r+0x198>
    1bcc:	857ff404 	addi	r21,r16,-48
    1bd0:	d8002e15 	stw	zero,184(sp)
    1bd4:	0009883a 	mov	r4,zero
    1bd8:	da402c15 	stw	r9,176(sp)
    1bdc:	e021883a 	mov	r16,fp
    1be0:	01400284 	movi	r5,10
    1be4:	0000eb00 	call	eb0 <__mulsi3>
    1be8:	81400007 	ldb	r5,0(r16)
    1bec:	1549883a 	add	r4,r2,r21
    1bf0:	e7000044 	addi	fp,fp,1
    1bf4:	2d7ff404 	addi	r21,r5,-48
    1bf8:	e021883a 	mov	r16,fp
    1bfc:	957ff82e 	bgeu	r18,r21,1be0 <___vfprintf_internal_r+0x478>
    1c00:	2821883a 	mov	r16,r5
    1c04:	d9002e15 	stw	r4,184(sp)
    1c08:	da402c17 	ldw	r9,176(sp)
    1c0c:	003f3d06 	br	1904 <___vfprintf_internal_r+0x19c>
    1c10:	da002a17 	ldw	r8,168(sp)
    1c14:	df002a15 	stw	fp,168(sp)
    1c18:	9839883a 	mov	fp,r19
    1c1c:	dcc02b03 	ldbu	r19,172(sp)
    1c20:	e7000414 	ori	fp,fp,16
    1c24:	e080080c 	andi	r2,fp,32
    1c28:	dcc02785 	stb	r19,158(sp)
    1c2c:	d8c02d17 	ldw	r3,180(sp)
    1c30:	10016526 	beq	r2,zero,21c8 <___vfprintf_internal_r+0xa60>
    1c34:	d9002d17 	ldw	r4,180(sp)
    1c38:	18800117 	ldw	r2,4(r3)
    1c3c:	1c800017 	ldw	r18,0(r3)
    1c40:	21000204 	addi	r4,r4,8
    1c44:	d9002d15 	stw	r4,180(sp)
    1c48:	102b883a 	mov	r21,r2
    1c4c:	10044516 	blt	r2,zero,2d64 <___vfprintf_internal_r+0x15fc>
    1c50:	dcc02783 	ldbu	r19,158(sp)
    1c54:	da403215 	stw	r9,200(sp)
    1c58:	00800044 	movi	r2,1
    1c5c:	9546b03a 	or	r3,r18,r21
    1c60:	48000216 	blt	r9,zero,1c6c <___vfprintf_internal_r+0x504>
    1c64:	013fdfc4 	movi	r4,-129
    1c68:	e138703a 	and	fp,fp,r4
    1c6c:	1802211e 	bne	r3,zero,24f4 <___vfprintf_internal_r+0xd8c>
    1c70:	48031326 	beq	r9,zero,28c0 <___vfprintf_internal_r+0x1158>
    1c74:	10803fcc 	andi	r2,r2,255
    1c78:	00c00044 	movi	r3,1
    1c7c:	10c24126 	beq	r2,r3,2584 <___vfprintf_internal_r+0xe1c>
    1c80:	00c00084 	movi	r3,2
    1c84:	10c33426 	beq	r2,r3,2958 <___vfprintf_internal_r+0x11f0>
    1c88:	d8c01e04 	addi	r3,sp,120
    1c8c:	9008d0fa 	srli	r4,r18,3
    1c90:	a80a977a 	slli	r5,r21,29
    1c94:	a82ad0fa 	srli	r21,r21,3
    1c98:	948001cc 	andi	r18,r18,7
    1c9c:	90800c04 	addi	r2,r18,48
    1ca0:	18ffffc4 	addi	r3,r3,-1
    1ca4:	2924b03a 	or	r18,r5,r4
    1ca8:	18800005 	stb	r2,0(r3)
    1cac:	9548b03a 	or	r4,r18,r21
    1cb0:	203ff61e 	bne	r4,zero,1c8c <___vfprintf_internal_r+0x524>
    1cb4:	e100004c 	andi	r4,fp,1
    1cb8:	d8c03115 	stw	r3,196(sp)
    1cbc:	2003961e 	bne	r4,zero,2b18 <___vfprintf_internal_r+0x13b0>
    1cc0:	d8802817 	ldw	r2,160(sp)
    1cc4:	10e3c83a 	sub	r17,r2,r3
    1cc8:	8805883a 	mov	r2,r17
    1ccc:	8a40010e 	bge	r17,r9,1cd4 <___vfprintf_internal_r+0x56c>
    1cd0:	4805883a 	mov	r2,r9
    1cd4:	d8802b15 	stw	r2,172(sp)
    1cd8:	d8003415 	stw	zero,208(sp)
    1cdc:	98803fcc 	andi	r2,r19,255
    1ce0:	1080201c 	xori	r2,r2,128
    1ce4:	10bfe004 	addi	r2,r2,-128
    1ce8:	10000326 	beq	r2,zero,1cf8 <___vfprintf_internal_r+0x590>
    1cec:	d8c02b17 	ldw	r3,172(sp)
    1cf0:	18c00044 	addi	r3,r3,1
    1cf4:	d8c02b15 	stw	r3,172(sp)
    1cf8:	e0c0008c 	andi	r3,fp,2
    1cfc:	d8c02c15 	stw	r3,176(sp)
    1d00:	18000326 	beq	r3,zero,1d10 <___vfprintf_internal_r+0x5a8>
    1d04:	d8c02b17 	ldw	r3,172(sp)
    1d08:	18c00084 	addi	r3,r3,2
    1d0c:	d8c02b15 	stw	r3,172(sp)
    1d10:	e0c0210c 	andi	r3,fp,132
    1d14:	d8c03015 	stw	r3,192(sp)
    1d18:	1801f41e 	bne	r3,zero,24ec <___vfprintf_internal_r+0xd84>
    1d1c:	d9002e17 	ldw	r4,184(sp)
    1d20:	d8c02b17 	ldw	r3,172(sp)
    1d24:	20ebc83a 	sub	r21,r4,r3
    1d28:	0541f00e 	bge	zero,r21,24ec <___vfprintf_internal_r+0xd84>
    1d2c:	02400404 	movi	r9,16
    1d30:	d8c02017 	ldw	r3,128(sp)
    1d34:	d8801f17 	ldw	r2,124(sp)
    1d38:	4d45710e 	bge	r9,r21,3300 <___vfprintf_internal_r+0x1b98>
    1d3c:	01400074 	movhi	r5,1
    1d40:	29491984 	addi	r5,r5,9318
    1d44:	d9403615 	stw	r5,216(sp)
    1d48:	4827883a 	mov	r19,r9
    1d4c:	048001c4 	movi	r18,7
    1d50:	00000306 	br	1d60 <___vfprintf_internal_r+0x5f8>
    1d54:	ad7ffc04 	addi	r21,r21,-16
    1d58:	42000204 	addi	r8,r8,8
    1d5c:	9d40130e 	bge	r19,r21,1dac <___vfprintf_internal_r+0x644>
    1d60:	01000074 	movhi	r4,1
    1d64:	18c00404 	addi	r3,r3,16
    1d68:	10800044 	addi	r2,r2,1
    1d6c:	21091984 	addi	r4,r4,9318
    1d70:	41000015 	stw	r4,0(r8)
    1d74:	44c00115 	stw	r19,4(r8)
    1d78:	d8c02015 	stw	r3,128(sp)
    1d7c:	d8801f15 	stw	r2,124(sp)
    1d80:	90bff40e 	bge	r18,r2,1d54 <___vfprintf_internal_r+0x5ec>
    1d84:	b809883a 	mov	r4,r23
    1d88:	b00b883a 	mov	r5,r22
    1d8c:	d9801e04 	addi	r6,sp,120
    1d90:	0008c380 	call	8c38 <__sprint_r>
    1d94:	103f691e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    1d98:	ad7ffc04 	addi	r21,r21,-16
    1d9c:	d8c02017 	ldw	r3,128(sp)
    1da0:	d8801f17 	ldw	r2,124(sp)
    1da4:	da000404 	addi	r8,sp,16
    1da8:	9d7fed16 	blt	r19,r21,1d60 <___vfprintf_internal_r+0x5f8>
    1dac:	d9403617 	ldw	r5,216(sp)
    1db0:	a8c7883a 	add	r3,r21,r3
    1db4:	10800044 	addi	r2,r2,1
    1db8:	41400015 	stw	r5,0(r8)
    1dbc:	45400115 	stw	r21,4(r8)
    1dc0:	d8c02015 	stw	r3,128(sp)
    1dc4:	d8801f15 	stw	r2,124(sp)
    1dc8:	010001c4 	movi	r4,7
    1dcc:	20832716 	blt	r4,r2,2a6c <___vfprintf_internal_r+0x1304>
    1dd0:	d8802787 	ldb	r2,158(sp)
    1dd4:	42000204 	addi	r8,r8,8
    1dd8:	10000c26 	beq	r2,zero,1e0c <___vfprintf_internal_r+0x6a4>
    1ddc:	d8801f17 	ldw	r2,124(sp)
    1de0:	d9002784 	addi	r4,sp,158
    1de4:	18c00044 	addi	r3,r3,1
    1de8:	10800044 	addi	r2,r2,1
    1dec:	41000015 	stw	r4,0(r8)
    1df0:	01000044 	movi	r4,1
    1df4:	41000115 	stw	r4,4(r8)
    1df8:	d8c02015 	stw	r3,128(sp)
    1dfc:	d8801f15 	stw	r2,124(sp)
    1e00:	010001c4 	movi	r4,7
    1e04:	2082c016 	blt	r4,r2,2908 <___vfprintf_internal_r+0x11a0>
    1e08:	42000204 	addi	r8,r8,8
    1e0c:	d8802c17 	ldw	r2,176(sp)
    1e10:	10000c26 	beq	r2,zero,1e44 <___vfprintf_internal_r+0x6dc>
    1e14:	d8801f17 	ldw	r2,124(sp)
    1e18:	d9002704 	addi	r4,sp,156
    1e1c:	18c00084 	addi	r3,r3,2
    1e20:	10800044 	addi	r2,r2,1
    1e24:	41000015 	stw	r4,0(r8)
    1e28:	01000084 	movi	r4,2
    1e2c:	41000115 	stw	r4,4(r8)
    1e30:	d8c02015 	stw	r3,128(sp)
    1e34:	d8801f15 	stw	r2,124(sp)
    1e38:	010001c4 	movi	r4,7
    1e3c:	2082ba16 	blt	r4,r2,2928 <___vfprintf_internal_r+0x11c0>
    1e40:	42000204 	addi	r8,r8,8
    1e44:	d9003017 	ldw	r4,192(sp)
    1e48:	00802004 	movi	r2,128
    1e4c:	20821c26 	beq	r4,r2,26c0 <___vfprintf_internal_r+0xf58>
    1e50:	d9403217 	ldw	r5,200(sp)
    1e54:	2c67c83a 	sub	r19,r5,r17
    1e58:	04c0260e 	bge	zero,r19,1ef4 <___vfprintf_internal_r+0x78c>
    1e5c:	05400404 	movi	r21,16
    1e60:	d8801f17 	ldw	r2,124(sp)
    1e64:	acc46e0e 	bge	r21,r19,3020 <___vfprintf_internal_r+0x18b8>
    1e68:	01400074 	movhi	r5,1
    1e6c:	29491584 	addi	r5,r5,9302
    1e70:	d9402c15 	stw	r5,176(sp)
    1e74:	048001c4 	movi	r18,7
    1e78:	00000306 	br	1e88 <___vfprintf_internal_r+0x720>
    1e7c:	9cfffc04 	addi	r19,r19,-16
    1e80:	42000204 	addi	r8,r8,8
    1e84:	acc0110e 	bge	r21,r19,1ecc <___vfprintf_internal_r+0x764>
    1e88:	18c00404 	addi	r3,r3,16
    1e8c:	10800044 	addi	r2,r2,1
    1e90:	45000015 	stw	r20,0(r8)
    1e94:	45400115 	stw	r21,4(r8)
    1e98:	d8c02015 	stw	r3,128(sp)
    1e9c:	d8801f15 	stw	r2,124(sp)
    1ea0:	90bff60e 	bge	r18,r2,1e7c <___vfprintf_internal_r+0x714>
    1ea4:	b809883a 	mov	r4,r23
    1ea8:	b00b883a 	mov	r5,r22
    1eac:	d9801e04 	addi	r6,sp,120
    1eb0:	0008c380 	call	8c38 <__sprint_r>
    1eb4:	103f211e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    1eb8:	9cfffc04 	addi	r19,r19,-16
    1ebc:	d8c02017 	ldw	r3,128(sp)
    1ec0:	d8801f17 	ldw	r2,124(sp)
    1ec4:	da000404 	addi	r8,sp,16
    1ec8:	acffef16 	blt	r21,r19,1e88 <___vfprintf_internal_r+0x720>
    1ecc:	d9002c17 	ldw	r4,176(sp)
    1ed0:	1cc7883a 	add	r3,r3,r19
    1ed4:	10800044 	addi	r2,r2,1
    1ed8:	41000015 	stw	r4,0(r8)
    1edc:	44c00115 	stw	r19,4(r8)
    1ee0:	d8c02015 	stw	r3,128(sp)
    1ee4:	d8801f15 	stw	r2,124(sp)
    1ee8:	010001c4 	movi	r4,7
    1eec:	20827e16 	blt	r4,r2,28e8 <___vfprintf_internal_r+0x1180>
    1ef0:	42000204 	addi	r8,r8,8
    1ef4:	e080400c 	andi	r2,fp,256
    1ef8:	1001a81e 	bne	r2,zero,259c <___vfprintf_internal_r+0xe34>
    1efc:	d8801f17 	ldw	r2,124(sp)
    1f00:	d9403117 	ldw	r5,196(sp)
    1f04:	1c47883a 	add	r3,r3,r17
    1f08:	10800044 	addi	r2,r2,1
    1f0c:	41400015 	stw	r5,0(r8)
    1f10:	44400115 	stw	r17,4(r8)
    1f14:	d8c02015 	stw	r3,128(sp)
    1f18:	d8801f15 	stw	r2,124(sp)
    1f1c:	010001c4 	movi	r4,7
    1f20:	20825916 	blt	r4,r2,2888 <___vfprintf_internal_r+0x1120>
    1f24:	42000204 	addi	r8,r8,8
    1f28:	e080010c 	andi	r2,fp,4
    1f2c:	10003126 	beq	r2,zero,1ff4 <___vfprintf_internal_r+0x88c>
    1f30:	d8802e17 	ldw	r2,184(sp)
    1f34:	d9002b17 	ldw	r4,172(sp)
    1f38:	1121c83a 	sub	r16,r2,r4
    1f3c:	04002d0e 	bge	zero,r16,1ff4 <___vfprintf_internal_r+0x88c>
    1f40:	04400404 	movi	r17,16
    1f44:	d8801f17 	ldw	r2,124(sp)
    1f48:	8c053f0e 	bge	r17,r16,3448 <___vfprintf_internal_r+0x1ce0>
    1f4c:	01000074 	movhi	r4,1
    1f50:	21091984 	addi	r4,r4,9318
    1f54:	d9003615 	stw	r4,216(sp)
    1f58:	048001c4 	movi	r18,7
    1f5c:	00000306 	br	1f6c <___vfprintf_internal_r+0x804>
    1f60:	843ffc04 	addi	r16,r16,-16
    1f64:	42000204 	addi	r8,r8,8
    1f68:	8c00130e 	bge	r17,r16,1fb8 <___vfprintf_internal_r+0x850>
    1f6c:	01400074 	movhi	r5,1
    1f70:	18c00404 	addi	r3,r3,16
    1f74:	10800044 	addi	r2,r2,1
    1f78:	29491984 	addi	r5,r5,9318
    1f7c:	41400015 	stw	r5,0(r8)
    1f80:	44400115 	stw	r17,4(r8)
    1f84:	d8c02015 	stw	r3,128(sp)
    1f88:	d8801f15 	stw	r2,124(sp)
    1f8c:	90bff40e 	bge	r18,r2,1f60 <___vfprintf_internal_r+0x7f8>
    1f90:	b809883a 	mov	r4,r23
    1f94:	b00b883a 	mov	r5,r22
    1f98:	d9801e04 	addi	r6,sp,120
    1f9c:	0008c380 	call	8c38 <__sprint_r>
    1fa0:	103ee61e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    1fa4:	843ffc04 	addi	r16,r16,-16
    1fa8:	d8c02017 	ldw	r3,128(sp)
    1fac:	d8801f17 	ldw	r2,124(sp)
    1fb0:	da000404 	addi	r8,sp,16
    1fb4:	8c3fed16 	blt	r17,r16,1f6c <___vfprintf_internal_r+0x804>
    1fb8:	d9003617 	ldw	r4,216(sp)
    1fbc:	1c07883a 	add	r3,r3,r16
    1fc0:	10800044 	addi	r2,r2,1
    1fc4:	41000015 	stw	r4,0(r8)
    1fc8:	44000115 	stw	r16,4(r8)
    1fcc:	d8c02015 	stw	r3,128(sp)
    1fd0:	d8801f15 	stw	r2,124(sp)
    1fd4:	010001c4 	movi	r4,7
    1fd8:	2080060e 	bge	r4,r2,1ff4 <___vfprintf_internal_r+0x88c>
    1fdc:	b809883a 	mov	r4,r23
    1fe0:	b00b883a 	mov	r5,r22
    1fe4:	d9801e04 	addi	r6,sp,120
    1fe8:	0008c380 	call	8c38 <__sprint_r>
    1fec:	103ed31e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    1ff0:	d8c02017 	ldw	r3,128(sp)
    1ff4:	df002b17 	ldw	fp,172(sp)
    1ff8:	d9402e17 	ldw	r5,184(sp)
    1ffc:	e140010e 	bge	fp,r5,2004 <___vfprintf_internal_r+0x89c>
    2000:	2839883a 	mov	fp,r5
    2004:	d8802f17 	ldw	r2,188(sp)
    2008:	1705883a 	add	r2,r2,fp
    200c:	d8802f15 	stw	r2,188(sp)
    2010:	1802251e 	bne	r3,zero,28a8 <___vfprintf_internal_r+0x1140>
    2014:	d8c02a17 	ldw	r3,168(sp)
    2018:	d8001f15 	stw	zero,124(sp)
    201c:	da000404 	addi	r8,sp,16
    2020:	18800007 	ldb	r2,0(r3)
    2024:	103e0e1e 	bne	r2,zero,1860 <___vfprintf_internal_r+0xf8>
    2028:	dc002a17 	ldw	r16,168(sp)
    202c:	003e2606 	br	18c8 <___vfprintf_internal_r+0x160>
    2030:	d9002d17 	ldw	r4,180(sp)
    2034:	d9402d17 	ldw	r5,180(sp)
    2038:	da002a17 	ldw	r8,168(sp)
    203c:	21000017 	ldw	r4,0(r4)
    2040:	29400117 	ldw	r5,4(r5)
    2044:	df002a15 	stw	fp,168(sp)
    2048:	9839883a 	mov	fp,r19
    204c:	dcc02b03 	ldbu	r19,172(sp)
    2050:	d9003715 	stw	r4,220(sp)
    2054:	d9403915 	stw	r5,228(sp)
    2058:	da003f15 	stw	r8,252(sp)
    205c:	da403e15 	stw	r9,248(sp)
    2060:	dcc02785 	stb	r19,158(sp)
    2064:	00088940 	call	8894 <__fpclassifyd>
    2068:	d8c02d17 	ldw	r3,180(sp)
    206c:	04400044 	movi	r17,1
    2070:	da003f17 	ldw	r8,252(sp)
    2074:	1c800204 	addi	r18,r3,8
    2078:	da403e17 	ldw	r9,248(sp)
    207c:	d9003717 	ldw	r4,220(sp)
    2080:	d9403917 	ldw	r5,228(sp)
    2084:	1443411e 	bne	r2,r17,2d8c <___vfprintf_internal_r+0x1624>
    2088:	000d883a 	mov	r6,zero
    208c:	000f883a 	mov	r7,zero
    2090:	000ca340 	call	ca34 <__ledf2>
    2094:	da003f17 	ldw	r8,252(sp)
    2098:	10050d16 	blt	r2,zero,34d0 <___vfprintf_internal_r+0x1d68>
    209c:	dcc02783 	ldbu	r19,158(sp)
    20a0:	008011c4 	movi	r2,71
    20a4:	1404590e 	bge	r2,r16,320c <___vfprintf_internal_r+0x1aa4>
    20a8:	01400074 	movhi	r5,1
    20ac:	29490604 	addi	r5,r5,9240
    20b0:	d9403115 	stw	r5,196(sp)
    20b4:	00c000c4 	movi	r3,3
    20b8:	00bfdfc4 	movi	r2,-129
    20bc:	d8c02b15 	stw	r3,172(sp)
    20c0:	e0b8703a 	and	fp,fp,r2
    20c4:	dc802d15 	stw	r18,180(sp)
    20c8:	1823883a 	mov	r17,r3
    20cc:	d8003215 	stw	zero,200(sp)
    20d0:	d8003415 	stw	zero,208(sp)
    20d4:	003f0106 	br	1cdc <___vfprintf_internal_r+0x574>
    20d8:	9cc00214 	ori	r19,r19,8
    20dc:	e005883a 	mov	r2,fp
    20e0:	e4000007 	ldb	r16,0(fp)
    20e4:	003e0606 	br	1900 <___vfprintf_internal_r+0x198>
    20e8:	da002a17 	ldw	r8,168(sp)
    20ec:	df002a15 	stw	fp,168(sp)
    20f0:	9f000414 	ori	fp,r19,16
    20f4:	e080080c 	andi	r2,fp,32
    20f8:	1000e726 	beq	r2,zero,2498 <___vfprintf_internal_r+0xd30>
    20fc:	d9402d17 	ldw	r5,180(sp)
    2100:	0005883a 	mov	r2,zero
    2104:	2c800017 	ldw	r18,0(r5)
    2108:	2d400117 	ldw	r21,4(r5)
    210c:	29400204 	addi	r5,r5,8
    2110:	d9402d15 	stw	r5,180(sp)
    2114:	9546b03a 	or	r3,r18,r21
    2118:	d8002785 	stb	zero,158(sp)
    211c:	da403215 	stw	r9,200(sp)
    2120:	0027883a 	mov	r19,zero
    2124:	003ece06 	br	1c60 <___vfprintf_internal_r+0x4f8>
    2128:	da002a17 	ldw	r8,168(sp)
    212c:	df002a15 	stw	fp,168(sp)
    2130:	9f000414 	ori	fp,r19,16
    2134:	e080080c 	andi	r2,fp,32
    2138:	1000c826 	beq	r2,zero,245c <___vfprintf_internal_r+0xcf4>
    213c:	d9002d17 	ldw	r4,180(sp)
    2140:	00800044 	movi	r2,1
    2144:	24800017 	ldw	r18,0(r4)
    2148:	25400117 	ldw	r21,4(r4)
    214c:	21000204 	addi	r4,r4,8
    2150:	d9002d15 	stw	r4,180(sp)
    2154:	9546b03a 	or	r3,r18,r21
    2158:	003fef06 	br	2118 <___vfprintf_internal_r+0x9b0>
    215c:	d9402d17 	ldw	r5,180(sp)
    2160:	00800c04 	movi	r2,48
    2164:	d8802705 	stb	r2,156(sp)
    2168:	2c800017 	ldw	r18,0(r5)
    216c:	00801e04 	movi	r2,120
    2170:	d8802745 	stb	r2,157(sp)
    2174:	00800074 	movhi	r2,1
    2178:	10890e04 	addi	r2,r2,9272
    217c:	29400104 	addi	r5,r5,4
    2180:	da002a17 	ldw	r8,168(sp)
    2184:	d8803b15 	stw	r2,236(sp)
    2188:	df002a15 	stw	fp,168(sp)
    218c:	002b883a 	mov	r21,zero
    2190:	9f000094 	ori	fp,r19,2
    2194:	d9402d15 	stw	r5,180(sp)
    2198:	00800084 	movi	r2,2
    219c:	04001e04 	movi	r16,120
    21a0:	9007883a 	mov	r3,r18
    21a4:	003fdc06 	br	2118 <___vfprintf_internal_r+0x9b0>
    21a8:	da002a17 	ldw	r8,168(sp)
    21ac:	df002a15 	stw	fp,168(sp)
    21b0:	9839883a 	mov	fp,r19
    21b4:	dcc02b03 	ldbu	r19,172(sp)
    21b8:	e080080c 	andi	r2,fp,32
    21bc:	d8c02d17 	ldw	r3,180(sp)
    21c0:	dcc02785 	stb	r19,158(sp)
    21c4:	103e9b1e 	bne	r2,zero,1c34 <___vfprintf_internal_r+0x4cc>
    21c8:	e080040c 	andi	r2,fp,16
    21cc:	10036626 	beq	r2,zero,2f68 <___vfprintf_internal_r+0x1800>
    21d0:	1c800017 	ldw	r18,0(r3)
    21d4:	d9402d17 	ldw	r5,180(sp)
    21d8:	902bd7fa 	srai	r21,r18,31
    21dc:	29400104 	addi	r5,r5,4
    21e0:	d9402d15 	stw	r5,180(sp)
    21e4:	a805883a 	mov	r2,r21
    21e8:	003e9806 	br	1c4c <___vfprintf_internal_r+0x4e4>
    21ec:	9cc01014 	ori	r19,r19,64
    21f0:	e005883a 	mov	r2,fp
    21f4:	e4000007 	ldb	r16,0(fp)
    21f8:	003dc106 	br	1900 <___vfprintf_internal_r+0x198>
    21fc:	e4000007 	ldb	r16,0(fp)
    2200:	00801b04 	movi	r2,108
    2204:	80841426 	beq	r16,r2,3258 <___vfprintf_internal_r+0x1af0>
    2208:	9cc00414 	ori	r19,r19,16
    220c:	e005883a 	mov	r2,fp
    2210:	003dbb06 	br	1900 <___vfprintf_internal_r+0x198>
    2214:	da002a17 	ldw	r8,168(sp)
    2218:	df002a15 	stw	fp,168(sp)
    221c:	9839883a 	mov	fp,r19
    2220:	dcc02b03 	ldbu	r19,172(sp)
    2224:	e080080c 	andi	r2,fp,32
    2228:	dcc02785 	stb	r19,158(sp)
    222c:	10036126 	beq	r2,zero,2fb4 <___vfprintf_internal_r+0x184c>
    2230:	d9402d17 	ldw	r5,180(sp)
    2234:	d9002f17 	ldw	r4,188(sp)
    2238:	28800017 	ldw	r2,0(r5)
    223c:	2007d7fa 	srai	r3,r4,31
    2240:	29400104 	addi	r5,r5,4
    2244:	d9402d15 	stw	r5,180(sp)
    2248:	11000015 	stw	r4,0(r2)
    224c:	10c00115 	stw	r3,4(r2)
    2250:	003d8006 	br	1854 <___vfprintf_internal_r+0xec>
    2254:	da002a17 	ldw	r8,168(sp)
    2258:	df002a15 	stw	fp,168(sp)
    225c:	9839883a 	mov	fp,r19
    2260:	dcc02b03 	ldbu	r19,172(sp)
    2264:	01400074 	movhi	r5,1
    2268:	29490904 	addi	r5,r5,9252
    226c:	dcc02785 	stb	r19,158(sp)
    2270:	d9403b15 	stw	r5,236(sp)
    2274:	e0c0080c 	andi	r3,fp,32
    2278:	d8802d17 	ldw	r2,180(sp)
    227c:	18006626 	beq	r3,zero,2418 <___vfprintf_internal_r+0xcb0>
    2280:	d9402d17 	ldw	r5,180(sp)
    2284:	14800017 	ldw	r18,0(r2)
    2288:	15400117 	ldw	r21,4(r2)
    228c:	29400204 	addi	r5,r5,8
    2290:	d9402d15 	stw	r5,180(sp)
    2294:	e080004c 	andi	r2,fp,1
    2298:	1001fd26 	beq	r2,zero,2a90 <___vfprintf_internal_r+0x1328>
    229c:	9546b03a 	or	r3,r18,r21
    22a0:	18034f26 	beq	r3,zero,2fe0 <___vfprintf_internal_r+0x1878>
    22a4:	00800c04 	movi	r2,48
    22a8:	d8802705 	stb	r2,156(sp)
    22ac:	dc002745 	stb	r16,157(sp)
    22b0:	e7000094 	ori	fp,fp,2
    22b4:	00800084 	movi	r2,2
    22b8:	003f9706 	br	2118 <___vfprintf_internal_r+0x9b0>
    22bc:	d8c02d17 	ldw	r3,180(sp)
    22c0:	d9002d17 	ldw	r4,180(sp)
    22c4:	da002a17 	ldw	r8,168(sp)
    22c8:	18800017 	ldw	r2,0(r3)
    22cc:	21000104 	addi	r4,r4,4
    22d0:	00c00044 	movi	r3,1
    22d4:	df002a15 	stw	fp,168(sp)
    22d8:	d8c02b15 	stw	r3,172(sp)
    22dc:	9839883a 	mov	fp,r19
    22e0:	d8002785 	stb	zero,158(sp)
    22e4:	d8801405 	stb	r2,80(sp)
    22e8:	d9002d15 	stw	r4,180(sp)
    22ec:	1823883a 	mov	r17,r3
    22f0:	d8c01404 	addi	r3,sp,80
    22f4:	d8003215 	stw	zero,200(sp)
    22f8:	d8003415 	stw	zero,208(sp)
    22fc:	d8c03115 	stw	r3,196(sp)
    2300:	0005883a 	mov	r2,zero
    2304:	003e7c06 	br	1cf8 <___vfprintf_internal_r+0x590>
    2308:	d8802b07 	ldb	r2,172(sp)
    230c:	1003011e 	bne	r2,zero,2f14 <___vfprintf_internal_r+0x17ac>
    2310:	00c00804 	movi	r3,32
    2314:	d8c02b05 	stb	r3,172(sp)
    2318:	e005883a 	mov	r2,fp
    231c:	e4000007 	ldb	r16,0(fp)
    2320:	003d7706 	br	1900 <___vfprintf_internal_r+0x198>
    2324:	9cc00054 	ori	r19,r19,1
    2328:	e005883a 	mov	r2,fp
    232c:	e4000007 	ldb	r16,0(fp)
    2330:	003d7306 	br	1900 <___vfprintf_internal_r+0x198>
    2334:	d9002d17 	ldw	r4,180(sp)
    2338:	d9402d17 	ldw	r5,180(sp)
    233c:	21000017 	ldw	r4,0(r4)
    2340:	28c00104 	addi	r3,r5,4
    2344:	d9002e15 	stw	r4,184(sp)
    2348:	2003bd16 	blt	r4,zero,3240 <___vfprintf_internal_r+0x1ad8>
    234c:	d8c02d15 	stw	r3,180(sp)
    2350:	e005883a 	mov	r2,fp
    2354:	e4000007 	ldb	r16,0(fp)
    2358:	003d6906 	br	1900 <___vfprintf_internal_r+0x198>
    235c:	00c00ac4 	movi	r3,43
    2360:	d8c02b05 	stb	r3,172(sp)
    2364:	e005883a 	mov	r2,fp
    2368:	e4000007 	ldb	r16,0(fp)
    236c:	003d6406 	br	1900 <___vfprintf_internal_r+0x198>
    2370:	d8c02d17 	ldw	r3,180(sp)
    2374:	d9002d17 	ldw	r4,180(sp)
    2378:	da002a17 	ldw	r8,168(sp)
    237c:	18c00017 	ldw	r3,0(r3)
    2380:	df002a15 	stw	fp,168(sp)
    2384:	d8002785 	stb	zero,158(sp)
    2388:	d8c03115 	stw	r3,196(sp)
    238c:	9839883a 	mov	fp,r19
    2390:	24800104 	addi	r18,r4,4
    2394:	18041b26 	beq	r3,zero,3404 <___vfprintf_internal_r+0x1c9c>
    2398:	d9003117 	ldw	r4,196(sp)
    239c:	4803be16 	blt	r9,zero,3298 <___vfprintf_internal_r+0x1b30>
    23a0:	480d883a 	mov	r6,r9
    23a4:	000b883a 	mov	r5,zero
    23a8:	da003f15 	stw	r8,252(sp)
    23ac:	da403e15 	stw	r9,248(sp)
    23b0:	0006e300 	call	6e30 <memchr>
    23b4:	da003f17 	ldw	r8,252(sp)
    23b8:	da403e17 	ldw	r9,248(sp)
    23bc:	10045426 	beq	r2,zero,3510 <___vfprintf_internal_r+0x1da8>
    23c0:	d8c03117 	ldw	r3,196(sp)
    23c4:	10e3c83a 	sub	r17,r2,r3
    23c8:	4c436a16 	blt	r9,r17,3174 <___vfprintf_internal_r+0x1a0c>
    23cc:	8805883a 	mov	r2,r17
    23d0:	8803b616 	blt	r17,zero,32ac <___vfprintf_internal_r+0x1b44>
    23d4:	dcc02783 	ldbu	r19,158(sp)
    23d8:	d8802b15 	stw	r2,172(sp)
    23dc:	dc802d15 	stw	r18,180(sp)
    23e0:	d8003215 	stw	zero,200(sp)
    23e4:	d8003415 	stw	zero,208(sp)
    23e8:	003e3c06 	br	1cdc <___vfprintf_internal_r+0x574>
    23ec:	da002a17 	ldw	r8,168(sp)
    23f0:	df002a15 	stw	fp,168(sp)
    23f4:	9839883a 	mov	fp,r19
    23f8:	dcc02b03 	ldbu	r19,172(sp)
    23fc:	01000074 	movhi	r4,1
    2400:	21090e04 	addi	r4,r4,9272
    2404:	d9003b15 	stw	r4,236(sp)
    2408:	dcc02785 	stb	r19,158(sp)
    240c:	e0c0080c 	andi	r3,fp,32
    2410:	d8802d17 	ldw	r2,180(sp)
    2414:	183f9a1e 	bne	r3,zero,2280 <___vfprintf_internal_r+0xb18>
    2418:	e0c0040c 	andi	r3,fp,16
    241c:	1802c026 	beq	r3,zero,2f20 <___vfprintf_internal_r+0x17b8>
    2420:	d8c02d17 	ldw	r3,180(sp)
    2424:	14800017 	ldw	r18,0(r2)
    2428:	002b883a 	mov	r21,zero
    242c:	18c00104 	addi	r3,r3,4
    2430:	d8c02d15 	stw	r3,180(sp)
    2434:	003f9706 	br	2294 <___vfprintf_internal_r+0xb2c>
    2438:	9cc00814 	ori	r19,r19,32
    243c:	e005883a 	mov	r2,fp
    2440:	e4000007 	ldb	r16,0(fp)
    2444:	003d2e06 	br	1900 <___vfprintf_internal_r+0x198>
    2448:	da002a17 	ldw	r8,168(sp)
    244c:	df002a15 	stw	fp,168(sp)
    2450:	9839883a 	mov	fp,r19
    2454:	e080080c 	andi	r2,fp,32
    2458:	103f381e 	bne	r2,zero,213c <___vfprintf_internal_r+0x9d4>
    245c:	e080040c 	andi	r2,fp,16
    2460:	1002b726 	beq	r2,zero,2f40 <___vfprintf_internal_r+0x17d8>
    2464:	d9402d17 	ldw	r5,180(sp)
    2468:	002b883a 	mov	r21,zero
    246c:	00800044 	movi	r2,1
    2470:	2c800017 	ldw	r18,0(r5)
    2474:	29400104 	addi	r5,r5,4
    2478:	d9402d15 	stw	r5,180(sp)
    247c:	9007883a 	mov	r3,r18
    2480:	003f2506 	br	2118 <___vfprintf_internal_r+0x9b0>
    2484:	da002a17 	ldw	r8,168(sp)
    2488:	df002a15 	stw	fp,168(sp)
    248c:	9839883a 	mov	fp,r19
    2490:	e080080c 	andi	r2,fp,32
    2494:	103f191e 	bne	r2,zero,20fc <___vfprintf_internal_r+0x994>
    2498:	e080040c 	andi	r2,fp,16
    249c:	1002bb26 	beq	r2,zero,2f8c <___vfprintf_internal_r+0x1824>
    24a0:	d8802d17 	ldw	r2,180(sp)
    24a4:	002b883a 	mov	r21,zero
    24a8:	14800017 	ldw	r18,0(r2)
    24ac:	10800104 	addi	r2,r2,4
    24b0:	d8802d15 	stw	r2,180(sp)
    24b4:	9007883a 	mov	r3,r18
    24b8:	0005883a 	mov	r2,zero
    24bc:	003f1606 	br	2118 <___vfprintf_internal_r+0x9b0>
    24c0:	da002a17 	ldw	r8,168(sp)
    24c4:	df002a15 	stw	fp,168(sp)
    24c8:	9839883a 	mov	fp,r19
    24cc:	dcc02b03 	ldbu	r19,172(sp)
    24d0:	dcc02785 	stb	r19,158(sp)
    24d4:	803d9326 	beq	r16,zero,1b24 <___vfprintf_internal_r+0x3bc>
    24d8:	00c00044 	movi	r3,1
    24dc:	d8c02b15 	stw	r3,172(sp)
    24e0:	dc001405 	stb	r16,80(sp)
    24e4:	d8002785 	stb	zero,158(sp)
    24e8:	003f8006 	br	22ec <___vfprintf_internal_r+0xb84>
    24ec:	d8c02017 	ldw	r3,128(sp)
    24f0:	003e3906 	br	1dd8 <___vfprintf_internal_r+0x670>
    24f4:	10803fcc 	andi	r2,r2,255
    24f8:	00c00044 	movi	r3,1
    24fc:	10fde01e 	bne	r2,r3,1c80 <___vfprintf_internal_r+0x518>
    2500:	a800021e 	bne	r21,zero,250c <___vfprintf_internal_r+0xda4>
    2504:	00800244 	movi	r2,9
    2508:	14801e2e 	bgeu	r2,r18,2584 <___vfprintf_internal_r+0xe1c>
    250c:	dc002b15 	stw	r16,172(sp)
    2510:	dc401e04 	addi	r17,sp,120
    2514:	9021883a 	mov	r16,r18
    2518:	da402c15 	stw	r9,176(sp)
    251c:	a825883a 	mov	r18,r21
    2520:	402b883a 	mov	r21,r8
    2524:	8009883a 	mov	r4,r16
    2528:	900b883a 	mov	r5,r18
    252c:	01800284 	movi	r6,10
    2530:	000f883a 	mov	r7,zero
    2534:	000af6c0 	call	af6c <__umoddi3>
    2538:	10800c04 	addi	r2,r2,48
    253c:	8c7fffc4 	addi	r17,r17,-1
    2540:	8009883a 	mov	r4,r16
    2544:	900b883a 	mov	r5,r18
    2548:	01800284 	movi	r6,10
    254c:	000f883a 	mov	r7,zero
    2550:	88800005 	stb	r2,0(r17)
    2554:	000a92c0 	call	a92c <__udivdi3>
    2558:	1021883a 	mov	r16,r2
    255c:	10c4b03a 	or	r2,r2,r3
    2560:	1825883a 	mov	r18,r3
    2564:	103fef1e 	bne	r2,zero,2524 <___vfprintf_internal_r+0xdbc>
    2568:	d9002817 	ldw	r4,160(sp)
    256c:	dc403115 	stw	r17,196(sp)
    2570:	dc002b17 	ldw	r16,172(sp)
    2574:	da402c17 	ldw	r9,176(sp)
    2578:	a811883a 	mov	r8,r21
    257c:	2463c83a 	sub	r17,r4,r17
    2580:	003dd106 	br	1cc8 <___vfprintf_internal_r+0x560>
    2584:	94800c04 	addi	r18,r18,48
    2588:	d8c01dc4 	addi	r3,sp,119
    258c:	dc801dc5 	stb	r18,119(sp)
    2590:	dc403c17 	ldw	r17,240(sp)
    2594:	d8c03115 	stw	r3,196(sp)
    2598:	003dcb06 	br	1cc8 <___vfprintf_internal_r+0x560>
    259c:	00801944 	movi	r2,101
    25a0:	1400720e 	bge	r2,r16,276c <___vfprintf_internal_r+0x1004>
    25a4:	d9003717 	ldw	r4,220(sp)
    25a8:	d9403917 	ldw	r5,228(sp)
    25ac:	000d883a 	mov	r6,zero
    25b0:	000f883a 	mov	r7,zero
    25b4:	d8c03d15 	stw	r3,244(sp)
    25b8:	da003f15 	stw	r8,252(sp)
    25bc:	000c8d00 	call	c8d0 <__eqdf2>
    25c0:	d8c03d17 	ldw	r3,244(sp)
    25c4:	da003f17 	ldw	r8,252(sp)
    25c8:	1000f41e 	bne	r2,zero,299c <___vfprintf_internal_r+0x1234>
    25cc:	d8801f17 	ldw	r2,124(sp)
    25d0:	01000074 	movhi	r4,1
    25d4:	21091504 	addi	r4,r4,9300
    25d8:	18c00044 	addi	r3,r3,1
    25dc:	10800044 	addi	r2,r2,1
    25e0:	41000015 	stw	r4,0(r8)
    25e4:	01000044 	movi	r4,1
    25e8:	41000115 	stw	r4,4(r8)
    25ec:	d8c02015 	stw	r3,128(sp)
    25f0:	d8801f15 	stw	r2,124(sp)
    25f4:	010001c4 	movi	r4,7
    25f8:	20828d16 	blt	r4,r2,3030 <___vfprintf_internal_r+0x18c8>
    25fc:	42000204 	addi	r8,r8,8
    2600:	d8802617 	ldw	r2,152(sp)
    2604:	d9403317 	ldw	r5,204(sp)
    2608:	11400216 	blt	r2,r5,2614 <___vfprintf_internal_r+0xeac>
    260c:	e080004c 	andi	r2,fp,1
    2610:	103e4526 	beq	r2,zero,1f28 <___vfprintf_internal_r+0x7c0>
    2614:	d8803817 	ldw	r2,224(sp)
    2618:	d9003517 	ldw	r4,212(sp)
    261c:	d9403817 	ldw	r5,224(sp)
    2620:	1887883a 	add	r3,r3,r2
    2624:	d8801f17 	ldw	r2,124(sp)
    2628:	41000015 	stw	r4,0(r8)
    262c:	41400115 	stw	r5,4(r8)
    2630:	10800044 	addi	r2,r2,1
    2634:	d8c02015 	stw	r3,128(sp)
    2638:	d8801f15 	stw	r2,124(sp)
    263c:	010001c4 	movi	r4,7
    2640:	20830916 	blt	r4,r2,3268 <___vfprintf_internal_r+0x1b00>
    2644:	42000204 	addi	r8,r8,8
    2648:	d8803317 	ldw	r2,204(sp)
    264c:	143fffc4 	addi	r16,r2,-1
    2650:	043e350e 	bge	zero,r16,1f28 <___vfprintf_internal_r+0x7c0>
    2654:	04400404 	movi	r17,16
    2658:	d8801f17 	ldw	r2,124(sp)
    265c:	8c007e0e 	bge	r17,r16,2858 <___vfprintf_internal_r+0x10f0>
    2660:	01400074 	movhi	r5,1
    2664:	29491584 	addi	r5,r5,9302
    2668:	d9402c15 	stw	r5,176(sp)
    266c:	04c001c4 	movi	r19,7
    2670:	00000306 	br	2680 <___vfprintf_internal_r+0xf18>
    2674:	42000204 	addi	r8,r8,8
    2678:	843ffc04 	addi	r16,r16,-16
    267c:	8c00790e 	bge	r17,r16,2864 <___vfprintf_internal_r+0x10fc>
    2680:	18c00404 	addi	r3,r3,16
    2684:	10800044 	addi	r2,r2,1
    2688:	45000015 	stw	r20,0(r8)
    268c:	44400115 	stw	r17,4(r8)
    2690:	d8c02015 	stw	r3,128(sp)
    2694:	d8801f15 	stw	r2,124(sp)
    2698:	98bff60e 	bge	r19,r2,2674 <___vfprintf_internal_r+0xf0c>
    269c:	b809883a 	mov	r4,r23
    26a0:	b00b883a 	mov	r5,r22
    26a4:	d9801e04 	addi	r6,sp,120
    26a8:	0008c380 	call	8c38 <__sprint_r>
    26ac:	103d231e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    26b0:	d8c02017 	ldw	r3,128(sp)
    26b4:	d8801f17 	ldw	r2,124(sp)
    26b8:	da000404 	addi	r8,sp,16
    26bc:	003fee06 	br	2678 <___vfprintf_internal_r+0xf10>
    26c0:	d9402e17 	ldw	r5,184(sp)
    26c4:	d8802b17 	ldw	r2,172(sp)
    26c8:	28a7c83a 	sub	r19,r5,r2
    26cc:	04fde00e 	bge	zero,r19,1e50 <___vfprintf_internal_r+0x6e8>
    26d0:	05400404 	movi	r21,16
    26d4:	d8801f17 	ldw	r2,124(sp)
    26d8:	acc3870e 	bge	r21,r19,34f8 <___vfprintf_internal_r+0x1d90>
    26dc:	01400074 	movhi	r5,1
    26e0:	29491584 	addi	r5,r5,9302
    26e4:	d9402c15 	stw	r5,176(sp)
    26e8:	048001c4 	movi	r18,7
    26ec:	00000306 	br	26fc <___vfprintf_internal_r+0xf94>
    26f0:	9cfffc04 	addi	r19,r19,-16
    26f4:	42000204 	addi	r8,r8,8
    26f8:	acc0110e 	bge	r21,r19,2740 <___vfprintf_internal_r+0xfd8>
    26fc:	18c00404 	addi	r3,r3,16
    2700:	10800044 	addi	r2,r2,1
    2704:	45000015 	stw	r20,0(r8)
    2708:	45400115 	stw	r21,4(r8)
    270c:	d8c02015 	stw	r3,128(sp)
    2710:	d8801f15 	stw	r2,124(sp)
    2714:	90bff60e 	bge	r18,r2,26f0 <___vfprintf_internal_r+0xf88>
    2718:	b809883a 	mov	r4,r23
    271c:	b00b883a 	mov	r5,r22
    2720:	d9801e04 	addi	r6,sp,120
    2724:	0008c380 	call	8c38 <__sprint_r>
    2728:	103d041e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    272c:	9cfffc04 	addi	r19,r19,-16
    2730:	d8c02017 	ldw	r3,128(sp)
    2734:	d8801f17 	ldw	r2,124(sp)
    2738:	da000404 	addi	r8,sp,16
    273c:	acffef16 	blt	r21,r19,26fc <___vfprintf_internal_r+0xf94>
    2740:	d9002c17 	ldw	r4,176(sp)
    2744:	1cc7883a 	add	r3,r3,r19
    2748:	10800044 	addi	r2,r2,1
    274c:	41000015 	stw	r4,0(r8)
    2750:	44c00115 	stw	r19,4(r8)
    2754:	d8c02015 	stw	r3,128(sp)
    2758:	d8801f15 	stw	r2,124(sp)
    275c:	010001c4 	movi	r4,7
    2760:	20817816 	blt	r4,r2,2d44 <___vfprintf_internal_r+0x15dc>
    2764:	42000204 	addi	r8,r8,8
    2768:	003db906 	br	1e50 <___vfprintf_internal_r+0x6e8>
    276c:	d9403317 	ldw	r5,204(sp)
    2770:	00800044 	movi	r2,1
    2774:	18c00044 	addi	r3,r3,1
    2778:	11413e0e 	bge	r2,r5,2c74 <___vfprintf_internal_r+0x150c>
    277c:	dc001f17 	ldw	r16,124(sp)
    2780:	d8803117 	ldw	r2,196(sp)
    2784:	d8c02015 	stw	r3,128(sp)
    2788:	84000044 	addi	r16,r16,1
    278c:	40800015 	stw	r2,0(r8)
    2790:	00800044 	movi	r2,1
    2794:	40800115 	stw	r2,4(r8)
    2798:	dc001f15 	stw	r16,124(sp)
    279c:	008001c4 	movi	r2,7
    27a0:	14015616 	blt	r2,r16,2cfc <___vfprintf_internal_r+0x1594>
    27a4:	42000204 	addi	r8,r8,8
    27a8:	d9003817 	ldw	r4,224(sp)
    27ac:	d9403517 	ldw	r5,212(sp)
    27b0:	84000044 	addi	r16,r16,1
    27b4:	1907883a 	add	r3,r3,r4
    27b8:	41400015 	stw	r5,0(r8)
    27bc:	41000115 	stw	r4,4(r8)
    27c0:	d8c02015 	stw	r3,128(sp)
    27c4:	dc001f15 	stw	r16,124(sp)
    27c8:	008001c4 	movi	r2,7
    27cc:	14015416 	blt	r2,r16,2d20 <___vfprintf_internal_r+0x15b8>
    27d0:	44400204 	addi	r17,r8,8
    27d4:	d9003717 	ldw	r4,220(sp)
    27d8:	d9403917 	ldw	r5,228(sp)
    27dc:	000d883a 	mov	r6,zero
    27e0:	000f883a 	mov	r7,zero
    27e4:	d8c03d15 	stw	r3,244(sp)
    27e8:	000c8d00 	call	c8d0 <__eqdf2>
    27ec:	d8c03d17 	ldw	r3,244(sp)
    27f0:	1000aa26 	beq	r2,zero,2a9c <___vfprintf_internal_r+0x1334>
    27f4:	d9003317 	ldw	r4,204(sp)
    27f8:	d9403117 	ldw	r5,196(sp)
    27fc:	84000044 	addi	r16,r16,1
    2800:	20bfffc4 	addi	r2,r4,-1
    2804:	1887883a 	add	r3,r3,r2
    2808:	29000044 	addi	r4,r5,1
    280c:	88800115 	stw	r2,4(r17)
    2810:	89000015 	stw	r4,0(r17)
    2814:	d8c02015 	stw	r3,128(sp)
    2818:	dc001f15 	stw	r16,124(sp)
    281c:	008001c4 	movi	r2,7
    2820:	14012d16 	blt	r2,r16,2cd8 <___vfprintf_internal_r+0x1570>
    2824:	8c400204 	addi	r17,r17,8
    2828:	d9403a17 	ldw	r5,232(sp)
    282c:	dcc022c4 	addi	r19,sp,139
    2830:	84000044 	addi	r16,r16,1
    2834:	1947883a 	add	r3,r3,r5
    2838:	8cc00015 	stw	r19,0(r17)
    283c:	89400115 	stw	r5,4(r17)
    2840:	d8c02015 	stw	r3,128(sp)
    2844:	dc001f15 	stw	r16,124(sp)
    2848:	008001c4 	movi	r2,7
    284c:	14000e16 	blt	r2,r16,2888 <___vfprintf_internal_r+0x1120>
    2850:	8a000204 	addi	r8,r17,8
    2854:	003db406 	br	1f28 <___vfprintf_internal_r+0x7c0>
    2858:	01000074 	movhi	r4,1
    285c:	21091584 	addi	r4,r4,9302
    2860:	d9002c15 	stw	r4,176(sp)
    2864:	d9002c17 	ldw	r4,176(sp)
    2868:	1c07883a 	add	r3,r3,r16
    286c:	44000115 	stw	r16,4(r8)
    2870:	41000015 	stw	r4,0(r8)
    2874:	10800044 	addi	r2,r2,1
    2878:	d8c02015 	stw	r3,128(sp)
    287c:	d8801f15 	stw	r2,124(sp)
    2880:	010001c4 	movi	r4,7
    2884:	20bda70e 	bge	r4,r2,1f24 <___vfprintf_internal_r+0x7bc>
    2888:	b809883a 	mov	r4,r23
    288c:	b00b883a 	mov	r5,r22
    2890:	d9801e04 	addi	r6,sp,120
    2894:	0008c380 	call	8c38 <__sprint_r>
    2898:	103ca81e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    289c:	d8c02017 	ldw	r3,128(sp)
    28a0:	da000404 	addi	r8,sp,16
    28a4:	003da006 	br	1f28 <___vfprintf_internal_r+0x7c0>
    28a8:	b809883a 	mov	r4,r23
    28ac:	b00b883a 	mov	r5,r22
    28b0:	d9801e04 	addi	r6,sp,120
    28b4:	0008c380 	call	8c38 <__sprint_r>
    28b8:	103dd626 	beq	r2,zero,2014 <___vfprintf_internal_r+0x8ac>
    28bc:	003c9f06 	br	1b3c <___vfprintf_internal_r+0x3d4>
    28c0:	10803fcc 	andi	r2,r2,255
    28c4:	1000201e 	bne	r2,zero,2948 <___vfprintf_internal_r+0x11e0>
    28c8:	e080004c 	andi	r2,fp,1
    28cc:	10001e26 	beq	r2,zero,2948 <___vfprintf_internal_r+0x11e0>
    28d0:	00800c04 	movi	r2,48
    28d4:	d8c01dc4 	addi	r3,sp,119
    28d8:	d8801dc5 	stb	r2,119(sp)
    28dc:	dc403c17 	ldw	r17,240(sp)
    28e0:	d8c03115 	stw	r3,196(sp)
    28e4:	003cf806 	br	1cc8 <___vfprintf_internal_r+0x560>
    28e8:	b809883a 	mov	r4,r23
    28ec:	b00b883a 	mov	r5,r22
    28f0:	d9801e04 	addi	r6,sp,120
    28f4:	0008c380 	call	8c38 <__sprint_r>
    28f8:	103c901e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    28fc:	d8c02017 	ldw	r3,128(sp)
    2900:	da000404 	addi	r8,sp,16
    2904:	003d7b06 	br	1ef4 <___vfprintf_internal_r+0x78c>
    2908:	b809883a 	mov	r4,r23
    290c:	b00b883a 	mov	r5,r22
    2910:	d9801e04 	addi	r6,sp,120
    2914:	0008c380 	call	8c38 <__sprint_r>
    2918:	103c881e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    291c:	d8c02017 	ldw	r3,128(sp)
    2920:	da000404 	addi	r8,sp,16
    2924:	003d3906 	br	1e0c <___vfprintf_internal_r+0x6a4>
    2928:	b809883a 	mov	r4,r23
    292c:	b00b883a 	mov	r5,r22
    2930:	d9801e04 	addi	r6,sp,120
    2934:	0008c380 	call	8c38 <__sprint_r>
    2938:	103c801e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    293c:	d8c02017 	ldw	r3,128(sp)
    2940:	da000404 	addi	r8,sp,16
    2944:	003d3f06 	br	1e44 <___vfprintf_internal_r+0x6dc>
    2948:	d8c01e04 	addi	r3,sp,120
    294c:	0023883a 	mov	r17,zero
    2950:	d8c03115 	stw	r3,196(sp)
    2954:	003cdc06 	br	1cc8 <___vfprintf_internal_r+0x560>
    2958:	d9403b17 	ldw	r5,236(sp)
    295c:	d8c01e04 	addi	r3,sp,120
    2960:	908003cc 	andi	r2,r18,15
    2964:	a808973a 	slli	r4,r21,28
    2968:	2885883a 	add	r2,r5,r2
    296c:	9024d13a 	srli	r18,r18,4
    2970:	10800003 	ldbu	r2,0(r2)
    2974:	a82ad13a 	srli	r21,r21,4
    2978:	18ffffc4 	addi	r3,r3,-1
    297c:	24a4b03a 	or	r18,r4,r18
    2980:	18800005 	stb	r2,0(r3)
    2984:	9544b03a 	or	r2,r18,r21
    2988:	103ff51e 	bne	r2,zero,2960 <___vfprintf_internal_r+0x11f8>
    298c:	d9402817 	ldw	r5,160(sp)
    2990:	d8c03115 	stw	r3,196(sp)
    2994:	28e3c83a 	sub	r17,r5,r3
    2998:	003ccb06 	br	1cc8 <___vfprintf_internal_r+0x560>
    299c:	dc002617 	ldw	r16,152(sp)
    29a0:	0401ab0e 	bge	zero,r16,3050 <___vfprintf_internal_r+0x18e8>
    29a4:	d8803317 	ldw	r2,204(sp)
    29a8:	d9403117 	ldw	r5,196(sp)
    29ac:	d9003417 	ldw	r4,208(sp)
    29b0:	1023883a 	mov	r17,r2
    29b4:	28a1883a 	add	r16,r5,r2
    29b8:	2080010e 	bge	r4,r2,29c0 <___vfprintf_internal_r+0x1258>
    29bc:	2023883a 	mov	r17,r4
    29c0:	04400b0e 	bge	zero,r17,29f0 <___vfprintf_internal_r+0x1288>
    29c4:	d8801f17 	ldw	r2,124(sp)
    29c8:	d9403117 	ldw	r5,196(sp)
    29cc:	1c47883a 	add	r3,r3,r17
    29d0:	10800044 	addi	r2,r2,1
    29d4:	41400015 	stw	r5,0(r8)
    29d8:	44400115 	stw	r17,4(r8)
    29dc:	d8c02015 	stw	r3,128(sp)
    29e0:	d8801f15 	stw	r2,124(sp)
    29e4:	010001c4 	movi	r4,7
    29e8:	20826716 	blt	r4,r2,3388 <___vfprintf_internal_r+0x1c20>
    29ec:	42000204 	addi	r8,r8,8
    29f0:	88026316 	blt	r17,zero,3380 <___vfprintf_internal_r+0x1c18>
    29f4:	d8803417 	ldw	r2,208(sp)
    29f8:	1463c83a 	sub	r17,r2,r17
    29fc:	0440590e 	bge	zero,r17,2b64 <___vfprintf_internal_r+0x13fc>
    2a00:	04c00404 	movi	r19,16
    2a04:	d8801f17 	ldw	r2,124(sp)
    2a08:	9c41770e 	bge	r19,r17,2fe8 <___vfprintf_internal_r+0x1880>
    2a0c:	01400074 	movhi	r5,1
    2a10:	29491584 	addi	r5,r5,9302
    2a14:	d9402c15 	stw	r5,176(sp)
    2a18:	054001c4 	movi	r21,7
    2a1c:	00000306 	br	2a2c <___vfprintf_internal_r+0x12c4>
    2a20:	42000204 	addi	r8,r8,8
    2a24:	8c7ffc04 	addi	r17,r17,-16
    2a28:	9c41720e 	bge	r19,r17,2ff4 <___vfprintf_internal_r+0x188c>
    2a2c:	18c00404 	addi	r3,r3,16
    2a30:	10800044 	addi	r2,r2,1
    2a34:	45000015 	stw	r20,0(r8)
    2a38:	44c00115 	stw	r19,4(r8)
    2a3c:	d8c02015 	stw	r3,128(sp)
    2a40:	d8801f15 	stw	r2,124(sp)
    2a44:	a8bff60e 	bge	r21,r2,2a20 <___vfprintf_internal_r+0x12b8>
    2a48:	b809883a 	mov	r4,r23
    2a4c:	b00b883a 	mov	r5,r22
    2a50:	d9801e04 	addi	r6,sp,120
    2a54:	0008c380 	call	8c38 <__sprint_r>
    2a58:	103c381e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2a5c:	d8c02017 	ldw	r3,128(sp)
    2a60:	d8801f17 	ldw	r2,124(sp)
    2a64:	da000404 	addi	r8,sp,16
    2a68:	003fee06 	br	2a24 <___vfprintf_internal_r+0x12bc>
    2a6c:	b809883a 	mov	r4,r23
    2a70:	b00b883a 	mov	r5,r22
    2a74:	d9801e04 	addi	r6,sp,120
    2a78:	0008c380 	call	8c38 <__sprint_r>
    2a7c:	103c2f1e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2a80:	d8c02017 	ldw	r3,128(sp)
    2a84:	d8802787 	ldb	r2,158(sp)
    2a88:	da000404 	addi	r8,sp,16
    2a8c:	003cd206 	br	1dd8 <___vfprintf_internal_r+0x670>
    2a90:	00800084 	movi	r2,2
    2a94:	9546b03a 	or	r3,r18,r21
    2a98:	003d9f06 	br	2118 <___vfprintf_internal_r+0x9b0>
    2a9c:	d8803317 	ldw	r2,204(sp)
    2aa0:	14ffffc4 	addi	r19,r2,-1
    2aa4:	04ff600e 	bge	zero,r19,2828 <___vfprintf_internal_r+0x10c0>
    2aa8:	05400404 	movi	r21,16
    2aac:	acc07e0e 	bge	r21,r19,2ca8 <___vfprintf_internal_r+0x1540>
    2ab0:	01400074 	movhi	r5,1
    2ab4:	29491584 	addi	r5,r5,9302
    2ab8:	d9402c15 	stw	r5,176(sp)
    2abc:	01c001c4 	movi	r7,7
    2ac0:	00000306 	br	2ad0 <___vfprintf_internal_r+0x1368>
    2ac4:	8c400204 	addi	r17,r17,8
    2ac8:	9cfffc04 	addi	r19,r19,-16
    2acc:	acc0790e 	bge	r21,r19,2cb4 <___vfprintf_internal_r+0x154c>
    2ad0:	18c00404 	addi	r3,r3,16
    2ad4:	84000044 	addi	r16,r16,1
    2ad8:	8d000015 	stw	r20,0(r17)
    2adc:	8d400115 	stw	r21,4(r17)
    2ae0:	d8c02015 	stw	r3,128(sp)
    2ae4:	dc001f15 	stw	r16,124(sp)
    2ae8:	3c3ff60e 	bge	r7,r16,2ac4 <___vfprintf_internal_r+0x135c>
    2aec:	b809883a 	mov	r4,r23
    2af0:	b00b883a 	mov	r5,r22
    2af4:	d9801e04 	addi	r6,sp,120
    2af8:	d9c03d15 	stw	r7,244(sp)
    2afc:	0008c380 	call	8c38 <__sprint_r>
    2b00:	d9c03d17 	ldw	r7,244(sp)
    2b04:	103c0d1e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2b08:	d8c02017 	ldw	r3,128(sp)
    2b0c:	dc001f17 	ldw	r16,124(sp)
    2b10:	dc400404 	addi	r17,sp,16
    2b14:	003fec06 	br	2ac8 <___vfprintf_internal_r+0x1360>
    2b18:	10803fcc 	andi	r2,r2,255
    2b1c:	1080201c 	xori	r2,r2,128
    2b20:	10bfe004 	addi	r2,r2,-128
    2b24:	01000c04 	movi	r4,48
    2b28:	1101d726 	beq	r2,r4,3288 <___vfprintf_internal_r+0x1b20>
    2b2c:	d9403117 	ldw	r5,196(sp)
    2b30:	d8802817 	ldw	r2,160(sp)
    2b34:	193fffc5 	stb	r4,-1(r3)
    2b38:	297fffc4 	addi	r5,r5,-1
    2b3c:	d9403115 	stw	r5,196(sp)
    2b40:	1163c83a 	sub	r17,r2,r5
    2b44:	003c6006 	br	1cc8 <___vfprintf_internal_r+0x560>
    2b48:	b809883a 	mov	r4,r23
    2b4c:	b00b883a 	mov	r5,r22
    2b50:	d9801e04 	addi	r6,sp,120
    2b54:	0008c380 	call	8c38 <__sprint_r>
    2b58:	103bf81e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2b5c:	d8c02017 	ldw	r3,128(sp)
    2b60:	da000404 	addi	r8,sp,16
    2b64:	d9403117 	ldw	r5,196(sp)
    2b68:	d9003417 	ldw	r4,208(sp)
    2b6c:	d8802617 	ldw	r2,152(sp)
    2b70:	2923883a 	add	r17,r5,r4
    2b74:	d9403317 	ldw	r5,204(sp)
    2b78:	11400216 	blt	r2,r5,2b84 <___vfprintf_internal_r+0x141c>
    2b7c:	e100004c 	andi	r4,fp,1
    2b80:	20000d26 	beq	r4,zero,2bb8 <___vfprintf_internal_r+0x1450>
    2b84:	d9003817 	ldw	r4,224(sp)
    2b88:	d9403517 	ldw	r5,212(sp)
    2b8c:	1907883a 	add	r3,r3,r4
    2b90:	d9001f17 	ldw	r4,124(sp)
    2b94:	41400015 	stw	r5,0(r8)
    2b98:	d9403817 	ldw	r5,224(sp)
    2b9c:	21000044 	addi	r4,r4,1
    2ba0:	d8c02015 	stw	r3,128(sp)
    2ba4:	41400115 	stw	r5,4(r8)
    2ba8:	d9001f15 	stw	r4,124(sp)
    2bac:	014001c4 	movi	r5,7
    2bb0:	2901fd16 	blt	r5,r4,33a8 <___vfprintf_internal_r+0x1c40>
    2bb4:	42000204 	addi	r8,r8,8
    2bb8:	d9003317 	ldw	r4,204(sp)
    2bbc:	2085c83a 	sub	r2,r4,r2
    2bc0:	8449c83a 	sub	r4,r16,r17
    2bc4:	1021883a 	mov	r16,r2
    2bc8:	2080010e 	bge	r4,r2,2bd0 <___vfprintf_internal_r+0x1468>
    2bcc:	2021883a 	mov	r16,r4
    2bd0:	04000a0e 	bge	zero,r16,2bfc <___vfprintf_internal_r+0x1494>
    2bd4:	d9001f17 	ldw	r4,124(sp)
    2bd8:	1c07883a 	add	r3,r3,r16
    2bdc:	44400015 	stw	r17,0(r8)
    2be0:	21000044 	addi	r4,r4,1
    2be4:	44000115 	stw	r16,4(r8)
    2be8:	d8c02015 	stw	r3,128(sp)
    2bec:	d9001f15 	stw	r4,124(sp)
    2bf0:	014001c4 	movi	r5,7
    2bf4:	29021816 	blt	r5,r4,3458 <___vfprintf_internal_r+0x1cf0>
    2bf8:	42000204 	addi	r8,r8,8
    2bfc:	80021016 	blt	r16,zero,3440 <___vfprintf_internal_r+0x1cd8>
    2c00:	1421c83a 	sub	r16,r2,r16
    2c04:	043cc80e 	bge	zero,r16,1f28 <___vfprintf_internal_r+0x7c0>
    2c08:	04400404 	movi	r17,16
    2c0c:	d8801f17 	ldw	r2,124(sp)
    2c10:	8c3f110e 	bge	r17,r16,2858 <___vfprintf_internal_r+0x10f0>
    2c14:	01400074 	movhi	r5,1
    2c18:	29491584 	addi	r5,r5,9302
    2c1c:	d9402c15 	stw	r5,176(sp)
    2c20:	04c001c4 	movi	r19,7
    2c24:	00000306 	br	2c34 <___vfprintf_internal_r+0x14cc>
    2c28:	42000204 	addi	r8,r8,8
    2c2c:	843ffc04 	addi	r16,r16,-16
    2c30:	8c3f0c0e 	bge	r17,r16,2864 <___vfprintf_internal_r+0x10fc>
    2c34:	18c00404 	addi	r3,r3,16
    2c38:	10800044 	addi	r2,r2,1
    2c3c:	45000015 	stw	r20,0(r8)
    2c40:	44400115 	stw	r17,4(r8)
    2c44:	d8c02015 	stw	r3,128(sp)
    2c48:	d8801f15 	stw	r2,124(sp)
    2c4c:	98bff60e 	bge	r19,r2,2c28 <___vfprintf_internal_r+0x14c0>
    2c50:	b809883a 	mov	r4,r23
    2c54:	b00b883a 	mov	r5,r22
    2c58:	d9801e04 	addi	r6,sp,120
    2c5c:	0008c380 	call	8c38 <__sprint_r>
    2c60:	103bb61e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2c64:	d8c02017 	ldw	r3,128(sp)
    2c68:	d8801f17 	ldw	r2,124(sp)
    2c6c:	da000404 	addi	r8,sp,16
    2c70:	003fee06 	br	2c2c <___vfprintf_internal_r+0x14c4>
    2c74:	e088703a 	and	r4,fp,r2
    2c78:	203ec01e 	bne	r4,zero,277c <___vfprintf_internal_r+0x1014>
    2c7c:	dc001f17 	ldw	r16,124(sp)
    2c80:	d9003117 	ldw	r4,196(sp)
    2c84:	40800115 	stw	r2,4(r8)
    2c88:	84000044 	addi	r16,r16,1
    2c8c:	41000015 	stw	r4,0(r8)
    2c90:	d8c02015 	stw	r3,128(sp)
    2c94:	dc001f15 	stw	r16,124(sp)
    2c98:	008001c4 	movi	r2,7
    2c9c:	14000e16 	blt	r2,r16,2cd8 <___vfprintf_internal_r+0x1570>
    2ca0:	44400204 	addi	r17,r8,8
    2ca4:	003ee006 	br	2828 <___vfprintf_internal_r+0x10c0>
    2ca8:	01000074 	movhi	r4,1
    2cac:	21091584 	addi	r4,r4,9302
    2cb0:	d9002c15 	stw	r4,176(sp)
    2cb4:	d8802c17 	ldw	r2,176(sp)
    2cb8:	1cc7883a 	add	r3,r3,r19
    2cbc:	84000044 	addi	r16,r16,1
    2cc0:	88800015 	stw	r2,0(r17)
    2cc4:	8cc00115 	stw	r19,4(r17)
    2cc8:	d8c02015 	stw	r3,128(sp)
    2ccc:	dc001f15 	stw	r16,124(sp)
    2cd0:	008001c4 	movi	r2,7
    2cd4:	143ed30e 	bge	r2,r16,2824 <___vfprintf_internal_r+0x10bc>
    2cd8:	b809883a 	mov	r4,r23
    2cdc:	b00b883a 	mov	r5,r22
    2ce0:	d9801e04 	addi	r6,sp,120
    2ce4:	0008c380 	call	8c38 <__sprint_r>
    2ce8:	103b941e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2cec:	d8c02017 	ldw	r3,128(sp)
    2cf0:	dc001f17 	ldw	r16,124(sp)
    2cf4:	dc400404 	addi	r17,sp,16
    2cf8:	003ecb06 	br	2828 <___vfprintf_internal_r+0x10c0>
    2cfc:	b809883a 	mov	r4,r23
    2d00:	b00b883a 	mov	r5,r22
    2d04:	d9801e04 	addi	r6,sp,120
    2d08:	0008c380 	call	8c38 <__sprint_r>
    2d0c:	103b8b1e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2d10:	d8c02017 	ldw	r3,128(sp)
    2d14:	dc001f17 	ldw	r16,124(sp)
    2d18:	da000404 	addi	r8,sp,16
    2d1c:	003ea206 	br	27a8 <___vfprintf_internal_r+0x1040>
    2d20:	b809883a 	mov	r4,r23
    2d24:	b00b883a 	mov	r5,r22
    2d28:	d9801e04 	addi	r6,sp,120
    2d2c:	0008c380 	call	8c38 <__sprint_r>
    2d30:	103b821e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2d34:	d8c02017 	ldw	r3,128(sp)
    2d38:	dc001f17 	ldw	r16,124(sp)
    2d3c:	dc400404 	addi	r17,sp,16
    2d40:	003ea406 	br	27d4 <___vfprintf_internal_r+0x106c>
    2d44:	b809883a 	mov	r4,r23
    2d48:	b00b883a 	mov	r5,r22
    2d4c:	d9801e04 	addi	r6,sp,120
    2d50:	0008c380 	call	8c38 <__sprint_r>
    2d54:	103b791e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    2d58:	d8c02017 	ldw	r3,128(sp)
    2d5c:	da000404 	addi	r8,sp,16
    2d60:	003c3b06 	br	1e50 <___vfprintf_internal_r+0x6e8>
    2d64:	04a5c83a 	sub	r18,zero,r18
    2d68:	9004c03a 	cmpne	r2,r18,zero
    2d6c:	056bc83a 	sub	r21,zero,r21
    2d70:	a8abc83a 	sub	r21,r21,r2
    2d74:	04c00b44 	movi	r19,45
    2d78:	dcc02785 	stb	r19,158(sp)
    2d7c:	da403215 	stw	r9,200(sp)
    2d80:	00800044 	movi	r2,1
    2d84:	9546b03a 	or	r3,r18,r21
    2d88:	003bb506 	br	1c60 <___vfprintf_internal_r+0x4f8>
    2d8c:	da003f15 	stw	r8,252(sp)
    2d90:	da403e15 	stw	r9,248(sp)
    2d94:	00088940 	call	8894 <__fpclassifyd>
    2d98:	da003f17 	ldw	r8,252(sp)
    2d9c:	da403e17 	ldw	r9,248(sp)
    2da0:	1000e526 	beq	r2,zero,3138 <___vfprintf_internal_r+0x19d0>
    2da4:	04fff7c4 	movi	r19,-33
    2da8:	00bfffc4 	movi	r2,-1
    2dac:	84e6703a 	and	r19,r16,r19
    2db0:	48822526 	beq	r9,r2,3648 <___vfprintf_internal_r+0x1ee0>
    2db4:	008011c4 	movi	r2,71
    2db8:	98821626 	beq	r19,r2,3614 <___vfprintf_internal_r+0x1eac>
    2dbc:	d9003917 	ldw	r4,228(sp)
    2dc0:	e0c04014 	ori	r3,fp,256
    2dc4:	d8c02d15 	stw	r3,180(sp)
    2dc8:	20022116 	blt	r4,zero,3650 <___vfprintf_internal_r+0x1ee8>
    2dcc:	dc403917 	ldw	r17,228(sp)
    2dd0:	d8002b05 	stb	zero,172(sp)
    2dd4:	00801984 	movi	r2,102
    2dd8:	80814d26 	beq	r16,r2,3310 <___vfprintf_internal_r+0x1ba8>
    2ddc:	00801184 	movi	r2,70
    2de0:	80814b26 	beq	r16,r2,3310 <___vfprintf_internal_r+0x1ba8>
    2de4:	00801144 	movi	r2,69
    2de8:	98822626 	beq	r19,r2,3684 <___vfprintf_internal_r+0x1f1c>
    2dec:	482b883a 	mov	r21,r9
    2df0:	d8802604 	addi	r2,sp,152
    2df4:	d8800115 	stw	r2,4(sp)
    2df8:	d9403717 	ldw	r5,220(sp)
    2dfc:	d8802504 	addi	r2,sp,148
    2e00:	d8800215 	stw	r2,8(sp)
    2e04:	d8802104 	addi	r2,sp,132
    2e08:	dd400015 	stw	r21,0(sp)
    2e0c:	d8800315 	stw	r2,12(sp)
    2e10:	b809883a 	mov	r4,r23
    2e14:	880d883a 	mov	r6,r17
    2e18:	01c00084 	movi	r7,2
    2e1c:	da003f15 	stw	r8,252(sp)
    2e20:	da403e15 	stw	r9,248(sp)
    2e24:	0003c1c0 	call	3c1c <_dtoa_r>
    2e28:	d8803115 	stw	r2,196(sp)
    2e2c:	008019c4 	movi	r2,103
    2e30:	da003f17 	ldw	r8,252(sp)
    2e34:	da403e17 	ldw	r9,248(sp)
    2e38:	80800226 	beq	r16,r2,2e44 <___vfprintf_internal_r+0x16dc>
    2e3c:	008011c4 	movi	r2,71
    2e40:	8081451e 	bne	r16,r2,3358 <___vfprintf_internal_r+0x1bf0>
    2e44:	e080004c 	andi	r2,fp,1
    2e48:	10021e26 	beq	r2,zero,36c4 <___vfprintf_internal_r+0x1f5c>
    2e4c:	d8c03117 	ldw	r3,196(sp)
    2e50:	1d55883a 	add	r10,r3,r21
    2e54:	d9003717 	ldw	r4,220(sp)
    2e58:	880b883a 	mov	r5,r17
    2e5c:	000d883a 	mov	r6,zero
    2e60:	000f883a 	mov	r7,zero
    2e64:	da003f15 	stw	r8,252(sp)
    2e68:	da403e15 	stw	r9,248(sp)
    2e6c:	da803d15 	stw	r10,244(sp)
    2e70:	000c8d00 	call	c8d0 <__eqdf2>
    2e74:	da003f17 	ldw	r8,252(sp)
    2e78:	da403e17 	ldw	r9,248(sp)
    2e7c:	da803d17 	ldw	r10,244(sp)
    2e80:	1001a126 	beq	r2,zero,3508 <___vfprintf_internal_r+0x1da0>
    2e84:	d8802117 	ldw	r2,132(sp)
    2e88:	1280062e 	bgeu	r2,r10,2ea4 <___vfprintf_internal_r+0x173c>
    2e8c:	01000c04 	movi	r4,48
    2e90:	10c00044 	addi	r3,r2,1
    2e94:	d8c02115 	stw	r3,132(sp)
    2e98:	11000005 	stb	r4,0(r2)
    2e9c:	d8802117 	ldw	r2,132(sp)
    2ea0:	12bffb36 	bltu	r2,r10,2e90 <___vfprintf_internal_r+0x1728>
    2ea4:	d8c03117 	ldw	r3,196(sp)
    2ea8:	10c5c83a 	sub	r2,r2,r3
    2eac:	d8803315 	stw	r2,204(sp)
    2eb0:	008011c4 	movi	r2,71
    2eb4:	98817f26 	beq	r19,r2,34b4 <___vfprintf_internal_r+0x1d4c>
    2eb8:	00801944 	movi	r2,101
    2ebc:	14023e0e 	bge	r2,r16,37b8 <___vfprintf_internal_r+0x2050>
    2ec0:	d8c02617 	ldw	r3,152(sp)
    2ec4:	00801984 	movi	r2,102
    2ec8:	d8c03415 	stw	r3,208(sp)
    2ecc:	8081f326 	beq	r16,r2,369c <___vfprintf_internal_r+0x1f34>
    2ed0:	d8c03417 	ldw	r3,208(sp)
    2ed4:	d9003317 	ldw	r4,204(sp)
    2ed8:	1901e116 	blt	r3,r4,3660 <___vfprintf_internal_r+0x1ef8>
    2edc:	e080004c 	andi	r2,fp,1
    2ee0:	1001ea26 	beq	r2,zero,368c <___vfprintf_internal_r+0x1f24>
    2ee4:	d8c03417 	ldw	r3,208(sp)
    2ee8:	1c400044 	addi	r17,r3,1
    2eec:	8839883a 	mov	fp,r17
    2ef0:	8801e216 	blt	r17,zero,367c <___vfprintf_internal_r+0x1f14>
    2ef4:	dd402b07 	ldb	r21,172(sp)
    2ef8:	a801661e 	bne	r21,zero,3494 <___vfprintf_internal_r+0x1d2c>
    2efc:	df002b15 	stw	fp,172(sp)
    2f00:	dcc02783 	ldbu	r19,158(sp)
    2f04:	df002d17 	ldw	fp,180(sp)
    2f08:	d8003215 	stw	zero,200(sp)
    2f0c:	dc802d15 	stw	r18,180(sp)
    2f10:	003b7206 	br	1cdc <___vfprintf_internal_r+0x574>
    2f14:	e4000007 	ldb	r16,0(fp)
    2f18:	e005883a 	mov	r2,fp
    2f1c:	003a7806 	br	1900 <___vfprintf_internal_r+0x198>
    2f20:	e0c0100c 	andi	r3,fp,64
    2f24:	1800b326 	beq	r3,zero,31f4 <___vfprintf_internal_r+0x1a8c>
    2f28:	d9002d17 	ldw	r4,180(sp)
    2f2c:	1480000b 	ldhu	r18,0(r2)
    2f30:	002b883a 	mov	r21,zero
    2f34:	21000104 	addi	r4,r4,4
    2f38:	d9002d15 	stw	r4,180(sp)
    2f3c:	003cd506 	br	2294 <___vfprintf_internal_r+0xb2c>
    2f40:	e080100c 	andi	r2,fp,64
    2f44:	1000a326 	beq	r2,zero,31d4 <___vfprintf_internal_r+0x1a6c>
    2f48:	d8802d17 	ldw	r2,180(sp)
    2f4c:	002b883a 	mov	r21,zero
    2f50:	1480000b 	ldhu	r18,0(r2)
    2f54:	10800104 	addi	r2,r2,4
    2f58:	d8802d15 	stw	r2,180(sp)
    2f5c:	9007883a 	mov	r3,r18
    2f60:	00800044 	movi	r2,1
    2f64:	003c6c06 	br	2118 <___vfprintf_internal_r+0x9b0>
    2f68:	e080100c 	andi	r2,fp,64
    2f6c:	10009226 	beq	r2,zero,31b8 <___vfprintf_internal_r+0x1a50>
    2f70:	1c80000f 	ldh	r18,0(r3)
    2f74:	d8802d17 	ldw	r2,180(sp)
    2f78:	902bd7fa 	srai	r21,r18,31
    2f7c:	10800104 	addi	r2,r2,4
    2f80:	d8802d15 	stw	r2,180(sp)
    2f84:	a805883a 	mov	r2,r21
    2f88:	003b3006 	br	1c4c <___vfprintf_internal_r+0x4e4>
    2f8c:	e080100c 	andi	r2,fp,64
    2f90:	10008126 	beq	r2,zero,3198 <___vfprintf_internal_r+0x1a30>
    2f94:	d8c02d17 	ldw	r3,180(sp)
    2f98:	002b883a 	mov	r21,zero
    2f9c:	0005883a 	mov	r2,zero
    2fa0:	1c80000b 	ldhu	r18,0(r3)
    2fa4:	18c00104 	addi	r3,r3,4
    2fa8:	d8c02d15 	stw	r3,180(sp)
    2fac:	9007883a 	mov	r3,r18
    2fb0:	003c5906 	br	2118 <___vfprintf_internal_r+0x9b0>
    2fb4:	e080040c 	andi	r2,fp,16
    2fb8:	1000701e 	bne	r2,zero,317c <___vfprintf_internal_r+0x1a14>
    2fbc:	e080100c 	andi	r2,fp,64
    2fc0:	10014626 	beq	r2,zero,34dc <___vfprintf_internal_r+0x1d74>
    2fc4:	d9002d17 	ldw	r4,180(sp)
    2fc8:	d9402f17 	ldw	r5,188(sp)
    2fcc:	20800017 	ldw	r2,0(r4)
    2fd0:	21000104 	addi	r4,r4,4
    2fd4:	d9002d15 	stw	r4,180(sp)
    2fd8:	1140000d 	sth	r5,0(r2)
    2fdc:	003a1d06 	br	1854 <___vfprintf_internal_r+0xec>
    2fe0:	00800084 	movi	r2,2
    2fe4:	003c4c06 	br	2118 <___vfprintf_internal_r+0x9b0>
    2fe8:	01000074 	movhi	r4,1
    2fec:	21091584 	addi	r4,r4,9302
    2ff0:	d9002c15 	stw	r4,176(sp)
    2ff4:	d9002c17 	ldw	r4,176(sp)
    2ff8:	1c47883a 	add	r3,r3,r17
    2ffc:	10800044 	addi	r2,r2,1
    3000:	41000015 	stw	r4,0(r8)
    3004:	44400115 	stw	r17,4(r8)
    3008:	d8c02015 	stw	r3,128(sp)
    300c:	d8801f15 	stw	r2,124(sp)
    3010:	010001c4 	movi	r4,7
    3014:	20becc16 	blt	r4,r2,2b48 <___vfprintf_internal_r+0x13e0>
    3018:	42000204 	addi	r8,r8,8
    301c:	003ed106 	br	2b64 <___vfprintf_internal_r+0x13fc>
    3020:	01000074 	movhi	r4,1
    3024:	21091584 	addi	r4,r4,9302
    3028:	d9002c15 	stw	r4,176(sp)
    302c:	003ba706 	br	1ecc <___vfprintf_internal_r+0x764>
    3030:	b809883a 	mov	r4,r23
    3034:	b00b883a 	mov	r5,r22
    3038:	d9801e04 	addi	r6,sp,120
    303c:	0008c380 	call	8c38 <__sprint_r>
    3040:	103abe1e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    3044:	d8c02017 	ldw	r3,128(sp)
    3048:	da000404 	addi	r8,sp,16
    304c:	003d6c06 	br	2600 <___vfprintf_internal_r+0xe98>
    3050:	d8801f17 	ldw	r2,124(sp)
    3054:	01400074 	movhi	r5,1
    3058:	01000044 	movi	r4,1
    305c:	18c00044 	addi	r3,r3,1
    3060:	10800044 	addi	r2,r2,1
    3064:	29491504 	addi	r5,r5,9300
    3068:	41000115 	stw	r4,4(r8)
    306c:	41400015 	stw	r5,0(r8)
    3070:	d8c02015 	stw	r3,128(sp)
    3074:	d8801f15 	stw	r2,124(sp)
    3078:	010001c4 	movi	r4,7
    307c:	20806716 	blt	r4,r2,321c <___vfprintf_internal_r+0x1ab4>
    3080:	42000204 	addi	r8,r8,8
    3084:	8000041e 	bne	r16,zero,3098 <___vfprintf_internal_r+0x1930>
    3088:	d8803317 	ldw	r2,204(sp)
    308c:	1000021e 	bne	r2,zero,3098 <___vfprintf_internal_r+0x1930>
    3090:	e080004c 	andi	r2,fp,1
    3094:	103ba426 	beq	r2,zero,1f28 <___vfprintf_internal_r+0x7c0>
    3098:	d9003817 	ldw	r4,224(sp)
    309c:	d8801f17 	ldw	r2,124(sp)
    30a0:	d9403517 	ldw	r5,212(sp)
    30a4:	1907883a 	add	r3,r3,r4
    30a8:	10800044 	addi	r2,r2,1
    30ac:	41000115 	stw	r4,4(r8)
    30b0:	41400015 	stw	r5,0(r8)
    30b4:	d8c02015 	stw	r3,128(sp)
    30b8:	d8801f15 	stw	r2,124(sp)
    30bc:	010001c4 	movi	r4,7
    30c0:	20815716 	blt	r4,r2,3620 <___vfprintf_internal_r+0x1eb8>
    30c4:	42000204 	addi	r8,r8,8
    30c8:	0421c83a 	sub	r16,zero,r16
    30cc:	0400810e 	bge	zero,r16,32d4 <___vfprintf_internal_r+0x1b6c>
    30d0:	04400404 	movi	r17,16
    30d4:	8c00bd0e 	bge	r17,r16,33cc <___vfprintf_internal_r+0x1c64>
    30d8:	01400074 	movhi	r5,1
    30dc:	29491584 	addi	r5,r5,9302
    30e0:	d9402c15 	stw	r5,176(sp)
    30e4:	04c001c4 	movi	r19,7
    30e8:	00000306 	br	30f8 <___vfprintf_internal_r+0x1990>
    30ec:	42000204 	addi	r8,r8,8
    30f0:	843ffc04 	addi	r16,r16,-16
    30f4:	8c00b80e 	bge	r17,r16,33d8 <___vfprintf_internal_r+0x1c70>
    30f8:	18c00404 	addi	r3,r3,16
    30fc:	10800044 	addi	r2,r2,1
    3100:	45000015 	stw	r20,0(r8)
    3104:	44400115 	stw	r17,4(r8)
    3108:	d8c02015 	stw	r3,128(sp)
    310c:	d8801f15 	stw	r2,124(sp)
    3110:	98bff60e 	bge	r19,r2,30ec <___vfprintf_internal_r+0x1984>
    3114:	b809883a 	mov	r4,r23
    3118:	b00b883a 	mov	r5,r22
    311c:	d9801e04 	addi	r6,sp,120
    3120:	0008c380 	call	8c38 <__sprint_r>
    3124:	103a851e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    3128:	d8c02017 	ldw	r3,128(sp)
    312c:	d8801f17 	ldw	r2,124(sp)
    3130:	da000404 	addi	r8,sp,16
    3134:	003fee06 	br	30f0 <___vfprintf_internal_r+0x1988>
    3138:	008011c4 	movi	r2,71
    313c:	1400d116 	blt	r2,r16,3484 <___vfprintf_internal_r+0x1d1c>
    3140:	01000074 	movhi	r4,1
    3144:	21090704 	addi	r4,r4,9244
    3148:	d9003115 	stw	r4,196(sp)
    314c:	00c000c4 	movi	r3,3
    3150:	00bfdfc4 	movi	r2,-129
    3154:	d8c02b15 	stw	r3,172(sp)
    3158:	e0b8703a 	and	fp,fp,r2
    315c:	dcc02783 	ldbu	r19,158(sp)
    3160:	dc802d15 	stw	r18,180(sp)
    3164:	1823883a 	mov	r17,r3
    3168:	d8003215 	stw	zero,200(sp)
    316c:	d8003415 	stw	zero,208(sp)
    3170:	003ada06 	br	1cdc <___vfprintf_internal_r+0x574>
    3174:	4823883a 	mov	r17,r9
    3178:	003c9406 	br	23cc <___vfprintf_internal_r+0xc64>
    317c:	d9402d17 	ldw	r5,180(sp)
    3180:	d8c02f17 	ldw	r3,188(sp)
    3184:	28800017 	ldw	r2,0(r5)
    3188:	29400104 	addi	r5,r5,4
    318c:	d9402d15 	stw	r5,180(sp)
    3190:	10c00015 	stw	r3,0(r2)
    3194:	0039af06 	br	1854 <___vfprintf_internal_r+0xec>
    3198:	d9002d17 	ldw	r4,180(sp)
    319c:	002b883a 	mov	r21,zero
    31a0:	0005883a 	mov	r2,zero
    31a4:	24800017 	ldw	r18,0(r4)
    31a8:	21000104 	addi	r4,r4,4
    31ac:	d9002d15 	stw	r4,180(sp)
    31b0:	9007883a 	mov	r3,r18
    31b4:	003bd806 	br	2118 <___vfprintf_internal_r+0x9b0>
    31b8:	1c800017 	ldw	r18,0(r3)
    31bc:	d8c02d17 	ldw	r3,180(sp)
    31c0:	902bd7fa 	srai	r21,r18,31
    31c4:	18c00104 	addi	r3,r3,4
    31c8:	d8c02d15 	stw	r3,180(sp)
    31cc:	a805883a 	mov	r2,r21
    31d0:	003a9e06 	br	1c4c <___vfprintf_internal_r+0x4e4>
    31d4:	d8c02d17 	ldw	r3,180(sp)
    31d8:	002b883a 	mov	r21,zero
    31dc:	00800044 	movi	r2,1
    31e0:	1c800017 	ldw	r18,0(r3)
    31e4:	18c00104 	addi	r3,r3,4
    31e8:	d8c02d15 	stw	r3,180(sp)
    31ec:	9007883a 	mov	r3,r18
    31f0:	003bc906 	br	2118 <___vfprintf_internal_r+0x9b0>
    31f4:	d9402d17 	ldw	r5,180(sp)
    31f8:	14800017 	ldw	r18,0(r2)
    31fc:	002b883a 	mov	r21,zero
    3200:	29400104 	addi	r5,r5,4
    3204:	d9402d15 	stw	r5,180(sp)
    3208:	003c2206 	br	2294 <___vfprintf_internal_r+0xb2c>
    320c:	01000074 	movhi	r4,1
    3210:	21090504 	addi	r4,r4,9236
    3214:	d9003115 	stw	r4,196(sp)
    3218:	003ba606 	br	20b4 <___vfprintf_internal_r+0x94c>
    321c:	b809883a 	mov	r4,r23
    3220:	b00b883a 	mov	r5,r22
    3224:	d9801e04 	addi	r6,sp,120
    3228:	0008c380 	call	8c38 <__sprint_r>
    322c:	103a431e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    3230:	dc002617 	ldw	r16,152(sp)
    3234:	d8c02017 	ldw	r3,128(sp)
    3238:	da000404 	addi	r8,sp,16
    323c:	003f9106 	br	3084 <___vfprintf_internal_r+0x191c>
    3240:	d8802e17 	ldw	r2,184(sp)
    3244:	d8c02d15 	stw	r3,180(sp)
    3248:	0085c83a 	sub	r2,zero,r2
    324c:	d8802e15 	stw	r2,184(sp)
    3250:	e005883a 	mov	r2,fp
    3254:	003a4206 	br	1b60 <___vfprintf_internal_r+0x3f8>
    3258:	e0800044 	addi	r2,fp,1
    325c:	9cc00814 	ori	r19,r19,32
    3260:	e4000047 	ldb	r16,1(fp)
    3264:	0039a606 	br	1900 <___vfprintf_internal_r+0x198>
    3268:	b809883a 	mov	r4,r23
    326c:	b00b883a 	mov	r5,r22
    3270:	d9801e04 	addi	r6,sp,120
    3274:	0008c380 	call	8c38 <__sprint_r>
    3278:	103a301e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    327c:	d8c02017 	ldw	r3,128(sp)
    3280:	da000404 	addi	r8,sp,16
    3284:	003cf006 	br	2648 <___vfprintf_internal_r+0xee0>
    3288:	d8c02817 	ldw	r3,160(sp)
    328c:	d9003117 	ldw	r4,196(sp)
    3290:	1923c83a 	sub	r17,r3,r4
    3294:	003a8c06 	br	1cc8 <___vfprintf_internal_r+0x560>
    3298:	da003f15 	stw	r8,252(sp)
    329c:	00016d00 	call	16d0 <strlen>
    32a0:	1023883a 	mov	r17,r2
    32a4:	da003f17 	ldw	r8,252(sp)
    32a8:	883c4a0e 	bge	r17,zero,23d4 <___vfprintf_internal_r+0xc6c>
    32ac:	0005883a 	mov	r2,zero
    32b0:	003c4806 	br	23d4 <___vfprintf_internal_r+0xc6c>
    32b4:	b809883a 	mov	r4,r23
    32b8:	b00b883a 	mov	r5,r22
    32bc:	d9801e04 	addi	r6,sp,120
    32c0:	0008c380 	call	8c38 <__sprint_r>
    32c4:	103a1d1e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    32c8:	d8c02017 	ldw	r3,128(sp)
    32cc:	d8801f17 	ldw	r2,124(sp)
    32d0:	da000404 	addi	r8,sp,16
    32d4:	d9403317 	ldw	r5,204(sp)
    32d8:	d9003117 	ldw	r4,196(sp)
    32dc:	10800044 	addi	r2,r2,1
    32e0:	1947883a 	add	r3,r3,r5
    32e4:	41000015 	stw	r4,0(r8)
    32e8:	41400115 	stw	r5,4(r8)
    32ec:	d8c02015 	stw	r3,128(sp)
    32f0:	d8801f15 	stw	r2,124(sp)
    32f4:	010001c4 	movi	r4,7
    32f8:	20bb0a0e 	bge	r4,r2,1f24 <___vfprintf_internal_r+0x7bc>
    32fc:	003d6206 	br	2888 <___vfprintf_internal_r+0x1120>
    3300:	01000074 	movhi	r4,1
    3304:	21091984 	addi	r4,r4,9318
    3308:	d9003615 	stw	r4,216(sp)
    330c:	003aa706 	br	1dac <___vfprintf_internal_r+0x644>
    3310:	d8802604 	addi	r2,sp,152
    3314:	d8800115 	stw	r2,4(sp)
    3318:	d9403717 	ldw	r5,220(sp)
    331c:	d8802504 	addi	r2,sp,148
    3320:	d8800215 	stw	r2,8(sp)
    3324:	d8802104 	addi	r2,sp,132
    3328:	da400015 	stw	r9,0(sp)
    332c:	d8800315 	stw	r2,12(sp)
    3330:	b809883a 	mov	r4,r23
    3334:	880d883a 	mov	r6,r17
    3338:	01c000c4 	movi	r7,3
    333c:	da003f15 	stw	r8,252(sp)
    3340:	da403e15 	stw	r9,248(sp)
    3344:	0003c1c0 	call	3c1c <_dtoa_r>
    3348:	da403e17 	ldw	r9,248(sp)
    334c:	da003f17 	ldw	r8,252(sp)
    3350:	d8803115 	stw	r2,196(sp)
    3354:	482b883a 	mov	r21,r9
    3358:	d8c03117 	ldw	r3,196(sp)
    335c:	00801184 	movi	r2,70
    3360:	1d55883a 	add	r10,r3,r21
    3364:	98bebb1e 	bne	r19,r2,2e54 <___vfprintf_internal_r+0x16ec>
    3368:	19000007 	ldb	r4,0(r3)
    336c:	00800c04 	movi	r2,48
    3370:	2080df26 	beq	r4,r2,36f0 <___vfprintf_internal_r+0x1f88>
    3374:	d8c02617 	ldw	r3,152(sp)
    3378:	50d5883a 	add	r10,r10,r3
    337c:	003eb506 	br	2e54 <___vfprintf_internal_r+0x16ec>
    3380:	0023883a 	mov	r17,zero
    3384:	003d9b06 	br	29f4 <___vfprintf_internal_r+0x128c>
    3388:	b809883a 	mov	r4,r23
    338c:	b00b883a 	mov	r5,r22
    3390:	d9801e04 	addi	r6,sp,120
    3394:	0008c380 	call	8c38 <__sprint_r>
    3398:	1039e81e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    339c:	d8c02017 	ldw	r3,128(sp)
    33a0:	da000404 	addi	r8,sp,16
    33a4:	003d9206 	br	29f0 <___vfprintf_internal_r+0x1288>
    33a8:	b809883a 	mov	r4,r23
    33ac:	b00b883a 	mov	r5,r22
    33b0:	d9801e04 	addi	r6,sp,120
    33b4:	0008c380 	call	8c38 <__sprint_r>
    33b8:	1039e01e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    33bc:	d8802617 	ldw	r2,152(sp)
    33c0:	d8c02017 	ldw	r3,128(sp)
    33c4:	da000404 	addi	r8,sp,16
    33c8:	003dfb06 	br	2bb8 <___vfprintf_internal_r+0x1450>
    33cc:	01000074 	movhi	r4,1
    33d0:	21091584 	addi	r4,r4,9302
    33d4:	d9002c15 	stw	r4,176(sp)
    33d8:	d9002c17 	ldw	r4,176(sp)
    33dc:	1c07883a 	add	r3,r3,r16
    33e0:	10800044 	addi	r2,r2,1
    33e4:	41000015 	stw	r4,0(r8)
    33e8:	44000115 	stw	r16,4(r8)
    33ec:	d8c02015 	stw	r3,128(sp)
    33f0:	d8801f15 	stw	r2,124(sp)
    33f4:	010001c4 	movi	r4,7
    33f8:	20bfae16 	blt	r4,r2,32b4 <___vfprintf_internal_r+0x1b4c>
    33fc:	42000204 	addi	r8,r8,8
    3400:	003fb406 	br	32d4 <___vfprintf_internal_r+0x1b6c>
    3404:	00800184 	movi	r2,6
    3408:	1240012e 	bgeu	r2,r9,3410 <___vfprintf_internal_r+0x1ca8>
    340c:	1013883a 	mov	r9,r2
    3410:	4823883a 	mov	r17,r9
    3414:	4805883a 	mov	r2,r9
    3418:	4800ac16 	blt	r9,zero,36cc <___vfprintf_internal_r+0x1f64>
    341c:	01400074 	movhi	r5,1
    3420:	29491304 	addi	r5,r5,9292
    3424:	d8802b15 	stw	r2,172(sp)
    3428:	dc802d15 	stw	r18,180(sp)
    342c:	d8003215 	stw	zero,200(sp)
    3430:	d8003415 	stw	zero,208(sp)
    3434:	d9403115 	stw	r5,196(sp)
    3438:	0005883a 	mov	r2,zero
    343c:	003a2e06 	br	1cf8 <___vfprintf_internal_r+0x590>
    3440:	0021883a 	mov	r16,zero
    3444:	003dee06 	br	2c00 <___vfprintf_internal_r+0x1498>
    3448:	01400074 	movhi	r5,1
    344c:	29491984 	addi	r5,r5,9318
    3450:	d9403615 	stw	r5,216(sp)
    3454:	003ad806 	br	1fb8 <___vfprintf_internal_r+0x850>
    3458:	b809883a 	mov	r4,r23
    345c:	b00b883a 	mov	r5,r22
    3460:	d9801e04 	addi	r6,sp,120
    3464:	0008c380 	call	8c38 <__sprint_r>
    3468:	1039b41e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    346c:	d8802617 	ldw	r2,152(sp)
    3470:	d9403317 	ldw	r5,204(sp)
    3474:	d8c02017 	ldw	r3,128(sp)
    3478:	da000404 	addi	r8,sp,16
    347c:	2885c83a 	sub	r2,r5,r2
    3480:	003dde06 	br	2bfc <___vfprintf_internal_r+0x1494>
    3484:	01400074 	movhi	r5,1
    3488:	29490804 	addi	r5,r5,9248
    348c:	d9403115 	stw	r5,196(sp)
    3490:	003f2e06 	br	314c <___vfprintf_internal_r+0x19e4>
    3494:	00800b44 	movi	r2,45
    3498:	d8802785 	stb	r2,158(sp)
    349c:	df002b15 	stw	fp,172(sp)
    34a0:	d8003215 	stw	zero,200(sp)
    34a4:	df002d17 	ldw	fp,180(sp)
    34a8:	00800b44 	movi	r2,45
    34ac:	dc802d15 	stw	r18,180(sp)
    34b0:	003a0e06 	br	1cec <___vfprintf_internal_r+0x584>
    34b4:	d8c02617 	ldw	r3,152(sp)
    34b8:	00bfff44 	movi	r2,-3
    34bc:	18801b16 	blt	r3,r2,352c <___vfprintf_internal_r+0x1dc4>
    34c0:	48c01a16 	blt	r9,r3,352c <___vfprintf_internal_r+0x1dc4>
    34c4:	d8c03415 	stw	r3,208(sp)
    34c8:	040019c4 	movi	r16,103
    34cc:	003e8006 	br	2ed0 <___vfprintf_internal_r+0x1768>
    34d0:	04c00b44 	movi	r19,45
    34d4:	dcc02785 	stb	r19,158(sp)
    34d8:	003af106 	br	20a0 <___vfprintf_internal_r+0x938>
    34dc:	d8c02d17 	ldw	r3,180(sp)
    34e0:	d9002f17 	ldw	r4,188(sp)
    34e4:	18800017 	ldw	r2,0(r3)
    34e8:	18c00104 	addi	r3,r3,4
    34ec:	d8c02d15 	stw	r3,180(sp)
    34f0:	11000015 	stw	r4,0(r2)
    34f4:	0038d706 	br	1854 <___vfprintf_internal_r+0xec>
    34f8:	01000074 	movhi	r4,1
    34fc:	21091584 	addi	r4,r4,9302
    3500:	d9002c15 	stw	r4,176(sp)
    3504:	003c8e06 	br	2740 <___vfprintf_internal_r+0xfd8>
    3508:	5005883a 	mov	r2,r10
    350c:	003e6506 	br	2ea4 <___vfprintf_internal_r+0x173c>
    3510:	da402b15 	stw	r9,172(sp)
    3514:	dcc02783 	ldbu	r19,158(sp)
    3518:	4823883a 	mov	r17,r9
    351c:	dc802d15 	stw	r18,180(sp)
    3520:	d8003215 	stw	zero,200(sp)
    3524:	d8003415 	stw	zero,208(sp)
    3528:	0039ec06 	br	1cdc <___vfprintf_internal_r+0x574>
    352c:	843fff84 	addi	r16,r16,-2
    3530:	1d7fffc4 	addi	r21,r3,-1
    3534:	dd402615 	stw	r21,152(sp)
    3538:	dc0022c5 	stb	r16,139(sp)
    353c:	a8009616 	blt	r21,zero,3798 <___vfprintf_internal_r+0x2030>
    3540:	00800ac4 	movi	r2,43
    3544:	d8802305 	stb	r2,140(sp)
    3548:	00800244 	movi	r2,9
    354c:	1540610e 	bge	r2,r21,36d4 <___vfprintf_internal_r+0x1f6c>
    3550:	dcc022c4 	addi	r19,sp,139
    3554:	dc002c15 	stw	r16,176(sp)
    3558:	4023883a 	mov	r17,r8
    355c:	9821883a 	mov	r16,r19
    3560:	a809883a 	mov	r4,r21
    3564:	01400284 	movi	r5,10
    3568:	000b6480 	call	b648 <__modsi3>
    356c:	10800c04 	addi	r2,r2,48
    3570:	843fffc4 	addi	r16,r16,-1
    3574:	a809883a 	mov	r4,r21
    3578:	01400284 	movi	r5,10
    357c:	80800005 	stb	r2,0(r16)
    3580:	000b5f40 	call	b5f4 <__divsi3>
    3584:	01000244 	movi	r4,9
    3588:	102b883a 	mov	r21,r2
    358c:	20bff416 	blt	r4,r2,3560 <___vfprintf_internal_r+0x1df8>
    3590:	8811883a 	mov	r8,r17
    3594:	10800c04 	addi	r2,r2,48
    3598:	8023883a 	mov	r17,r16
    359c:	897fffc4 	addi	r5,r17,-1
    35a0:	88bfffc5 	stb	r2,-1(r17)
    35a4:	dc002c17 	ldw	r16,176(sp)
    35a8:	2cc07f2e 	bgeu	r5,r19,37a8 <___vfprintf_internal_r+0x2040>
    35ac:	d9802384 	addi	r6,sp,142
    35b0:	344dc83a 	sub	r6,r6,r17
    35b4:	d9002344 	addi	r4,sp,141
    35b8:	998d883a 	add	r6,r19,r6
    35bc:	00000106 	br	35c4 <___vfprintf_internal_r+0x1e5c>
    35c0:	28800003 	ldbu	r2,0(r5)
    35c4:	20800005 	stb	r2,0(r4)
    35c8:	21000044 	addi	r4,r4,1
    35cc:	29400044 	addi	r5,r5,1
    35d0:	21bffb1e 	bne	r4,r6,35c0 <___vfprintf_internal_r+0x1e58>
    35d4:	d8802304 	addi	r2,sp,140
    35d8:	1445c83a 	sub	r2,r2,r17
    35dc:	d9402344 	addi	r5,sp,141
    35e0:	2885883a 	add	r2,r5,r2
    35e4:	14e7c83a 	sub	r19,r2,r19
    35e8:	d8803317 	ldw	r2,204(sp)
    35ec:	d8c03317 	ldw	r3,204(sp)
    35f0:	dcc03a15 	stw	r19,232(sp)
    35f4:	14e3883a 	add	r17,r2,r19
    35f8:	00800044 	movi	r2,1
    35fc:	10c04e0e 	bge	r2,r3,3738 <___vfprintf_internal_r+0x1fd0>
    3600:	8c400044 	addi	r17,r17,1
    3604:	8839883a 	mov	fp,r17
    3608:	88004916 	blt	r17,zero,3730 <___vfprintf_internal_r+0x1fc8>
    360c:	d8003415 	stw	zero,208(sp)
    3610:	003e3806 	br	2ef4 <___vfprintf_internal_r+0x178c>
    3614:	483de91e 	bne	r9,zero,2dbc <___vfprintf_internal_r+0x1654>
    3618:	8813883a 	mov	r9,r17
    361c:	003de706 	br	2dbc <___vfprintf_internal_r+0x1654>
    3620:	b809883a 	mov	r4,r23
    3624:	b00b883a 	mov	r5,r22
    3628:	d9801e04 	addi	r6,sp,120
    362c:	0008c380 	call	8c38 <__sprint_r>
    3630:	1039421e 	bne	r2,zero,1b3c <___vfprintf_internal_r+0x3d4>
    3634:	dc002617 	ldw	r16,152(sp)
    3638:	d8c02017 	ldw	r3,128(sp)
    363c:	d8801f17 	ldw	r2,124(sp)
    3640:	da000404 	addi	r8,sp,16
    3644:	003ea006 	br	30c8 <___vfprintf_internal_r+0x1960>
    3648:	02400184 	movi	r9,6
    364c:	003ddb06 	br	2dbc <___vfprintf_internal_r+0x1654>
    3650:	00c00b44 	movi	r3,45
    3654:	2460003c 	xorhi	r17,r4,32768
    3658:	d8c02b05 	stb	r3,172(sp)
    365c:	003ddd06 	br	2dd4 <___vfprintf_internal_r+0x166c>
    3660:	d8c03417 	ldw	r3,208(sp)
    3664:	00c03d0e 	bge	zero,r3,375c <___vfprintf_internal_r+0x1ff4>
    3668:	04400044 	movi	r17,1
    366c:	d9003317 	ldw	r4,204(sp)
    3670:	8923883a 	add	r17,r17,r4
    3674:	8839883a 	mov	fp,r17
    3678:	883e1e0e 	bge	r17,zero,2ef4 <___vfprintf_internal_r+0x178c>
    367c:	0039883a 	mov	fp,zero
    3680:	003e1c06 	br	2ef4 <___vfprintf_internal_r+0x178c>
    3684:	4d400044 	addi	r21,r9,1
    3688:	003dd906 	br	2df0 <___vfprintf_internal_r+0x1688>
    368c:	1839883a 	mov	fp,r3
    3690:	18004716 	blt	r3,zero,37b0 <___vfprintf_internal_r+0x2048>
    3694:	dc403417 	ldw	r17,208(sp)
    3698:	003e1606 	br	2ef4 <___vfprintf_internal_r+0x178c>
    369c:	00c0290e 	bge	zero,r3,3744 <___vfprintf_internal_r+0x1fdc>
    36a0:	4800021e 	bne	r9,zero,36ac <___vfprintf_internal_r+0x1f44>
    36a4:	e080004c 	andi	r2,fp,1
    36a8:	103ff826 	beq	r2,zero,368c <___vfprintf_internal_r+0x1f24>
    36ac:	d8c03417 	ldw	r3,208(sp)
    36b0:	4a400044 	addi	r9,r9,1
    36b4:	1a63883a 	add	r17,r3,r9
    36b8:	8839883a 	mov	fp,r17
    36bc:	883e0d0e 	bge	r17,zero,2ef4 <___vfprintf_internal_r+0x178c>
    36c0:	003fee06 	br	367c <___vfprintf_internal_r+0x1f14>
    36c4:	d8802117 	ldw	r2,132(sp)
    36c8:	003df606 	br	2ea4 <___vfprintf_internal_r+0x173c>
    36cc:	0005883a 	mov	r2,zero
    36d0:	003f5206 	br	341c <___vfprintf_internal_r+0x1cb4>
    36d4:	00800c04 	movi	r2,48
    36d8:	a8c00c04 	addi	r3,r21,48
    36dc:	d8802345 	stb	r2,141(sp)
    36e0:	d8c02385 	stb	r3,142(sp)
    36e4:	d88023c4 	addi	r2,sp,143
    36e8:	dcc022c4 	addi	r19,sp,139
    36ec:	003fbd06 	br	35e4 <___vfprintf_internal_r+0x1e7c>
    36f0:	d9003717 	ldw	r4,220(sp)
    36f4:	880b883a 	mov	r5,r17
    36f8:	000d883a 	mov	r6,zero
    36fc:	000f883a 	mov	r7,zero
    3700:	da003f15 	stw	r8,252(sp)
    3704:	da403e15 	stw	r9,248(sp)
    3708:	da803d15 	stw	r10,244(sp)
    370c:	000c8d00 	call	c8d0 <__eqdf2>
    3710:	da003f17 	ldw	r8,252(sp)
    3714:	da403e17 	ldw	r9,248(sp)
    3718:	da803d17 	ldw	r10,244(sp)
    371c:	103f1526 	beq	r2,zero,3374 <___vfprintf_internal_r+0x1c0c>
    3720:	00800044 	movi	r2,1
    3724:	1547c83a 	sub	r3,r2,r21
    3728:	d8c02615 	stw	r3,152(sp)
    372c:	003f1206 	br	3378 <___vfprintf_internal_r+0x1c10>
    3730:	0039883a 	mov	fp,zero
    3734:	003fb506 	br	360c <___vfprintf_internal_r+0x1ea4>
    3738:	e084703a 	and	r2,fp,r2
    373c:	103fb126 	beq	r2,zero,3604 <___vfprintf_internal_r+0x1e9c>
    3740:	003faf06 	br	3600 <___vfprintf_internal_r+0x1e98>
    3744:	4800081e 	bne	r9,zero,3768 <___vfprintf_internal_r+0x2000>
    3748:	e080004c 	andi	r2,fp,1
    374c:	1000061e 	bne	r2,zero,3768 <___vfprintf_internal_r+0x2000>
    3750:	07000044 	movi	fp,1
    3754:	e023883a 	mov	r17,fp
    3758:	003de606 	br	2ef4 <___vfprintf_internal_r+0x178c>
    375c:	04400084 	movi	r17,2
    3760:	88e3c83a 	sub	r17,r17,r3
    3764:	003fc106 	br	366c <___vfprintf_internal_r+0x1f04>
    3768:	4c400084 	addi	r17,r9,2
    376c:	8839883a 	mov	fp,r17
    3770:	883de00e 	bge	r17,zero,2ef4 <___vfprintf_internal_r+0x178c>
    3774:	003fc106 	br	367c <___vfprintf_internal_r+0x1f14>
    3778:	d9402d17 	ldw	r5,180(sp)
    377c:	2a400017 	ldw	r9,0(r5)
    3780:	28c00104 	addi	r3,r5,4
    3784:	d8c02d15 	stw	r3,180(sp)
    3788:	483eb50e 	bge	r9,zero,3260 <___vfprintf_internal_r+0x1af8>
    378c:	027fffc4 	movi	r9,-1
    3790:	e4000047 	ldb	r16,1(fp)
    3794:	00385a06 	br	1900 <___vfprintf_internal_r+0x198>
    3798:	00800b44 	movi	r2,45
    379c:	056bc83a 	sub	r21,zero,r21
    37a0:	d8802305 	stb	r2,140(sp)
    37a4:	003f6806 	br	3548 <___vfprintf_internal_r+0x1de0>
    37a8:	d8802344 	addi	r2,sp,141
    37ac:	003f8d06 	br	35e4 <___vfprintf_internal_r+0x1e7c>
    37b0:	0039883a 	mov	fp,zero
    37b4:	003fb706 	br	3694 <___vfprintf_internal_r+0x1f2c>
    37b8:	d8c02617 	ldw	r3,152(sp)
    37bc:	003f5c06 	br	3530 <___vfprintf_internal_r+0x1dc8>

000037c0 <__vfprintf_internal>:
    37c0:	2007883a 	mov	r3,r4
    37c4:	01000074 	movhi	r4,1
    37c8:	21117b04 	addi	r4,r4,17900
    37cc:	21000017 	ldw	r4,0(r4)
    37d0:	2805883a 	mov	r2,r5
    37d4:	300f883a 	mov	r7,r6
    37d8:	180b883a 	mov	r5,r3
    37dc:	100d883a 	mov	r6,r2
    37e0:	00017681 	jmpi	1768 <___vfprintf_internal_r>

000037e4 <__sbprintf>:
    37e4:	2880030b 	ldhu	r2,12(r5)
    37e8:	2ac01917 	ldw	r11,100(r5)
    37ec:	2a80038b 	ldhu	r10,14(r5)
    37f0:	2a400717 	ldw	r9,28(r5)
    37f4:	2a000917 	ldw	r8,36(r5)
    37f8:	defee204 	addi	sp,sp,-1144
    37fc:	00c10004 	movi	r3,1024
    3800:	dc011a15 	stw	r16,1128(sp)
    3804:	10bfff4c 	andi	r2,r2,65533
    3808:	2821883a 	mov	r16,r5
    380c:	d8cb883a 	add	r5,sp,r3
    3810:	dc811c15 	stw	r18,1136(sp)
    3814:	dc411b15 	stw	r17,1132(sp)
    3818:	dfc11d15 	stw	ra,1140(sp)
    381c:	2025883a 	mov	r18,r4
    3820:	d881030d 	sth	r2,1036(sp)
    3824:	dac11915 	stw	r11,1124(sp)
    3828:	da81038d 	sth	r10,1038(sp)
    382c:	da410715 	stw	r9,1052(sp)
    3830:	da010915 	stw	r8,1060(sp)
    3834:	dec10015 	stw	sp,1024(sp)
    3838:	dec10415 	stw	sp,1040(sp)
    383c:	d8c10215 	stw	r3,1032(sp)
    3840:	d8c10515 	stw	r3,1044(sp)
    3844:	d8010615 	stw	zero,1048(sp)
    3848:	00017680 	call	1768 <___vfprintf_internal_r>
    384c:	1023883a 	mov	r17,r2
    3850:	10000416 	blt	r2,zero,3864 <__sbprintf+0x80>
    3854:	9009883a 	mov	r4,r18
    3858:	d9410004 	addi	r5,sp,1024
    385c:	000554c0 	call	554c <_fflush_r>
    3860:	10000d1e 	bne	r2,zero,3898 <__sbprintf+0xb4>
    3864:	d8c1030b 	ldhu	r3,1036(sp)
    3868:	18c0100c 	andi	r3,r3,64
    386c:	18000326 	beq	r3,zero,387c <__sbprintf+0x98>
    3870:	8080030b 	ldhu	r2,12(r16)
    3874:	10801014 	ori	r2,r2,64
    3878:	8080030d 	sth	r2,12(r16)
    387c:	8805883a 	mov	r2,r17
    3880:	dfc11d17 	ldw	ra,1140(sp)
    3884:	dc811c17 	ldw	r18,1136(sp)
    3888:	dc411b17 	ldw	r17,1132(sp)
    388c:	dc011a17 	ldw	r16,1128(sp)
    3890:	dec11e04 	addi	sp,sp,1144
    3894:	f800283a 	ret
    3898:	047fffc4 	movi	r17,-1
    389c:	003ff106 	br	3864 <__sbprintf+0x80>

000038a0 <__swsetup_r>:
    38a0:	00800074 	movhi	r2,1
    38a4:	defffd04 	addi	sp,sp,-12
    38a8:	10917b04 	addi	r2,r2,17900
    38ac:	dc400115 	stw	r17,4(sp)
    38b0:	2023883a 	mov	r17,r4
    38b4:	11000017 	ldw	r4,0(r2)
    38b8:	dc000015 	stw	r16,0(sp)
    38bc:	dfc00215 	stw	ra,8(sp)
    38c0:	2821883a 	mov	r16,r5
    38c4:	20000226 	beq	r4,zero,38d0 <__swsetup_r+0x30>
    38c8:	20c00e17 	ldw	r3,56(r4)
    38cc:	18003126 	beq	r3,zero,3994 <__swsetup_r+0xf4>
    38d0:	8080030b 	ldhu	r2,12(r16)
    38d4:	10c0020c 	andi	r3,r2,8
    38d8:	100d883a 	mov	r6,r2
    38dc:	18000f26 	beq	r3,zero,391c <__swsetup_r+0x7c>
    38e0:	80c00417 	ldw	r3,16(r16)
    38e4:	18001526 	beq	r3,zero,393c <__swsetup_r+0x9c>
    38e8:	1100004c 	andi	r4,r2,1
    38ec:	20001c1e 	bne	r4,zero,3960 <__swsetup_r+0xc0>
    38f0:	1080008c 	andi	r2,r2,2
    38f4:	1000291e 	bne	r2,zero,399c <__swsetup_r+0xfc>
    38f8:	80800517 	ldw	r2,20(r16)
    38fc:	80800215 	stw	r2,8(r16)
    3900:	18001c26 	beq	r3,zero,3974 <__swsetup_r+0xd4>
    3904:	0005883a 	mov	r2,zero
    3908:	dfc00217 	ldw	ra,8(sp)
    390c:	dc400117 	ldw	r17,4(sp)
    3910:	dc000017 	ldw	r16,0(sp)
    3914:	dec00304 	addi	sp,sp,12
    3918:	f800283a 	ret
    391c:	3080040c 	andi	r2,r6,16
    3920:	10002e26 	beq	r2,zero,39dc <__swsetup_r+0x13c>
    3924:	3080010c 	andi	r2,r6,4
    3928:	10001e1e 	bne	r2,zero,39a4 <__swsetup_r+0x104>
    392c:	80c00417 	ldw	r3,16(r16)
    3930:	30800214 	ori	r2,r6,8
    3934:	8080030d 	sth	r2,12(r16)
    3938:	183feb1e 	bne	r3,zero,38e8 <__swsetup_r+0x48>
    393c:	1140a00c 	andi	r5,r2,640
    3940:	01008004 	movi	r4,512
    3944:	293fe826 	beq	r5,r4,38e8 <__swsetup_r+0x48>
    3948:	8809883a 	mov	r4,r17
    394c:	800b883a 	mov	r5,r16
    3950:	00064d00 	call	64d0 <__smakebuf_r>
    3954:	8080030b 	ldhu	r2,12(r16)
    3958:	80c00417 	ldw	r3,16(r16)
    395c:	003fe206 	br	38e8 <__swsetup_r+0x48>
    3960:	80800517 	ldw	r2,20(r16)
    3964:	80000215 	stw	zero,8(r16)
    3968:	0085c83a 	sub	r2,zero,r2
    396c:	80800615 	stw	r2,24(r16)
    3970:	183fe41e 	bne	r3,zero,3904 <__swsetup_r+0x64>
    3974:	80c0030b 	ldhu	r3,12(r16)
    3978:	0005883a 	mov	r2,zero
    397c:	1900200c 	andi	r4,r3,128
    3980:	203fe126 	beq	r4,zero,3908 <__swsetup_r+0x68>
    3984:	18c01014 	ori	r3,r3,64
    3988:	80c0030d 	sth	r3,12(r16)
    398c:	00bfffc4 	movi	r2,-1
    3990:	003fdd06 	br	3908 <__swsetup_r+0x68>
    3994:	00059380 	call	5938 <__sinit>
    3998:	003fcd06 	br	38d0 <__swsetup_r+0x30>
    399c:	0005883a 	mov	r2,zero
    39a0:	003fd606 	br	38fc <__swsetup_r+0x5c>
    39a4:	81400c17 	ldw	r5,48(r16)
    39a8:	28000626 	beq	r5,zero,39c4 <__swsetup_r+0x124>
    39ac:	80801004 	addi	r2,r16,64
    39b0:	28800326 	beq	r5,r2,39c0 <__swsetup_r+0x120>
    39b4:	8809883a 	mov	r4,r17
    39b8:	0005aac0 	call	5aac <_free_r>
    39bc:	8180030b 	ldhu	r6,12(r16)
    39c0:	80000c15 	stw	zero,48(r16)
    39c4:	80c00417 	ldw	r3,16(r16)
    39c8:	00bff6c4 	movi	r2,-37
    39cc:	118c703a 	and	r6,r2,r6
    39d0:	80000115 	stw	zero,4(r16)
    39d4:	80c00015 	stw	r3,0(r16)
    39d8:	003fd506 	br	3930 <__swsetup_r+0x90>
    39dc:	00800244 	movi	r2,9
    39e0:	88800015 	stw	r2,0(r17)
    39e4:	30801014 	ori	r2,r6,64
    39e8:	8080030d 	sth	r2,12(r16)
    39ec:	00bfffc4 	movi	r2,-1
    39f0:	003fc506 	br	3908 <__swsetup_r+0x68>

000039f4 <quorem>:
    39f4:	defff204 	addi	sp,sp,-56
    39f8:	ddc00b15 	stw	r23,44(sp)
    39fc:	20800417 	ldw	r2,16(r4)
    3a00:	2dc00417 	ldw	r23,16(r5)
    3a04:	dfc00d15 	stw	ra,52(sp)
    3a08:	df000c15 	stw	fp,48(sp)
    3a0c:	dd800a15 	stw	r22,40(sp)
    3a10:	dd400915 	stw	r21,36(sp)
    3a14:	dd000815 	stw	r20,32(sp)
    3a18:	dcc00715 	stw	r19,28(sp)
    3a1c:	dc800615 	stw	r18,24(sp)
    3a20:	dc400515 	stw	r17,20(sp)
    3a24:	dc000415 	stw	r16,16(sp)
    3a28:	15c07a16 	blt	r2,r23,3c14 <quorem+0x220>
    3a2c:	bdffffc4 	addi	r23,r23,-1
    3a30:	bde9883a 	add	r20,r23,r23
    3a34:	28c00504 	addi	r3,r5,20
    3a38:	a529883a 	add	r20,r20,r20
    3a3c:	1d39883a 	add	fp,r3,r20
    3a40:	24c00504 	addi	r19,r4,20
    3a44:	d9400215 	stw	r5,8(sp)
    3a48:	9d29883a 	add	r20,r19,r20
    3a4c:	e1400017 	ldw	r5,0(fp)
    3a50:	d9000015 	stw	r4,0(sp)
    3a54:	a1000017 	ldw	r4,0(r20)
    3a58:	29400044 	addi	r5,r5,1
    3a5c:	d8c00115 	stw	r3,4(sp)
    3a60:	dd000315 	stw	r20,12(sp)
    3a64:	000b6a40 	call	b6a4 <__udivsi3>
    3a68:	1025883a 	mov	r18,r2
    3a6c:	10003026 	beq	r2,zero,3b30 <quorem+0x13c>
    3a70:	dc400117 	ldw	r17,4(sp)
    3a74:	9829883a 	mov	r20,r19
    3a78:	002d883a 	mov	r22,zero
    3a7c:	0021883a 	mov	r16,zero
    3a80:	8d400017 	ldw	r21,0(r17)
    3a84:	900b883a 	mov	r5,r18
    3a88:	8c400104 	addi	r17,r17,4
    3a8c:	a93fffcc 	andi	r4,r21,65535
    3a90:	0000eb00 	call	eb0 <__mulsi3>
    3a94:	a808d43a 	srli	r4,r21,16
    3a98:	900b883a 	mov	r5,r18
    3a9c:	b0ad883a 	add	r22,r22,r2
    3aa0:	0000eb00 	call	eb0 <__mulsi3>
    3aa4:	a1000017 	ldw	r4,0(r20)
    3aa8:	b00cd43a 	srli	r6,r22,16
    3aac:	b0ffffcc 	andi	r3,r22,65535
    3ab0:	217fffcc 	andi	r5,r4,65535
    3ab4:	2c21883a 	add	r16,r5,r16
    3ab8:	80c7c83a 	sub	r3,r16,r3
    3abc:	2008d43a 	srli	r4,r4,16
    3ac0:	3085883a 	add	r2,r6,r2
    3ac4:	1821d43a 	srai	r16,r3,16
    3ac8:	117fffcc 	andi	r5,r2,65535
    3acc:	2149c83a 	sub	r4,r4,r5
    3ad0:	2421883a 	add	r16,r4,r16
    3ad4:	8008943a 	slli	r4,r16,16
    3ad8:	18ffffcc 	andi	r3,r3,65535
    3adc:	102cd43a 	srli	r22,r2,16
    3ae0:	20c8b03a 	or	r4,r4,r3
    3ae4:	a1000015 	stw	r4,0(r20)
    3ae8:	8021d43a 	srai	r16,r16,16
    3aec:	a5000104 	addi	r20,r20,4
    3af0:	e47fe32e 	bgeu	fp,r17,3a80 <quorem+0x8c>
    3af4:	d8c00317 	ldw	r3,12(sp)
    3af8:	18800017 	ldw	r2,0(r3)
    3afc:	10000c1e 	bne	r2,zero,3b30 <quorem+0x13c>
    3b00:	18bfff04 	addi	r2,r3,-4
    3b04:	9880082e 	bgeu	r19,r2,3b28 <quorem+0x134>
    3b08:	18ffff17 	ldw	r3,-4(r3)
    3b0c:	18000326 	beq	r3,zero,3b1c <quorem+0x128>
    3b10:	00000506 	br	3b28 <quorem+0x134>
    3b14:	10c00017 	ldw	r3,0(r2)
    3b18:	1800031e 	bne	r3,zero,3b28 <quorem+0x134>
    3b1c:	10bfff04 	addi	r2,r2,-4
    3b20:	bdffffc4 	addi	r23,r23,-1
    3b24:	98bffb36 	bltu	r19,r2,3b14 <quorem+0x120>
    3b28:	d8c00017 	ldw	r3,0(sp)
    3b2c:	1dc00415 	stw	r23,16(r3)
    3b30:	d9000017 	ldw	r4,0(sp)
    3b34:	d9400217 	ldw	r5,8(sp)
    3b38:	0007c600 	call	7c60 <__mcmp>
    3b3c:	10002816 	blt	r2,zero,3be0 <quorem+0x1ec>
    3b40:	dc400117 	ldw	r17,4(sp)
    3b44:	94800044 	addi	r18,r18,1
    3b48:	980d883a 	mov	r6,r19
    3b4c:	0007883a 	mov	r3,zero
    3b50:	31000017 	ldw	r4,0(r6)
    3b54:	89400017 	ldw	r5,0(r17)
    3b58:	31800104 	addi	r6,r6,4
    3b5c:	20bfffcc 	andi	r2,r4,65535
    3b60:	10c7883a 	add	r3,r2,r3
    3b64:	28bfffcc 	andi	r2,r5,65535
    3b68:	1885c83a 	sub	r2,r3,r2
    3b6c:	280ad43a 	srli	r5,r5,16
    3b70:	2008d43a 	srli	r4,r4,16
    3b74:	1007d43a 	srai	r3,r2,16
    3b78:	10bfffcc 	andi	r2,r2,65535
    3b7c:	2149c83a 	sub	r4,r4,r5
    3b80:	20c9883a 	add	r4,r4,r3
    3b84:	200a943a 	slli	r5,r4,16
    3b88:	8c400104 	addi	r17,r17,4
    3b8c:	2007d43a 	srai	r3,r4,16
    3b90:	2884b03a 	or	r2,r5,r2
    3b94:	30bfff15 	stw	r2,-4(r6)
    3b98:	e47fed2e 	bgeu	fp,r17,3b50 <quorem+0x15c>
    3b9c:	bdc5883a 	add	r2,r23,r23
    3ba0:	1085883a 	add	r2,r2,r2
    3ba4:	9887883a 	add	r3,r19,r2
    3ba8:	18800017 	ldw	r2,0(r3)
    3bac:	10000c1e 	bne	r2,zero,3be0 <quorem+0x1ec>
    3bb0:	18bfff04 	addi	r2,r3,-4
    3bb4:	9880082e 	bgeu	r19,r2,3bd8 <quorem+0x1e4>
    3bb8:	18ffff17 	ldw	r3,-4(r3)
    3bbc:	18000326 	beq	r3,zero,3bcc <quorem+0x1d8>
    3bc0:	00000506 	br	3bd8 <quorem+0x1e4>
    3bc4:	10c00017 	ldw	r3,0(r2)
    3bc8:	1800031e 	bne	r3,zero,3bd8 <quorem+0x1e4>
    3bcc:	10bfff04 	addi	r2,r2,-4
    3bd0:	bdffffc4 	addi	r23,r23,-1
    3bd4:	98bffb36 	bltu	r19,r2,3bc4 <quorem+0x1d0>
    3bd8:	d8c00017 	ldw	r3,0(sp)
    3bdc:	1dc00415 	stw	r23,16(r3)
    3be0:	9005883a 	mov	r2,r18
    3be4:	dfc00d17 	ldw	ra,52(sp)
    3be8:	df000c17 	ldw	fp,48(sp)
    3bec:	ddc00b17 	ldw	r23,44(sp)
    3bf0:	dd800a17 	ldw	r22,40(sp)
    3bf4:	dd400917 	ldw	r21,36(sp)
    3bf8:	dd000817 	ldw	r20,32(sp)
    3bfc:	dcc00717 	ldw	r19,28(sp)
    3c00:	dc800617 	ldw	r18,24(sp)
    3c04:	dc400517 	ldw	r17,20(sp)
    3c08:	dc000417 	ldw	r16,16(sp)
    3c0c:	dec00e04 	addi	sp,sp,56
    3c10:	f800283a 	ret
    3c14:	0005883a 	mov	r2,zero
    3c18:	003ff206 	br	3be4 <quorem+0x1f0>

00003c1c <_dtoa_r>:
    3c1c:	20801017 	ldw	r2,64(r4)
    3c20:	deffde04 	addi	sp,sp,-136
    3c24:	dd401d15 	stw	r21,116(sp)
    3c28:	dcc01b15 	stw	r19,108(sp)
    3c2c:	dc801a15 	stw	r18,104(sp)
    3c30:	dc401915 	stw	r17,100(sp)
    3c34:	dc001815 	stw	r16,96(sp)
    3c38:	dfc02115 	stw	ra,132(sp)
    3c3c:	df002015 	stw	fp,128(sp)
    3c40:	ddc01f15 	stw	r23,124(sp)
    3c44:	dd801e15 	stw	r22,120(sp)
    3c48:	dd001c15 	stw	r20,112(sp)
    3c4c:	d9c00315 	stw	r7,12(sp)
    3c50:	2021883a 	mov	r16,r4
    3c54:	302b883a 	mov	r21,r6
    3c58:	2825883a 	mov	r18,r5
    3c5c:	dc402417 	ldw	r17,144(sp)
    3c60:	3027883a 	mov	r19,r6
    3c64:	10000826 	beq	r2,zero,3c88 <_dtoa_r+0x6c>
    3c68:	21801117 	ldw	r6,68(r4)
    3c6c:	00c00044 	movi	r3,1
    3c70:	100b883a 	mov	r5,r2
    3c74:	1986983a 	sll	r3,r3,r6
    3c78:	11800115 	stw	r6,4(r2)
    3c7c:	10c00215 	stw	r3,8(r2)
    3c80:	00073780 	call	7378 <_Bfree>
    3c84:	80001015 	stw	zero,64(r16)
    3c88:	a8002d16 	blt	r21,zero,3d40 <_dtoa_r+0x124>
    3c8c:	88000015 	stw	zero,0(r17)
    3c90:	a8dffc2c 	andhi	r3,r21,32752
    3c94:	009ffc34 	movhi	r2,32752
    3c98:	18801b26 	beq	r3,r2,3d08 <_dtoa_r+0xec>
    3c9c:	9009883a 	mov	r4,r18
    3ca0:	980b883a 	mov	r5,r19
    3ca4:	000d883a 	mov	r6,zero
    3ca8:	000f883a 	mov	r7,zero
    3cac:	000c8d00 	call	c8d0 <__eqdf2>
    3cb0:	10002a1e 	bne	r2,zero,3d5c <_dtoa_r+0x140>
    3cb4:	d8c02317 	ldw	r3,140(sp)
    3cb8:	d9002517 	ldw	r4,148(sp)
    3cbc:	00800044 	movi	r2,1
    3cc0:	18800015 	stw	r2,0(r3)
    3cc4:	2001a226 	beq	r4,zero,4350 <_dtoa_r+0x734>
    3cc8:	00800074 	movhi	r2,1
    3ccc:	10891544 	addi	r2,r2,9301
    3cd0:	20800015 	stw	r2,0(r4)
    3cd4:	10bfffc4 	addi	r2,r2,-1
    3cd8:	dfc02117 	ldw	ra,132(sp)
    3cdc:	df002017 	ldw	fp,128(sp)
    3ce0:	ddc01f17 	ldw	r23,124(sp)
    3ce4:	dd801e17 	ldw	r22,120(sp)
    3ce8:	dd401d17 	ldw	r21,116(sp)
    3cec:	dd001c17 	ldw	r20,112(sp)
    3cf0:	dcc01b17 	ldw	r19,108(sp)
    3cf4:	dc801a17 	ldw	r18,104(sp)
    3cf8:	dc401917 	ldw	r17,100(sp)
    3cfc:	dc001817 	ldw	r16,96(sp)
    3d00:	dec02204 	addi	sp,sp,136
    3d04:	f800283a 	ret
    3d08:	d8c02317 	ldw	r3,140(sp)
    3d0c:	0089c3c4 	movi	r2,9999
    3d10:	18800015 	stw	r2,0(r3)
    3d14:	90017c26 	beq	r18,zero,4308 <_dtoa_r+0x6ec>
    3d18:	00800074 	movhi	r2,1
    3d1c:	10892104 	addi	r2,r2,9348
    3d20:	d9002517 	ldw	r4,148(sp)
    3d24:	203fec26 	beq	r4,zero,3cd8 <_dtoa_r+0xbc>
    3d28:	10c000c7 	ldb	r3,3(r2)
    3d2c:	18017d1e 	bne	r3,zero,4324 <_dtoa_r+0x708>
    3d30:	10c000c4 	addi	r3,r2,3
    3d34:	d9802517 	ldw	r6,148(sp)
    3d38:	30c00015 	stw	r3,0(r6)
    3d3c:	003fe606 	br	3cd8 <_dtoa_r+0xbc>
    3d40:	04e00034 	movhi	r19,32768
    3d44:	9cffffc4 	addi	r19,r19,-1
    3d48:	00800044 	movi	r2,1
    3d4c:	ace6703a 	and	r19,r21,r19
    3d50:	88800015 	stw	r2,0(r17)
    3d54:	982b883a 	mov	r21,r19
    3d58:	003fcd06 	br	3c90 <_dtoa_r+0x74>
    3d5c:	d8800204 	addi	r2,sp,8
    3d60:	a822d53a 	srli	r17,r21,20
    3d64:	d8800015 	stw	r2,0(sp)
    3d68:	8009883a 	mov	r4,r16
    3d6c:	900b883a 	mov	r5,r18
    3d70:	980d883a 	mov	r6,r19
    3d74:	d9c00104 	addi	r7,sp,4
    3d78:	0007fd40 	call	7fd4 <__d2b>
    3d7c:	1039883a 	mov	fp,r2
    3d80:	88016a1e 	bne	r17,zero,432c <_dtoa_r+0x710>
    3d84:	dd000217 	ldw	r20,8(sp)
    3d88:	dc400117 	ldw	r17,4(sp)
    3d8c:	00befbc4 	movi	r2,-1041
    3d90:	a463883a 	add	r17,r20,r17
    3d94:	8882ea16 	blt	r17,r2,4940 <_dtoa_r+0xd24>
    3d98:	00bf0384 	movi	r2,-1010
    3d9c:	1445c83a 	sub	r2,r2,r17
    3da0:	89010484 	addi	r4,r17,1042
    3da4:	a8aa983a 	sll	r21,r21,r2
    3da8:	9108d83a 	srl	r4,r18,r4
    3dac:	a908b03a 	or	r4,r21,r4
    3db0:	000dda80 	call	dda8 <__floatunsidf>
    3db4:	017f8434 	movhi	r5,65040
    3db8:	01800044 	movi	r6,1
    3dbc:	1009883a 	mov	r4,r2
    3dc0:	194b883a 	add	r5,r3,r5
    3dc4:	8c7fffc4 	addi	r17,r17,-1
    3dc8:	d9800f15 	stw	r6,60(sp)
    3dcc:	000d883a 	mov	r6,zero
    3dd0:	01cffe34 	movhi	r7,16376
    3dd4:	000d3800 	call	d380 <__subdf3>
    3dd8:	0198dbf4 	movhi	r6,25455
    3ddc:	01cff4f4 	movhi	r7,16339
    3de0:	1009883a 	mov	r4,r2
    3de4:	180b883a 	mov	r5,r3
    3de8:	3190d844 	addi	r6,r6,17249
    3dec:	39e1e9c4 	addi	r7,r7,-30809
    3df0:	000cb140 	call	cb14 <__muldf3>
    3df4:	01a2d874 	movhi	r6,35681
    3df8:	01cff1f4 	movhi	r7,16327
    3dfc:	180b883a 	mov	r5,r3
    3e00:	31b22cc4 	addi	r6,r6,-14157
    3e04:	39e28a04 	addi	r7,r7,-30168
    3e08:	1009883a 	mov	r4,r2
    3e0c:	000b6b40 	call	b6b4 <__adddf3>
    3e10:	8809883a 	mov	r4,r17
    3e14:	102d883a 	mov	r22,r2
    3e18:	182b883a 	mov	r21,r3
    3e1c:	000dcd80 	call	dcd8 <__floatsidf>
    3e20:	019427f4 	movhi	r6,20639
    3e24:	01cff4f4 	movhi	r7,16339
    3e28:	1009883a 	mov	r4,r2
    3e2c:	180b883a 	mov	r5,r3
    3e30:	319e7ec4 	addi	r6,r6,31227
    3e34:	39d104c4 	addi	r7,r7,17427
    3e38:	000cb140 	call	cb14 <__muldf3>
    3e3c:	b009883a 	mov	r4,r22
    3e40:	a80b883a 	mov	r5,r21
    3e44:	100d883a 	mov	r6,r2
    3e48:	180f883a 	mov	r7,r3
    3e4c:	000b6b40 	call	b6b4 <__adddf3>
    3e50:	1009883a 	mov	r4,r2
    3e54:	180b883a 	mov	r5,r3
    3e58:	102d883a 	mov	r22,r2
    3e5c:	182b883a 	mov	r21,r3
    3e60:	000dc500 	call	dc50 <__fixdfsi>
    3e64:	b009883a 	mov	r4,r22
    3e68:	a80b883a 	mov	r5,r21
    3e6c:	000d883a 	mov	r6,zero
    3e70:	000f883a 	mov	r7,zero
    3e74:	d8800515 	stw	r2,20(sp)
    3e78:	000ca340 	call	ca34 <__ledf2>
    3e7c:	10023116 	blt	r2,zero,4744 <_dtoa_r+0xb28>
    3e80:	d8c00517 	ldw	r3,20(sp)
    3e84:	00800584 	movi	r2,22
    3e88:	10c21f36 	bltu	r2,r3,4708 <_dtoa_r+0xaec>
    3e8c:	180490fa 	slli	r2,r3,3
    3e90:	00c00074 	movhi	r3,1
    3e94:	18c93d04 	addi	r3,r3,9460
    3e98:	1885883a 	add	r2,r3,r2
    3e9c:	11000017 	ldw	r4,0(r2)
    3ea0:	11400117 	ldw	r5,4(r2)
    3ea4:	900d883a 	mov	r6,r18
    3ea8:	980f883a 	mov	r7,r19
    3eac:	000c9540 	call	c954 <__gedf2>
    3eb0:	0082a70e 	bge	zero,r2,4950 <_dtoa_r+0xd34>
    3eb4:	d9000517 	ldw	r4,20(sp)
    3eb8:	d8000d15 	stw	zero,52(sp)
    3ebc:	213fffc4 	addi	r4,r4,-1
    3ec0:	d9000515 	stw	r4,20(sp)
    3ec4:	a463c83a 	sub	r17,r20,r17
    3ec8:	8dbfffc4 	addi	r22,r17,-1
    3ecc:	b0021916 	blt	r22,zero,4734 <_dtoa_r+0xb18>
    3ed0:	d8000815 	stw	zero,32(sp)
    3ed4:	d8800517 	ldw	r2,20(sp)
    3ed8:	10020e16 	blt	r2,zero,4714 <_dtoa_r+0xaf8>
    3edc:	b0ad883a 	add	r22,r22,r2
    3ee0:	d8800a15 	stw	r2,40(sp)
    3ee4:	d8000915 	stw	zero,36(sp)
    3ee8:	d8c00317 	ldw	r3,12(sp)
    3eec:	00800244 	movi	r2,9
    3ef0:	10c11a36 	bltu	r2,r3,435c <_dtoa_r+0x740>
    3ef4:	00800144 	movi	r2,5
    3ef8:	10c4fc0e 	bge	r2,r3,52ec <_dtoa_r+0x16d0>
    3efc:	18ffff04 	addi	r3,r3,-4
    3f00:	d8c00315 	stw	r3,12(sp)
    3f04:	0029883a 	mov	r20,zero
    3f08:	d9800317 	ldw	r6,12(sp)
    3f0c:	008000c4 	movi	r2,3
    3f10:	3083bd26 	beq	r6,r2,4e08 <_dtoa_r+0x11ec>
    3f14:	1183670e 	bge	r2,r6,4cb4 <_dtoa_r+0x1098>
    3f18:	d8c00317 	ldw	r3,12(sp)
    3f1c:	00800104 	movi	r2,4
    3f20:	1882e726 	beq	r3,r2,4ac0 <_dtoa_r+0xea4>
    3f24:	00800144 	movi	r2,5
    3f28:	1884f21e 	bne	r3,r2,52f4 <_dtoa_r+0x16d8>
    3f2c:	00800044 	movi	r2,1
    3f30:	d8800b15 	stw	r2,44(sp)
    3f34:	d8c02217 	ldw	r3,136(sp)
    3f38:	d9000517 	ldw	r4,20(sp)
    3f3c:	1907883a 	add	r3,r3,r4
    3f40:	19800044 	addi	r6,r3,1
    3f44:	d8c00c15 	stw	r3,48(sp)
    3f48:	d9800615 	stw	r6,24(sp)
    3f4c:	0183c30e 	bge	zero,r6,4e5c <_dtoa_r+0x1240>
    3f50:	d9800617 	ldw	r6,24(sp)
    3f54:	3023883a 	mov	r17,r6
    3f58:	80001115 	stw	zero,68(r16)
    3f5c:	008005c4 	movi	r2,23
    3f60:	1184f62e 	bgeu	r2,r6,533c <_dtoa_r+0x1720>
    3f64:	00c00044 	movi	r3,1
    3f68:	00800104 	movi	r2,4
    3f6c:	1085883a 	add	r2,r2,r2
    3f70:	11000504 	addi	r4,r2,20
    3f74:	180b883a 	mov	r5,r3
    3f78:	18c00044 	addi	r3,r3,1
    3f7c:	313ffb2e 	bgeu	r6,r4,3f6c <_dtoa_r+0x350>
    3f80:	81401115 	stw	r5,68(r16)
    3f84:	8009883a 	mov	r4,r16
    3f88:	00072d00 	call	72d0 <_Balloc>
    3f8c:	d8800715 	stw	r2,28(sp)
    3f90:	80801015 	stw	r2,64(r16)
    3f94:	00800384 	movi	r2,14
    3f98:	1440fd36 	bltu	r2,r17,4390 <_dtoa_r+0x774>
    3f9c:	a000fc26 	beq	r20,zero,4390 <_dtoa_r+0x774>
    3fa0:	d8800517 	ldw	r2,20(sp)
    3fa4:	0083b90e 	bge	zero,r2,4e8c <_dtoa_r+0x1270>
    3fa8:	d8c00517 	ldw	r3,20(sp)
    3fac:	108003cc 	andi	r2,r2,15
    3fb0:	100490fa 	slli	r2,r2,3
    3fb4:	182fd13a 	srai	r23,r3,4
    3fb8:	00c00074 	movhi	r3,1
    3fbc:	18c93d04 	addi	r3,r3,9460
    3fc0:	1885883a 	add	r2,r3,r2
    3fc4:	b8c0040c 	andi	r3,r23,16
    3fc8:	12c00017 	ldw	r11,0(r2)
    3fcc:	12800117 	ldw	r10,4(r2)
    3fd0:	18039726 	beq	r3,zero,4e30 <_dtoa_r+0x1214>
    3fd4:	00800074 	movhi	r2,1
    3fd8:	10893304 	addi	r2,r2,9420
    3fdc:	11800817 	ldw	r6,32(r2)
    3fe0:	11c00917 	ldw	r7,36(r2)
    3fe4:	9009883a 	mov	r4,r18
    3fe8:	980b883a 	mov	r5,r19
    3fec:	da801615 	stw	r10,88(sp)
    3ff0:	dac01515 	stw	r11,84(sp)
    3ff4:	000bf500 	call	bf50 <__divdf3>
    3ff8:	da801617 	ldw	r10,88(sp)
    3ffc:	dac01517 	ldw	r11,84(sp)
    4000:	bdc003cc 	andi	r23,r23,15
    4004:	044000c4 	movi	r17,3
    4008:	d8800e15 	stw	r2,56(sp)
    400c:	182b883a 	mov	r21,r3
    4010:	b8001126 	beq	r23,zero,4058 <_dtoa_r+0x43c>
    4014:	05000074 	movhi	r20,1
    4018:	a5093304 	addi	r20,r20,9420
    401c:	5805883a 	mov	r2,r11
    4020:	5007883a 	mov	r3,r10
    4024:	b980004c 	andi	r6,r23,1
    4028:	1009883a 	mov	r4,r2
    402c:	b82fd07a 	srai	r23,r23,1
    4030:	180b883a 	mov	r5,r3
    4034:	30000426 	beq	r6,zero,4048 <_dtoa_r+0x42c>
    4038:	a1800017 	ldw	r6,0(r20)
    403c:	a1c00117 	ldw	r7,4(r20)
    4040:	8c400044 	addi	r17,r17,1
    4044:	000cb140 	call	cb14 <__muldf3>
    4048:	a5000204 	addi	r20,r20,8
    404c:	b83ff51e 	bne	r23,zero,4024 <_dtoa_r+0x408>
    4050:	1017883a 	mov	r11,r2
    4054:	1815883a 	mov	r10,r3
    4058:	d9000e17 	ldw	r4,56(sp)
    405c:	a80b883a 	mov	r5,r21
    4060:	580d883a 	mov	r6,r11
    4064:	500f883a 	mov	r7,r10
    4068:	000bf500 	call	bf50 <__divdf3>
    406c:	1029883a 	mov	r20,r2
    4070:	182b883a 	mov	r21,r3
    4074:	d9800d17 	ldw	r6,52(sp)
    4078:	30000626 	beq	r6,zero,4094 <_dtoa_r+0x478>
    407c:	a009883a 	mov	r4,r20
    4080:	a80b883a 	mov	r5,r21
    4084:	000d883a 	mov	r6,zero
    4088:	01cffc34 	movhi	r7,16368
    408c:	000ca340 	call	ca34 <__ledf2>
    4090:	10043216 	blt	r2,zero,515c <_dtoa_r+0x1540>
    4094:	8809883a 	mov	r4,r17
    4098:	000dcd80 	call	dcd8 <__floatsidf>
    409c:	1009883a 	mov	r4,r2
    40a0:	180b883a 	mov	r5,r3
    40a4:	a00d883a 	mov	r6,r20
    40a8:	a80f883a 	mov	r7,r21
    40ac:	000cb140 	call	cb14 <__muldf3>
    40b0:	000d883a 	mov	r6,zero
    40b4:	1009883a 	mov	r4,r2
    40b8:	180b883a 	mov	r5,r3
    40bc:	01d00734 	movhi	r7,16412
    40c0:	000b6b40 	call	b6b4 <__adddf3>
    40c4:	1023883a 	mov	r17,r2
    40c8:	d9800617 	ldw	r6,24(sp)
    40cc:	00bf3034 	movhi	r2,64704
    40d0:	1885883a 	add	r2,r3,r2
    40d4:	d8800e15 	stw	r2,56(sp)
    40d8:	30032e26 	beq	r6,zero,4d94 <_dtoa_r+0x1178>
    40dc:	d8c00517 	ldw	r3,20(sp)
    40e0:	da800617 	ldw	r10,24(sp)
    40e4:	d8c01215 	stw	r3,72(sp)
    40e8:	d9000b17 	ldw	r4,44(sp)
    40ec:	2003b026 	beq	r4,zero,4fb0 <_dtoa_r+0x1394>
    40f0:	50bfffc4 	addi	r2,r10,-1
    40f4:	100490fa 	slli	r2,r2,3
    40f8:	00c00074 	movhi	r3,1
    40fc:	18c93d04 	addi	r3,r3,9460
    4100:	1885883a 	add	r2,r3,r2
    4104:	11800017 	ldw	r6,0(r2)
    4108:	11c00117 	ldw	r7,4(r2)
    410c:	d8800717 	ldw	r2,28(sp)
    4110:	0009883a 	mov	r4,zero
    4114:	014ff834 	movhi	r5,16352
    4118:	da801615 	stw	r10,88(sp)
    411c:	15c00044 	addi	r23,r2,1
    4120:	000bf500 	call	bf50 <__divdf3>
    4124:	d9c00e17 	ldw	r7,56(sp)
    4128:	880d883a 	mov	r6,r17
    412c:	1009883a 	mov	r4,r2
    4130:	180b883a 	mov	r5,r3
    4134:	000d3800 	call	d380 <__subdf3>
    4138:	a80b883a 	mov	r5,r21
    413c:	a009883a 	mov	r4,r20
    4140:	d8c01015 	stw	r3,64(sp)
    4144:	d8800e15 	stw	r2,56(sp)
    4148:	000dc500 	call	dc50 <__fixdfsi>
    414c:	1009883a 	mov	r4,r2
    4150:	d8801715 	stw	r2,92(sp)
    4154:	000dcd80 	call	dcd8 <__floatsidf>
    4158:	a009883a 	mov	r4,r20
    415c:	a80b883a 	mov	r5,r21
    4160:	100d883a 	mov	r6,r2
    4164:	180f883a 	mov	r7,r3
    4168:	000d3800 	call	d380 <__subdf3>
    416c:	da001717 	ldw	r8,92(sp)
    4170:	1829883a 	mov	r20,r3
    4174:	d8c00717 	ldw	r3,28(sp)
    4178:	d9000e17 	ldw	r4,56(sp)
    417c:	d9401017 	ldw	r5,64(sp)
    4180:	42000c04 	addi	r8,r8,48
    4184:	1023883a 	mov	r17,r2
    4188:	1a000005 	stb	r8,0(r3)
    418c:	880d883a 	mov	r6,r17
    4190:	a00f883a 	mov	r7,r20
    4194:	402b883a 	mov	r21,r8
    4198:	000c9540 	call	c954 <__gedf2>
    419c:	00844516 	blt	zero,r2,52b4 <_dtoa_r+0x1698>
    41a0:	0009883a 	mov	r4,zero
    41a4:	014ffc34 	movhi	r5,16368
    41a8:	880d883a 	mov	r6,r17
    41ac:	a00f883a 	mov	r7,r20
    41b0:	000d3800 	call	d380 <__subdf3>
    41b4:	d9000e17 	ldw	r4,56(sp)
    41b8:	d9401017 	ldw	r5,64(sp)
    41bc:	100d883a 	mov	r6,r2
    41c0:	180f883a 	mov	r7,r3
    41c4:	000c9540 	call	c954 <__gedf2>
    41c8:	da801617 	ldw	r10,88(sp)
    41cc:	00843616 	blt	zero,r2,52a8 <_dtoa_r+0x168c>
    41d0:	00800044 	movi	r2,1
    41d4:	12806e0e 	bge	r2,r10,4390 <_dtoa_r+0x774>
    41d8:	d9000717 	ldw	r4,28(sp)
    41dc:	dd801315 	stw	r22,76(sp)
    41e0:	dc001115 	stw	r16,68(sp)
    41e4:	2295883a 	add	r10,r4,r10
    41e8:	dcc01415 	stw	r19,80(sp)
    41ec:	502d883a 	mov	r22,r10
    41f0:	dcc01017 	ldw	r19,64(sp)
    41f4:	b821883a 	mov	r16,r23
    41f8:	dc801015 	stw	r18,64(sp)
    41fc:	dc800e17 	ldw	r18,56(sp)
    4200:	00000906 	br	4228 <_dtoa_r+0x60c>
    4204:	000d3800 	call	d380 <__subdf3>
    4208:	1009883a 	mov	r4,r2
    420c:	180b883a 	mov	r5,r3
    4210:	900d883a 	mov	r6,r18
    4214:	980f883a 	mov	r7,r19
    4218:	000ca340 	call	ca34 <__ledf2>
    421c:	10040e16 	blt	r2,zero,5258 <_dtoa_r+0x163c>
    4220:	b821883a 	mov	r16,r23
    4224:	bd841026 	beq	r23,r22,5268 <_dtoa_r+0x164c>
    4228:	9009883a 	mov	r4,r18
    422c:	980b883a 	mov	r5,r19
    4230:	000d883a 	mov	r6,zero
    4234:	01d00934 	movhi	r7,16420
    4238:	000cb140 	call	cb14 <__muldf3>
    423c:	000d883a 	mov	r6,zero
    4240:	01d00934 	movhi	r7,16420
    4244:	8809883a 	mov	r4,r17
    4248:	a00b883a 	mov	r5,r20
    424c:	1025883a 	mov	r18,r2
    4250:	1827883a 	mov	r19,r3
    4254:	000cb140 	call	cb14 <__muldf3>
    4258:	180b883a 	mov	r5,r3
    425c:	1009883a 	mov	r4,r2
    4260:	1823883a 	mov	r17,r3
    4264:	1029883a 	mov	r20,r2
    4268:	000dc500 	call	dc50 <__fixdfsi>
    426c:	1009883a 	mov	r4,r2
    4270:	102b883a 	mov	r21,r2
    4274:	000dcd80 	call	dcd8 <__floatsidf>
    4278:	a009883a 	mov	r4,r20
    427c:	880b883a 	mov	r5,r17
    4280:	100d883a 	mov	r6,r2
    4284:	180f883a 	mov	r7,r3
    4288:	000d3800 	call	d380 <__subdf3>
    428c:	ad400c04 	addi	r21,r21,48
    4290:	1009883a 	mov	r4,r2
    4294:	180b883a 	mov	r5,r3
    4298:	900d883a 	mov	r6,r18
    429c:	980f883a 	mov	r7,r19
    42a0:	85400005 	stb	r21,0(r16)
    42a4:	1023883a 	mov	r17,r2
    42a8:	1829883a 	mov	r20,r3
    42ac:	000ca340 	call	ca34 <__ledf2>
    42b0:	bdc00044 	addi	r23,r23,1
    42b4:	0009883a 	mov	r4,zero
    42b8:	014ffc34 	movhi	r5,16368
    42bc:	880d883a 	mov	r6,r17
    42c0:	a00f883a 	mov	r7,r20
    42c4:	103fcf0e 	bge	r2,zero,4204 <_dtoa_r+0x5e8>
    42c8:	d9801217 	ldw	r6,72(sp)
    42cc:	dc001117 	ldw	r16,68(sp)
    42d0:	d9800515 	stw	r6,20(sp)
    42d4:	8009883a 	mov	r4,r16
    42d8:	e00b883a 	mov	r5,fp
    42dc:	00073780 	call	7378 <_Bfree>
    42e0:	d8c00517 	ldw	r3,20(sp)
    42e4:	d9002317 	ldw	r4,140(sp)
    42e8:	d9802517 	ldw	r6,148(sp)
    42ec:	b8000005 	stb	zero,0(r23)
    42f0:	18800044 	addi	r2,r3,1
    42f4:	20800015 	stw	r2,0(r4)
    42f8:	30027226 	beq	r6,zero,4cc4 <_dtoa_r+0x10a8>
    42fc:	35c00015 	stw	r23,0(r6)
    4300:	d8800717 	ldw	r2,28(sp)
    4304:	003e7406 	br	3cd8 <_dtoa_r+0xbc>
    4308:	00800434 	movhi	r2,16
    430c:	10bfffc4 	addi	r2,r2,-1
    4310:	a8aa703a 	and	r21,r21,r2
    4314:	a83e801e 	bne	r21,zero,3d18 <_dtoa_r+0xfc>
    4318:	00800074 	movhi	r2,1
    431c:	10891e04 	addi	r2,r2,9336
    4320:	003e7f06 	br	3d20 <_dtoa_r+0x104>
    4324:	10c00204 	addi	r3,r2,8
    4328:	003e8206 	br	3d34 <_dtoa_r+0x118>
    432c:	01400434 	movhi	r5,16
    4330:	297fffc4 	addi	r5,r5,-1
    4334:	994a703a 	and	r5,r19,r5
    4338:	9009883a 	mov	r4,r18
    433c:	8c7f0044 	addi	r17,r17,-1023
    4340:	294ffc34 	orhi	r5,r5,16368
    4344:	dd000217 	ldw	r20,8(sp)
    4348:	d8000f15 	stw	zero,60(sp)
    434c:	003e9f06 	br	3dcc <_dtoa_r+0x1b0>
    4350:	00800074 	movhi	r2,1
    4354:	10891504 	addi	r2,r2,9300
    4358:	003e5f06 	br	3cd8 <_dtoa_r+0xbc>
    435c:	80001115 	stw	zero,68(r16)
    4360:	8009883a 	mov	r4,r16
    4364:	000b883a 	mov	r5,zero
    4368:	00072d00 	call	72d0 <_Balloc>
    436c:	01bfffc4 	movi	r6,-1
    4370:	d8800715 	stw	r2,28(sp)
    4374:	80801015 	stw	r2,64(r16)
    4378:	00800044 	movi	r2,1
    437c:	d9800c15 	stw	r6,48(sp)
    4380:	d8800b15 	stw	r2,44(sp)
    4384:	d9800615 	stw	r6,24(sp)
    4388:	d8002215 	stw	zero,136(sp)
    438c:	d8000315 	stw	zero,12(sp)
    4390:	d8800117 	ldw	r2,4(sp)
    4394:	10008e16 	blt	r2,zero,45d0 <_dtoa_r+0x9b4>
    4398:	d9000517 	ldw	r4,20(sp)
    439c:	00c00384 	movi	r3,14
    43a0:	19008b16 	blt	r3,r4,45d0 <_dtoa_r+0x9b4>
    43a4:	200490fa 	slli	r2,r4,3
    43a8:	00c00074 	movhi	r3,1
    43ac:	d9802217 	ldw	r6,136(sp)
    43b0:	18c93d04 	addi	r3,r3,9460
    43b4:	1885883a 	add	r2,r3,r2
    43b8:	14400017 	ldw	r17,0(r2)
    43bc:	15000117 	ldw	r20,4(r2)
    43c0:	3001c716 	blt	r6,zero,4ae0 <_dtoa_r+0xec4>
    43c4:	880d883a 	mov	r6,r17
    43c8:	a00f883a 	mov	r7,r20
    43cc:	9009883a 	mov	r4,r18
    43d0:	980b883a 	mov	r5,r19
    43d4:	000bf500 	call	bf50 <__divdf3>
    43d8:	180b883a 	mov	r5,r3
    43dc:	1009883a 	mov	r4,r2
    43e0:	000dc500 	call	dc50 <__fixdfsi>
    43e4:	1009883a 	mov	r4,r2
    43e8:	102d883a 	mov	r22,r2
    43ec:	000dcd80 	call	dcd8 <__floatsidf>
    43f0:	1009883a 	mov	r4,r2
    43f4:	180b883a 	mov	r5,r3
    43f8:	880d883a 	mov	r6,r17
    43fc:	a00f883a 	mov	r7,r20
    4400:	000cb140 	call	cb14 <__muldf3>
    4404:	9009883a 	mov	r4,r18
    4408:	980b883a 	mov	r5,r19
    440c:	100d883a 	mov	r6,r2
    4410:	180f883a 	mov	r7,r3
    4414:	000d3800 	call	d380 <__subdf3>
    4418:	d9000717 	ldw	r4,28(sp)
    441c:	d9800617 	ldw	r6,24(sp)
    4420:	180b883a 	mov	r5,r3
    4424:	b0c00c04 	addi	r3,r22,48
    4428:	20c00005 	stb	r3,0(r4)
    442c:	25c00044 	addi	r23,r4,1
    4430:	01000044 	movi	r4,1
    4434:	1011883a 	mov	r8,r2
    4438:	2807883a 	mov	r3,r5
    443c:	31003d26 	beq	r6,r4,4534 <_dtoa_r+0x918>
    4440:	000d883a 	mov	r6,zero
    4444:	01d00934 	movhi	r7,16420
    4448:	1009883a 	mov	r4,r2
    444c:	000cb140 	call	cb14 <__muldf3>
    4450:	1009883a 	mov	r4,r2
    4454:	180b883a 	mov	r5,r3
    4458:	000d883a 	mov	r6,zero
    445c:	000f883a 	mov	r7,zero
    4460:	1027883a 	mov	r19,r2
    4464:	182b883a 	mov	r21,r3
    4468:	000c8d00 	call	c8d0 <__eqdf2>
    446c:	103f9926 	beq	r2,zero,42d4 <_dtoa_r+0x6b8>
    4470:	d8c00617 	ldw	r3,24(sp)
    4474:	d9000717 	ldw	r4,28(sp)
    4478:	b825883a 	mov	r18,r23
    447c:	18bfffc4 	addi	r2,r3,-1
    4480:	20ad883a 	add	r22,r4,r2
    4484:	dc000315 	stw	r16,12(sp)
    4488:	00000a06 	br	44b4 <_dtoa_r+0x898>
    448c:	000cb140 	call	cb14 <__muldf3>
    4490:	1009883a 	mov	r4,r2
    4494:	180b883a 	mov	r5,r3
    4498:	000d883a 	mov	r6,zero
    449c:	000f883a 	mov	r7,zero
    44a0:	1027883a 	mov	r19,r2
    44a4:	182b883a 	mov	r21,r3
    44a8:	b825883a 	mov	r18,r23
    44ac:	000c8d00 	call	c8d0 <__eqdf2>
    44b0:	10022626 	beq	r2,zero,4d4c <_dtoa_r+0x1130>
    44b4:	880d883a 	mov	r6,r17
    44b8:	a00f883a 	mov	r7,r20
    44bc:	9809883a 	mov	r4,r19
    44c0:	a80b883a 	mov	r5,r21
    44c4:	000bf500 	call	bf50 <__divdf3>
    44c8:	180b883a 	mov	r5,r3
    44cc:	1009883a 	mov	r4,r2
    44d0:	000dc500 	call	dc50 <__fixdfsi>
    44d4:	1009883a 	mov	r4,r2
    44d8:	1021883a 	mov	r16,r2
    44dc:	000dcd80 	call	dcd8 <__floatsidf>
    44e0:	1009883a 	mov	r4,r2
    44e4:	180b883a 	mov	r5,r3
    44e8:	880d883a 	mov	r6,r17
    44ec:	a00f883a 	mov	r7,r20
    44f0:	000cb140 	call	cb14 <__muldf3>
    44f4:	9809883a 	mov	r4,r19
    44f8:	a80b883a 	mov	r5,r21
    44fc:	100d883a 	mov	r6,r2
    4500:	180f883a 	mov	r7,r3
    4504:	000d3800 	call	d380 <__subdf3>
    4508:	82000c04 	addi	r8,r16,48
    450c:	92000005 	stb	r8,0(r18)
    4510:	1009883a 	mov	r4,r2
    4514:	180b883a 	mov	r5,r3
    4518:	000d883a 	mov	r6,zero
    451c:	01d00934 	movhi	r7,16420
    4520:	1011883a 	mov	r8,r2
    4524:	bdc00044 	addi	r23,r23,1
    4528:	95bfd81e 	bne	r18,r22,448c <_dtoa_r+0x870>
    452c:	802d883a 	mov	r22,r16
    4530:	dc000317 	ldw	r16,12(sp)
    4534:	4009883a 	mov	r4,r8
    4538:	180b883a 	mov	r5,r3
    453c:	400d883a 	mov	r6,r8
    4540:	180f883a 	mov	r7,r3
    4544:	000b6b40 	call	b6b4 <__adddf3>
    4548:	8809883a 	mov	r4,r17
    454c:	a00b883a 	mov	r5,r20
    4550:	100d883a 	mov	r6,r2
    4554:	180f883a 	mov	r7,r3
    4558:	1027883a 	mov	r19,r2
    455c:	1825883a 	mov	r18,r3
    4560:	000ca340 	call	ca34 <__ledf2>
    4564:	10000816 	blt	r2,zero,4588 <_dtoa_r+0x96c>
    4568:	8809883a 	mov	r4,r17
    456c:	a00b883a 	mov	r5,r20
    4570:	980d883a 	mov	r6,r19
    4574:	900f883a 	mov	r7,r18
    4578:	000c8d00 	call	c8d0 <__eqdf2>
    457c:	103f551e 	bne	r2,zero,42d4 <_dtoa_r+0x6b8>
    4580:	b580004c 	andi	r22,r22,1
    4584:	b03f5326 	beq	r22,zero,42d4 <_dtoa_r+0x6b8>
    4588:	bd7fffc3 	ldbu	r21,-1(r23)
    458c:	b8bfffc4 	addi	r2,r23,-1
    4590:	1007883a 	mov	r3,r2
    4594:	01400e44 	movi	r5,57
    4598:	d9800717 	ldw	r6,28(sp)
    459c:	00000506 	br	45b4 <_dtoa_r+0x998>
    45a0:	18ffffc4 	addi	r3,r3,-1
    45a4:	30825e26 	beq	r6,r2,4f20 <_dtoa_r+0x1304>
    45a8:	1d400003 	ldbu	r21,0(r3)
    45ac:	102f883a 	mov	r23,r2
    45b0:	10bfffc4 	addi	r2,r2,-1
    45b4:	a9003fcc 	andi	r4,r21,255
    45b8:	2100201c 	xori	r4,r4,128
    45bc:	213fe004 	addi	r4,r4,-128
    45c0:	217ff726 	beq	r4,r5,45a0 <_dtoa_r+0x984>
    45c4:	aa000044 	addi	r8,r21,1
    45c8:	12000005 	stb	r8,0(r2)
    45cc:	003f4106 	br	42d4 <_dtoa_r+0x6b8>
    45d0:	d8c00b17 	ldw	r3,44(sp)
    45d4:	18006726 	beq	r3,zero,4774 <_dtoa_r+0xb58>
    45d8:	d9000317 	ldw	r4,12(sp)
    45dc:	00c00044 	movi	r3,1
    45e0:	19016a0e 	bge	r3,r4,4b8c <_dtoa_r+0xf70>
    45e4:	d8800617 	ldw	r2,24(sp)
    45e8:	d8c00917 	ldw	r3,36(sp)
    45ec:	157fffc4 	addi	r21,r2,-1
    45f0:	1d420716 	blt	r3,r21,4e10 <_dtoa_r+0x11f4>
    45f4:	1d6bc83a 	sub	r21,r3,r21
    45f8:	d8800617 	ldw	r2,24(sp)
    45fc:	1002c716 	blt	r2,zero,511c <_dtoa_r+0x1500>
    4600:	dd000817 	ldw	r20,32(sp)
    4604:	d8800617 	ldw	r2,24(sp)
    4608:	d9800817 	ldw	r6,32(sp)
    460c:	8009883a 	mov	r4,r16
    4610:	01400044 	movi	r5,1
    4614:	308d883a 	add	r6,r6,r2
    4618:	d9800815 	stw	r6,32(sp)
    461c:	b0ad883a 	add	r22,r22,r2
    4620:	00077040 	call	7704 <__i2b>
    4624:	1023883a 	mov	r17,r2
    4628:	a0000826 	beq	r20,zero,464c <_dtoa_r+0xa30>
    462c:	0580070e 	bge	zero,r22,464c <_dtoa_r+0xa30>
    4630:	b005883a 	mov	r2,r22
    4634:	a5812016 	blt	r20,r22,4ab8 <_dtoa_r+0xe9c>
    4638:	d8c00817 	ldw	r3,32(sp)
    463c:	a0a9c83a 	sub	r20,r20,r2
    4640:	b0adc83a 	sub	r22,r22,r2
    4644:	1887c83a 	sub	r3,r3,r2
    4648:	d8c00815 	stw	r3,32(sp)
    464c:	d9000917 	ldw	r4,36(sp)
    4650:	0100140e 	bge	zero,r4,46a4 <_dtoa_r+0xa88>
    4654:	d9800b17 	ldw	r6,44(sp)
    4658:	3001e526 	beq	r6,zero,4df0 <_dtoa_r+0x11d4>
    465c:	05400e0e 	bge	zero,r21,4698 <_dtoa_r+0xa7c>
    4660:	880b883a 	mov	r5,r17
    4664:	8009883a 	mov	r4,r16
    4668:	a80d883a 	mov	r6,r21
    466c:	00079d00 	call	79d0 <__pow5mult>
    4670:	e00d883a 	mov	r6,fp
    4674:	8009883a 	mov	r4,r16
    4678:	100b883a 	mov	r5,r2
    467c:	1023883a 	mov	r17,r2
    4680:	00077400 	call	7740 <__multiply>
    4684:	102f883a 	mov	r23,r2
    4688:	e00b883a 	mov	r5,fp
    468c:	8009883a 	mov	r4,r16
    4690:	00073780 	call	7378 <_Bfree>
    4694:	b839883a 	mov	fp,r23
    4698:	d8800917 	ldw	r2,36(sp)
    469c:	154dc83a 	sub	r6,r2,r21
    46a0:	3001281e 	bne	r6,zero,4b44 <_dtoa_r+0xf28>
    46a4:	05c00044 	movi	r23,1
    46a8:	8009883a 	mov	r4,r16
    46ac:	b80b883a 	mov	r5,r23
    46b0:	00077040 	call	7704 <__i2b>
    46b4:	d8c00a17 	ldw	r3,40(sp)
    46b8:	102b883a 	mov	r21,r2
    46bc:	00c0310e 	bge	zero,r3,4784 <_dtoa_r+0xb68>
    46c0:	8009883a 	mov	r4,r16
    46c4:	100b883a 	mov	r5,r2
    46c8:	180d883a 	mov	r6,r3
    46cc:	00079d00 	call	79d0 <__pow5mult>
    46d0:	d9000317 	ldw	r4,12(sp)
    46d4:	102b883a 	mov	r21,r2
    46d8:	b9011f0e 	bge	r23,r4,4b58 <_dtoa_r+0xf3c>
    46dc:	0027883a 	mov	r19,zero
    46e0:	a8800417 	ldw	r2,16(r21)
    46e4:	10800104 	addi	r2,r2,4
    46e8:	1085883a 	add	r2,r2,r2
    46ec:	1085883a 	add	r2,r2,r2
    46f0:	a885883a 	add	r2,r21,r2
    46f4:	11000017 	ldw	r4,0(r2)
    46f8:	00075ec0 	call	75ec <__hi0bits>
    46fc:	00c00804 	movi	r3,32
    4700:	1885c83a 	sub	r2,r3,r2
    4704:	00002506 	br	479c <_dtoa_r+0xb80>
    4708:	01800044 	movi	r6,1
    470c:	d9800d15 	stw	r6,52(sp)
    4710:	003dec06 	br	3ec4 <_dtoa_r+0x2a8>
    4714:	d8c00817 	ldw	r3,32(sp)
    4718:	d9000517 	ldw	r4,20(sp)
    471c:	d8000a15 	stw	zero,40(sp)
    4720:	1907c83a 	sub	r3,r3,r4
    4724:	010dc83a 	sub	r6,zero,r4
    4728:	d8c00815 	stw	r3,32(sp)
    472c:	d9800915 	stw	r6,36(sp)
    4730:	003ded06 	br	3ee8 <_dtoa_r+0x2cc>
    4734:	05adc83a 	sub	r22,zero,r22
    4738:	dd800815 	stw	r22,32(sp)
    473c:	002d883a 	mov	r22,zero
    4740:	003de406 	br	3ed4 <_dtoa_r+0x2b8>
    4744:	d9000517 	ldw	r4,20(sp)
    4748:	000dcd80 	call	dcd8 <__floatsidf>
    474c:	1009883a 	mov	r4,r2
    4750:	180b883a 	mov	r5,r3
    4754:	b00d883a 	mov	r6,r22
    4758:	a80f883a 	mov	r7,r21
    475c:	000c8d00 	call	c8d0 <__eqdf2>
    4760:	103dc726 	beq	r2,zero,3e80 <_dtoa_r+0x264>
    4764:	d8800517 	ldw	r2,20(sp)
    4768:	10bfffc4 	addi	r2,r2,-1
    476c:	d8800515 	stw	r2,20(sp)
    4770:	003dc306 	br	3e80 <_dtoa_r+0x264>
    4774:	dd400917 	ldw	r21,36(sp)
    4778:	dd000817 	ldw	r20,32(sp)
    477c:	0023883a 	mov	r17,zero
    4780:	003fa906 	br	4628 <_dtoa_r+0xa0c>
    4784:	d9800317 	ldw	r6,12(sp)
    4788:	b981670e 	bge	r23,r6,4d28 <_dtoa_r+0x110c>
    478c:	0027883a 	mov	r19,zero
    4790:	d8c00a17 	ldw	r3,40(sp)
    4794:	183fd21e 	bne	r3,zero,46e0 <_dtoa_r+0xac4>
    4798:	00800044 	movi	r2,1
    479c:	1585883a 	add	r2,r2,r22
    47a0:	108007cc 	andi	r2,r2,31
    47a4:	10005f26 	beq	r2,zero,4924 <_dtoa_r+0xd08>
    47a8:	00c00804 	movi	r3,32
    47ac:	1887c83a 	sub	r3,r3,r2
    47b0:	01000104 	movi	r4,4
    47b4:	20c2dd0e 	bge	r4,r3,532c <_dtoa_r+0x1710>
    47b8:	d9000817 	ldw	r4,32(sp)
    47bc:	00c00704 	movi	r3,28
    47c0:	1885c83a 	sub	r2,r3,r2
    47c4:	2089883a 	add	r4,r4,r2
    47c8:	d9000815 	stw	r4,32(sp)
    47cc:	a0a9883a 	add	r20,r20,r2
    47d0:	b0ad883a 	add	r22,r22,r2
    47d4:	d8800817 	ldw	r2,32(sp)
    47d8:	0080050e 	bge	zero,r2,47f0 <_dtoa_r+0xbd4>
    47dc:	e00b883a 	mov	r5,fp
    47e0:	8009883a 	mov	r4,r16
    47e4:	100d883a 	mov	r6,r2
    47e8:	0007b100 	call	7b10 <__lshift>
    47ec:	1039883a 	mov	fp,r2
    47f0:	0580050e 	bge	zero,r22,4808 <_dtoa_r+0xbec>
    47f4:	a80b883a 	mov	r5,r21
    47f8:	8009883a 	mov	r4,r16
    47fc:	b00d883a 	mov	r6,r22
    4800:	0007b100 	call	7b10 <__lshift>
    4804:	102b883a 	mov	r21,r2
    4808:	d8c00d17 	ldw	r3,52(sp)
    480c:	1801161e 	bne	r3,zero,4c68 <_dtoa_r+0x104c>
    4810:	d8c00617 	ldw	r3,24(sp)
    4814:	00c12d0e 	bge	zero,r3,4ccc <_dtoa_r+0x10b0>
    4818:	d8c00b17 	ldw	r3,44(sp)
    481c:	1800571e 	bne	r3,zero,497c <_dtoa_r+0xd60>
    4820:	dc800717 	ldw	r18,28(sp)
    4824:	dcc00617 	ldw	r19,24(sp)
    4828:	9029883a 	mov	r20,r18
    482c:	00000206 	br	4838 <_dtoa_r+0xc1c>
    4830:	00073a00 	call	73a0 <__multadd>
    4834:	1039883a 	mov	fp,r2
    4838:	e009883a 	mov	r4,fp
    483c:	a80b883a 	mov	r5,r21
    4840:	00039f40 	call	39f4 <quorem>
    4844:	10800c04 	addi	r2,r2,48
    4848:	90800005 	stb	r2,0(r18)
    484c:	94800044 	addi	r18,r18,1
    4850:	9507c83a 	sub	r3,r18,r20
    4854:	8009883a 	mov	r4,r16
    4858:	e00b883a 	mov	r5,fp
    485c:	01800284 	movi	r6,10
    4860:	000f883a 	mov	r7,zero
    4864:	1cfff216 	blt	r3,r19,4830 <_dtoa_r+0xc14>
    4868:	1011883a 	mov	r8,r2
    486c:	d8800617 	ldw	r2,24(sp)
    4870:	00822e0e 	bge	zero,r2,512c <_dtoa_r+0x1510>
    4874:	d9000717 	ldw	r4,28(sp)
    4878:	0025883a 	mov	r18,zero
    487c:	20af883a 	add	r23,r4,r2
    4880:	e00b883a 	mov	r5,fp
    4884:	01800044 	movi	r6,1
    4888:	8009883a 	mov	r4,r16
    488c:	da001715 	stw	r8,92(sp)
    4890:	0007b100 	call	7b10 <__lshift>
    4894:	1009883a 	mov	r4,r2
    4898:	a80b883a 	mov	r5,r21
    489c:	1039883a 	mov	fp,r2
    48a0:	0007c600 	call	7c60 <__mcmp>
    48a4:	da001717 	ldw	r8,92(sp)
    48a8:	00816e0e 	bge	zero,r2,4e64 <_dtoa_r+0x1248>
    48ac:	b93fffc3 	ldbu	r4,-1(r23)
    48b0:	b8bfffc4 	addi	r2,r23,-1
    48b4:	1007883a 	mov	r3,r2
    48b8:	01800e44 	movi	r6,57
    48bc:	d9c00717 	ldw	r7,28(sp)
    48c0:	00000506 	br	48d8 <_dtoa_r+0xcbc>
    48c4:	18ffffc4 	addi	r3,r3,-1
    48c8:	38811926 	beq	r7,r2,4d30 <_dtoa_r+0x1114>
    48cc:	19000003 	ldbu	r4,0(r3)
    48d0:	102f883a 	mov	r23,r2
    48d4:	10bfffc4 	addi	r2,r2,-1
    48d8:	21403fcc 	andi	r5,r4,255
    48dc:	2940201c 	xori	r5,r5,128
    48e0:	297fe004 	addi	r5,r5,-128
    48e4:	29bff726 	beq	r5,r6,48c4 <_dtoa_r+0xca8>
    48e8:	21000044 	addi	r4,r4,1
    48ec:	11000005 	stb	r4,0(r2)
    48f0:	8009883a 	mov	r4,r16
    48f4:	a80b883a 	mov	r5,r21
    48f8:	00073780 	call	7378 <_Bfree>
    48fc:	883e7526 	beq	r17,zero,42d4 <_dtoa_r+0x6b8>
    4900:	90000426 	beq	r18,zero,4914 <_dtoa_r+0xcf8>
    4904:	94400326 	beq	r18,r17,4914 <_dtoa_r+0xcf8>
    4908:	8009883a 	mov	r4,r16
    490c:	900b883a 	mov	r5,r18
    4910:	00073780 	call	7378 <_Bfree>
    4914:	8009883a 	mov	r4,r16
    4918:	880b883a 	mov	r5,r17
    491c:	00073780 	call	7378 <_Bfree>
    4920:	003e6c06 	br	42d4 <_dtoa_r+0x6b8>
    4924:	00800704 	movi	r2,28
    4928:	d9800817 	ldw	r6,32(sp)
    492c:	a0a9883a 	add	r20,r20,r2
    4930:	b0ad883a 	add	r22,r22,r2
    4934:	308d883a 	add	r6,r6,r2
    4938:	d9800815 	stw	r6,32(sp)
    493c:	003fa506 	br	47d4 <_dtoa_r+0xbb8>
    4940:	013efb84 	movi	r4,-1042
    4944:	246bc83a 	sub	r21,r4,r17
    4948:	9548983a 	sll	r4,r18,r21
    494c:	003d1806 	br	3db0 <_dtoa_r+0x194>
    4950:	d8000d15 	stw	zero,52(sp)
    4954:	003d5b06 	br	3ec4 <_dtoa_r+0x2a8>
    4958:	880b883a 	mov	r5,r17
    495c:	8009883a 	mov	r4,r16
    4960:	01800284 	movi	r6,10
    4964:	000f883a 	mov	r7,zero
    4968:	00073a00 	call	73a0 <__multadd>
    496c:	1023883a 	mov	r17,r2
    4970:	d8800c17 	ldw	r2,48(sp)
    4974:	0082550e 	bge	zero,r2,52cc <_dtoa_r+0x16b0>
    4978:	d8800615 	stw	r2,24(sp)
    497c:	0500050e 	bge	zero,r20,4994 <_dtoa_r+0xd78>
    4980:	880b883a 	mov	r5,r17
    4984:	8009883a 	mov	r4,r16
    4988:	a00d883a 	mov	r6,r20
    498c:	0007b100 	call	7b10 <__lshift>
    4990:	1023883a 	mov	r17,r2
    4994:	98016a1e 	bne	r19,zero,4f40 <_dtoa_r+0x1324>
    4998:	8829883a 	mov	r20,r17
    499c:	d9000617 	ldw	r4,24(sp)
    49a0:	dcc00717 	ldw	r19,28(sp)
    49a4:	9480004c 	andi	r18,r18,1
    49a8:	20bfffc4 	addi	r2,r4,-1
    49ac:	9885883a 	add	r2,r19,r2
    49b0:	d8800415 	stw	r2,16(sp)
    49b4:	dc800615 	stw	r18,24(sp)
    49b8:	e009883a 	mov	r4,fp
    49bc:	a80b883a 	mov	r5,r21
    49c0:	00039f40 	call	39f4 <quorem>
    49c4:	e009883a 	mov	r4,fp
    49c8:	880b883a 	mov	r5,r17
    49cc:	102f883a 	mov	r23,r2
    49d0:	0007c600 	call	7c60 <__mcmp>
    49d4:	8009883a 	mov	r4,r16
    49d8:	a80b883a 	mov	r5,r21
    49dc:	a00d883a 	mov	r6,r20
    49e0:	102d883a 	mov	r22,r2
    49e4:	0007cc00 	call	7cc0 <__mdiff>
    49e8:	1007883a 	mov	r3,r2
    49ec:	10800317 	ldw	r2,12(r2)
    49f0:	bc800c04 	addi	r18,r23,48
    49f4:	1000971e 	bne	r2,zero,4c54 <_dtoa_r+0x1038>
    49f8:	180b883a 	mov	r5,r3
    49fc:	e009883a 	mov	r4,fp
    4a00:	d8c01515 	stw	r3,84(sp)
    4a04:	0007c600 	call	7c60 <__mcmp>
    4a08:	d8c01517 	ldw	r3,84(sp)
    4a0c:	8009883a 	mov	r4,r16
    4a10:	d8801515 	stw	r2,84(sp)
    4a14:	180b883a 	mov	r5,r3
    4a18:	00073780 	call	7378 <_Bfree>
    4a1c:	d8801517 	ldw	r2,84(sp)
    4a20:	1000041e 	bne	r2,zero,4a34 <_dtoa_r+0xe18>
    4a24:	d9800317 	ldw	r6,12(sp)
    4a28:	3000021e 	bne	r6,zero,4a34 <_dtoa_r+0xe18>
    4a2c:	d8c00617 	ldw	r3,24(sp)
    4a30:	18007626 	beq	r3,zero,4c0c <_dtoa_r+0xff0>
    4a34:	b0005b16 	blt	r22,zero,4ba4 <_dtoa_r+0xf88>
    4a38:	b000041e 	bne	r22,zero,4a4c <_dtoa_r+0xe30>
    4a3c:	d9000317 	ldw	r4,12(sp)
    4a40:	2000021e 	bne	r4,zero,4a4c <_dtoa_r+0xe30>
    4a44:	d8c00617 	ldw	r3,24(sp)
    4a48:	18005626 	beq	r3,zero,4ba4 <_dtoa_r+0xf88>
    4a4c:	00814d16 	blt	zero,r2,4f84 <_dtoa_r+0x1368>
    4a50:	d8c00417 	ldw	r3,16(sp)
    4a54:	9d800044 	addi	r22,r19,1
    4a58:	9c800005 	stb	r18,0(r19)
    4a5c:	b02f883a 	mov	r23,r22
    4a60:	98c14c26 	beq	r19,r3,4f94 <_dtoa_r+0x1378>
    4a64:	e00b883a 	mov	r5,fp
    4a68:	8009883a 	mov	r4,r16
    4a6c:	01800284 	movi	r6,10
    4a70:	000f883a 	mov	r7,zero
    4a74:	00073a00 	call	73a0 <__multadd>
    4a78:	1039883a 	mov	fp,r2
    4a7c:	8d006d26 	beq	r17,r20,4c34 <_dtoa_r+0x1018>
    4a80:	880b883a 	mov	r5,r17
    4a84:	01800284 	movi	r6,10
    4a88:	000f883a 	mov	r7,zero
    4a8c:	8009883a 	mov	r4,r16
    4a90:	00073a00 	call	73a0 <__multadd>
    4a94:	a00b883a 	mov	r5,r20
    4a98:	8009883a 	mov	r4,r16
    4a9c:	01800284 	movi	r6,10
    4aa0:	000f883a 	mov	r7,zero
    4aa4:	1023883a 	mov	r17,r2
    4aa8:	00073a00 	call	73a0 <__multadd>
    4aac:	1029883a 	mov	r20,r2
    4ab0:	b027883a 	mov	r19,r22
    4ab4:	003fc006 	br	49b8 <_dtoa_r+0xd9c>
    4ab8:	a005883a 	mov	r2,r20
    4abc:	003ede06 	br	4638 <_dtoa_r+0xa1c>
    4ac0:	01000044 	movi	r4,1
    4ac4:	d9000b15 	stw	r4,44(sp)
    4ac8:	d9802217 	ldw	r6,136(sp)
    4acc:	0180dc0e 	bge	zero,r6,4e40 <_dtoa_r+0x1224>
    4ad0:	3023883a 	mov	r17,r6
    4ad4:	d9800c15 	stw	r6,48(sp)
    4ad8:	d9800615 	stw	r6,24(sp)
    4adc:	003d1e06 	br	3f58 <_dtoa_r+0x33c>
    4ae0:	d8800617 	ldw	r2,24(sp)
    4ae4:	00be3716 	blt	zero,r2,43c4 <_dtoa_r+0x7a8>
    4ae8:	1000be1e 	bne	r2,zero,4de4 <_dtoa_r+0x11c8>
    4aec:	8809883a 	mov	r4,r17
    4af0:	a00b883a 	mov	r5,r20
    4af4:	000d883a 	mov	r6,zero
    4af8:	01d00534 	movhi	r7,16404
    4afc:	000cb140 	call	cb14 <__muldf3>
    4b00:	1009883a 	mov	r4,r2
    4b04:	180b883a 	mov	r5,r3
    4b08:	900d883a 	mov	r6,r18
    4b0c:	980f883a 	mov	r7,r19
    4b10:	000c9540 	call	c954 <__gedf2>
    4b14:	002b883a 	mov	r21,zero
    4b18:	0023883a 	mov	r17,zero
    4b1c:	10007a16 	blt	r2,zero,4d08 <_dtoa_r+0x10ec>
    4b20:	d9002217 	ldw	r4,136(sp)
    4b24:	ddc00717 	ldw	r23,28(sp)
    4b28:	0108303a 	nor	r4,zero,r4
    4b2c:	d9000515 	stw	r4,20(sp)
    4b30:	8009883a 	mov	r4,r16
    4b34:	a80b883a 	mov	r5,r21
    4b38:	00073780 	call	7378 <_Bfree>
    4b3c:	883f751e 	bne	r17,zero,4914 <_dtoa_r+0xcf8>
    4b40:	003de406 	br	42d4 <_dtoa_r+0x6b8>
    4b44:	e00b883a 	mov	r5,fp
    4b48:	8009883a 	mov	r4,r16
    4b4c:	00079d00 	call	79d0 <__pow5mult>
    4b50:	1039883a 	mov	fp,r2
    4b54:	003ed306 	br	46a4 <_dtoa_r+0xa88>
    4b58:	903ee01e 	bne	r18,zero,46dc <_dtoa_r+0xac0>
    4b5c:	00800434 	movhi	r2,16
    4b60:	10bfffc4 	addi	r2,r2,-1
    4b64:	9884703a 	and	r2,r19,r2
    4b68:	103f081e 	bne	r2,zero,478c <_dtoa_r+0xb70>
    4b6c:	9cdffc2c 	andhi	r19,r19,32752
    4b70:	983f0626 	beq	r19,zero,478c <_dtoa_r+0xb70>
    4b74:	d8800817 	ldw	r2,32(sp)
    4b78:	b5800044 	addi	r22,r22,1
    4b7c:	04c00044 	movi	r19,1
    4b80:	10800044 	addi	r2,r2,1
    4b84:	d8800815 	stw	r2,32(sp)
    4b88:	003f0106 	br	4790 <_dtoa_r+0xb74>
    4b8c:	d9800f17 	ldw	r6,60(sp)
    4b90:	30016826 	beq	r6,zero,5134 <_dtoa_r+0x1518>
    4b94:	10810cc4 	addi	r2,r2,1075
    4b98:	dd400917 	ldw	r21,36(sp)
    4b9c:	dd000817 	ldw	r20,32(sp)
    4ba0:	003e9906 	br	4608 <_dtoa_r+0x9ec>
    4ba4:	9011883a 	mov	r8,r18
    4ba8:	4007883a 	mov	r3,r8
    4bac:	e02d883a 	mov	r22,fp
    4bb0:	0080100e 	bge	zero,r2,4bf4 <_dtoa_r+0xfd8>
    4bb4:	01800044 	movi	r6,1
    4bb8:	8009883a 	mov	r4,r16
    4bbc:	e00b883a 	mov	r5,fp
    4bc0:	da001515 	stw	r8,84(sp)
    4bc4:	da001715 	stw	r8,92(sp)
    4bc8:	0007b100 	call	7b10 <__lshift>
    4bcc:	1009883a 	mov	r4,r2
    4bd0:	a80b883a 	mov	r5,r21
    4bd4:	102d883a 	mov	r22,r2
    4bd8:	0007c600 	call	7c60 <__mcmp>
    4bdc:	d8c01517 	ldw	r3,84(sp)
    4be0:	da001717 	ldw	r8,92(sp)
    4be4:	0081a50e 	bge	zero,r2,527c <_dtoa_r+0x1660>
    4be8:	00800e44 	movi	r2,57
    4bec:	40817b26 	beq	r8,r2,51dc <_dtoa_r+0x15c0>
    4bf0:	40c00044 	addi	r3,r8,1
    4bf4:	8825883a 	mov	r18,r17
    4bf8:	9dc00044 	addi	r23,r19,1
    4bfc:	98c00005 	stb	r3,0(r19)
    4c00:	a023883a 	mov	r17,r20
    4c04:	b039883a 	mov	fp,r22
    4c08:	003f3906 	br	48f0 <_dtoa_r+0xcd4>
    4c0c:	00800e44 	movi	r2,57
    4c10:	9011883a 	mov	r8,r18
    4c14:	90817226 	beq	r18,r2,51e0 <_dtoa_r+0x15c4>
    4c18:	0580010e 	bge	zero,r22,4c20 <_dtoa_r+0x1004>
    4c1c:	ba000c44 	addi	r8,r23,49
    4c20:	8825883a 	mov	r18,r17
    4c24:	9dc00044 	addi	r23,r19,1
    4c28:	9a000005 	stb	r8,0(r19)
    4c2c:	a023883a 	mov	r17,r20
    4c30:	003f2f06 	br	48f0 <_dtoa_r+0xcd4>
    4c34:	880b883a 	mov	r5,r17
    4c38:	8009883a 	mov	r4,r16
    4c3c:	01800284 	movi	r6,10
    4c40:	000f883a 	mov	r7,zero
    4c44:	00073a00 	call	73a0 <__multadd>
    4c48:	1023883a 	mov	r17,r2
    4c4c:	1029883a 	mov	r20,r2
    4c50:	003f9706 	br	4ab0 <_dtoa_r+0xe94>
    4c54:	8009883a 	mov	r4,r16
    4c58:	180b883a 	mov	r5,r3
    4c5c:	00073780 	call	7378 <_Bfree>
    4c60:	00800044 	movi	r2,1
    4c64:	003f7306 	br	4a34 <_dtoa_r+0xe18>
    4c68:	e009883a 	mov	r4,fp
    4c6c:	a80b883a 	mov	r5,r21
    4c70:	0007c600 	call	7c60 <__mcmp>
    4c74:	103ee60e 	bge	r2,zero,4810 <_dtoa_r+0xbf4>
    4c78:	8009883a 	mov	r4,r16
    4c7c:	e00b883a 	mov	r5,fp
    4c80:	01800284 	movi	r6,10
    4c84:	000f883a 	mov	r7,zero
    4c88:	00073a00 	call	73a0 <__multadd>
    4c8c:	d9000517 	ldw	r4,20(sp)
    4c90:	d9800b17 	ldw	r6,44(sp)
    4c94:	1039883a 	mov	fp,r2
    4c98:	213fffc4 	addi	r4,r4,-1
    4c9c:	d9000515 	stw	r4,20(sp)
    4ca0:	303f2d1e 	bne	r6,zero,4958 <_dtoa_r+0xd3c>
    4ca4:	d9000c17 	ldw	r4,48(sp)
    4ca8:	0101780e 	bge	zero,r4,528c <_dtoa_r+0x1670>
    4cac:	d9000615 	stw	r4,24(sp)
    4cb0:	003edb06 	br	4820 <_dtoa_r+0xc04>
    4cb4:	00800084 	movi	r2,2
    4cb8:	30818e1e 	bne	r6,r2,52f4 <_dtoa_r+0x16d8>
    4cbc:	d8000b15 	stw	zero,44(sp)
    4cc0:	003f8106 	br	4ac8 <_dtoa_r+0xeac>
    4cc4:	d8800717 	ldw	r2,28(sp)
    4cc8:	003c0306 	br	3cd8 <_dtoa_r+0xbc>
    4ccc:	d9000317 	ldw	r4,12(sp)
    4cd0:	00800084 	movi	r2,2
    4cd4:	113ed00e 	bge	r2,r4,4818 <_dtoa_r+0xbfc>
    4cd8:	d8c00617 	ldw	r3,24(sp)
    4cdc:	183f901e 	bne	r3,zero,4b20 <_dtoa_r+0xf04>
    4ce0:	a80b883a 	mov	r5,r21
    4ce4:	8009883a 	mov	r4,r16
    4ce8:	01800144 	movi	r6,5
    4cec:	000f883a 	mov	r7,zero
    4cf0:	00073a00 	call	73a0 <__multadd>
    4cf4:	e009883a 	mov	r4,fp
    4cf8:	100b883a 	mov	r5,r2
    4cfc:	102b883a 	mov	r21,r2
    4d00:	0007c600 	call	7c60 <__mcmp>
    4d04:	00bf860e 	bge	zero,r2,4b20 <_dtoa_r+0xf04>
    4d08:	d9800717 	ldw	r6,28(sp)
    4d0c:	00800c44 	movi	r2,49
    4d10:	30800005 	stb	r2,0(r6)
    4d14:	d8800517 	ldw	r2,20(sp)
    4d18:	35c00044 	addi	r23,r6,1
    4d1c:	10800044 	addi	r2,r2,1
    4d20:	d8800515 	stw	r2,20(sp)
    4d24:	003f8206 	br	4b30 <_dtoa_r+0xf14>
    4d28:	903e981e 	bne	r18,zero,478c <_dtoa_r+0xb70>
    4d2c:	003f8b06 	br	4b5c <_dtoa_r+0xf40>
    4d30:	d9800517 	ldw	r6,20(sp)
    4d34:	d8c00717 	ldw	r3,28(sp)
    4d38:	00800c44 	movi	r2,49
    4d3c:	31800044 	addi	r6,r6,1
    4d40:	d9800515 	stw	r6,20(sp)
    4d44:	18800005 	stb	r2,0(r3)
    4d48:	003ee906 	br	48f0 <_dtoa_r+0xcd4>
    4d4c:	dc000317 	ldw	r16,12(sp)
    4d50:	003d6006 	br	42d4 <_dtoa_r+0x6b8>
    4d54:	8809883a 	mov	r4,r17
    4d58:	000dcd80 	call	dcd8 <__floatsidf>
    4d5c:	a009883a 	mov	r4,r20
    4d60:	a80b883a 	mov	r5,r21
    4d64:	100d883a 	mov	r6,r2
    4d68:	180f883a 	mov	r7,r3
    4d6c:	000cb140 	call	cb14 <__muldf3>
    4d70:	1009883a 	mov	r4,r2
    4d74:	180b883a 	mov	r5,r3
    4d78:	000d883a 	mov	r6,zero
    4d7c:	01d00734 	movhi	r7,16412
    4d80:	000b6b40 	call	b6b4 <__adddf3>
    4d84:	1023883a 	mov	r17,r2
    4d88:	00bf3034 	movhi	r2,64704
    4d8c:	1885883a 	add	r2,r3,r2
    4d90:	d8800e15 	stw	r2,56(sp)
    4d94:	a009883a 	mov	r4,r20
    4d98:	a80b883a 	mov	r5,r21
    4d9c:	000d883a 	mov	r6,zero
    4da0:	01d00534 	movhi	r7,16404
    4da4:	000d3800 	call	d380 <__subdf3>
    4da8:	d9c00e17 	ldw	r7,56(sp)
    4dac:	1009883a 	mov	r4,r2
    4db0:	180b883a 	mov	r5,r3
    4db4:	880d883a 	mov	r6,r17
    4db8:	102b883a 	mov	r21,r2
    4dbc:	1829883a 	mov	r20,r3
    4dc0:	000c9540 	call	c954 <__gedf2>
    4dc4:	00807716 	blt	zero,r2,4fa4 <_dtoa_r+0x1388>
    4dc8:	d8800e17 	ldw	r2,56(sp)
    4dcc:	a809883a 	mov	r4,r21
    4dd0:	a00b883a 	mov	r5,r20
    4dd4:	11e0003c 	xorhi	r7,r2,32768
    4dd8:	880d883a 	mov	r6,r17
    4ddc:	000ca340 	call	ca34 <__ledf2>
    4de0:	103d6b0e 	bge	r2,zero,4390 <_dtoa_r+0x774>
    4de4:	002b883a 	mov	r21,zero
    4de8:	0023883a 	mov	r17,zero
    4dec:	003f4c06 	br	4b20 <_dtoa_r+0xf04>
    4df0:	d9800917 	ldw	r6,36(sp)
    4df4:	e00b883a 	mov	r5,fp
    4df8:	8009883a 	mov	r4,r16
    4dfc:	00079d00 	call	79d0 <__pow5mult>
    4e00:	1039883a 	mov	fp,r2
    4e04:	003e2706 	br	46a4 <_dtoa_r+0xa88>
    4e08:	d8000b15 	stw	zero,44(sp)
    4e0c:	003c4906 	br	3f34 <_dtoa_r+0x318>
    4e10:	d9000917 	ldw	r4,36(sp)
    4e14:	d9800a17 	ldw	r6,40(sp)
    4e18:	dd400915 	stw	r21,36(sp)
    4e1c:	a905c83a 	sub	r2,r21,r4
    4e20:	308d883a 	add	r6,r6,r2
    4e24:	d9800a15 	stw	r6,40(sp)
    4e28:	002b883a 	mov	r21,zero
    4e2c:	003df206 	br	45f8 <_dtoa_r+0x9dc>
    4e30:	dc800e15 	stw	r18,56(sp)
    4e34:	982b883a 	mov	r21,r19
    4e38:	04400084 	movi	r17,2
    4e3c:	003c7406 	br	4010 <_dtoa_r+0x3f4>
    4e40:	04400044 	movi	r17,1
    4e44:	dc400c15 	stw	r17,48(sp)
    4e48:	dc400615 	stw	r17,24(sp)
    4e4c:	dc402215 	stw	r17,136(sp)
    4e50:	80001115 	stw	zero,68(r16)
    4e54:	000b883a 	mov	r5,zero
    4e58:	003c4a06 	br	3f84 <_dtoa_r+0x368>
    4e5c:	3023883a 	mov	r17,r6
    4e60:	003ffb06 	br	4e50 <_dtoa_r+0x1234>
    4e64:	1000021e 	bne	r2,zero,4e70 <_dtoa_r+0x1254>
    4e68:	4200004c 	andi	r8,r8,1
    4e6c:	403e8f1e 	bne	r8,zero,48ac <_dtoa_r+0xc90>
    4e70:	01000c04 	movi	r4,48
    4e74:	00000106 	br	4e7c <_dtoa_r+0x1260>
    4e78:	102f883a 	mov	r23,r2
    4e7c:	b8bfffc4 	addi	r2,r23,-1
    4e80:	10c00007 	ldb	r3,0(r2)
    4e84:	193ffc26 	beq	r3,r4,4e78 <_dtoa_r+0x125c>
    4e88:	003e9906 	br	48f0 <_dtoa_r+0xcd4>
    4e8c:	d9000517 	ldw	r4,20(sp)
    4e90:	012fc83a 	sub	r23,zero,r4
    4e94:	b800ad26 	beq	r23,zero,514c <_dtoa_r+0x1530>
    4e98:	b88003cc 	andi	r2,r23,15
    4e9c:	100490fa 	slli	r2,r2,3
    4ea0:	00c00074 	movhi	r3,1
    4ea4:	18c93d04 	addi	r3,r3,9460
    4ea8:	1885883a 	add	r2,r3,r2
    4eac:	11800017 	ldw	r6,0(r2)
    4eb0:	11c00117 	ldw	r7,4(r2)
    4eb4:	b82fd13a 	srai	r23,r23,4
    4eb8:	9009883a 	mov	r4,r18
    4ebc:	980b883a 	mov	r5,r19
    4ec0:	000cb140 	call	cb14 <__muldf3>
    4ec4:	1029883a 	mov	r20,r2
    4ec8:	182b883a 	mov	r21,r3
    4ecc:	b800f426 	beq	r23,zero,52a0 <_dtoa_r+0x1684>
    4ed0:	02000074 	movhi	r8,1
    4ed4:	42093304 	addi	r8,r8,9420
    4ed8:	8029883a 	mov	r20,r16
    4edc:	04400084 	movi	r17,2
    4ee0:	4021883a 	mov	r16,r8
    4ee4:	b980004c 	andi	r6,r23,1
    4ee8:	1009883a 	mov	r4,r2
    4eec:	b82fd07a 	srai	r23,r23,1
    4ef0:	180b883a 	mov	r5,r3
    4ef4:	30000426 	beq	r6,zero,4f08 <_dtoa_r+0x12ec>
    4ef8:	81800017 	ldw	r6,0(r16)
    4efc:	81c00117 	ldw	r7,4(r16)
    4f00:	8c400044 	addi	r17,r17,1
    4f04:	000cb140 	call	cb14 <__muldf3>
    4f08:	84000204 	addi	r16,r16,8
    4f0c:	b83ff51e 	bne	r23,zero,4ee4 <_dtoa_r+0x12c8>
    4f10:	a021883a 	mov	r16,r20
    4f14:	182b883a 	mov	r21,r3
    4f18:	1029883a 	mov	r20,r2
    4f1c:	003c5506 	br	4074 <_dtoa_r+0x458>
    4f20:	d9800517 	ldw	r6,20(sp)
    4f24:	d9000717 	ldw	r4,28(sp)
    4f28:	00c00c04 	movi	r3,48
    4f2c:	31800044 	addi	r6,r6,1
    4f30:	d9800515 	stw	r6,20(sp)
    4f34:	20c00005 	stb	r3,0(r4)
    4f38:	02000c44 	movi	r8,49
    4f3c:	003da206 	br	45c8 <_dtoa_r+0x9ac>
    4f40:	89400117 	ldw	r5,4(r17)
    4f44:	8009883a 	mov	r4,r16
    4f48:	00072d00 	call	72d0 <_Balloc>
    4f4c:	89800417 	ldw	r6,16(r17)
    4f50:	11000304 	addi	r4,r2,12
    4f54:	89400304 	addi	r5,r17,12
    4f58:	31800084 	addi	r6,r6,2
    4f5c:	318d883a 	add	r6,r6,r6
    4f60:	318d883a 	add	r6,r6,r6
    4f64:	1027883a 	mov	r19,r2
    4f68:	0006f180 	call	6f18 <memcpy>
    4f6c:	8009883a 	mov	r4,r16
    4f70:	980b883a 	mov	r5,r19
    4f74:	01800044 	movi	r6,1
    4f78:	0007b100 	call	7b10 <__lshift>
    4f7c:	1029883a 	mov	r20,r2
    4f80:	003e8606 	br	499c <_dtoa_r+0xd80>
    4f84:	00800e44 	movi	r2,57
    4f88:	90809526 	beq	r18,r2,51e0 <_dtoa_r+0x15c4>
    4f8c:	92000044 	addi	r8,r18,1
    4f90:	003f2306 	br	4c20 <_dtoa_r+0x1004>
    4f94:	9011883a 	mov	r8,r18
    4f98:	8825883a 	mov	r18,r17
    4f9c:	a023883a 	mov	r17,r20
    4fa0:	003e3706 	br	4880 <_dtoa_r+0xc64>
    4fa4:	002b883a 	mov	r21,zero
    4fa8:	0023883a 	mov	r17,zero
    4fac:	003f5606 	br	4d08 <_dtoa_r+0x10ec>
    4fb0:	51bfffc4 	addi	r6,r10,-1
    4fb4:	300490fa 	slli	r2,r6,3
    4fb8:	00c00074 	movhi	r3,1
    4fbc:	18c93d04 	addi	r3,r3,9460
    4fc0:	1885883a 	add	r2,r3,r2
    4fc4:	d9c00e17 	ldw	r7,56(sp)
    4fc8:	11000017 	ldw	r4,0(r2)
    4fcc:	11400117 	ldw	r5,4(r2)
    4fd0:	d8800717 	ldw	r2,28(sp)
    4fd4:	d9801015 	stw	r6,64(sp)
    4fd8:	880d883a 	mov	r6,r17
    4fdc:	da801615 	stw	r10,88(sp)
    4fe0:	15c00044 	addi	r23,r2,1
    4fe4:	000cb140 	call	cb14 <__muldf3>
    4fe8:	a80b883a 	mov	r5,r21
    4fec:	a009883a 	mov	r4,r20
    4ff0:	d8c01115 	stw	r3,68(sp)
    4ff4:	d8800e15 	stw	r2,56(sp)
    4ff8:	000dc500 	call	dc50 <__fixdfsi>
    4ffc:	1009883a 	mov	r4,r2
    5000:	1023883a 	mov	r17,r2
    5004:	000dcd80 	call	dcd8 <__floatsidf>
    5008:	a009883a 	mov	r4,r20
    500c:	a80b883a 	mov	r5,r21
    5010:	100d883a 	mov	r6,r2
    5014:	180f883a 	mov	r7,r3
    5018:	000d3800 	call	d380 <__subdf3>
    501c:	1813883a 	mov	r9,r3
    5020:	d8c00717 	ldw	r3,28(sp)
    5024:	8c400c04 	addi	r17,r17,48
    5028:	1011883a 	mov	r8,r2
    502c:	1c400005 	stb	r17,0(r3)
    5030:	da801617 	ldw	r10,88(sp)
    5034:	00800044 	movi	r2,1
    5038:	50802326 	beq	r10,r2,50c8 <_dtoa_r+0x14ac>
    503c:	d8800717 	ldw	r2,28(sp)
    5040:	b82b883a 	mov	r21,r23
    5044:	dc001315 	stw	r16,76(sp)
    5048:	12a9883a 	add	r20,r2,r10
    504c:	4807883a 	mov	r3,r9
    5050:	4005883a 	mov	r2,r8
    5054:	dc801415 	stw	r18,80(sp)
    5058:	000d883a 	mov	r6,zero
    505c:	01d00934 	movhi	r7,16420
    5060:	1009883a 	mov	r4,r2
    5064:	180b883a 	mov	r5,r3
    5068:	000cb140 	call	cb14 <__muldf3>
    506c:	180b883a 	mov	r5,r3
    5070:	1009883a 	mov	r4,r2
    5074:	1821883a 	mov	r16,r3
    5078:	1025883a 	mov	r18,r2
    507c:	000dc500 	call	dc50 <__fixdfsi>
    5080:	1009883a 	mov	r4,r2
    5084:	1023883a 	mov	r17,r2
    5088:	000dcd80 	call	dcd8 <__floatsidf>
    508c:	9009883a 	mov	r4,r18
    5090:	800b883a 	mov	r5,r16
    5094:	100d883a 	mov	r6,r2
    5098:	180f883a 	mov	r7,r3
    509c:	8c400c04 	addi	r17,r17,48
    50a0:	000d3800 	call	d380 <__subdf3>
    50a4:	ad400044 	addi	r21,r21,1
    50a8:	ac7fffc5 	stb	r17,-1(r21)
    50ac:	ad3fea1e 	bne	r21,r20,5058 <_dtoa_r+0x143c>
    50b0:	1813883a 	mov	r9,r3
    50b4:	d8c01017 	ldw	r3,64(sp)
    50b8:	dc001317 	ldw	r16,76(sp)
    50bc:	dc801417 	ldw	r18,80(sp)
    50c0:	1011883a 	mov	r8,r2
    50c4:	b8ef883a 	add	r23,r23,r3
    50c8:	d9000e17 	ldw	r4,56(sp)
    50cc:	d9401117 	ldw	r5,68(sp)
    50d0:	000d883a 	mov	r6,zero
    50d4:	01cff834 	movhi	r7,16352
    50d8:	da001715 	stw	r8,92(sp)
    50dc:	da401515 	stw	r9,84(sp)
    50e0:	000b6b40 	call	b6b4 <__adddf3>
    50e4:	da001717 	ldw	r8,92(sp)
    50e8:	da401517 	ldw	r9,84(sp)
    50ec:	1009883a 	mov	r4,r2
    50f0:	400d883a 	mov	r6,r8
    50f4:	480f883a 	mov	r7,r9
    50f8:	180b883a 	mov	r5,r3
    50fc:	000ca340 	call	ca34 <__ledf2>
    5100:	da001717 	ldw	r8,92(sp)
    5104:	da401517 	ldw	r9,84(sp)
    5108:	10003b0e 	bge	r2,zero,51f8 <_dtoa_r+0x15dc>
    510c:	d9001217 	ldw	r4,72(sp)
    5110:	bd7fffc3 	ldbu	r21,-1(r23)
    5114:	d9000515 	stw	r4,20(sp)
    5118:	003d1c06 	br	458c <_dtoa_r+0x970>
    511c:	d8c00817 	ldw	r3,32(sp)
    5120:	18a9c83a 	sub	r20,r3,r2
    5124:	0005883a 	mov	r2,zero
    5128:	003d3706 	br	4608 <_dtoa_r+0x9ec>
    512c:	00800044 	movi	r2,1
    5130:	003dd006 	br	4874 <_dtoa_r+0xc58>
    5134:	d8c00217 	ldw	r3,8(sp)
    5138:	00800d84 	movi	r2,54
    513c:	dd400917 	ldw	r21,36(sp)
    5140:	10c5c83a 	sub	r2,r2,r3
    5144:	dd000817 	ldw	r20,32(sp)
    5148:	003d2f06 	br	4608 <_dtoa_r+0x9ec>
    514c:	9029883a 	mov	r20,r18
    5150:	982b883a 	mov	r21,r19
    5154:	04400084 	movi	r17,2
    5158:	003bc606 	br	4074 <_dtoa_r+0x458>
    515c:	d8800617 	ldw	r2,24(sp)
    5160:	103efc26 	beq	r2,zero,4d54 <_dtoa_r+0x1138>
    5164:	d8c00c17 	ldw	r3,48(sp)
    5168:	00fc890e 	bge	zero,r3,4390 <_dtoa_r+0x774>
    516c:	a80b883a 	mov	r5,r21
    5170:	a009883a 	mov	r4,r20
    5174:	000d883a 	mov	r6,zero
    5178:	01d00934 	movhi	r7,16420
    517c:	000cb140 	call	cb14 <__muldf3>
    5180:	89000044 	addi	r4,r17,1
    5184:	1029883a 	mov	r20,r2
    5188:	182b883a 	mov	r21,r3
    518c:	000dcd80 	call	dcd8 <__floatsidf>
    5190:	a009883a 	mov	r4,r20
    5194:	a80b883a 	mov	r5,r21
    5198:	100d883a 	mov	r6,r2
    519c:	180f883a 	mov	r7,r3
    51a0:	000cb140 	call	cb14 <__muldf3>
    51a4:	1009883a 	mov	r4,r2
    51a8:	180b883a 	mov	r5,r3
    51ac:	000d883a 	mov	r6,zero
    51b0:	01d00734 	movhi	r7,16412
    51b4:	000b6b40 	call	b6b4 <__adddf3>
    51b8:	d9000517 	ldw	r4,20(sp)
    51bc:	1023883a 	mov	r17,r2
    51c0:	00bf3034 	movhi	r2,64704
    51c4:	213fffc4 	addi	r4,r4,-1
    51c8:	1885883a 	add	r2,r3,r2
    51cc:	d9001215 	stw	r4,72(sp)
    51d0:	d8800e15 	stw	r2,56(sp)
    51d4:	da800c17 	ldw	r10,48(sp)
    51d8:	003bc306 	br	40e8 <_dtoa_r+0x4cc>
    51dc:	b039883a 	mov	fp,r22
    51e0:	01000e44 	movi	r4,57
    51e4:	8825883a 	mov	r18,r17
    51e8:	9dc00044 	addi	r23,r19,1
    51ec:	99000005 	stb	r4,0(r19)
    51f0:	a023883a 	mov	r17,r20
    51f4:	003dae06 	br	48b0 <_dtoa_r+0xc94>
    51f8:	d9800e17 	ldw	r6,56(sp)
    51fc:	d9c01117 	ldw	r7,68(sp)
    5200:	0009883a 	mov	r4,zero
    5204:	014ff834 	movhi	r5,16352
    5208:	da001715 	stw	r8,92(sp)
    520c:	da401515 	stw	r9,84(sp)
    5210:	000d3800 	call	d380 <__subdf3>
    5214:	da001717 	ldw	r8,92(sp)
    5218:	da401517 	ldw	r9,84(sp)
    521c:	1009883a 	mov	r4,r2
    5220:	180b883a 	mov	r5,r3
    5224:	400d883a 	mov	r6,r8
    5228:	480f883a 	mov	r7,r9
    522c:	000c9540 	call	c954 <__gedf2>
    5230:	00bc570e 	bge	zero,r2,4390 <_dtoa_r+0x774>
    5234:	01000c04 	movi	r4,48
    5238:	00000106 	br	5240 <_dtoa_r+0x1624>
    523c:	102f883a 	mov	r23,r2
    5240:	b8bfffc4 	addi	r2,r23,-1
    5244:	10c00007 	ldb	r3,0(r2)
    5248:	193ffc26 	beq	r3,r4,523c <_dtoa_r+0x1620>
    524c:	d9801217 	ldw	r6,72(sp)
    5250:	d9800515 	stw	r6,20(sp)
    5254:	003c1f06 	br	42d4 <_dtoa_r+0x6b8>
    5258:	d8801217 	ldw	r2,72(sp)
    525c:	dc001117 	ldw	r16,68(sp)
    5260:	d8800515 	stw	r2,20(sp)
    5264:	003cc906 	br	458c <_dtoa_r+0x970>
    5268:	dd801317 	ldw	r22,76(sp)
    526c:	dc001117 	ldw	r16,68(sp)
    5270:	dcc01417 	ldw	r19,80(sp)
    5274:	dc801017 	ldw	r18,64(sp)
    5278:	003c4506 	br	4390 <_dtoa_r+0x774>
    527c:	103e5d1e 	bne	r2,zero,4bf4 <_dtoa_r+0xfd8>
    5280:	4080004c 	andi	r2,r8,1
    5284:	103e5b26 	beq	r2,zero,4bf4 <_dtoa_r+0xfd8>
    5288:	003e5706 	br	4be8 <_dtoa_r+0xfcc>
    528c:	d8c00317 	ldw	r3,12(sp)
    5290:	00800084 	movi	r2,2
    5294:	10c00a16 	blt	r2,r3,52c0 <_dtoa_r+0x16a4>
    5298:	d9000c17 	ldw	r4,48(sp)
    529c:	003e8306 	br	4cac <_dtoa_r+0x1090>
    52a0:	04400084 	movi	r17,2
    52a4:	003b7306 	br	4074 <_dtoa_r+0x458>
    52a8:	d9801217 	ldw	r6,72(sp)
    52ac:	d9800515 	stw	r6,20(sp)
    52b0:	003cb606 	br	458c <_dtoa_r+0x970>
    52b4:	d9001217 	ldw	r4,72(sp)
    52b8:	d9000515 	stw	r4,20(sp)
    52bc:	003c0506 	br	42d4 <_dtoa_r+0x6b8>
    52c0:	d9800c17 	ldw	r6,48(sp)
    52c4:	d9800615 	stw	r6,24(sp)
    52c8:	003e8306 	br	4cd8 <_dtoa_r+0x10bc>
    52cc:	d9800317 	ldw	r6,12(sp)
    52d0:	00800084 	movi	r2,2
    52d4:	11800216 	blt	r2,r6,52e0 <_dtoa_r+0x16c4>
    52d8:	d8800c17 	ldw	r2,48(sp)
    52dc:	003da606 	br	4978 <_dtoa_r+0xd5c>
    52e0:	d8800c17 	ldw	r2,48(sp)
    52e4:	d8800615 	stw	r2,24(sp)
    52e8:	003e7b06 	br	4cd8 <_dtoa_r+0x10bc>
    52ec:	05000044 	movi	r20,1
    52f0:	003b0506 	br	3f08 <_dtoa_r+0x2ec>
    52f4:	8009883a 	mov	r4,r16
    52f8:	80001115 	stw	zero,68(r16)
    52fc:	000b883a 	mov	r5,zero
    5300:	00072d00 	call	72d0 <_Balloc>
    5304:	d8800715 	stw	r2,28(sp)
    5308:	d8c00717 	ldw	r3,28(sp)
    530c:	00bfffc4 	movi	r2,-1
    5310:	01000044 	movi	r4,1
    5314:	d8800c15 	stw	r2,48(sp)
    5318:	80c01015 	stw	r3,64(r16)
    531c:	d9000b15 	stw	r4,44(sp)
    5320:	d8800615 	stw	r2,24(sp)
    5324:	d8002215 	stw	zero,136(sp)
    5328:	003c1906 	br	4390 <_dtoa_r+0x774>
    532c:	193d2926 	beq	r3,r4,47d4 <_dtoa_r+0xbb8>
    5330:	00c00f04 	movi	r3,60
    5334:	1885c83a 	sub	r2,r3,r2
    5338:	003d7b06 	br	4928 <_dtoa_r+0xd0c>
    533c:	000b883a 	mov	r5,zero
    5340:	003b1006 	br	3f84 <_dtoa_r+0x368>

00005344 <__sflush_r>:
    5344:	2880030b 	ldhu	r2,12(r5)
    5348:	defffb04 	addi	sp,sp,-20
    534c:	dcc00315 	stw	r19,12(sp)
    5350:	dc400115 	stw	r17,4(sp)
    5354:	dfc00415 	stw	ra,16(sp)
    5358:	dc800215 	stw	r18,8(sp)
    535c:	dc000015 	stw	r16,0(sp)
    5360:	10c0020c 	andi	r3,r2,8
    5364:	2823883a 	mov	r17,r5
    5368:	2027883a 	mov	r19,r4
    536c:	1800311e 	bne	r3,zero,5434 <__sflush_r+0xf0>
    5370:	28c00117 	ldw	r3,4(r5)
    5374:	10820014 	ori	r2,r2,2048
    5378:	2880030d 	sth	r2,12(r5)
    537c:	00c04b0e 	bge	zero,r3,54ac <__sflush_r+0x168>
    5380:	8a000a17 	ldw	r8,40(r17)
    5384:	40002326 	beq	r8,zero,5414 <__sflush_r+0xd0>
    5388:	9c000017 	ldw	r16,0(r19)
    538c:	10c4000c 	andi	r3,r2,4096
    5390:	98000015 	stw	zero,0(r19)
    5394:	18004826 	beq	r3,zero,54b8 <__sflush_r+0x174>
    5398:	89801417 	ldw	r6,80(r17)
    539c:	10c0010c 	andi	r3,r2,4
    53a0:	18000626 	beq	r3,zero,53bc <__sflush_r+0x78>
    53a4:	88c00117 	ldw	r3,4(r17)
    53a8:	88800c17 	ldw	r2,48(r17)
    53ac:	30cdc83a 	sub	r6,r6,r3
    53b0:	10000226 	beq	r2,zero,53bc <__sflush_r+0x78>
    53b4:	88800f17 	ldw	r2,60(r17)
    53b8:	308dc83a 	sub	r6,r6,r2
    53bc:	89400717 	ldw	r5,28(r17)
    53c0:	9809883a 	mov	r4,r19
    53c4:	000f883a 	mov	r7,zero
    53c8:	403ee83a 	callr	r8
    53cc:	00ffffc4 	movi	r3,-1
    53d0:	10c04426 	beq	r2,r3,54e4 <__sflush_r+0x1a0>
    53d4:	88c0030b 	ldhu	r3,12(r17)
    53d8:	89000417 	ldw	r4,16(r17)
    53dc:	88000115 	stw	zero,4(r17)
    53e0:	197dffcc 	andi	r5,r3,63487
    53e4:	8940030d 	sth	r5,12(r17)
    53e8:	89000015 	stw	r4,0(r17)
    53ec:	18c4000c 	andi	r3,r3,4096
    53f0:	18002c1e 	bne	r3,zero,54a4 <__sflush_r+0x160>
    53f4:	89400c17 	ldw	r5,48(r17)
    53f8:	9c000015 	stw	r16,0(r19)
    53fc:	28000526 	beq	r5,zero,5414 <__sflush_r+0xd0>
    5400:	88801004 	addi	r2,r17,64
    5404:	28800226 	beq	r5,r2,5410 <__sflush_r+0xcc>
    5408:	9809883a 	mov	r4,r19
    540c:	0005aac0 	call	5aac <_free_r>
    5410:	88000c15 	stw	zero,48(r17)
    5414:	0005883a 	mov	r2,zero
    5418:	dfc00417 	ldw	ra,16(sp)
    541c:	dcc00317 	ldw	r19,12(sp)
    5420:	dc800217 	ldw	r18,8(sp)
    5424:	dc400117 	ldw	r17,4(sp)
    5428:	dc000017 	ldw	r16,0(sp)
    542c:	dec00504 	addi	sp,sp,20
    5430:	f800283a 	ret
    5434:	2c800417 	ldw	r18,16(r5)
    5438:	903ff626 	beq	r18,zero,5414 <__sflush_r+0xd0>
    543c:	2c000017 	ldw	r16,0(r5)
    5440:	108000cc 	andi	r2,r2,3
    5444:	2c800015 	stw	r18,0(r5)
    5448:	84a1c83a 	sub	r16,r16,r18
    544c:	1000131e 	bne	r2,zero,549c <__sflush_r+0x158>
    5450:	28800517 	ldw	r2,20(r5)
    5454:	88800215 	stw	r2,8(r17)
    5458:	04000316 	blt	zero,r16,5468 <__sflush_r+0x124>
    545c:	003fed06 	br	5414 <__sflush_r+0xd0>
    5460:	90a5883a 	add	r18,r18,r2
    5464:	043feb0e 	bge	zero,r16,5414 <__sflush_r+0xd0>
    5468:	88800917 	ldw	r2,36(r17)
    546c:	89400717 	ldw	r5,28(r17)
    5470:	800f883a 	mov	r7,r16
    5474:	900d883a 	mov	r6,r18
    5478:	9809883a 	mov	r4,r19
    547c:	103ee83a 	callr	r2
    5480:	80a1c83a 	sub	r16,r16,r2
    5484:	00bff616 	blt	zero,r2,5460 <__sflush_r+0x11c>
    5488:	88c0030b 	ldhu	r3,12(r17)
    548c:	00bfffc4 	movi	r2,-1
    5490:	18c01014 	ori	r3,r3,64
    5494:	88c0030d 	sth	r3,12(r17)
    5498:	003fdf06 	br	5418 <__sflush_r+0xd4>
    549c:	0005883a 	mov	r2,zero
    54a0:	003fec06 	br	5454 <__sflush_r+0x110>
    54a4:	88801415 	stw	r2,80(r17)
    54a8:	003fd206 	br	53f4 <__sflush_r+0xb0>
    54ac:	28c00f17 	ldw	r3,60(r5)
    54b0:	00ffb316 	blt	zero,r3,5380 <__sflush_r+0x3c>
    54b4:	003fd706 	br	5414 <__sflush_r+0xd0>
    54b8:	89400717 	ldw	r5,28(r17)
    54bc:	000d883a 	mov	r6,zero
    54c0:	9809883a 	mov	r4,r19
    54c4:	01c00044 	movi	r7,1
    54c8:	403ee83a 	callr	r8
    54cc:	100d883a 	mov	r6,r2
    54d0:	00bfffc4 	movi	r2,-1
    54d4:	30801426 	beq	r6,r2,5528 <__sflush_r+0x1e4>
    54d8:	8880030b 	ldhu	r2,12(r17)
    54dc:	8a000a17 	ldw	r8,40(r17)
    54e0:	003fae06 	br	539c <__sflush_r+0x58>
    54e4:	98c00017 	ldw	r3,0(r19)
    54e8:	183fba26 	beq	r3,zero,53d4 <__sflush_r+0x90>
    54ec:	01000744 	movi	r4,29
    54f0:	19000626 	beq	r3,r4,550c <__sflush_r+0x1c8>
    54f4:	01000584 	movi	r4,22
    54f8:	19000426 	beq	r3,r4,550c <__sflush_r+0x1c8>
    54fc:	88c0030b 	ldhu	r3,12(r17)
    5500:	18c01014 	ori	r3,r3,64
    5504:	88c0030d 	sth	r3,12(r17)
    5508:	003fc306 	br	5418 <__sflush_r+0xd4>
    550c:	8880030b 	ldhu	r2,12(r17)
    5510:	88c00417 	ldw	r3,16(r17)
    5514:	88000115 	stw	zero,4(r17)
    5518:	10bdffcc 	andi	r2,r2,63487
    551c:	8880030d 	sth	r2,12(r17)
    5520:	88c00015 	stw	r3,0(r17)
    5524:	003fb306 	br	53f4 <__sflush_r+0xb0>
    5528:	98800017 	ldw	r2,0(r19)
    552c:	103fea26 	beq	r2,zero,54d8 <__sflush_r+0x194>
    5530:	00c00744 	movi	r3,29
    5534:	10c00226 	beq	r2,r3,5540 <__sflush_r+0x1fc>
    5538:	00c00584 	movi	r3,22
    553c:	10ffd21e 	bne	r2,r3,5488 <__sflush_r+0x144>
    5540:	9c000015 	stw	r16,0(r19)
    5544:	0005883a 	mov	r2,zero
    5548:	003fb306 	br	5418 <__sflush_r+0xd4>

0000554c <_fflush_r>:
    554c:	defffd04 	addi	sp,sp,-12
    5550:	dc000115 	stw	r16,4(sp)
    5554:	dfc00215 	stw	ra,8(sp)
    5558:	2021883a 	mov	r16,r4
    555c:	20000226 	beq	r4,zero,5568 <_fflush_r+0x1c>
    5560:	20800e17 	ldw	r2,56(r4)
    5564:	10000c26 	beq	r2,zero,5598 <_fflush_r+0x4c>
    5568:	2880030f 	ldh	r2,12(r5)
    556c:	1000051e 	bne	r2,zero,5584 <_fflush_r+0x38>
    5570:	0005883a 	mov	r2,zero
    5574:	dfc00217 	ldw	ra,8(sp)
    5578:	dc000117 	ldw	r16,4(sp)
    557c:	dec00304 	addi	sp,sp,12
    5580:	f800283a 	ret
    5584:	8009883a 	mov	r4,r16
    5588:	dfc00217 	ldw	ra,8(sp)
    558c:	dc000117 	ldw	r16,4(sp)
    5590:	dec00304 	addi	sp,sp,12
    5594:	00053441 	jmpi	5344 <__sflush_r>
    5598:	d9400015 	stw	r5,0(sp)
    559c:	00059380 	call	5938 <__sinit>
    55a0:	d9400017 	ldw	r5,0(sp)
    55a4:	003ff006 	br	5568 <_fflush_r+0x1c>

000055a8 <fflush>:
    55a8:	20000526 	beq	r4,zero,55c0 <fflush+0x18>
    55ac:	00800074 	movhi	r2,1
    55b0:	10917b04 	addi	r2,r2,17900
    55b4:	200b883a 	mov	r5,r4
    55b8:	11000017 	ldw	r4,0(r2)
    55bc:	000554c1 	jmpi	554c <_fflush_r>
    55c0:	00800074 	movhi	r2,1
    55c4:	10917a04 	addi	r2,r2,17896
    55c8:	11000017 	ldw	r4,0(r2)
    55cc:	01400034 	movhi	r5,0
    55d0:	29555304 	addi	r5,r5,21836
    55d4:	000632c1 	jmpi	632c <_fwalk_reent>

000055d8 <__fp_lock>:
    55d8:	0005883a 	mov	r2,zero
    55dc:	f800283a 	ret

000055e0 <__fp_unlock>:
    55e0:	0005883a 	mov	r2,zero
    55e4:	f800283a 	ret

000055e8 <_cleanup_r>:
    55e8:	01400074 	movhi	r5,1
    55ec:	29686a04 	addi	r5,r5,-24152
    55f0:	000632c1 	jmpi	632c <_fwalk_reent>

000055f4 <__sinit.part.1>:
    55f4:	defff704 	addi	sp,sp,-36
    55f8:	00c00034 	movhi	r3,0
    55fc:	dfc00815 	stw	ra,32(sp)
    5600:	ddc00715 	stw	r23,28(sp)
    5604:	dd800615 	stw	r22,24(sp)
    5608:	dd400515 	stw	r21,20(sp)
    560c:	dd000415 	stw	r20,16(sp)
    5610:	dcc00315 	stw	r19,12(sp)
    5614:	dc800215 	stw	r18,8(sp)
    5618:	dc400115 	stw	r17,4(sp)
    561c:	dc000015 	stw	r16,0(sp)
    5620:	18d57a04 	addi	r3,r3,21992
    5624:	24000117 	ldw	r16,4(r4)
    5628:	20c00f15 	stw	r3,60(r4)
    562c:	2080bb04 	addi	r2,r4,748
    5630:	00c000c4 	movi	r3,3
    5634:	20c0b915 	stw	r3,740(r4)
    5638:	2080ba15 	stw	r2,744(r4)
    563c:	2000b815 	stw	zero,736(r4)
    5640:	05c00204 	movi	r23,8
    5644:	00800104 	movi	r2,4
    5648:	2025883a 	mov	r18,r4
    564c:	b80d883a 	mov	r6,r23
    5650:	81001704 	addi	r4,r16,92
    5654:	000b883a 	mov	r5,zero
    5658:	80000015 	stw	zero,0(r16)
    565c:	80000115 	stw	zero,4(r16)
    5660:	80000215 	stw	zero,8(r16)
    5664:	8080030d 	sth	r2,12(r16)
    5668:	80001915 	stw	zero,100(r16)
    566c:	8000038d 	sth	zero,14(r16)
    5670:	80000415 	stw	zero,16(r16)
    5674:	80000515 	stw	zero,20(r16)
    5678:	80000615 	stw	zero,24(r16)
    567c:	00071ac0 	call	71ac <memset>
    5680:	05800074 	movhi	r22,1
    5684:	94400217 	ldw	r17,8(r18)
    5688:	05400074 	movhi	r21,1
    568c:	05000074 	movhi	r20,1
    5690:	04c00074 	movhi	r19,1
    5694:	b5a25704 	addi	r22,r22,-30372
    5698:	ad626e04 	addi	r21,r21,-30280
    569c:	a5228d04 	addi	r20,r20,-30156
    56a0:	9ce2a404 	addi	r19,r19,-30064
    56a4:	85800815 	stw	r22,32(r16)
    56a8:	85400915 	stw	r21,36(r16)
    56ac:	85000a15 	stw	r20,40(r16)
    56b0:	84c00b15 	stw	r19,44(r16)
    56b4:	84000715 	stw	r16,28(r16)
    56b8:	00800284 	movi	r2,10
    56bc:	8880030d 	sth	r2,12(r17)
    56c0:	00800044 	movi	r2,1
    56c4:	89001704 	addi	r4,r17,92
    56c8:	b80d883a 	mov	r6,r23
    56cc:	000b883a 	mov	r5,zero
    56d0:	88000015 	stw	zero,0(r17)
    56d4:	88000115 	stw	zero,4(r17)
    56d8:	88000215 	stw	zero,8(r17)
    56dc:	88001915 	stw	zero,100(r17)
    56e0:	8880038d 	sth	r2,14(r17)
    56e4:	88000415 	stw	zero,16(r17)
    56e8:	88000515 	stw	zero,20(r17)
    56ec:	88000615 	stw	zero,24(r17)
    56f0:	00071ac0 	call	71ac <memset>
    56f4:	94000317 	ldw	r16,12(r18)
    56f8:	00800484 	movi	r2,18
    56fc:	8c400715 	stw	r17,28(r17)
    5700:	8d800815 	stw	r22,32(r17)
    5704:	8d400915 	stw	r21,36(r17)
    5708:	8d000a15 	stw	r20,40(r17)
    570c:	8cc00b15 	stw	r19,44(r17)
    5710:	8080030d 	sth	r2,12(r16)
    5714:	00800084 	movi	r2,2
    5718:	80000015 	stw	zero,0(r16)
    571c:	80000115 	stw	zero,4(r16)
    5720:	80000215 	stw	zero,8(r16)
    5724:	80001915 	stw	zero,100(r16)
    5728:	8080038d 	sth	r2,14(r16)
    572c:	80000415 	stw	zero,16(r16)
    5730:	80000515 	stw	zero,20(r16)
    5734:	80000615 	stw	zero,24(r16)
    5738:	81001704 	addi	r4,r16,92
    573c:	000b883a 	mov	r5,zero
    5740:	b80d883a 	mov	r6,r23
    5744:	00071ac0 	call	71ac <memset>
    5748:	00800044 	movi	r2,1
    574c:	84000715 	stw	r16,28(r16)
    5750:	85800815 	stw	r22,32(r16)
    5754:	85400915 	stw	r21,36(r16)
    5758:	85000a15 	stw	r20,40(r16)
    575c:	84c00b15 	stw	r19,44(r16)
    5760:	90800e15 	stw	r2,56(r18)
    5764:	dfc00817 	ldw	ra,32(sp)
    5768:	ddc00717 	ldw	r23,28(sp)
    576c:	dd800617 	ldw	r22,24(sp)
    5770:	dd400517 	ldw	r21,20(sp)
    5774:	dd000417 	ldw	r20,16(sp)
    5778:	dcc00317 	ldw	r19,12(sp)
    577c:	dc800217 	ldw	r18,8(sp)
    5780:	dc400117 	ldw	r17,4(sp)
    5784:	dc000017 	ldw	r16,0(sp)
    5788:	dec00904 	addi	sp,sp,36
    578c:	f800283a 	ret

00005790 <__sfmoreglue>:
    5790:	defffc04 	addi	sp,sp,-16
    5794:	dc800215 	stw	r18,8(sp)
    5798:	2825883a 	mov	r18,r5
    579c:	dc000015 	stw	r16,0(sp)
    57a0:	01401a04 	movi	r5,104
    57a4:	2021883a 	mov	r16,r4
    57a8:	913fffc4 	addi	r4,r18,-1
    57ac:	dfc00315 	stw	ra,12(sp)
    57b0:	dc400115 	stw	r17,4(sp)
    57b4:	0000eb00 	call	eb0 <__mulsi3>
    57b8:	8009883a 	mov	r4,r16
    57bc:	11401d04 	addi	r5,r2,116
    57c0:	1023883a 	mov	r17,r2
    57c4:	00066880 	call	6688 <_malloc_r>
    57c8:	1021883a 	mov	r16,r2
    57cc:	10000726 	beq	r2,zero,57ec <__sfmoreglue+0x5c>
    57d0:	11000304 	addi	r4,r2,12
    57d4:	10000015 	stw	zero,0(r2)
    57d8:	14800115 	stw	r18,4(r2)
    57dc:	11000215 	stw	r4,8(r2)
    57e0:	000b883a 	mov	r5,zero
    57e4:	89801a04 	addi	r6,r17,104
    57e8:	00071ac0 	call	71ac <memset>
    57ec:	8005883a 	mov	r2,r16
    57f0:	dfc00317 	ldw	ra,12(sp)
    57f4:	dc800217 	ldw	r18,8(sp)
    57f8:	dc400117 	ldw	r17,4(sp)
    57fc:	dc000017 	ldw	r16,0(sp)
    5800:	dec00404 	addi	sp,sp,16
    5804:	f800283a 	ret

00005808 <__sfp>:
    5808:	00800074 	movhi	r2,1
    580c:	defffb04 	addi	sp,sp,-20
    5810:	10917a04 	addi	r2,r2,17896
    5814:	dc800215 	stw	r18,8(sp)
    5818:	14800017 	ldw	r18,0(r2)
    581c:	dcc00315 	stw	r19,12(sp)
    5820:	dfc00415 	stw	ra,16(sp)
    5824:	90800e17 	ldw	r2,56(r18)
    5828:	dc400115 	stw	r17,4(sp)
    582c:	dc000015 	stw	r16,0(sp)
    5830:	2027883a 	mov	r19,r4
    5834:	1000021e 	bne	r2,zero,5840 <__sfp+0x38>
    5838:	9009883a 	mov	r4,r18
    583c:	00055f40 	call	55f4 <__sinit.part.1>
    5840:	9480b804 	addi	r18,r18,736
    5844:	047fffc4 	movi	r17,-1
    5848:	91400117 	ldw	r5,4(r18)
    584c:	94000217 	ldw	r16,8(r18)
    5850:	297fffc4 	addi	r5,r5,-1
    5854:	28000a16 	blt	r5,zero,5880 <__sfp+0x78>
    5858:	8080030f 	ldh	r2,12(r16)
    585c:	10000c26 	beq	r2,zero,5890 <__sfp+0x88>
    5860:	80c01d04 	addi	r3,r16,116
    5864:	00000206 	br	5870 <__sfp+0x68>
    5868:	18bfe60f 	ldh	r2,-104(r3)
    586c:	10000826 	beq	r2,zero,5890 <__sfp+0x88>
    5870:	297fffc4 	addi	r5,r5,-1
    5874:	1c3ffd04 	addi	r16,r3,-12
    5878:	18c01a04 	addi	r3,r3,104
    587c:	2c7ffa1e 	bne	r5,r17,5868 <__sfp+0x60>
    5880:	90800017 	ldw	r2,0(r18)
    5884:	10001d26 	beq	r2,zero,58fc <__sfp+0xf4>
    5888:	1025883a 	mov	r18,r2
    588c:	003fee06 	br	5848 <__sfp+0x40>
    5890:	00bfffc4 	movi	r2,-1
    5894:	8080038d 	sth	r2,14(r16)
    5898:	00800044 	movi	r2,1
    589c:	8080030d 	sth	r2,12(r16)
    58a0:	80001915 	stw	zero,100(r16)
    58a4:	80000015 	stw	zero,0(r16)
    58a8:	80000215 	stw	zero,8(r16)
    58ac:	80000115 	stw	zero,4(r16)
    58b0:	80000415 	stw	zero,16(r16)
    58b4:	80000515 	stw	zero,20(r16)
    58b8:	80000615 	stw	zero,24(r16)
    58bc:	81001704 	addi	r4,r16,92
    58c0:	000b883a 	mov	r5,zero
    58c4:	01800204 	movi	r6,8
    58c8:	00071ac0 	call	71ac <memset>
    58cc:	8005883a 	mov	r2,r16
    58d0:	80000c15 	stw	zero,48(r16)
    58d4:	80000d15 	stw	zero,52(r16)
    58d8:	80001115 	stw	zero,68(r16)
    58dc:	80001215 	stw	zero,72(r16)
    58e0:	dfc00417 	ldw	ra,16(sp)
    58e4:	dcc00317 	ldw	r19,12(sp)
    58e8:	dc800217 	ldw	r18,8(sp)
    58ec:	dc400117 	ldw	r17,4(sp)
    58f0:	dc000017 	ldw	r16,0(sp)
    58f4:	dec00504 	addi	sp,sp,20
    58f8:	f800283a 	ret
    58fc:	9809883a 	mov	r4,r19
    5900:	01400104 	movi	r5,4
    5904:	00057900 	call	5790 <__sfmoreglue>
    5908:	90800015 	stw	r2,0(r18)
    590c:	103fde1e 	bne	r2,zero,5888 <__sfp+0x80>
    5910:	00800304 	movi	r2,12
    5914:	98800015 	stw	r2,0(r19)
    5918:	0005883a 	mov	r2,zero
    591c:	003ff006 	br	58e0 <__sfp+0xd8>

00005920 <_cleanup>:
    5920:	00800074 	movhi	r2,1
    5924:	10917a04 	addi	r2,r2,17896
    5928:	11000017 	ldw	r4,0(r2)
    592c:	01400074 	movhi	r5,1
    5930:	29686a04 	addi	r5,r5,-24152
    5934:	000632c1 	jmpi	632c <_fwalk_reent>

00005938 <__sinit>:
    5938:	20800e17 	ldw	r2,56(r4)
    593c:	10000126 	beq	r2,zero,5944 <__sinit+0xc>
    5940:	f800283a 	ret
    5944:	00055f41 	jmpi	55f4 <__sinit.part.1>

00005948 <__sfp_lock_acquire>:
    5948:	f800283a 	ret

0000594c <__sfp_lock_release>:
    594c:	f800283a 	ret

00005950 <__sinit_lock_acquire>:
    5950:	f800283a 	ret

00005954 <__sinit_lock_release>:
    5954:	f800283a 	ret

00005958 <__fp_lock_all>:
    5958:	00800074 	movhi	r2,1
    595c:	10917b04 	addi	r2,r2,17900
    5960:	11000017 	ldw	r4,0(r2)
    5964:	01400034 	movhi	r5,0
    5968:	29557604 	addi	r5,r5,21976
    596c:	00062681 	jmpi	6268 <_fwalk>

00005970 <__fp_unlock_all>:
    5970:	00800074 	movhi	r2,1
    5974:	10917b04 	addi	r2,r2,17900
    5978:	11000017 	ldw	r4,0(r2)
    597c:	01400034 	movhi	r5,0
    5980:	29557804 	addi	r5,r5,21984
    5984:	00062681 	jmpi	6268 <_fwalk>

00005988 <_malloc_trim_r>:
    5988:	defffb04 	addi	sp,sp,-20
    598c:	dcc00315 	stw	r19,12(sp)
    5990:	04c00074 	movhi	r19,1
    5994:	dc800215 	stw	r18,8(sp)
    5998:	dc400115 	stw	r17,4(sp)
    599c:	dc000015 	stw	r16,0(sp)
    59a0:	dfc00415 	stw	ra,16(sp)
    59a4:	2821883a 	mov	r16,r5
    59a8:	9ccace04 	addi	r19,r19,11064
    59ac:	2025883a 	mov	r18,r4
    59b0:	000e3480 	call	e348 <__malloc_lock>
    59b4:	98800217 	ldw	r2,8(r19)
    59b8:	14400117 	ldw	r17,4(r2)
    59bc:	00bfff04 	movi	r2,-4
    59c0:	88a2703a 	and	r17,r17,r2
    59c4:	8c21c83a 	sub	r16,r17,r16
    59c8:	8403fbc4 	addi	r16,r16,4079
    59cc:	8020d33a 	srli	r16,r16,12
    59d0:	0083ffc4 	movi	r2,4095
    59d4:	843fffc4 	addi	r16,r16,-1
    59d8:	8020933a 	slli	r16,r16,12
    59dc:	1400060e 	bge	r2,r16,59f8 <_malloc_trim_r+0x70>
    59e0:	9009883a 	mov	r4,r18
    59e4:	000b883a 	mov	r5,zero
    59e8:	00089080 	call	8908 <_sbrk_r>
    59ec:	98c00217 	ldw	r3,8(r19)
    59f0:	1c47883a 	add	r3,r3,r17
    59f4:	10c00a26 	beq	r2,r3,5a20 <_malloc_trim_r+0x98>
    59f8:	9009883a 	mov	r4,r18
    59fc:	000e3680 	call	e368 <__malloc_unlock>
    5a00:	0005883a 	mov	r2,zero
    5a04:	dfc00417 	ldw	ra,16(sp)
    5a08:	dcc00317 	ldw	r19,12(sp)
    5a0c:	dc800217 	ldw	r18,8(sp)
    5a10:	dc400117 	ldw	r17,4(sp)
    5a14:	dc000017 	ldw	r16,0(sp)
    5a18:	dec00504 	addi	sp,sp,20
    5a1c:	f800283a 	ret
    5a20:	9009883a 	mov	r4,r18
    5a24:	040bc83a 	sub	r5,zero,r16
    5a28:	00089080 	call	8908 <_sbrk_r>
    5a2c:	00ffffc4 	movi	r3,-1
    5a30:	10c00d26 	beq	r2,r3,5a68 <_malloc_trim_r+0xe0>
    5a34:	00c00074 	movhi	r3,1
    5a38:	18d19904 	addi	r3,r3,18020
    5a3c:	18800017 	ldw	r2,0(r3)
    5a40:	99000217 	ldw	r4,8(r19)
    5a44:	8c23c83a 	sub	r17,r17,r16
    5a48:	8c400054 	ori	r17,r17,1
    5a4c:	1421c83a 	sub	r16,r2,r16
    5a50:	24400115 	stw	r17,4(r4)
    5a54:	9009883a 	mov	r4,r18
    5a58:	1c000015 	stw	r16,0(r3)
    5a5c:	000e3680 	call	e368 <__malloc_unlock>
    5a60:	00800044 	movi	r2,1
    5a64:	003fe706 	br	5a04 <_malloc_trim_r+0x7c>
    5a68:	9009883a 	mov	r4,r18
    5a6c:	000b883a 	mov	r5,zero
    5a70:	00089080 	call	8908 <_sbrk_r>
    5a74:	99000217 	ldw	r4,8(r19)
    5a78:	014003c4 	movi	r5,15
    5a7c:	1107c83a 	sub	r3,r2,r4
    5a80:	28ffdd0e 	bge	r5,r3,59f8 <_malloc_trim_r+0x70>
    5a84:	01400074 	movhi	r5,1
    5a88:	29517d04 	addi	r5,r5,17908
    5a8c:	29400017 	ldw	r5,0(r5)
    5a90:	18c00054 	ori	r3,r3,1
    5a94:	20c00115 	stw	r3,4(r4)
    5a98:	00c00074 	movhi	r3,1
    5a9c:	1145c83a 	sub	r2,r2,r5
    5aa0:	18d19904 	addi	r3,r3,18020
    5aa4:	18800015 	stw	r2,0(r3)
    5aa8:	003fd306 	br	59f8 <_malloc_trim_r+0x70>

00005aac <_free_r>:
    5aac:	28004c26 	beq	r5,zero,5be0 <_free_r+0x134>
    5ab0:	defffd04 	addi	sp,sp,-12
    5ab4:	dc400115 	stw	r17,4(sp)
    5ab8:	dc000015 	stw	r16,0(sp)
    5abc:	2023883a 	mov	r17,r4
    5ac0:	2821883a 	mov	r16,r5
    5ac4:	dfc00215 	stw	ra,8(sp)
    5ac8:	000e3480 	call	e348 <__malloc_lock>
    5acc:	813fff17 	ldw	r4,-4(r16)
    5ad0:	00bfff84 	movi	r2,-2
    5ad4:	02400074 	movhi	r9,1
    5ad8:	81bffe04 	addi	r6,r16,-8
    5adc:	2084703a 	and	r2,r4,r2
    5ae0:	4a4ace04 	addi	r9,r9,11064
    5ae4:	308b883a 	add	r5,r6,r2
    5ae8:	2a000117 	ldw	r8,4(r5)
    5aec:	49c00217 	ldw	r7,8(r9)
    5af0:	00ffff04 	movi	r3,-4
    5af4:	40c6703a 	and	r3,r8,r3
    5af8:	39405326 	beq	r7,r5,5c48 <_free_r+0x19c>
    5afc:	28c00115 	stw	r3,4(r5)
    5b00:	2100004c 	andi	r4,r4,1
    5b04:	2000091e 	bne	r4,zero,5b2c <_free_r+0x80>
    5b08:	81fffe17 	ldw	r7,-8(r16)
    5b0c:	4a000204 	addi	r8,r9,8
    5b10:	31cdc83a 	sub	r6,r6,r7
    5b14:	31000217 	ldw	r4,8(r6)
    5b18:	11c5883a 	add	r2,r2,r7
    5b1c:	22006126 	beq	r4,r8,5ca4 <_free_r+0x1f8>
    5b20:	31c00317 	ldw	r7,12(r6)
    5b24:	21c00315 	stw	r7,12(r4)
    5b28:	39000215 	stw	r4,8(r7)
    5b2c:	28c9883a 	add	r4,r5,r3
    5b30:	21c00117 	ldw	r7,4(r4)
    5b34:	39c0004c 	andi	r7,r7,1
    5b38:	38000d1e 	bne	r7,zero,5b70 <_free_r+0xc4>
    5b3c:	29000217 	ldw	r4,8(r5)
    5b40:	10c5883a 	add	r2,r2,r3
    5b44:	00c00074 	movhi	r3,1
    5b48:	18cad004 	addi	r3,r3,11072
    5b4c:	20c07526 	beq	r4,r3,5d24 <_free_r+0x278>
    5b50:	29c00317 	ldw	r7,12(r5)
    5b54:	11400054 	ori	r5,r2,1
    5b58:	3087883a 	add	r3,r6,r2
    5b5c:	21c00315 	stw	r7,12(r4)
    5b60:	39000215 	stw	r4,8(r7)
    5b64:	31400115 	stw	r5,4(r6)
    5b68:	18800015 	stw	r2,0(r3)
    5b6c:	00000406 	br	5b80 <_free_r+0xd4>
    5b70:	10c00054 	ori	r3,r2,1
    5b74:	30c00115 	stw	r3,4(r6)
    5b78:	3087883a 	add	r3,r6,r2
    5b7c:	18800015 	stw	r2,0(r3)
    5b80:	00c07fc4 	movi	r3,511
    5b84:	18801736 	bltu	r3,r2,5be4 <_free_r+0x138>
    5b88:	1004d0fa 	srli	r2,r2,3
    5b8c:	01400044 	movi	r5,1
    5b90:	49000117 	ldw	r4,4(r9)
    5b94:	1087883a 	add	r3,r2,r2
    5b98:	18c7883a 	add	r3,r3,r3
    5b9c:	1005d0ba 	srai	r2,r2,2
    5ba0:	18c7883a 	add	r3,r3,r3
    5ba4:	1a47883a 	add	r3,r3,r9
    5ba8:	19c00217 	ldw	r7,8(r3)
    5bac:	2884983a 	sll	r2,r5,r2
    5bb0:	30c00315 	stw	r3,12(r6)
    5bb4:	31c00215 	stw	r7,8(r6)
    5bb8:	1104b03a 	or	r2,r2,r4
    5bbc:	19800215 	stw	r6,8(r3)
    5bc0:	48800115 	stw	r2,4(r9)
    5bc4:	39800315 	stw	r6,12(r7)
    5bc8:	8809883a 	mov	r4,r17
    5bcc:	dfc00217 	ldw	ra,8(sp)
    5bd0:	dc400117 	ldw	r17,4(sp)
    5bd4:	dc000017 	ldw	r16,0(sp)
    5bd8:	dec00304 	addi	sp,sp,12
    5bdc:	000e3681 	jmpi	e368 <__malloc_unlock>
    5be0:	f800283a 	ret
    5be4:	1006d27a 	srli	r3,r2,9
    5be8:	01000104 	movi	r4,4
    5bec:	20c04036 	bltu	r4,r3,5cf0 <_free_r+0x244>
    5bf0:	1006d1ba 	srli	r3,r2,6
    5bf4:	19400e04 	addi	r5,r3,56
    5bf8:	2947883a 	add	r3,r5,r5
    5bfc:	18c7883a 	add	r3,r3,r3
    5c00:	18c7883a 	add	r3,r3,r3
    5c04:	1a49883a 	add	r4,r3,r9
    5c08:	20c00217 	ldw	r3,8(r4)
    5c0c:	01c00074 	movhi	r7,1
    5c10:	39cace04 	addi	r7,r7,11064
    5c14:	19003b26 	beq	r3,r4,5d04 <_free_r+0x258>
    5c18:	01ffff04 	movi	r7,-4
    5c1c:	19400117 	ldw	r5,4(r3)
    5c20:	29ca703a 	and	r5,r5,r7
    5c24:	1140022e 	bgeu	r2,r5,5c30 <_free_r+0x184>
    5c28:	18c00217 	ldw	r3,8(r3)
    5c2c:	20fffb1e 	bne	r4,r3,5c1c <_free_r+0x170>
    5c30:	18800317 	ldw	r2,12(r3)
    5c34:	30800315 	stw	r2,12(r6)
    5c38:	30c00215 	stw	r3,8(r6)
    5c3c:	11800215 	stw	r6,8(r2)
    5c40:	19800315 	stw	r6,12(r3)
    5c44:	003fe006 	br	5bc8 <_free_r+0x11c>
    5c48:	2100004c 	andi	r4,r4,1
    5c4c:	1885883a 	add	r2,r3,r2
    5c50:	2000071e 	bne	r4,zero,5c70 <_free_r+0x1c4>
    5c54:	817ffe17 	ldw	r5,-8(r16)
    5c58:	314dc83a 	sub	r6,r6,r5
    5c5c:	30c00317 	ldw	r3,12(r6)
    5c60:	31000217 	ldw	r4,8(r6)
    5c64:	1145883a 	add	r2,r2,r5
    5c68:	20c00315 	stw	r3,12(r4)
    5c6c:	19000215 	stw	r4,8(r3)
    5c70:	10c00054 	ori	r3,r2,1
    5c74:	30c00115 	stw	r3,4(r6)
    5c78:	00c00074 	movhi	r3,1
    5c7c:	18d17e04 	addi	r3,r3,17912
    5c80:	18c00017 	ldw	r3,0(r3)
    5c84:	49800215 	stw	r6,8(r9)
    5c88:	10ffcf36 	bltu	r2,r3,5bc8 <_free_r+0x11c>
    5c8c:	00800074 	movhi	r2,1
    5c90:	10919104 	addi	r2,r2,17988
    5c94:	11400017 	ldw	r5,0(r2)
    5c98:	8809883a 	mov	r4,r17
    5c9c:	00059880 	call	5988 <_malloc_trim_r>
    5ca0:	003fc906 	br	5bc8 <_free_r+0x11c>
    5ca4:	28c9883a 	add	r4,r5,r3
    5ca8:	21000117 	ldw	r4,4(r4)
    5cac:	2100004c 	andi	r4,r4,1
    5cb0:	20000a1e 	bne	r4,zero,5cdc <_free_r+0x230>
    5cb4:	29000317 	ldw	r4,12(r5)
    5cb8:	29400217 	ldw	r5,8(r5)
    5cbc:	10c5883a 	add	r2,r2,r3
    5cc0:	10c00054 	ori	r3,r2,1
    5cc4:	29000315 	stw	r4,12(r5)
    5cc8:	21400215 	stw	r5,8(r4)
    5ccc:	30c00115 	stw	r3,4(r6)
    5cd0:	308d883a 	add	r6,r6,r2
    5cd4:	30800015 	stw	r2,0(r6)
    5cd8:	003fbb06 	br	5bc8 <_free_r+0x11c>
    5cdc:	10c00054 	ori	r3,r2,1
    5ce0:	30c00115 	stw	r3,4(r6)
    5ce4:	308d883a 	add	r6,r6,r2
    5ce8:	30800015 	stw	r2,0(r6)
    5cec:	003fb606 	br	5bc8 <_free_r+0x11c>
    5cf0:	01000504 	movi	r4,20
    5cf4:	20c01436 	bltu	r4,r3,5d48 <_free_r+0x29c>
    5cf8:	194016c4 	addi	r5,r3,91
    5cfc:	2947883a 	add	r3,r5,r5
    5d00:	003fbe06 	br	5bfc <_free_r+0x150>
    5d04:	280bd0ba 	srai	r5,r5,2
    5d08:	00800044 	movi	r2,1
    5d0c:	39000117 	ldw	r4,4(r7)
    5d10:	114a983a 	sll	r5,r2,r5
    5d14:	1805883a 	mov	r2,r3
    5d18:	2908b03a 	or	r4,r5,r4
    5d1c:	39000115 	stw	r4,4(r7)
    5d20:	003fc406 	br	5c34 <_free_r+0x188>
    5d24:	49800515 	stw	r6,20(r9)
    5d28:	49800415 	stw	r6,16(r9)
    5d2c:	10c00054 	ori	r3,r2,1
    5d30:	31000315 	stw	r4,12(r6)
    5d34:	31000215 	stw	r4,8(r6)
    5d38:	30c00115 	stw	r3,4(r6)
    5d3c:	308d883a 	add	r6,r6,r2
    5d40:	30800015 	stw	r2,0(r6)
    5d44:	003fa006 	br	5bc8 <_free_r+0x11c>
    5d48:	01001504 	movi	r4,84
    5d4c:	20c00436 	bltu	r4,r3,5d60 <_free_r+0x2b4>
    5d50:	1006d33a 	srli	r3,r2,12
    5d54:	19401b84 	addi	r5,r3,110
    5d58:	2947883a 	add	r3,r5,r5
    5d5c:	003fa706 	br	5bfc <_free_r+0x150>
    5d60:	01005504 	movi	r4,340
    5d64:	20c00436 	bltu	r4,r3,5d78 <_free_r+0x2cc>
    5d68:	1006d3fa 	srli	r3,r2,15
    5d6c:	19401dc4 	addi	r5,r3,119
    5d70:	2947883a 	add	r3,r5,r5
    5d74:	003fa106 	br	5bfc <_free_r+0x150>
    5d78:	01015504 	movi	r4,1364
    5d7c:	20c00436 	bltu	r4,r3,5d90 <_free_r+0x2e4>
    5d80:	1006d4ba 	srli	r3,r2,18
    5d84:	19401f04 	addi	r5,r3,124
    5d88:	2947883a 	add	r3,r5,r5
    5d8c:	003f9b06 	br	5bfc <_free_r+0x150>
    5d90:	00c03f04 	movi	r3,252
    5d94:	01401f84 	movi	r5,126
    5d98:	003f9806 	br	5bfc <_free_r+0x150>

00005d9c <__sfvwrite_r>:
    5d9c:	30800217 	ldw	r2,8(r6)
    5da0:	10006726 	beq	r2,zero,5f40 <__sfvwrite_r+0x1a4>
    5da4:	defff404 	addi	sp,sp,-48
    5da8:	dd000615 	stw	r20,24(sp)
    5dac:	2029883a 	mov	r20,r4
    5db0:	2900030b 	ldhu	r4,12(r5)
    5db4:	ddc00915 	stw	r23,36(sp)
    5db8:	dc000215 	stw	r16,8(sp)
    5dbc:	dfc00b15 	stw	ra,44(sp)
    5dc0:	df000a15 	stw	fp,40(sp)
    5dc4:	dd800815 	stw	r22,32(sp)
    5dc8:	dd400715 	stw	r21,28(sp)
    5dcc:	dcc00515 	stw	r19,20(sp)
    5dd0:	dc800415 	stw	r18,16(sp)
    5dd4:	dc400315 	stw	r17,12(sp)
    5dd8:	2080020c 	andi	r2,r4,8
    5ddc:	2821883a 	mov	r16,r5
    5de0:	302f883a 	mov	r23,r6
    5de4:	10002726 	beq	r2,zero,5e84 <__sfvwrite_r+0xe8>
    5de8:	28800417 	ldw	r2,16(r5)
    5dec:	10002526 	beq	r2,zero,5e84 <__sfvwrite_r+0xe8>
    5df0:	2080008c 	andi	r2,r4,2
    5df4:	bc400017 	ldw	r17,0(r23)
    5df8:	10002a26 	beq	r2,zero,5ea4 <__sfvwrite_r+0x108>
    5dfc:	05600034 	movhi	r21,32768
    5e00:	0027883a 	mov	r19,zero
    5e04:	0025883a 	mov	r18,zero
    5e08:	ad7f0004 	addi	r21,r21,-1024
    5e0c:	980d883a 	mov	r6,r19
    5e10:	a009883a 	mov	r4,r20
    5e14:	90004626 	beq	r18,zero,5f30 <__sfvwrite_r+0x194>
    5e18:	900f883a 	mov	r7,r18
    5e1c:	81400717 	ldw	r5,28(r16)
    5e20:	ac80022e 	bgeu	r21,r18,5e2c <__sfvwrite_r+0x90>
    5e24:	01e00034 	movhi	r7,32768
    5e28:	39ff0004 	addi	r7,r7,-1024
    5e2c:	80800917 	ldw	r2,36(r16)
    5e30:	103ee83a 	callr	r2
    5e34:	0080550e 	bge	zero,r2,5f8c <__sfvwrite_r+0x1f0>
    5e38:	b8c00217 	ldw	r3,8(r23)
    5e3c:	98a7883a 	add	r19,r19,r2
    5e40:	90a5c83a 	sub	r18,r18,r2
    5e44:	1885c83a 	sub	r2,r3,r2
    5e48:	b8800215 	stw	r2,8(r23)
    5e4c:	103fef1e 	bne	r2,zero,5e0c <__sfvwrite_r+0x70>
    5e50:	0005883a 	mov	r2,zero
    5e54:	dfc00b17 	ldw	ra,44(sp)
    5e58:	df000a17 	ldw	fp,40(sp)
    5e5c:	ddc00917 	ldw	r23,36(sp)
    5e60:	dd800817 	ldw	r22,32(sp)
    5e64:	dd400717 	ldw	r21,28(sp)
    5e68:	dd000617 	ldw	r20,24(sp)
    5e6c:	dcc00517 	ldw	r19,20(sp)
    5e70:	dc800417 	ldw	r18,16(sp)
    5e74:	dc400317 	ldw	r17,12(sp)
    5e78:	dc000217 	ldw	r16,8(sp)
    5e7c:	dec00c04 	addi	sp,sp,48
    5e80:	f800283a 	ret
    5e84:	a009883a 	mov	r4,r20
    5e88:	800b883a 	mov	r5,r16
    5e8c:	00038a00 	call	38a0 <__swsetup_r>
    5e90:	1000ef1e 	bne	r2,zero,6250 <__sfvwrite_r+0x4b4>
    5e94:	8100030b 	ldhu	r4,12(r16)
    5e98:	bc400017 	ldw	r17,0(r23)
    5e9c:	2080008c 	andi	r2,r4,2
    5ea0:	103fd61e 	bne	r2,zero,5dfc <__sfvwrite_r+0x60>
    5ea4:	2080004c 	andi	r2,r4,1
    5ea8:	10003d1e 	bne	r2,zero,5fa0 <__sfvwrite_r+0x204>
    5eac:	0039883a 	mov	fp,zero
    5eb0:	0025883a 	mov	r18,zero
    5eb4:	90001a26 	beq	r18,zero,5f20 <__sfvwrite_r+0x184>
    5eb8:	2080800c 	andi	r2,r4,512
    5ebc:	85800217 	ldw	r22,8(r16)
    5ec0:	10007926 	beq	r2,zero,60a8 <__sfvwrite_r+0x30c>
    5ec4:	b027883a 	mov	r19,r22
    5ec8:	95809736 	bltu	r18,r22,6128 <__sfvwrite_r+0x38c>
    5ecc:	2081200c 	andi	r2,r4,1152
    5ed0:	1000a21e 	bne	r2,zero,615c <__sfvwrite_r+0x3c0>
    5ed4:	81000017 	ldw	r4,0(r16)
    5ed8:	e00b883a 	mov	r5,fp
    5edc:	980d883a 	mov	r6,r19
    5ee0:	00070500 	call	7050 <memmove>
    5ee4:	81000217 	ldw	r4,8(r16)
    5ee8:	81400017 	ldw	r5,0(r16)
    5eec:	9005883a 	mov	r2,r18
    5ef0:	2587c83a 	sub	r3,r4,r22
    5ef4:	2ce7883a 	add	r19,r5,r19
    5ef8:	80c00215 	stw	r3,8(r16)
    5efc:	84c00015 	stw	r19,0(r16)
    5f00:	b8c00217 	ldw	r3,8(r23)
    5f04:	e0b9883a 	add	fp,fp,r2
    5f08:	90a5c83a 	sub	r18,r18,r2
    5f0c:	1885c83a 	sub	r2,r3,r2
    5f10:	b8800215 	stw	r2,8(r23)
    5f14:	103fce26 	beq	r2,zero,5e50 <__sfvwrite_r+0xb4>
    5f18:	8100030b 	ldhu	r4,12(r16)
    5f1c:	903fe61e 	bne	r18,zero,5eb8 <__sfvwrite_r+0x11c>
    5f20:	8f000017 	ldw	fp,0(r17)
    5f24:	8c800117 	ldw	r18,4(r17)
    5f28:	8c400204 	addi	r17,r17,8
    5f2c:	003fe106 	br	5eb4 <__sfvwrite_r+0x118>
    5f30:	8cc00017 	ldw	r19,0(r17)
    5f34:	8c800117 	ldw	r18,4(r17)
    5f38:	8c400204 	addi	r17,r17,8
    5f3c:	003fb306 	br	5e0c <__sfvwrite_r+0x70>
    5f40:	0005883a 	mov	r2,zero
    5f44:	f800283a 	ret
    5f48:	00a00034 	movhi	r2,32768
    5f4c:	10bfffc4 	addi	r2,r2,-1
    5f50:	9009883a 	mov	r4,r18
    5f54:	1480012e 	bgeu	r2,r18,5f5c <__sfvwrite_r+0x1c0>
    5f58:	1009883a 	mov	r4,r2
    5f5c:	980b883a 	mov	r5,r19
    5f60:	000b5f40 	call	b5f4 <__divsi3>
    5f64:	9809883a 	mov	r4,r19
    5f68:	100b883a 	mov	r5,r2
    5f6c:	0000eb00 	call	eb0 <__mulsi3>
    5f70:	81400717 	ldw	r5,28(r16)
    5f74:	80c00917 	ldw	r3,36(r16)
    5f78:	a009883a 	mov	r4,r20
    5f7c:	e00d883a 	mov	r6,fp
    5f80:	100f883a 	mov	r7,r2
    5f84:	183ee83a 	callr	r3
    5f88:	00bfdd16 	blt	zero,r2,5f00 <__sfvwrite_r+0x164>
    5f8c:	8080030b 	ldhu	r2,12(r16)
    5f90:	10801014 	ori	r2,r2,64
    5f94:	8080030d 	sth	r2,12(r16)
    5f98:	00bfffc4 	movi	r2,-1
    5f9c:	003fad06 	br	5e54 <__sfvwrite_r+0xb8>
    5fa0:	0027883a 	mov	r19,zero
    5fa4:	0011883a 	mov	r8,zero
    5fa8:	0039883a 	mov	fp,zero
    5fac:	0025883a 	mov	r18,zero
    5fb0:	90001f26 	beq	r18,zero,6030 <__sfvwrite_r+0x294>
    5fb4:	40006026 	beq	r8,zero,6138 <__sfvwrite_r+0x39c>
    5fb8:	982b883a 	mov	r21,r19
    5fbc:	94c0012e 	bgeu	r18,r19,5fc4 <__sfvwrite_r+0x228>
    5fc0:	902b883a 	mov	r21,r18
    5fc4:	81000017 	ldw	r4,0(r16)
    5fc8:	80800417 	ldw	r2,16(r16)
    5fcc:	a82d883a 	mov	r22,r21
    5fd0:	81800217 	ldw	r6,8(r16)
    5fd4:	81c00517 	ldw	r7,20(r16)
    5fd8:	1100022e 	bgeu	r2,r4,5fe4 <__sfvwrite_r+0x248>
    5fdc:	31c7883a 	add	r3,r6,r7
    5fe0:	1d401816 	blt	r3,r21,6044 <__sfvwrite_r+0x2a8>
    5fe4:	a9c04416 	blt	r21,r7,60f8 <__sfvwrite_r+0x35c>
    5fe8:	80800917 	ldw	r2,36(r16)
    5fec:	81400717 	ldw	r5,28(r16)
    5ff0:	a009883a 	mov	r4,r20
    5ff4:	da000115 	stw	r8,4(sp)
    5ff8:	e00d883a 	mov	r6,fp
    5ffc:	103ee83a 	callr	r2
    6000:	102d883a 	mov	r22,r2
    6004:	da000117 	ldw	r8,4(sp)
    6008:	00bfe00e 	bge	zero,r2,5f8c <__sfvwrite_r+0x1f0>
    600c:	9da7c83a 	sub	r19,r19,r22
    6010:	98001f26 	beq	r19,zero,6090 <__sfvwrite_r+0x2f4>
    6014:	b8800217 	ldw	r2,8(r23)
    6018:	e5b9883a 	add	fp,fp,r22
    601c:	95a5c83a 	sub	r18,r18,r22
    6020:	15adc83a 	sub	r22,r2,r22
    6024:	bd800215 	stw	r22,8(r23)
    6028:	b03f8926 	beq	r22,zero,5e50 <__sfvwrite_r+0xb4>
    602c:	903fe11e 	bne	r18,zero,5fb4 <__sfvwrite_r+0x218>
    6030:	8f000017 	ldw	fp,0(r17)
    6034:	8c800117 	ldw	r18,4(r17)
    6038:	0011883a 	mov	r8,zero
    603c:	8c400204 	addi	r17,r17,8
    6040:	003fdb06 	br	5fb0 <__sfvwrite_r+0x214>
    6044:	180d883a 	mov	r6,r3
    6048:	e00b883a 	mov	r5,fp
    604c:	da000115 	stw	r8,4(sp)
    6050:	d8c00015 	stw	r3,0(sp)
    6054:	00070500 	call	7050 <memmove>
    6058:	d8c00017 	ldw	r3,0(sp)
    605c:	80800017 	ldw	r2,0(r16)
    6060:	a009883a 	mov	r4,r20
    6064:	800b883a 	mov	r5,r16
    6068:	10c5883a 	add	r2,r2,r3
    606c:	80800015 	stw	r2,0(r16)
    6070:	d8c00015 	stw	r3,0(sp)
    6074:	000554c0 	call	554c <_fflush_r>
    6078:	d8c00017 	ldw	r3,0(sp)
    607c:	da000117 	ldw	r8,4(sp)
    6080:	103fc21e 	bne	r2,zero,5f8c <__sfvwrite_r+0x1f0>
    6084:	182d883a 	mov	r22,r3
    6088:	9da7c83a 	sub	r19,r19,r22
    608c:	983fe11e 	bne	r19,zero,6014 <__sfvwrite_r+0x278>
    6090:	a009883a 	mov	r4,r20
    6094:	800b883a 	mov	r5,r16
    6098:	000554c0 	call	554c <_fflush_r>
    609c:	103fbb1e 	bne	r2,zero,5f8c <__sfvwrite_r+0x1f0>
    60a0:	0011883a 	mov	r8,zero
    60a4:	003fdb06 	br	6014 <__sfvwrite_r+0x278>
    60a8:	81000017 	ldw	r4,0(r16)
    60ac:	80800417 	ldw	r2,16(r16)
    60b0:	11000236 	bltu	r2,r4,60bc <__sfvwrite_r+0x320>
    60b4:	84c00517 	ldw	r19,20(r16)
    60b8:	94ffa32e 	bgeu	r18,r19,5f48 <__sfvwrite_r+0x1ac>
    60bc:	9027883a 	mov	r19,r18
    60c0:	b480012e 	bgeu	r22,r18,60c8 <__sfvwrite_r+0x32c>
    60c4:	b027883a 	mov	r19,r22
    60c8:	e00b883a 	mov	r5,fp
    60cc:	980d883a 	mov	r6,r19
    60d0:	00070500 	call	7050 <memmove>
    60d4:	80800217 	ldw	r2,8(r16)
    60d8:	80c00017 	ldw	r3,0(r16)
    60dc:	14c5c83a 	sub	r2,r2,r19
    60e0:	1cc7883a 	add	r3,r3,r19
    60e4:	80800215 	stw	r2,8(r16)
    60e8:	80c00015 	stw	r3,0(r16)
    60ec:	10004326 	beq	r2,zero,61fc <__sfvwrite_r+0x460>
    60f0:	9805883a 	mov	r2,r19
    60f4:	003f8206 	br	5f00 <__sfvwrite_r+0x164>
    60f8:	a80d883a 	mov	r6,r21
    60fc:	e00b883a 	mov	r5,fp
    6100:	da000115 	stw	r8,4(sp)
    6104:	00070500 	call	7050 <memmove>
    6108:	80800217 	ldw	r2,8(r16)
    610c:	80c00017 	ldw	r3,0(r16)
    6110:	da000117 	ldw	r8,4(sp)
    6114:	1545c83a 	sub	r2,r2,r21
    6118:	1d6b883a 	add	r21,r3,r21
    611c:	80800215 	stw	r2,8(r16)
    6120:	85400015 	stw	r21,0(r16)
    6124:	003fb906 	br	600c <__sfvwrite_r+0x270>
    6128:	81000017 	ldw	r4,0(r16)
    612c:	902d883a 	mov	r22,r18
    6130:	9027883a 	mov	r19,r18
    6134:	003f6806 	br	5ed8 <__sfvwrite_r+0x13c>
    6138:	e009883a 	mov	r4,fp
    613c:	01400284 	movi	r5,10
    6140:	900d883a 	mov	r6,r18
    6144:	0006e300 	call	6e30 <memchr>
    6148:	10003e26 	beq	r2,zero,6244 <__sfvwrite_r+0x4a8>
    614c:	10800044 	addi	r2,r2,1
    6150:	1727c83a 	sub	r19,r2,fp
    6154:	02000044 	movi	r8,1
    6158:	003f9706 	br	5fb8 <__sfvwrite_r+0x21c>
    615c:	80800517 	ldw	r2,20(r16)
    6160:	81400417 	ldw	r5,16(r16)
    6164:	80c00017 	ldw	r3,0(r16)
    6168:	10a7883a 	add	r19,r2,r2
    616c:	9885883a 	add	r2,r19,r2
    6170:	1026d7fa 	srli	r19,r2,31
    6174:	196bc83a 	sub	r21,r3,r5
    6178:	a9800044 	addi	r6,r21,1
    617c:	9885883a 	add	r2,r19,r2
    6180:	1027d07a 	srai	r19,r2,1
    6184:	3485883a 	add	r2,r6,r18
    6188:	980d883a 	mov	r6,r19
    618c:	9880022e 	bgeu	r19,r2,6198 <__sfvwrite_r+0x3fc>
    6190:	1027883a 	mov	r19,r2
    6194:	100d883a 	mov	r6,r2
    6198:	2101000c 	andi	r4,r4,1024
    619c:	20001c26 	beq	r4,zero,6210 <__sfvwrite_r+0x474>
    61a0:	a009883a 	mov	r4,r20
    61a4:	300b883a 	mov	r5,r6
    61a8:	00066880 	call	6688 <_malloc_r>
    61ac:	102d883a 	mov	r22,r2
    61b0:	10002926 	beq	r2,zero,6258 <__sfvwrite_r+0x4bc>
    61b4:	81400417 	ldw	r5,16(r16)
    61b8:	1009883a 	mov	r4,r2
    61bc:	a80d883a 	mov	r6,r21
    61c0:	0006f180 	call	6f18 <memcpy>
    61c4:	8080030b 	ldhu	r2,12(r16)
    61c8:	00fedfc4 	movi	r3,-1153
    61cc:	10c4703a 	and	r2,r2,r3
    61d0:	10802014 	ori	r2,r2,128
    61d4:	8080030d 	sth	r2,12(r16)
    61d8:	b549883a 	add	r4,r22,r21
    61dc:	9d4bc83a 	sub	r5,r19,r21
    61e0:	85800415 	stw	r22,16(r16)
    61e4:	84c00515 	stw	r19,20(r16)
    61e8:	81000015 	stw	r4,0(r16)
    61ec:	902d883a 	mov	r22,r18
    61f0:	81400215 	stw	r5,8(r16)
    61f4:	9027883a 	mov	r19,r18
    61f8:	003f3706 	br	5ed8 <__sfvwrite_r+0x13c>
    61fc:	a009883a 	mov	r4,r20
    6200:	800b883a 	mov	r5,r16
    6204:	000554c0 	call	554c <_fflush_r>
    6208:	103fb926 	beq	r2,zero,60f0 <__sfvwrite_r+0x354>
    620c:	003f5f06 	br	5f8c <__sfvwrite_r+0x1f0>
    6210:	a009883a 	mov	r4,r20
    6214:	000832c0 	call	832c <_realloc_r>
    6218:	102d883a 	mov	r22,r2
    621c:	103fee1e 	bne	r2,zero,61d8 <__sfvwrite_r+0x43c>
    6220:	81400417 	ldw	r5,16(r16)
    6224:	a009883a 	mov	r4,r20
    6228:	0005aac0 	call	5aac <_free_r>
    622c:	8080030b 	ldhu	r2,12(r16)
    6230:	00ffdfc4 	movi	r3,-129
    6234:	1884703a 	and	r2,r3,r2
    6238:	00c00304 	movi	r3,12
    623c:	a0c00015 	stw	r3,0(r20)
    6240:	003f5306 	br	5f90 <__sfvwrite_r+0x1f4>
    6244:	94c00044 	addi	r19,r18,1
    6248:	02000044 	movi	r8,1
    624c:	003f5a06 	br	5fb8 <__sfvwrite_r+0x21c>
    6250:	00bfffc4 	movi	r2,-1
    6254:	003eff06 	br	5e54 <__sfvwrite_r+0xb8>
    6258:	00800304 	movi	r2,12
    625c:	a0800015 	stw	r2,0(r20)
    6260:	8080030b 	ldhu	r2,12(r16)
    6264:	003f4a06 	br	5f90 <__sfvwrite_r+0x1f4>

00006268 <_fwalk>:
    6268:	defff704 	addi	sp,sp,-36
    626c:	dd000415 	stw	r20,16(sp)
    6270:	dfc00815 	stw	ra,32(sp)
    6274:	ddc00715 	stw	r23,28(sp)
    6278:	dd800615 	stw	r22,24(sp)
    627c:	dd400515 	stw	r21,20(sp)
    6280:	dcc00315 	stw	r19,12(sp)
    6284:	dc800215 	stw	r18,8(sp)
    6288:	dc400115 	stw	r17,4(sp)
    628c:	dc000015 	stw	r16,0(sp)
    6290:	2500b804 	addi	r20,r4,736
    6294:	a0002326 	beq	r20,zero,6324 <_fwalk+0xbc>
    6298:	282b883a 	mov	r21,r5
    629c:	002f883a 	mov	r23,zero
    62a0:	05800044 	movi	r22,1
    62a4:	04ffffc4 	movi	r19,-1
    62a8:	a4400117 	ldw	r17,4(r20)
    62ac:	a4800217 	ldw	r18,8(r20)
    62b0:	8c7fffc4 	addi	r17,r17,-1
    62b4:	88000d16 	blt	r17,zero,62ec <_fwalk+0x84>
    62b8:	94000304 	addi	r16,r18,12
    62bc:	94800384 	addi	r18,r18,14
    62c0:	80c0000b 	ldhu	r3,0(r16)
    62c4:	8c7fffc4 	addi	r17,r17,-1
    62c8:	813ffd04 	addi	r4,r16,-12
    62cc:	b0c0042e 	bgeu	r22,r3,62e0 <_fwalk+0x78>
    62d0:	90c0000f 	ldh	r3,0(r18)
    62d4:	1cc00226 	beq	r3,r19,62e0 <_fwalk+0x78>
    62d8:	a83ee83a 	callr	r21
    62dc:	b8aeb03a 	or	r23,r23,r2
    62e0:	84001a04 	addi	r16,r16,104
    62e4:	94801a04 	addi	r18,r18,104
    62e8:	8cfff51e 	bne	r17,r19,62c0 <_fwalk+0x58>
    62ec:	a5000017 	ldw	r20,0(r20)
    62f0:	a03fed1e 	bne	r20,zero,62a8 <_fwalk+0x40>
    62f4:	b805883a 	mov	r2,r23
    62f8:	dfc00817 	ldw	ra,32(sp)
    62fc:	ddc00717 	ldw	r23,28(sp)
    6300:	dd800617 	ldw	r22,24(sp)
    6304:	dd400517 	ldw	r21,20(sp)
    6308:	dd000417 	ldw	r20,16(sp)
    630c:	dcc00317 	ldw	r19,12(sp)
    6310:	dc800217 	ldw	r18,8(sp)
    6314:	dc400117 	ldw	r17,4(sp)
    6318:	dc000017 	ldw	r16,0(sp)
    631c:	dec00904 	addi	sp,sp,36
    6320:	f800283a 	ret
    6324:	002f883a 	mov	r23,zero
    6328:	003ff206 	br	62f4 <_fwalk+0x8c>

0000632c <_fwalk_reent>:
    632c:	defff704 	addi	sp,sp,-36
    6330:	dd400515 	stw	r21,20(sp)
    6334:	dfc00815 	stw	ra,32(sp)
    6338:	ddc00715 	stw	r23,28(sp)
    633c:	dd800615 	stw	r22,24(sp)
    6340:	dd000415 	stw	r20,16(sp)
    6344:	dcc00315 	stw	r19,12(sp)
    6348:	dc800215 	stw	r18,8(sp)
    634c:	dc400115 	stw	r17,4(sp)
    6350:	dc000015 	stw	r16,0(sp)
    6354:	2540b804 	addi	r21,r4,736
    6358:	a8002326 	beq	r21,zero,63e8 <_fwalk_reent+0xbc>
    635c:	2829883a 	mov	r20,r5
    6360:	202d883a 	mov	r22,r4
    6364:	002f883a 	mov	r23,zero
    6368:	04c00044 	movi	r19,1
    636c:	04bfffc4 	movi	r18,-1
    6370:	ac400117 	ldw	r17,4(r21)
    6374:	ac000217 	ldw	r16,8(r21)
    6378:	8c7fffc4 	addi	r17,r17,-1
    637c:	88000c16 	blt	r17,zero,63b0 <_fwalk_reent+0x84>
    6380:	84000304 	addi	r16,r16,12
    6384:	80c0000b 	ldhu	r3,0(r16)
    6388:	8c7fffc4 	addi	r17,r17,-1
    638c:	817ffd04 	addi	r5,r16,-12
    6390:	98c0052e 	bgeu	r19,r3,63a8 <_fwalk_reent+0x7c>
    6394:	80c0008f 	ldh	r3,2(r16)
    6398:	b009883a 	mov	r4,r22
    639c:	1c800226 	beq	r3,r18,63a8 <_fwalk_reent+0x7c>
    63a0:	a03ee83a 	callr	r20
    63a4:	b8aeb03a 	or	r23,r23,r2
    63a8:	84001a04 	addi	r16,r16,104
    63ac:	8cbff51e 	bne	r17,r18,6384 <_fwalk_reent+0x58>
    63b0:	ad400017 	ldw	r21,0(r21)
    63b4:	a83fee1e 	bne	r21,zero,6370 <_fwalk_reent+0x44>
    63b8:	b805883a 	mov	r2,r23
    63bc:	dfc00817 	ldw	ra,32(sp)
    63c0:	ddc00717 	ldw	r23,28(sp)
    63c4:	dd800617 	ldw	r22,24(sp)
    63c8:	dd400517 	ldw	r21,20(sp)
    63cc:	dd000417 	ldw	r20,16(sp)
    63d0:	dcc00317 	ldw	r19,12(sp)
    63d4:	dc800217 	ldw	r18,8(sp)
    63d8:	dc400117 	ldw	r17,4(sp)
    63dc:	dc000017 	ldw	r16,0(sp)
    63e0:	dec00904 	addi	sp,sp,36
    63e4:	f800283a 	ret
    63e8:	002f883a 	mov	r23,zero
    63ec:	003ff206 	br	63b8 <_fwalk_reent+0x8c>

000063f0 <_setlocale_r>:
    63f0:	30001b26 	beq	r6,zero,6460 <_setlocale_r+0x70>
    63f4:	01400074 	movhi	r5,1
    63f8:	defffe04 	addi	sp,sp,-8
    63fc:	29492304 	addi	r5,r5,9356
    6400:	3009883a 	mov	r4,r6
    6404:	dc000015 	stw	r16,0(sp)
    6408:	dfc00115 	stw	ra,4(sp)
    640c:	3021883a 	mov	r16,r6
    6410:	0008a980 	call	8a98 <strcmp>
    6414:	1000061e 	bne	r2,zero,6430 <_setlocale_r+0x40>
    6418:	00800074 	movhi	r2,1
    641c:	10892204 	addi	r2,r2,9352
    6420:	dfc00117 	ldw	ra,4(sp)
    6424:	dc000017 	ldw	r16,0(sp)
    6428:	dec00204 	addi	sp,sp,8
    642c:	f800283a 	ret
    6430:	01400074 	movhi	r5,1
    6434:	29492204 	addi	r5,r5,9352
    6438:	8009883a 	mov	r4,r16
    643c:	0008a980 	call	8a98 <strcmp>
    6440:	103ff526 	beq	r2,zero,6418 <_setlocale_r+0x28>
    6444:	01400074 	movhi	r5,1
    6448:	29490d04 	addi	r5,r5,9268
    644c:	8009883a 	mov	r4,r16
    6450:	0008a980 	call	8a98 <strcmp>
    6454:	103ff026 	beq	r2,zero,6418 <_setlocale_r+0x28>
    6458:	0005883a 	mov	r2,zero
    645c:	003ff006 	br	6420 <_setlocale_r+0x30>
    6460:	00800074 	movhi	r2,1
    6464:	10892204 	addi	r2,r2,9352
    6468:	f800283a 	ret

0000646c <__locale_charset>:
    646c:	00800074 	movhi	r2,1
    6470:	108ab804 	addi	r2,r2,10976
    6474:	f800283a 	ret

00006478 <__locale_mb_cur_max>:
    6478:	00800074 	movhi	r2,1
    647c:	10917c04 	addi	r2,r2,17904
    6480:	10800017 	ldw	r2,0(r2)
    6484:	f800283a 	ret

00006488 <__locale_msgcharset>:
    6488:	00800074 	movhi	r2,1
    648c:	108ab004 	addi	r2,r2,10944
    6490:	f800283a 	ret

00006494 <__locale_cjk_lang>:
    6494:	0005883a 	mov	r2,zero
    6498:	f800283a 	ret

0000649c <_localeconv_r>:
    649c:	00800074 	movhi	r2,1
    64a0:	108ac004 	addi	r2,r2,11008
    64a4:	f800283a 	ret

000064a8 <setlocale>:
    64a8:	00c00074 	movhi	r3,1
    64ac:	18d17b04 	addi	r3,r3,17900
    64b0:	2005883a 	mov	r2,r4
    64b4:	19000017 	ldw	r4,0(r3)
    64b8:	280d883a 	mov	r6,r5
    64bc:	100b883a 	mov	r5,r2
    64c0:	00063f01 	jmpi	63f0 <_setlocale_r>

000064c4 <localeconv>:
    64c4:	00800074 	movhi	r2,1
    64c8:	108ac004 	addi	r2,r2,11008
    64cc:	f800283a 	ret

000064d0 <__smakebuf_r>:
    64d0:	2880030b 	ldhu	r2,12(r5)
    64d4:	10c0008c 	andi	r3,r2,2
    64d8:	1800401e 	bne	r3,zero,65dc <__smakebuf_r+0x10c>
    64dc:	deffec04 	addi	sp,sp,-80
    64e0:	dc000f15 	stw	r16,60(sp)
    64e4:	2821883a 	mov	r16,r5
    64e8:	2940038f 	ldh	r5,14(r5)
    64ec:	dc401015 	stw	r17,64(sp)
    64f0:	dfc01315 	stw	ra,76(sp)
    64f4:	dcc01215 	stw	r19,72(sp)
    64f8:	dc801115 	stw	r18,68(sp)
    64fc:	2023883a 	mov	r17,r4
    6500:	28001b16 	blt	r5,zero,6570 <__smakebuf_r+0xa0>
    6504:	d80d883a 	mov	r6,sp
    6508:	000a48c0 	call	a48c <_fstat_r>
    650c:	10001716 	blt	r2,zero,656c <__smakebuf_r+0x9c>
    6510:	d8800117 	ldw	r2,4(sp)
    6514:	00e00014 	movui	r3,32768
    6518:	10bc000c 	andi	r2,r2,61440
    651c:	10c03726 	beq	r2,r3,65fc <__smakebuf_r+0x12c>
    6520:	80c0030b 	ldhu	r3,12(r16)
    6524:	18c20014 	ori	r3,r3,2048
    6528:	80c0030d 	sth	r3,12(r16)
    652c:	00c80004 	movi	r3,8192
    6530:	10c03c1e 	bne	r2,r3,6624 <__smakebuf_r+0x154>
    6534:	8140038f 	ldh	r5,14(r16)
    6538:	8809883a 	mov	r4,r17
    653c:	000a4e40 	call	a4e4 <_isatty_r>
    6540:	10004e26 	beq	r2,zero,667c <__smakebuf_r+0x1ac>
    6544:	8080030b 	ldhu	r2,12(r16)
    6548:	04c00044 	movi	r19,1
    654c:	80c010c4 	addi	r3,r16,67
    6550:	14c4b03a 	or	r2,r2,r19
    6554:	8080030d 	sth	r2,12(r16)
    6558:	80c00015 	stw	r3,0(r16)
    655c:	80c00415 	stw	r3,16(r16)
    6560:	84c00515 	stw	r19,20(r16)
    6564:	04810004 	movi	r18,1024
    6568:	00000706 	br	6588 <__smakebuf_r+0xb8>
    656c:	8080030b 	ldhu	r2,12(r16)
    6570:	10c0200c 	andi	r3,r2,128
    6574:	18001f1e 	bne	r3,zero,65f4 <__smakebuf_r+0x124>
    6578:	04810004 	movi	r18,1024
    657c:	10820014 	ori	r2,r2,2048
    6580:	8080030d 	sth	r2,12(r16)
    6584:	0027883a 	mov	r19,zero
    6588:	8809883a 	mov	r4,r17
    658c:	900b883a 	mov	r5,r18
    6590:	00066880 	call	6688 <_malloc_r>
    6594:	10002e26 	beq	r2,zero,6650 <__smakebuf_r+0x180>
    6598:	80c0030b 	ldhu	r3,12(r16)
    659c:	01000034 	movhi	r4,0
    65a0:	21157a04 	addi	r4,r4,21992
    65a4:	89000f15 	stw	r4,60(r17)
    65a8:	18c02014 	ori	r3,r3,128
    65ac:	80c0030d 	sth	r3,12(r16)
    65b0:	80800015 	stw	r2,0(r16)
    65b4:	80800415 	stw	r2,16(r16)
    65b8:	84800515 	stw	r18,20(r16)
    65bc:	98001c1e 	bne	r19,zero,6630 <__smakebuf_r+0x160>
    65c0:	dfc01317 	ldw	ra,76(sp)
    65c4:	dcc01217 	ldw	r19,72(sp)
    65c8:	dc801117 	ldw	r18,68(sp)
    65cc:	dc401017 	ldw	r17,64(sp)
    65d0:	dc000f17 	ldw	r16,60(sp)
    65d4:	dec01404 	addi	sp,sp,80
    65d8:	f800283a 	ret
    65dc:	288010c4 	addi	r2,r5,67
    65e0:	28800015 	stw	r2,0(r5)
    65e4:	28800415 	stw	r2,16(r5)
    65e8:	00800044 	movi	r2,1
    65ec:	28800515 	stw	r2,20(r5)
    65f0:	f800283a 	ret
    65f4:	04801004 	movi	r18,64
    65f8:	003fe006 	br	657c <__smakebuf_r+0xac>
    65fc:	81000a17 	ldw	r4,40(r16)
    6600:	00c00074 	movhi	r3,1
    6604:	18e28d04 	addi	r3,r3,-30156
    6608:	20ffc51e 	bne	r4,r3,6520 <__smakebuf_r+0x50>
    660c:	80c0030b 	ldhu	r3,12(r16)
    6610:	01010004 	movi	r4,1024
    6614:	81001315 	stw	r4,76(r16)
    6618:	1906b03a 	or	r3,r3,r4
    661c:	80c0030d 	sth	r3,12(r16)
    6620:	003fc206 	br	652c <__smakebuf_r+0x5c>
    6624:	0027883a 	mov	r19,zero
    6628:	04810004 	movi	r18,1024
    662c:	003fd606 	br	6588 <__smakebuf_r+0xb8>
    6630:	8140038f 	ldh	r5,14(r16)
    6634:	8809883a 	mov	r4,r17
    6638:	000a4e40 	call	a4e4 <_isatty_r>
    663c:	103fe026 	beq	r2,zero,65c0 <__smakebuf_r+0xf0>
    6640:	8080030b 	ldhu	r2,12(r16)
    6644:	10800054 	ori	r2,r2,1
    6648:	8080030d 	sth	r2,12(r16)
    664c:	003fdc06 	br	65c0 <__smakebuf_r+0xf0>
    6650:	8080030b 	ldhu	r2,12(r16)
    6654:	10c0800c 	andi	r3,r2,512
    6658:	183fd91e 	bne	r3,zero,65c0 <__smakebuf_r+0xf0>
    665c:	10800094 	ori	r2,r2,2
    6660:	80c010c4 	addi	r3,r16,67
    6664:	8080030d 	sth	r2,12(r16)
    6668:	00800044 	movi	r2,1
    666c:	80c00015 	stw	r3,0(r16)
    6670:	80c00415 	stw	r3,16(r16)
    6674:	80800515 	stw	r2,20(r16)
    6678:	003fd106 	br	65c0 <__smakebuf_r+0xf0>
    667c:	04c00044 	movi	r19,1
    6680:	04810004 	movi	r18,1024
    6684:	003fc006 	br	6588 <__smakebuf_r+0xb8>

00006688 <_malloc_r>:
    6688:	defff504 	addi	sp,sp,-44
    668c:	dc800315 	stw	r18,12(sp)
    6690:	dfc00a15 	stw	ra,40(sp)
    6694:	df000915 	stw	fp,36(sp)
    6698:	ddc00815 	stw	r23,32(sp)
    669c:	dd800715 	stw	r22,28(sp)
    66a0:	dd400615 	stw	r21,24(sp)
    66a4:	dd000515 	stw	r20,20(sp)
    66a8:	dcc00415 	stw	r19,16(sp)
    66ac:	dc400215 	stw	r17,8(sp)
    66b0:	dc000115 	stw	r16,4(sp)
    66b4:	288002c4 	addi	r2,r5,11
    66b8:	00c00584 	movi	r3,22
    66bc:	2025883a 	mov	r18,r4
    66c0:	18802a2e 	bgeu	r3,r2,676c <_malloc_r+0xe4>
    66c4:	047ffe04 	movi	r17,-8
    66c8:	1462703a 	and	r17,r2,r17
    66cc:	88009e16 	blt	r17,zero,6948 <_malloc_r+0x2c0>
    66d0:	89409d36 	bltu	r17,r5,6948 <_malloc_r+0x2c0>
    66d4:	000e3480 	call	e348 <__malloc_lock>
    66d8:	00807dc4 	movi	r2,503
    66dc:	14402736 	bltu	r2,r17,677c <_malloc_r+0xf4>
    66e0:	8806d0fa 	srli	r3,r17,3
    66e4:	04c00074 	movhi	r19,1
    66e8:	9ccace04 	addi	r19,r19,11064
    66ec:	18c5883a 	add	r2,r3,r3
    66f0:	1085883a 	add	r2,r2,r2
    66f4:	1085883a 	add	r2,r2,r2
    66f8:	9885883a 	add	r2,r19,r2
    66fc:	14000317 	ldw	r16,12(r2)
    6700:	80814a26 	beq	r16,r2,6c2c <_malloc_r+0x5a4>
    6704:	80c00117 	ldw	r3,4(r16)
    6708:	81000317 	ldw	r4,12(r16)
    670c:	00bfff04 	movi	r2,-4
    6710:	1884703a 	and	r2,r3,r2
    6714:	81400217 	ldw	r5,8(r16)
    6718:	8085883a 	add	r2,r16,r2
    671c:	10c00117 	ldw	r3,4(r2)
    6720:	29000315 	stw	r4,12(r5)
    6724:	21400215 	stw	r5,8(r4)
    6728:	18c00054 	ori	r3,r3,1
    672c:	10c00115 	stw	r3,4(r2)
    6730:	9009883a 	mov	r4,r18
    6734:	000e3680 	call	e368 <__malloc_unlock>
    6738:	80800204 	addi	r2,r16,8
    673c:	dfc00a17 	ldw	ra,40(sp)
    6740:	df000917 	ldw	fp,36(sp)
    6744:	ddc00817 	ldw	r23,32(sp)
    6748:	dd800717 	ldw	r22,28(sp)
    674c:	dd400617 	ldw	r21,24(sp)
    6750:	dd000517 	ldw	r20,20(sp)
    6754:	dcc00417 	ldw	r19,16(sp)
    6758:	dc800317 	ldw	r18,12(sp)
    675c:	dc400217 	ldw	r17,8(sp)
    6760:	dc000117 	ldw	r16,4(sp)
    6764:	dec00b04 	addi	sp,sp,44
    6768:	f800283a 	ret
    676c:	04400404 	movi	r17,16
    6770:	89407536 	bltu	r17,r5,6948 <_malloc_r+0x2c0>
    6774:	000e3480 	call	e348 <__malloc_lock>
    6778:	003fd906 	br	66e0 <_malloc_r+0x58>
    677c:	8806d27a 	srli	r3,r17,9
    6780:	18007526 	beq	r3,zero,6958 <_malloc_r+0x2d0>
    6784:	00800104 	movi	r2,4
    6788:	10c0ef36 	bltu	r2,r3,6b48 <_malloc_r+0x4c0>
    678c:	8806d1ba 	srli	r3,r17,6
    6790:	19c00e04 	addi	r7,r3,56
    6794:	39cb883a 	add	r5,r7,r7
    6798:	04c00074 	movhi	r19,1
    679c:	294b883a 	add	r5,r5,r5
    67a0:	9ccace04 	addi	r19,r19,11064
    67a4:	294b883a 	add	r5,r5,r5
    67a8:	994b883a 	add	r5,r19,r5
    67ac:	2c000317 	ldw	r16,12(r5)
    67b0:	2c000e26 	beq	r5,r16,67ec <_malloc_r+0x164>
    67b4:	80800117 	ldw	r2,4(r16)
    67b8:	01bfff04 	movi	r6,-4
    67bc:	010003c4 	movi	r4,15
    67c0:	1184703a 	and	r2,r2,r6
    67c4:	1447c83a 	sub	r3,r2,r17
    67c8:	20c00716 	blt	r4,r3,67e8 <_malloc_r+0x160>
    67cc:	1800650e 	bge	r3,zero,6964 <_malloc_r+0x2dc>
    67d0:	84000317 	ldw	r16,12(r16)
    67d4:	2c000526 	beq	r5,r16,67ec <_malloc_r+0x164>
    67d8:	80800117 	ldw	r2,4(r16)
    67dc:	1184703a 	and	r2,r2,r6
    67e0:	1447c83a 	sub	r3,r2,r17
    67e4:	20fff90e 	bge	r4,r3,67cc <_malloc_r+0x144>
    67e8:	39ffffc4 	addi	r7,r7,-1
    67ec:	38c00044 	addi	r3,r7,1
    67f0:	01800074 	movhi	r6,1
    67f4:	9c000417 	ldw	r16,16(r19)
    67f8:	318ace04 	addi	r6,r6,11064
    67fc:	32400204 	addi	r9,r6,8
    6800:	82410326 	beq	r16,r9,6c10 <_malloc_r+0x588>
    6804:	81000117 	ldw	r4,4(r16)
    6808:	00bfff04 	movi	r2,-4
    680c:	208e703a 	and	r7,r4,r2
    6810:	3c45c83a 	sub	r2,r7,r17
    6814:	010003c4 	movi	r4,15
    6818:	2080ee16 	blt	r4,r2,6bd4 <_malloc_r+0x54c>
    681c:	32400515 	stw	r9,20(r6)
    6820:	32400415 	stw	r9,16(r6)
    6824:	1000510e 	bge	r2,zero,696c <_malloc_r+0x2e4>
    6828:	00807fc4 	movi	r2,511
    682c:	11c0ce36 	bltu	r2,r7,6b68 <_malloc_r+0x4e0>
    6830:	3808d0fa 	srli	r4,r7,3
    6834:	01c00044 	movi	r7,1
    6838:	30800117 	ldw	r2,4(r6)
    683c:	210b883a 	add	r5,r4,r4
    6840:	294b883a 	add	r5,r5,r5
    6844:	2009d0ba 	srai	r4,r4,2
    6848:	294b883a 	add	r5,r5,r5
    684c:	298b883a 	add	r5,r5,r6
    6850:	2a000217 	ldw	r8,8(r5)
    6854:	3908983a 	sll	r4,r7,r4
    6858:	81400315 	stw	r5,12(r16)
    685c:	82000215 	stw	r8,8(r16)
    6860:	2088b03a 	or	r4,r4,r2
    6864:	2c000215 	stw	r16,8(r5)
    6868:	31000115 	stw	r4,4(r6)
    686c:	44000315 	stw	r16,12(r8)
    6870:	1805d0ba 	srai	r2,r3,2
    6874:	01400044 	movi	r5,1
    6878:	288a983a 	sll	r5,r5,r2
    687c:	21404336 	bltu	r4,r5,698c <_malloc_r+0x304>
    6880:	2144703a 	and	r2,r4,r5
    6884:	10000a1e 	bne	r2,zero,68b0 <_malloc_r+0x228>
    6888:	00bfff04 	movi	r2,-4
    688c:	294b883a 	add	r5,r5,r5
    6890:	1886703a 	and	r3,r3,r2
    6894:	2144703a 	and	r2,r4,r5
    6898:	18c00104 	addi	r3,r3,4
    689c:	1000041e 	bne	r2,zero,68b0 <_malloc_r+0x228>
    68a0:	294b883a 	add	r5,r5,r5
    68a4:	2144703a 	and	r2,r4,r5
    68a8:	18c00104 	addi	r3,r3,4
    68ac:	103ffc26 	beq	r2,zero,68a0 <_malloc_r+0x218>
    68b0:	023fff04 	movi	r8,-4
    68b4:	01c003c4 	movi	r7,15
    68b8:	18c5883a 	add	r2,r3,r3
    68bc:	1085883a 	add	r2,r2,r2
    68c0:	1085883a 	add	r2,r2,r2
    68c4:	9895883a 	add	r10,r19,r2
    68c8:	52c00304 	addi	r11,r10,12
    68cc:	1819883a 	mov	r12,r3
    68d0:	5c000017 	ldw	r16,0(r11)
    68d4:	59bffd04 	addi	r6,r11,-12
    68d8:	8180041e 	bne	r16,r6,68ec <_malloc_r+0x264>
    68dc:	0000ce06 	br	6c18 <_malloc_r+0x590>
    68e0:	2000d70e 	bge	r4,zero,6c40 <_malloc_r+0x5b8>
    68e4:	84000317 	ldw	r16,12(r16)
    68e8:	8180cb26 	beq	r16,r6,6c18 <_malloc_r+0x590>
    68ec:	80800117 	ldw	r2,4(r16)
    68f0:	1204703a 	and	r2,r2,r8
    68f4:	1449c83a 	sub	r4,r2,r17
    68f8:	393ff90e 	bge	r7,r4,68e0 <_malloc_r+0x258>
    68fc:	80800317 	ldw	r2,12(r16)
    6900:	80c00217 	ldw	r3,8(r16)
    6904:	89400054 	ori	r5,r17,1
    6908:	81400115 	stw	r5,4(r16)
    690c:	18800315 	stw	r2,12(r3)
    6910:	10c00215 	stw	r3,8(r2)
    6914:	8463883a 	add	r17,r16,r17
    6918:	9c400515 	stw	r17,20(r19)
    691c:	9c400415 	stw	r17,16(r19)
    6920:	20800054 	ori	r2,r4,1
    6924:	88800115 	stw	r2,4(r17)
    6928:	8a400315 	stw	r9,12(r17)
    692c:	8a400215 	stw	r9,8(r17)
    6930:	8923883a 	add	r17,r17,r4
    6934:	89000015 	stw	r4,0(r17)
    6938:	9009883a 	mov	r4,r18
    693c:	000e3680 	call	e368 <__malloc_unlock>
    6940:	80800204 	addi	r2,r16,8
    6944:	003f7d06 	br	673c <_malloc_r+0xb4>
    6948:	00800304 	movi	r2,12
    694c:	90800015 	stw	r2,0(r18)
    6950:	0005883a 	mov	r2,zero
    6954:	003f7906 	br	673c <_malloc_r+0xb4>
    6958:	01401f84 	movi	r5,126
    695c:	01c00fc4 	movi	r7,63
    6960:	003f8d06 	br	6798 <_malloc_r+0x110>
    6964:	81000317 	ldw	r4,12(r16)
    6968:	003f6a06 	br	6714 <_malloc_r+0x8c>
    696c:	81c5883a 	add	r2,r16,r7
    6970:	10c00117 	ldw	r3,4(r2)
    6974:	9009883a 	mov	r4,r18
    6978:	18c00054 	ori	r3,r3,1
    697c:	10c00115 	stw	r3,4(r2)
    6980:	000e3680 	call	e368 <__malloc_unlock>
    6984:	80800204 	addi	r2,r16,8
    6988:	003f6c06 	br	673c <_malloc_r+0xb4>
    698c:	9c000217 	ldw	r16,8(r19)
    6990:	00bfff04 	movi	r2,-4
    6994:	85800117 	ldw	r22,4(r16)
    6998:	b0ac703a 	and	r22,r22,r2
    699c:	b4400336 	bltu	r22,r17,69ac <_malloc_r+0x324>
    69a0:	b445c83a 	sub	r2,r22,r17
    69a4:	00c003c4 	movi	r3,15
    69a8:	18805d16 	blt	r3,r2,6b20 <_malloc_r+0x498>
    69ac:	05c00074 	movhi	r23,1
    69b0:	00800074 	movhi	r2,1
    69b4:	bdd17d04 	addi	r23,r23,17908
    69b8:	10919104 	addi	r2,r2,17988
    69bc:	15400017 	ldw	r21,0(r2)
    69c0:	b9000017 	ldw	r4,0(r23)
    69c4:	00ffffc4 	movi	r3,-1
    69c8:	858d883a 	add	r6,r16,r22
    69cc:	8d6b883a 	add	r21,r17,r21
    69d0:	20c0e426 	beq	r4,r3,6d64 <_malloc_r+0x6dc>
    69d4:	ad4403c4 	addi	r21,r21,4111
    69d8:	00fc0004 	movi	r3,-4096
    69dc:	a8ea703a 	and	r21,r21,r3
    69e0:	9009883a 	mov	r4,r18
    69e4:	a80b883a 	mov	r5,r21
    69e8:	d9800015 	stw	r6,0(sp)
    69ec:	00089080 	call	8908 <_sbrk_r>
    69f0:	00ffffc4 	movi	r3,-1
    69f4:	1029883a 	mov	r20,r2
    69f8:	d9800017 	ldw	r6,0(sp)
    69fc:	10c0a426 	beq	r2,r3,6c90 <_malloc_r+0x608>
    6a00:	1180a236 	bltu	r2,r6,6c8c <_malloc_r+0x604>
    6a04:	07000074 	movhi	fp,1
    6a08:	e7119904 	addi	fp,fp,18020
    6a0c:	e0c00017 	ldw	r3,0(fp)
    6a10:	a8c7883a 	add	r3,r21,r3
    6a14:	e0c00015 	stw	r3,0(fp)
    6a18:	3500da26 	beq	r6,r20,6d84 <_malloc_r+0x6fc>
    6a1c:	b9000017 	ldw	r4,0(r23)
    6a20:	00bfffc4 	movi	r2,-1
    6a24:	2080e426 	beq	r4,r2,6db8 <_malloc_r+0x730>
    6a28:	a185c83a 	sub	r2,r20,r6
    6a2c:	1885883a 	add	r2,r3,r2
    6a30:	e0800015 	stw	r2,0(fp)
    6a34:	a0c001cc 	andi	r3,r20,7
    6a38:	1800b526 	beq	r3,zero,6d10 <_malloc_r+0x688>
    6a3c:	a0e9c83a 	sub	r20,r20,r3
    6a40:	00840204 	movi	r2,4104
    6a44:	a5000204 	addi	r20,r20,8
    6a48:	10c7c83a 	sub	r3,r2,r3
    6a4c:	a545883a 	add	r2,r20,r21
    6a50:	1083ffcc 	andi	r2,r2,4095
    6a54:	18abc83a 	sub	r21,r3,r2
    6a58:	9009883a 	mov	r4,r18
    6a5c:	a80b883a 	mov	r5,r21
    6a60:	00089080 	call	8908 <_sbrk_r>
    6a64:	00ffffc4 	movi	r3,-1
    6a68:	10c0d026 	beq	r2,r3,6dac <_malloc_r+0x724>
    6a6c:	1507c83a 	sub	r3,r2,r20
    6a70:	a8c7883a 	add	r3,r21,r3
    6a74:	18c00054 	ori	r3,r3,1
    6a78:	e0800017 	ldw	r2,0(fp)
    6a7c:	9d000215 	stw	r20,8(r19)
    6a80:	a0c00115 	stw	r3,4(r20)
    6a84:	a887883a 	add	r3,r21,r2
    6a88:	e0c00015 	stw	r3,0(fp)
    6a8c:	84c00e26 	beq	r16,r19,6ac8 <_malloc_r+0x440>
    6a90:	018003c4 	movi	r6,15
    6a94:	3580a02e 	bgeu	r6,r22,6d18 <_malloc_r+0x690>
    6a98:	81400117 	ldw	r5,4(r16)
    6a9c:	013ffe04 	movi	r4,-8
    6aa0:	b0bffd04 	addi	r2,r22,-12
    6aa4:	1104703a 	and	r2,r2,r4
    6aa8:	2900004c 	andi	r4,r5,1
    6aac:	1108b03a 	or	r4,r2,r4
    6ab0:	81000115 	stw	r4,4(r16)
    6ab4:	01400144 	movi	r5,5
    6ab8:	8089883a 	add	r4,r16,r2
    6abc:	21400115 	stw	r5,4(r4)
    6ac0:	21400215 	stw	r5,8(r4)
    6ac4:	3080c036 	bltu	r6,r2,6dc8 <_malloc_r+0x740>
    6ac8:	00800074 	movhi	r2,1
    6acc:	10919004 	addi	r2,r2,17984
    6ad0:	11000017 	ldw	r4,0(r2)
    6ad4:	20c0012e 	bgeu	r4,r3,6adc <_malloc_r+0x454>
    6ad8:	10c00015 	stw	r3,0(r2)
    6adc:	00800074 	movhi	r2,1
    6ae0:	10918f04 	addi	r2,r2,17980
    6ae4:	11000017 	ldw	r4,0(r2)
    6ae8:	9c000217 	ldw	r16,8(r19)
    6aec:	20c0012e 	bgeu	r4,r3,6af4 <_malloc_r+0x46c>
    6af0:	10c00015 	stw	r3,0(r2)
    6af4:	80c00117 	ldw	r3,4(r16)
    6af8:	00bfff04 	movi	r2,-4
    6afc:	1886703a 	and	r3,r3,r2
    6b00:	1c45c83a 	sub	r2,r3,r17
    6b04:	1c400236 	bltu	r3,r17,6b10 <_malloc_r+0x488>
    6b08:	00c003c4 	movi	r3,15
    6b0c:	18800416 	blt	r3,r2,6b20 <_malloc_r+0x498>
    6b10:	9009883a 	mov	r4,r18
    6b14:	000e3680 	call	e368 <__malloc_unlock>
    6b18:	0005883a 	mov	r2,zero
    6b1c:	003f0706 	br	673c <_malloc_r+0xb4>
    6b20:	88c00054 	ori	r3,r17,1
    6b24:	80c00115 	stw	r3,4(r16)
    6b28:	8463883a 	add	r17,r16,r17
    6b2c:	10800054 	ori	r2,r2,1
    6b30:	9c400215 	stw	r17,8(r19)
    6b34:	88800115 	stw	r2,4(r17)
    6b38:	9009883a 	mov	r4,r18
    6b3c:	000e3680 	call	e368 <__malloc_unlock>
    6b40:	80800204 	addi	r2,r16,8
    6b44:	003efd06 	br	673c <_malloc_r+0xb4>
    6b48:	00800504 	movi	r2,20
    6b4c:	10c0482e 	bgeu	r2,r3,6c70 <_malloc_r+0x5e8>
    6b50:	00801504 	movi	r2,84
    6b54:	10c06836 	bltu	r2,r3,6cf8 <_malloc_r+0x670>
    6b58:	8806d33a 	srli	r3,r17,12
    6b5c:	19c01b84 	addi	r7,r3,110
    6b60:	39cb883a 	add	r5,r7,r7
    6b64:	003f0c06 	br	6798 <_malloc_r+0x110>
    6b68:	3804d27a 	srli	r2,r7,9
    6b6c:	01000104 	movi	r4,4
    6b70:	2080422e 	bgeu	r4,r2,6c7c <_malloc_r+0x5f4>
    6b74:	01000504 	movi	r4,20
    6b78:	20807c36 	bltu	r4,r2,6d6c <_malloc_r+0x6e4>
    6b7c:	110016c4 	addi	r4,r2,91
    6b80:	210b883a 	add	r5,r4,r4
    6b84:	294b883a 	add	r5,r5,r5
    6b88:	294b883a 	add	r5,r5,r5
    6b8c:	994b883a 	add	r5,r19,r5
    6b90:	28800217 	ldw	r2,8(r5)
    6b94:	02000074 	movhi	r8,1
    6b98:	420ace04 	addi	r8,r8,11064
    6b9c:	11406326 	beq	r2,r5,6d2c <_malloc_r+0x6a4>
    6ba0:	01bfff04 	movi	r6,-4
    6ba4:	11000117 	ldw	r4,4(r2)
    6ba8:	2188703a 	and	r4,r4,r6
    6bac:	3900022e 	bgeu	r7,r4,6bb8 <_malloc_r+0x530>
    6bb0:	10800217 	ldw	r2,8(r2)
    6bb4:	28bffb1e 	bne	r5,r2,6ba4 <_malloc_r+0x51c>
    6bb8:	11800317 	ldw	r6,12(r2)
    6bbc:	99000117 	ldw	r4,4(r19)
    6bc0:	81800315 	stw	r6,12(r16)
    6bc4:	80800215 	stw	r2,8(r16)
    6bc8:	34000215 	stw	r16,8(r6)
    6bcc:	14000315 	stw	r16,12(r2)
    6bd0:	003f2706 	br	6870 <_malloc_r+0x1e8>
    6bd4:	88c00054 	ori	r3,r17,1
    6bd8:	80c00115 	stw	r3,4(r16)
    6bdc:	8463883a 	add	r17,r16,r17
    6be0:	34400515 	stw	r17,20(r6)
    6be4:	34400415 	stw	r17,16(r6)
    6be8:	10c00054 	ori	r3,r2,1
    6bec:	8a400315 	stw	r9,12(r17)
    6bf0:	8a400215 	stw	r9,8(r17)
    6bf4:	88c00115 	stw	r3,4(r17)
    6bf8:	88a3883a 	add	r17,r17,r2
    6bfc:	88800015 	stw	r2,0(r17)
    6c00:	9009883a 	mov	r4,r18
    6c04:	000e3680 	call	e368 <__malloc_unlock>
    6c08:	80800204 	addi	r2,r16,8
    6c0c:	003ecb06 	br	673c <_malloc_r+0xb4>
    6c10:	31000117 	ldw	r4,4(r6)
    6c14:	003f1606 	br	6870 <_malloc_r+0x1e8>
    6c18:	63000044 	addi	r12,r12,1
    6c1c:	608000cc 	andi	r2,r12,3
    6c20:	5ac00204 	addi	r11,r11,8
    6c24:	103f2a1e 	bne	r2,zero,68d0 <_malloc_r+0x248>
    6c28:	00002106 	br	6cb0 <_malloc_r+0x628>
    6c2c:	80800204 	addi	r2,r16,8
    6c30:	84000517 	ldw	r16,20(r16)
    6c34:	143eb31e 	bne	r2,r16,6704 <_malloc_r+0x7c>
    6c38:	18c00084 	addi	r3,r3,2
    6c3c:	003eec06 	br	67f0 <_malloc_r+0x168>
    6c40:	8085883a 	add	r2,r16,r2
    6c44:	10c00117 	ldw	r3,4(r2)
    6c48:	81000317 	ldw	r4,12(r16)
    6c4c:	81400217 	ldw	r5,8(r16)
    6c50:	18c00054 	ori	r3,r3,1
    6c54:	10c00115 	stw	r3,4(r2)
    6c58:	29000315 	stw	r4,12(r5)
    6c5c:	21400215 	stw	r5,8(r4)
    6c60:	9009883a 	mov	r4,r18
    6c64:	000e3680 	call	e368 <__malloc_unlock>
    6c68:	80800204 	addi	r2,r16,8
    6c6c:	003eb306 	br	673c <_malloc_r+0xb4>
    6c70:	19c016c4 	addi	r7,r3,91
    6c74:	39cb883a 	add	r5,r7,r7
    6c78:	003ec706 	br	6798 <_malloc_r+0x110>
    6c7c:	3804d1ba 	srli	r2,r7,6
    6c80:	11000e04 	addi	r4,r2,56
    6c84:	210b883a 	add	r5,r4,r4
    6c88:	003fbe06 	br	6b84 <_malloc_r+0x4fc>
    6c8c:	84ff5d26 	beq	r16,r19,6a04 <_malloc_r+0x37c>
    6c90:	9c000217 	ldw	r16,8(r19)
    6c94:	00bfff04 	movi	r2,-4
    6c98:	80c00117 	ldw	r3,4(r16)
    6c9c:	1886703a 	and	r3,r3,r2
    6ca0:	003f9706 	br	6b00 <_malloc_r+0x478>
    6ca4:	52800017 	ldw	r10,0(r10)
    6ca8:	18ffffc4 	addi	r3,r3,-1
    6cac:	50805c1e 	bne	r10,r2,6e20 <_malloc_r+0x798>
    6cb0:	190000cc 	andi	r4,r3,3
    6cb4:	50bffe04 	addi	r2,r10,-8
    6cb8:	203ffa1e 	bne	r4,zero,6ca4 <_malloc_r+0x61c>
    6cbc:	98800117 	ldw	r2,4(r19)
    6cc0:	0146303a 	nor	r3,zero,r5
    6cc4:	1884703a 	and	r2,r3,r2
    6cc8:	98800115 	stw	r2,4(r19)
    6ccc:	294b883a 	add	r5,r5,r5
    6cd0:	117f2e36 	bltu	r2,r5,698c <_malloc_r+0x304>
    6cd4:	283f2d26 	beq	r5,zero,698c <_malloc_r+0x304>
    6cd8:	1146703a 	and	r3,r2,r5
    6cdc:	1800521e 	bne	r3,zero,6e28 <_malloc_r+0x7a0>
    6ce0:	6007883a 	mov	r3,r12
    6ce4:	294b883a 	add	r5,r5,r5
    6ce8:	1148703a 	and	r4,r2,r5
    6cec:	18c00104 	addi	r3,r3,4
    6cf0:	203ffc26 	beq	r4,zero,6ce4 <_malloc_r+0x65c>
    6cf4:	003ef006 	br	68b8 <_malloc_r+0x230>
    6cf8:	00805504 	movi	r2,340
    6cfc:	10c01336 	bltu	r2,r3,6d4c <_malloc_r+0x6c4>
    6d00:	8806d3fa 	srli	r3,r17,15
    6d04:	19c01dc4 	addi	r7,r3,119
    6d08:	39cb883a 	add	r5,r7,r7
    6d0c:	003ea206 	br	6798 <_malloc_r+0x110>
    6d10:	00c40004 	movi	r3,4096
    6d14:	003f4d06 	br	6a4c <_malloc_r+0x3c4>
    6d18:	00800044 	movi	r2,1
    6d1c:	a0800115 	stw	r2,4(r20)
    6d20:	a021883a 	mov	r16,r20
    6d24:	0007883a 	mov	r3,zero
    6d28:	003f7506 	br	6b00 <_malloc_r+0x478>
    6d2c:	200bd0ba 	srai	r5,r4,2
    6d30:	01800044 	movi	r6,1
    6d34:	41000117 	ldw	r4,4(r8)
    6d38:	314a983a 	sll	r5,r6,r5
    6d3c:	100d883a 	mov	r6,r2
    6d40:	2908b03a 	or	r4,r5,r4
    6d44:	41000115 	stw	r4,4(r8)
    6d48:	003f9d06 	br	6bc0 <_malloc_r+0x538>
    6d4c:	00815504 	movi	r2,1364
    6d50:	10c01336 	bltu	r2,r3,6da0 <_malloc_r+0x718>
    6d54:	8806d4ba 	srli	r3,r17,18
    6d58:	19c01f04 	addi	r7,r3,124
    6d5c:	39cb883a 	add	r5,r7,r7
    6d60:	003e8d06 	br	6798 <_malloc_r+0x110>
    6d64:	ad400404 	addi	r21,r21,16
    6d68:	003f1d06 	br	69e0 <_malloc_r+0x358>
    6d6c:	01001504 	movi	r4,84
    6d70:	20801c36 	bltu	r4,r2,6de4 <_malloc_r+0x75c>
    6d74:	3804d33a 	srli	r2,r7,12
    6d78:	11001b84 	addi	r4,r2,110
    6d7c:	210b883a 	add	r5,r4,r4
    6d80:	003f8006 	br	6b84 <_malloc_r+0x4fc>
    6d84:	3083ffcc 	andi	r2,r6,4095
    6d88:	103f241e 	bne	r2,zero,6a1c <_malloc_r+0x394>
    6d8c:	99000217 	ldw	r4,8(r19)
    6d90:	ad85883a 	add	r2,r21,r22
    6d94:	10800054 	ori	r2,r2,1
    6d98:	20800115 	stw	r2,4(r4)
    6d9c:	003f4a06 	br	6ac8 <_malloc_r+0x440>
    6da0:	01403f04 	movi	r5,252
    6da4:	01c01f84 	movi	r7,126
    6da8:	003e7b06 	br	6798 <_malloc_r+0x110>
    6dac:	00c00044 	movi	r3,1
    6db0:	002b883a 	mov	r21,zero
    6db4:	003f3006 	br	6a78 <_malloc_r+0x3f0>
    6db8:	00800074 	movhi	r2,1
    6dbc:	10917d04 	addi	r2,r2,17908
    6dc0:	15000015 	stw	r20,0(r2)
    6dc4:	003f1b06 	br	6a34 <_malloc_r+0x3ac>
    6dc8:	9009883a 	mov	r4,r18
    6dcc:	81400204 	addi	r5,r16,8
    6dd0:	0005aac0 	call	5aac <_free_r>
    6dd4:	00800074 	movhi	r2,1
    6dd8:	10919904 	addi	r2,r2,18020
    6ddc:	10c00017 	ldw	r3,0(r2)
    6de0:	003f3906 	br	6ac8 <_malloc_r+0x440>
    6de4:	01005504 	movi	r4,340
    6de8:	20800436 	bltu	r4,r2,6dfc <_malloc_r+0x774>
    6dec:	3804d3fa 	srli	r2,r7,15
    6df0:	11001dc4 	addi	r4,r2,119
    6df4:	210b883a 	add	r5,r4,r4
    6df8:	003f6206 	br	6b84 <_malloc_r+0x4fc>
    6dfc:	01015504 	movi	r4,1364
    6e00:	20800436 	bltu	r4,r2,6e14 <_malloc_r+0x78c>
    6e04:	3804d4ba 	srli	r2,r7,18
    6e08:	11001f04 	addi	r4,r2,124
    6e0c:	210b883a 	add	r5,r4,r4
    6e10:	003f5c06 	br	6b84 <_malloc_r+0x4fc>
    6e14:	01403f04 	movi	r5,252
    6e18:	01001f84 	movi	r4,126
    6e1c:	003f5906 	br	6b84 <_malloc_r+0x4fc>
    6e20:	98800117 	ldw	r2,4(r19)
    6e24:	003fa906 	br	6ccc <_malloc_r+0x644>
    6e28:	6007883a 	mov	r3,r12
    6e2c:	003ea206 	br	68b8 <_malloc_r+0x230>

00006e30 <memchr>:
    6e30:	208000cc 	andi	r2,r4,3
    6e34:	280f883a 	mov	r7,r5
    6e38:	10003526 	beq	r2,zero,6f10 <memchr+0xe0>
    6e3c:	30bfffc4 	addi	r2,r6,-1
    6e40:	30001b26 	beq	r6,zero,6eb0 <memchr+0x80>
    6e44:	21800003 	ldbu	r6,0(r4)
    6e48:	28c03fcc 	andi	r3,r5,255
    6e4c:	30c01a26 	beq	r6,r3,6eb8 <memchr+0x88>
    6e50:	180d883a 	mov	r6,r3
    6e54:	00000406 	br	6e68 <memchr+0x38>
    6e58:	10001526 	beq	r2,zero,6eb0 <memchr+0x80>
    6e5c:	20c00003 	ldbu	r3,0(r4)
    6e60:	10bfffc4 	addi	r2,r2,-1
    6e64:	19801426 	beq	r3,r6,6eb8 <memchr+0x88>
    6e68:	21000044 	addi	r4,r4,1
    6e6c:	20c000cc 	andi	r3,r4,3
    6e70:	183ff91e 	bne	r3,zero,6e58 <memchr+0x28>
    6e74:	024000c4 	movi	r9,3
    6e78:	48801136 	bltu	r9,r2,6ec0 <memchr+0x90>
    6e7c:	10000c26 	beq	r2,zero,6eb0 <memchr+0x80>
    6e80:	20c00003 	ldbu	r3,0(r4)
    6e84:	29403fcc 	andi	r5,r5,255
    6e88:	19400b26 	beq	r3,r5,6eb8 <memchr+0x88>
    6e8c:	20c00044 	addi	r3,r4,1
    6e90:	2085883a 	add	r2,r4,r2
    6e94:	39803fcc 	andi	r6,r7,255
    6e98:	00000306 	br	6ea8 <memchr+0x78>
    6e9c:	18c00044 	addi	r3,r3,1
    6ea0:	197fffc3 	ldbu	r5,-1(r3)
    6ea4:	29800426 	beq	r5,r6,6eb8 <memchr+0x88>
    6ea8:	1809883a 	mov	r4,r3
    6eac:	18bffb1e 	bne	r3,r2,6e9c <memchr+0x6c>
    6eb0:	0005883a 	mov	r2,zero
    6eb4:	f800283a 	ret
    6eb8:	2005883a 	mov	r2,r4
    6ebc:	f800283a 	ret
    6ec0:	28c03fcc 	andi	r3,r5,255
    6ec4:	1810923a 	slli	r8,r3,8
    6ec8:	02ffbff4 	movhi	r11,65279
    6ecc:	02a02074 	movhi	r10,32897
    6ed0:	40c6b03a 	or	r3,r8,r3
    6ed4:	1810943a 	slli	r8,r3,16
    6ed8:	5affbfc4 	addi	r11,r11,-257
    6edc:	52a02004 	addi	r10,r10,-32640
    6ee0:	40d0b03a 	or	r8,r8,r3
    6ee4:	20c00017 	ldw	r3,0(r4)
    6ee8:	40c6f03a 	xor	r3,r8,r3
    6eec:	1acd883a 	add	r6,r3,r11
    6ef0:	00c6303a 	nor	r3,zero,r3
    6ef4:	30c6703a 	and	r3,r6,r3
    6ef8:	1a86703a 	and	r3,r3,r10
    6efc:	183fdf1e 	bne	r3,zero,6e7c <memchr+0x4c>
    6f00:	10bfff04 	addi	r2,r2,-4
    6f04:	21000104 	addi	r4,r4,4
    6f08:	48bff636 	bltu	r9,r2,6ee4 <memchr+0xb4>
    6f0c:	003fdb06 	br	6e7c <memchr+0x4c>
    6f10:	3005883a 	mov	r2,r6
    6f14:	003fd706 	br	6e74 <memchr+0x44>

00006f18 <memcpy>:
    6f18:	deffff04 	addi	sp,sp,-4
    6f1c:	dc000015 	stw	r16,0(sp)
    6f20:	00c003c4 	movi	r3,15
    6f24:	2005883a 	mov	r2,r4
    6f28:	1980432e 	bgeu	r3,r6,7038 <memcpy+0x120>
    6f2c:	2146b03a 	or	r3,r4,r5
    6f30:	18c000cc 	andi	r3,r3,3
    6f34:	1800421e 	bne	r3,zero,7040 <memcpy+0x128>
    6f38:	343ffc04 	addi	r16,r6,-16
    6f3c:	8020d13a 	srli	r16,r16,4
    6f40:	28c00104 	addi	r3,r5,4
    6f44:	23400104 	addi	r13,r4,4
    6f48:	801e913a 	slli	r15,r16,4
    6f4c:	2b000204 	addi	r12,r5,8
    6f50:	22c00204 	addi	r11,r4,8
    6f54:	7bc00504 	addi	r15,r15,20
    6f58:	2a800304 	addi	r10,r5,12
    6f5c:	22400304 	addi	r9,r4,12
    6f60:	2bdf883a 	add	r15,r5,r15
    6f64:	2811883a 	mov	r8,r5
    6f68:	200f883a 	mov	r7,r4
    6f6c:	41000017 	ldw	r4,0(r8)
    6f70:	39c00404 	addi	r7,r7,16
    6f74:	18c00404 	addi	r3,r3,16
    6f78:	393ffc15 	stw	r4,-16(r7)
    6f7c:	1bbffc17 	ldw	r14,-16(r3)
    6f80:	6b400404 	addi	r13,r13,16
    6f84:	5ac00404 	addi	r11,r11,16
    6f88:	6bbffc15 	stw	r14,-16(r13)
    6f8c:	63800017 	ldw	r14,0(r12)
    6f90:	4a400404 	addi	r9,r9,16
    6f94:	42000404 	addi	r8,r8,16
    6f98:	5bbffc15 	stw	r14,-16(r11)
    6f9c:	53800017 	ldw	r14,0(r10)
    6fa0:	63000404 	addi	r12,r12,16
    6fa4:	52800404 	addi	r10,r10,16
    6fa8:	4bbffc15 	stw	r14,-16(r9)
    6fac:	1bffef1e 	bne	r3,r15,6f6c <memcpy+0x54>
    6fb0:	81c00044 	addi	r7,r16,1
    6fb4:	380e913a 	slli	r7,r7,4
    6fb8:	310003cc 	andi	r4,r6,15
    6fbc:	02c000c4 	movi	r11,3
    6fc0:	11c7883a 	add	r3,r2,r7
    6fc4:	29cb883a 	add	r5,r5,r7
    6fc8:	59001f2e 	bgeu	r11,r4,7048 <memcpy+0x130>
    6fcc:	1813883a 	mov	r9,r3
    6fd0:	2811883a 	mov	r8,r5
    6fd4:	200f883a 	mov	r7,r4
    6fd8:	42800017 	ldw	r10,0(r8)
    6fdc:	4a400104 	addi	r9,r9,4
    6fe0:	39ffff04 	addi	r7,r7,-4
    6fe4:	4abfff15 	stw	r10,-4(r9)
    6fe8:	42000104 	addi	r8,r8,4
    6fec:	59fffa36 	bltu	r11,r7,6fd8 <memcpy+0xc0>
    6ff0:	213fff04 	addi	r4,r4,-4
    6ff4:	2008d0ba 	srli	r4,r4,2
    6ff8:	318000cc 	andi	r6,r6,3
    6ffc:	21000044 	addi	r4,r4,1
    7000:	2109883a 	add	r4,r4,r4
    7004:	2109883a 	add	r4,r4,r4
    7008:	1907883a 	add	r3,r3,r4
    700c:	290b883a 	add	r5,r5,r4
    7010:	30000626 	beq	r6,zero,702c <memcpy+0x114>
    7014:	198d883a 	add	r6,r3,r6
    7018:	29c00003 	ldbu	r7,0(r5)
    701c:	18c00044 	addi	r3,r3,1
    7020:	29400044 	addi	r5,r5,1
    7024:	19ffffc5 	stb	r7,-1(r3)
    7028:	19bffb1e 	bne	r3,r6,7018 <memcpy+0x100>
    702c:	dc000017 	ldw	r16,0(sp)
    7030:	dec00104 	addi	sp,sp,4
    7034:	f800283a 	ret
    7038:	2007883a 	mov	r3,r4
    703c:	003ff406 	br	7010 <memcpy+0xf8>
    7040:	2007883a 	mov	r3,r4
    7044:	003ff306 	br	7014 <memcpy+0xfc>
    7048:	200d883a 	mov	r6,r4
    704c:	003ff006 	br	7010 <memcpy+0xf8>

00007050 <memmove>:
    7050:	2005883a 	mov	r2,r4
    7054:	29000b2e 	bgeu	r5,r4,7084 <memmove+0x34>
    7058:	298f883a 	add	r7,r5,r6
    705c:	21c0092e 	bgeu	r4,r7,7084 <memmove+0x34>
    7060:	2187883a 	add	r3,r4,r6
    7064:	198bc83a 	sub	r5,r3,r6
    7068:	30004b26 	beq	r6,zero,7198 <memmove+0x148>
    706c:	39ffffc4 	addi	r7,r7,-1
    7070:	39000003 	ldbu	r4,0(r7)
    7074:	18ffffc4 	addi	r3,r3,-1
    7078:	19000005 	stb	r4,0(r3)
    707c:	197ffb1e 	bne	r3,r5,706c <memmove+0x1c>
    7080:	f800283a 	ret
    7084:	00c003c4 	movi	r3,15
    7088:	1980412e 	bgeu	r3,r6,7190 <memmove+0x140>
    708c:	1146b03a 	or	r3,r2,r5
    7090:	18c000cc 	andi	r3,r3,3
    7094:	1800411e 	bne	r3,zero,719c <memmove+0x14c>
    7098:	33fffc04 	addi	r15,r6,-16
    709c:	781ed13a 	srli	r15,r15,4
    70a0:	28c00104 	addi	r3,r5,4
    70a4:	13400104 	addi	r13,r2,4
    70a8:	781c913a 	slli	r14,r15,4
    70ac:	2b000204 	addi	r12,r5,8
    70b0:	12c00204 	addi	r11,r2,8
    70b4:	73800504 	addi	r14,r14,20
    70b8:	2a800304 	addi	r10,r5,12
    70bc:	12400304 	addi	r9,r2,12
    70c0:	2b9d883a 	add	r14,r5,r14
    70c4:	2811883a 	mov	r8,r5
    70c8:	100f883a 	mov	r7,r2
    70cc:	41000017 	ldw	r4,0(r8)
    70d0:	39c00404 	addi	r7,r7,16
    70d4:	18c00404 	addi	r3,r3,16
    70d8:	393ffc15 	stw	r4,-16(r7)
    70dc:	193ffc17 	ldw	r4,-16(r3)
    70e0:	6b400404 	addi	r13,r13,16
    70e4:	5ac00404 	addi	r11,r11,16
    70e8:	693ffc15 	stw	r4,-16(r13)
    70ec:	61000017 	ldw	r4,0(r12)
    70f0:	4a400404 	addi	r9,r9,16
    70f4:	42000404 	addi	r8,r8,16
    70f8:	593ffc15 	stw	r4,-16(r11)
    70fc:	51000017 	ldw	r4,0(r10)
    7100:	63000404 	addi	r12,r12,16
    7104:	52800404 	addi	r10,r10,16
    7108:	493ffc15 	stw	r4,-16(r9)
    710c:	1bbfef1e 	bne	r3,r14,70cc <memmove+0x7c>
    7110:	79000044 	addi	r4,r15,1
    7114:	2008913a 	slli	r4,r4,4
    7118:	328003cc 	andi	r10,r6,15
    711c:	02c000c4 	movi	r11,3
    7120:	1107883a 	add	r3,r2,r4
    7124:	290b883a 	add	r5,r5,r4
    7128:	5a801e2e 	bgeu	r11,r10,71a4 <memmove+0x154>
    712c:	1813883a 	mov	r9,r3
    7130:	2811883a 	mov	r8,r5
    7134:	500f883a 	mov	r7,r10
    7138:	41000017 	ldw	r4,0(r8)
    713c:	4a400104 	addi	r9,r9,4
    7140:	39ffff04 	addi	r7,r7,-4
    7144:	493fff15 	stw	r4,-4(r9)
    7148:	42000104 	addi	r8,r8,4
    714c:	59fffa36 	bltu	r11,r7,7138 <memmove+0xe8>
    7150:	513fff04 	addi	r4,r10,-4
    7154:	2008d0ba 	srli	r4,r4,2
    7158:	318000cc 	andi	r6,r6,3
    715c:	21000044 	addi	r4,r4,1
    7160:	2109883a 	add	r4,r4,r4
    7164:	2109883a 	add	r4,r4,r4
    7168:	1907883a 	add	r3,r3,r4
    716c:	290b883a 	add	r5,r5,r4
    7170:	30000926 	beq	r6,zero,7198 <memmove+0x148>
    7174:	198d883a 	add	r6,r3,r6
    7178:	29c00003 	ldbu	r7,0(r5)
    717c:	18c00044 	addi	r3,r3,1
    7180:	29400044 	addi	r5,r5,1
    7184:	19ffffc5 	stb	r7,-1(r3)
    7188:	19bffb1e 	bne	r3,r6,7178 <memmove+0x128>
    718c:	f800283a 	ret
    7190:	1007883a 	mov	r3,r2
    7194:	003ff606 	br	7170 <memmove+0x120>
    7198:	f800283a 	ret
    719c:	1007883a 	mov	r3,r2
    71a0:	003ff406 	br	7174 <memmove+0x124>
    71a4:	500d883a 	mov	r6,r10
    71a8:	003ff106 	br	7170 <memmove+0x120>

000071ac <memset>:
    71ac:	20c000cc 	andi	r3,r4,3
    71b0:	2005883a 	mov	r2,r4
    71b4:	18004326 	beq	r3,zero,72c4 <memset+0x118>
    71b8:	31ffffc4 	addi	r7,r6,-1
    71bc:	30004026 	beq	r6,zero,72c0 <memset+0x114>
    71c0:	2813883a 	mov	r9,r5
    71c4:	200d883a 	mov	r6,r4
    71c8:	2007883a 	mov	r3,r4
    71cc:	00000406 	br	71e0 <memset+0x34>
    71d0:	3a3fffc4 	addi	r8,r7,-1
    71d4:	31800044 	addi	r6,r6,1
    71d8:	38003926 	beq	r7,zero,72c0 <memset+0x114>
    71dc:	400f883a 	mov	r7,r8
    71e0:	18c00044 	addi	r3,r3,1
    71e4:	32400005 	stb	r9,0(r6)
    71e8:	1a0000cc 	andi	r8,r3,3
    71ec:	403ff81e 	bne	r8,zero,71d0 <memset+0x24>
    71f0:	010000c4 	movi	r4,3
    71f4:	21c02d2e 	bgeu	r4,r7,72ac <memset+0x100>
    71f8:	29803fcc 	andi	r6,r5,255
    71fc:	3008923a 	slli	r4,r6,8
    7200:	218cb03a 	or	r6,r4,r6
    7204:	3008943a 	slli	r4,r6,16
    7208:	218cb03a 	or	r6,r4,r6
    720c:	010003c4 	movi	r4,15
    7210:	21c0182e 	bgeu	r4,r7,7274 <memset+0xc8>
    7214:	3b3ffc04 	addi	r12,r7,-16
    7218:	6018d13a 	srli	r12,r12,4
    721c:	1a000104 	addi	r8,r3,4
    7220:	1ac00204 	addi	r11,r3,8
    7224:	6008913a 	slli	r4,r12,4
    7228:	1a800304 	addi	r10,r3,12
    722c:	1813883a 	mov	r9,r3
    7230:	21000504 	addi	r4,r4,20
    7234:	1909883a 	add	r4,r3,r4
    7238:	49800015 	stw	r6,0(r9)
    723c:	41800015 	stw	r6,0(r8)
    7240:	59800015 	stw	r6,0(r11)
    7244:	51800015 	stw	r6,0(r10)
    7248:	42000404 	addi	r8,r8,16
    724c:	4a400404 	addi	r9,r9,16
    7250:	5ac00404 	addi	r11,r11,16
    7254:	52800404 	addi	r10,r10,16
    7258:	413ff71e 	bne	r8,r4,7238 <memset+0x8c>
    725c:	63000044 	addi	r12,r12,1
    7260:	6018913a 	slli	r12,r12,4
    7264:	39c003cc 	andi	r7,r7,15
    7268:	010000c4 	movi	r4,3
    726c:	1b07883a 	add	r3,r3,r12
    7270:	21c00e2e 	bgeu	r4,r7,72ac <memset+0x100>
    7274:	1813883a 	mov	r9,r3
    7278:	3811883a 	mov	r8,r7
    727c:	010000c4 	movi	r4,3
    7280:	49800015 	stw	r6,0(r9)
    7284:	423fff04 	addi	r8,r8,-4
    7288:	4a400104 	addi	r9,r9,4
    728c:	223ffc36 	bltu	r4,r8,7280 <memset+0xd4>
    7290:	393fff04 	addi	r4,r7,-4
    7294:	2008d0ba 	srli	r4,r4,2
    7298:	39c000cc 	andi	r7,r7,3
    729c:	21000044 	addi	r4,r4,1
    72a0:	2109883a 	add	r4,r4,r4
    72a4:	2109883a 	add	r4,r4,r4
    72a8:	1907883a 	add	r3,r3,r4
    72ac:	38000426 	beq	r7,zero,72c0 <memset+0x114>
    72b0:	19cf883a 	add	r7,r3,r7
    72b4:	19400005 	stb	r5,0(r3)
    72b8:	18c00044 	addi	r3,r3,1
    72bc:	19fffd1e 	bne	r3,r7,72b4 <memset+0x108>
    72c0:	f800283a 	ret
    72c4:	2007883a 	mov	r3,r4
    72c8:	300f883a 	mov	r7,r6
    72cc:	003fc806 	br	71f0 <memset+0x44>

000072d0 <_Balloc>:
    72d0:	20801317 	ldw	r2,76(r4)
    72d4:	defffc04 	addi	sp,sp,-16
    72d8:	dc400115 	stw	r17,4(sp)
    72dc:	dc000015 	stw	r16,0(sp)
    72e0:	dfc00315 	stw	ra,12(sp)
    72e4:	dc800215 	stw	r18,8(sp)
    72e8:	2023883a 	mov	r17,r4
    72ec:	2821883a 	mov	r16,r5
    72f0:	10000f26 	beq	r2,zero,7330 <_Balloc+0x60>
    72f4:	8407883a 	add	r3,r16,r16
    72f8:	18c7883a 	add	r3,r3,r3
    72fc:	10c7883a 	add	r3,r2,r3
    7300:	18800017 	ldw	r2,0(r3)
    7304:	10001126 	beq	r2,zero,734c <_Balloc+0x7c>
    7308:	11000017 	ldw	r4,0(r2)
    730c:	19000015 	stw	r4,0(r3)
    7310:	10000415 	stw	zero,16(r2)
    7314:	10000315 	stw	zero,12(r2)
    7318:	dfc00317 	ldw	ra,12(sp)
    731c:	dc800217 	ldw	r18,8(sp)
    7320:	dc400117 	ldw	r17,4(sp)
    7324:	dc000017 	ldw	r16,0(sp)
    7328:	dec00404 	addi	sp,sp,16
    732c:	f800283a 	ret
    7330:	01400104 	movi	r5,4
    7334:	01800844 	movi	r6,33
    7338:	000a0d00 	call	a0d0 <_calloc_r>
    733c:	88801315 	stw	r2,76(r17)
    7340:	103fec1e 	bne	r2,zero,72f4 <_Balloc+0x24>
    7344:	0005883a 	mov	r2,zero
    7348:	003ff306 	br	7318 <_Balloc+0x48>
    734c:	01400044 	movi	r5,1
    7350:	2c24983a 	sll	r18,r5,r16
    7354:	8809883a 	mov	r4,r17
    7358:	91800144 	addi	r6,r18,5
    735c:	318d883a 	add	r6,r6,r6
    7360:	318d883a 	add	r6,r6,r6
    7364:	000a0d00 	call	a0d0 <_calloc_r>
    7368:	103ff626 	beq	r2,zero,7344 <_Balloc+0x74>
    736c:	14000115 	stw	r16,4(r2)
    7370:	14800215 	stw	r18,8(r2)
    7374:	003fe606 	br	7310 <_Balloc+0x40>

00007378 <_Bfree>:
    7378:	28000826 	beq	r5,zero,739c <_Bfree+0x24>
    737c:	28c00117 	ldw	r3,4(r5)
    7380:	20801317 	ldw	r2,76(r4)
    7384:	18c7883a 	add	r3,r3,r3
    7388:	18c7883a 	add	r3,r3,r3
    738c:	10c5883a 	add	r2,r2,r3
    7390:	10c00017 	ldw	r3,0(r2)
    7394:	28c00015 	stw	r3,0(r5)
    7398:	11400015 	stw	r5,0(r2)
    739c:	f800283a 	ret

000073a0 <__multadd>:
    73a0:	defff704 	addi	sp,sp,-36
    73a4:	dc800215 	stw	r18,8(sp)
    73a8:	2c800417 	ldw	r18,16(r5)
    73ac:	ddc00715 	stw	r23,28(sp)
    73b0:	dd800615 	stw	r22,24(sp)
    73b4:	dd000415 	stw	r20,16(sp)
    73b8:	dcc00315 	stw	r19,12(sp)
    73bc:	dc400115 	stw	r17,4(sp)
    73c0:	dc000015 	stw	r16,0(sp)
    73c4:	dfc00815 	stw	ra,32(sp)
    73c8:	dd400515 	stw	r21,20(sp)
    73cc:	2827883a 	mov	r19,r5
    73d0:	2029883a 	mov	r20,r4
    73d4:	3023883a 	mov	r17,r6
    73d8:	3821883a 	mov	r16,r7
    73dc:	2d800504 	addi	r22,r5,20
    73e0:	002f883a 	mov	r23,zero
    73e4:	b5400017 	ldw	r21,0(r22)
    73e8:	880b883a 	mov	r5,r17
    73ec:	bdc00044 	addi	r23,r23,1
    73f0:	a93fffcc 	andi	r4,r21,65535
    73f4:	0000eb00 	call	eb0 <__mulsi3>
    73f8:	1421883a 	add	r16,r2,r16
    73fc:	a808d43a 	srli	r4,r21,16
    7400:	802ad43a 	srli	r21,r16,16
    7404:	880b883a 	mov	r5,r17
    7408:	0000eb00 	call	eb0 <__mulsi3>
    740c:	a88f883a 	add	r7,r21,r2
    7410:	3804943a 	slli	r2,r7,16
    7414:	80ffffcc 	andi	r3,r16,65535
    7418:	b5800104 	addi	r22,r22,4
    741c:	10c7883a 	add	r3,r2,r3
    7420:	b0ffff15 	stw	r3,-4(r22)
    7424:	3820d43a 	srli	r16,r7,16
    7428:	bcbfee16 	blt	r23,r18,73e4 <__multadd+0x44>
    742c:	80000926 	beq	r16,zero,7454 <__multadd+0xb4>
    7430:	98800217 	ldw	r2,8(r19)
    7434:	9080130e 	bge	r18,r2,7484 <__multadd+0xe4>
    7438:	90800144 	addi	r2,r18,5
    743c:	1085883a 	add	r2,r2,r2
    7440:	1085883a 	add	r2,r2,r2
    7444:	9885883a 	add	r2,r19,r2
    7448:	14000015 	stw	r16,0(r2)
    744c:	94800044 	addi	r18,r18,1
    7450:	9c800415 	stw	r18,16(r19)
    7454:	9805883a 	mov	r2,r19
    7458:	dfc00817 	ldw	ra,32(sp)
    745c:	ddc00717 	ldw	r23,28(sp)
    7460:	dd800617 	ldw	r22,24(sp)
    7464:	dd400517 	ldw	r21,20(sp)
    7468:	dd000417 	ldw	r20,16(sp)
    746c:	dcc00317 	ldw	r19,12(sp)
    7470:	dc800217 	ldw	r18,8(sp)
    7474:	dc400117 	ldw	r17,4(sp)
    7478:	dc000017 	ldw	r16,0(sp)
    747c:	dec00904 	addi	sp,sp,36
    7480:	f800283a 	ret
    7484:	99400117 	ldw	r5,4(r19)
    7488:	a009883a 	mov	r4,r20
    748c:	29400044 	addi	r5,r5,1
    7490:	00072d00 	call	72d0 <_Balloc>
    7494:	99800417 	ldw	r6,16(r19)
    7498:	11000304 	addi	r4,r2,12
    749c:	99400304 	addi	r5,r19,12
    74a0:	31800084 	addi	r6,r6,2
    74a4:	318d883a 	add	r6,r6,r6
    74a8:	318d883a 	add	r6,r6,r6
    74ac:	1023883a 	mov	r17,r2
    74b0:	0006f180 	call	6f18 <memcpy>
    74b4:	98000a26 	beq	r19,zero,74e0 <__multadd+0x140>
    74b8:	99000117 	ldw	r4,4(r19)
    74bc:	a0c01317 	ldw	r3,76(r20)
    74c0:	2109883a 	add	r4,r4,r4
    74c4:	2109883a 	add	r4,r4,r4
    74c8:	1907883a 	add	r3,r3,r4
    74cc:	18800017 	ldw	r2,0(r3)
    74d0:	98800015 	stw	r2,0(r19)
    74d4:	1cc00015 	stw	r19,0(r3)
    74d8:	8827883a 	mov	r19,r17
    74dc:	003fd606 	br	7438 <__multadd+0x98>
    74e0:	8827883a 	mov	r19,r17
    74e4:	003fd406 	br	7438 <__multadd+0x98>

000074e8 <__s2b>:
    74e8:	defff904 	addi	sp,sp,-28
    74ec:	dc400115 	stw	r17,4(sp)
    74f0:	dc000015 	stw	r16,0(sp)
    74f4:	2023883a 	mov	r17,r4
    74f8:	2821883a 	mov	r16,r5
    74fc:	39000204 	addi	r4,r7,8
    7500:	01400244 	movi	r5,9
    7504:	dcc00315 	stw	r19,12(sp)
    7508:	dc800215 	stw	r18,8(sp)
    750c:	dfc00615 	stw	ra,24(sp)
    7510:	dd400515 	stw	r21,20(sp)
    7514:	dd000415 	stw	r20,16(sp)
    7518:	3825883a 	mov	r18,r7
    751c:	3027883a 	mov	r19,r6
    7520:	000b5f40 	call	b5f4 <__divsi3>
    7524:	00c00044 	movi	r3,1
    7528:	000b883a 	mov	r5,zero
    752c:	1880030e 	bge	r3,r2,753c <__s2b+0x54>
    7530:	18c7883a 	add	r3,r3,r3
    7534:	29400044 	addi	r5,r5,1
    7538:	18bffd16 	blt	r3,r2,7530 <__s2b+0x48>
    753c:	8809883a 	mov	r4,r17
    7540:	00072d00 	call	72d0 <_Balloc>
    7544:	d8c00717 	ldw	r3,28(sp)
    7548:	10c00515 	stw	r3,20(r2)
    754c:	00c00044 	movi	r3,1
    7550:	10c00415 	stw	r3,16(r2)
    7554:	00c00244 	movi	r3,9
    7558:	1cc0210e 	bge	r3,r19,75e0 <__s2b+0xf8>
    755c:	80eb883a 	add	r21,r16,r3
    7560:	a829883a 	mov	r20,r21
    7564:	84e1883a 	add	r16,r16,r19
    7568:	a1c00007 	ldb	r7,0(r20)
    756c:	8809883a 	mov	r4,r17
    7570:	a5000044 	addi	r20,r20,1
    7574:	100b883a 	mov	r5,r2
    7578:	01800284 	movi	r6,10
    757c:	39fff404 	addi	r7,r7,-48
    7580:	00073a00 	call	73a0 <__multadd>
    7584:	a43ff81e 	bne	r20,r16,7568 <__s2b+0x80>
    7588:	ace1883a 	add	r16,r21,r19
    758c:	843ffe04 	addi	r16,r16,-8
    7590:	9c800a0e 	bge	r19,r18,75bc <__s2b+0xd4>
    7594:	94e5c83a 	sub	r18,r18,r19
    7598:	84a5883a 	add	r18,r16,r18
    759c:	81c00007 	ldb	r7,0(r16)
    75a0:	8809883a 	mov	r4,r17
    75a4:	84000044 	addi	r16,r16,1
    75a8:	100b883a 	mov	r5,r2
    75ac:	01800284 	movi	r6,10
    75b0:	39fff404 	addi	r7,r7,-48
    75b4:	00073a00 	call	73a0 <__multadd>
    75b8:	84bff81e 	bne	r16,r18,759c <__s2b+0xb4>
    75bc:	dfc00617 	ldw	ra,24(sp)
    75c0:	dd400517 	ldw	r21,20(sp)
    75c4:	dd000417 	ldw	r20,16(sp)
    75c8:	dcc00317 	ldw	r19,12(sp)
    75cc:	dc800217 	ldw	r18,8(sp)
    75d0:	dc400117 	ldw	r17,4(sp)
    75d4:	dc000017 	ldw	r16,0(sp)
    75d8:	dec00704 	addi	sp,sp,28
    75dc:	f800283a 	ret
    75e0:	84000284 	addi	r16,r16,10
    75e4:	1827883a 	mov	r19,r3
    75e8:	003fe906 	br	7590 <__s2b+0xa8>

000075ec <__hi0bits>:
    75ec:	20bfffec 	andhi	r2,r4,65535
    75f0:	1000141e 	bne	r2,zero,7644 <__hi0bits+0x58>
    75f4:	2008943a 	slli	r4,r4,16
    75f8:	00800404 	movi	r2,16
    75fc:	20ffc02c 	andhi	r3,r4,65280
    7600:	1800021e 	bne	r3,zero,760c <__hi0bits+0x20>
    7604:	2008923a 	slli	r4,r4,8
    7608:	10800204 	addi	r2,r2,8
    760c:	20fc002c 	andhi	r3,r4,61440
    7610:	1800021e 	bne	r3,zero,761c <__hi0bits+0x30>
    7614:	2008913a 	slli	r4,r4,4
    7618:	10800104 	addi	r2,r2,4
    761c:	20f0002c 	andhi	r3,r4,49152
    7620:	1800031e 	bne	r3,zero,7630 <__hi0bits+0x44>
    7624:	2109883a 	add	r4,r4,r4
    7628:	10800084 	addi	r2,r2,2
    762c:	2109883a 	add	r4,r4,r4
    7630:	20000316 	blt	r4,zero,7640 <__hi0bits+0x54>
    7634:	2110002c 	andhi	r4,r4,16384
    7638:	2000041e 	bne	r4,zero,764c <__hi0bits+0x60>
    763c:	00800804 	movi	r2,32
    7640:	f800283a 	ret
    7644:	0005883a 	mov	r2,zero
    7648:	003fec06 	br	75fc <__hi0bits+0x10>
    764c:	10800044 	addi	r2,r2,1
    7650:	f800283a 	ret

00007654 <__lo0bits>:
    7654:	20c00017 	ldw	r3,0(r4)
    7658:	188001cc 	andi	r2,r3,7
    765c:	10000826 	beq	r2,zero,7680 <__lo0bits+0x2c>
    7660:	1880004c 	andi	r2,r3,1
    7664:	1000211e 	bne	r2,zero,76ec <__lo0bits+0x98>
    7668:	1880008c 	andi	r2,r3,2
    766c:	1000211e 	bne	r2,zero,76f4 <__lo0bits+0xa0>
    7670:	1806d0ba 	srli	r3,r3,2
    7674:	00800084 	movi	r2,2
    7678:	20c00015 	stw	r3,0(r4)
    767c:	f800283a 	ret
    7680:	18bfffcc 	andi	r2,r3,65535
    7684:	10001326 	beq	r2,zero,76d4 <__lo0bits+0x80>
    7688:	0005883a 	mov	r2,zero
    768c:	19403fcc 	andi	r5,r3,255
    7690:	2800021e 	bne	r5,zero,769c <__lo0bits+0x48>
    7694:	1806d23a 	srli	r3,r3,8
    7698:	10800204 	addi	r2,r2,8
    769c:	194003cc 	andi	r5,r3,15
    76a0:	2800021e 	bne	r5,zero,76ac <__lo0bits+0x58>
    76a4:	1806d13a 	srli	r3,r3,4
    76a8:	10800104 	addi	r2,r2,4
    76ac:	194000cc 	andi	r5,r3,3
    76b0:	2800021e 	bne	r5,zero,76bc <__lo0bits+0x68>
    76b4:	1806d0ba 	srli	r3,r3,2
    76b8:	10800084 	addi	r2,r2,2
    76bc:	1940004c 	andi	r5,r3,1
    76c0:	2800081e 	bne	r5,zero,76e4 <__lo0bits+0x90>
    76c4:	1806d07a 	srli	r3,r3,1
    76c8:	1800051e 	bne	r3,zero,76e0 <__lo0bits+0x8c>
    76cc:	00800804 	movi	r2,32
    76d0:	f800283a 	ret
    76d4:	1806d43a 	srli	r3,r3,16
    76d8:	00800404 	movi	r2,16
    76dc:	003feb06 	br	768c <__lo0bits+0x38>
    76e0:	10800044 	addi	r2,r2,1
    76e4:	20c00015 	stw	r3,0(r4)
    76e8:	f800283a 	ret
    76ec:	0005883a 	mov	r2,zero
    76f0:	f800283a 	ret
    76f4:	1806d07a 	srli	r3,r3,1
    76f8:	00800044 	movi	r2,1
    76fc:	20c00015 	stw	r3,0(r4)
    7700:	f800283a 	ret

00007704 <__i2b>:
    7704:	defffd04 	addi	sp,sp,-12
    7708:	dc000015 	stw	r16,0(sp)
    770c:	04000044 	movi	r16,1
    7710:	dc400115 	stw	r17,4(sp)
    7714:	2823883a 	mov	r17,r5
    7718:	800b883a 	mov	r5,r16
    771c:	dfc00215 	stw	ra,8(sp)
    7720:	00072d00 	call	72d0 <_Balloc>
    7724:	14400515 	stw	r17,20(r2)
    7728:	14000415 	stw	r16,16(r2)
    772c:	dfc00217 	ldw	ra,8(sp)
    7730:	dc400117 	ldw	r17,4(sp)
    7734:	dc000017 	ldw	r16,0(sp)
    7738:	dec00304 	addi	sp,sp,12
    773c:	f800283a 	ret

00007740 <__multiply>:
    7740:	deffef04 	addi	sp,sp,-68
    7744:	dc400815 	stw	r17,32(sp)
    7748:	dc000715 	stw	r16,28(sp)
    774c:	2c400417 	ldw	r17,16(r5)
    7750:	34000417 	ldw	r16,16(r6)
    7754:	dd800d15 	stw	r22,52(sp)
    7758:	dc800915 	stw	r18,36(sp)
    775c:	dfc01015 	stw	ra,64(sp)
    7760:	df000f15 	stw	fp,60(sp)
    7764:	ddc00e15 	stw	r23,56(sp)
    7768:	dd400c15 	stw	r21,48(sp)
    776c:	dd000b15 	stw	r20,44(sp)
    7770:	dcc00a15 	stw	r19,40(sp)
    7774:	2825883a 	mov	r18,r5
    7778:	302d883a 	mov	r22,r6
    777c:	8c009116 	blt	r17,r16,79c4 <__multiply+0x284>
    7780:	8005883a 	mov	r2,r16
    7784:	8821883a 	mov	r16,r17
    7788:	1023883a 	mov	r17,r2
    778c:	90800217 	ldw	r2,8(r18)
    7790:	8447883a 	add	r3,r16,r17
    7794:	d8c00215 	stw	r3,8(sp)
    7798:	91400117 	ldw	r5,4(r18)
    779c:	10c0010e 	bge	r2,r3,77a4 <__multiply+0x64>
    77a0:	29400044 	addi	r5,r5,1
    77a4:	00072d00 	call	72d0 <_Balloc>
    77a8:	d8c00217 	ldw	r3,8(sp)
    77ac:	d8800615 	stw	r2,24(sp)
    77b0:	18eb883a 	add	r21,r3,r3
    77b4:	ad6b883a 	add	r21,r21,r21
    77b8:	10c00504 	addi	r3,r2,20
    77bc:	1d6b883a 	add	r21,r3,r21
    77c0:	d8c00115 	stw	r3,4(sp)
    77c4:	dd400315 	stw	r21,12(sp)
    77c8:	1805883a 	mov	r2,r3
    77cc:	1d40042e 	bgeu	r3,r21,77e0 <__multiply+0xa0>
    77d0:	d8c00317 	ldw	r3,12(sp)
    77d4:	10000015 	stw	zero,0(r2)
    77d8:	10800104 	addi	r2,r2,4
    77dc:	10fffc36 	bltu	r2,r3,77d0 <__multiply+0x90>
    77e0:	8c63883a 	add	r17,r17,r17
    77e4:	b5800504 	addi	r22,r22,20
    77e8:	8c63883a 	add	r17,r17,r17
    77ec:	94800504 	addi	r18,r18,20
    77f0:	8421883a 	add	r16,r16,r16
    77f4:	b463883a 	add	r17,r22,r17
    77f8:	8421883a 	add	r16,r16,r16
    77fc:	dd800015 	stw	r22,0(sp)
    7800:	dc800415 	stw	r18,16(sp)
    7804:	dc400515 	stw	r17,20(sp)
    7808:	9429883a 	add	r20,r18,r16
    780c:	b4404f2e 	bgeu	r22,r17,794c <__multiply+0x20c>
    7810:	d8c00017 	ldw	r3,0(sp)
    7814:	1c800017 	ldw	r18,0(r3)
    7818:	943fffcc 	andi	r16,r18,65535
    781c:	80001e26 	beq	r16,zero,7898 <__multiply+0x158>
    7820:	dd800117 	ldw	r22,4(sp)
    7824:	dd400417 	ldw	r21,16(sp)
    7828:	0025883a 	mov	r18,zero
    782c:	adc00017 	ldw	r23,0(r21)
    7830:	b4c00017 	ldw	r19,0(r22)
    7834:	800b883a 	mov	r5,r16
    7838:	b93fffcc 	andi	r4,r23,65535
    783c:	0000eb00 	call	eb0 <__mulsi3>
    7840:	9c7fffcc 	andi	r17,r19,65535
    7844:	8885883a 	add	r2,r17,r2
    7848:	b808d43a 	srli	r4,r23,16
    784c:	14a3883a 	add	r17,r2,r18
    7850:	9826d43a 	srli	r19,r19,16
    7854:	8824d43a 	srli	r18,r17,16
    7858:	800b883a 	mov	r5,r16
    785c:	0000eb00 	call	eb0 <__mulsi3>
    7860:	9885883a 	add	r2,r19,r2
    7864:	14a7883a 	add	r19,r2,r18
    7868:	88ffffcc 	andi	r3,r17,65535
    786c:	9822943a 	slli	r17,r19,16
    7870:	ad400104 	addi	r21,r21,4
    7874:	b005883a 	mov	r2,r22
    7878:	88c6b03a 	or	r3,r17,r3
    787c:	b0c00015 	stw	r3,0(r22)
    7880:	9824d43a 	srli	r18,r19,16
    7884:	b5800104 	addi	r22,r22,4
    7888:	ad3fe836 	bltu	r21,r20,782c <__multiply+0xec>
    788c:	d8c00017 	ldw	r3,0(sp)
    7890:	14800115 	stw	r18,4(r2)
    7894:	1c800017 	ldw	r18,0(r3)
    7898:	9024d43a 	srli	r18,r18,16
    789c:	90002226 	beq	r18,zero,7928 <__multiply+0x1e8>
    78a0:	d8c00117 	ldw	r3,4(sp)
    78a4:	dd800417 	ldw	r22,16(sp)
    78a8:	002f883a 	mov	r23,zero
    78ac:	1f000017 	ldw	fp,0(r3)
    78b0:	1823883a 	mov	r17,r3
    78b4:	182b883a 	mov	r21,r3
    78b8:	e021883a 	mov	r16,fp
    78bc:	00000106 	br	78c4 <__multiply+0x184>
    78c0:	982b883a 	mov	r21,r19
    78c4:	b100000b 	ldhu	r4,0(r22)
    78c8:	8020d43a 	srli	r16,r16,16
    78cc:	900b883a 	mov	r5,r18
    78d0:	0000eb00 	call	eb0 <__mulsi3>
    78d4:	1405883a 	add	r2,r2,r16
    78d8:	15ef883a 	add	r23,r2,r23
    78dc:	b804943a 	slli	r2,r23,16
    78e0:	e0ffffcc 	andi	r3,fp,65535
    78e4:	8c400104 	addi	r17,r17,4
    78e8:	10c6b03a 	or	r3,r2,r3
    78ec:	88ffff15 	stw	r3,-4(r17)
    78f0:	b5800104 	addi	r22,r22,4
    78f4:	b13fff17 	ldw	r4,-4(r22)
    78f8:	acc00104 	addi	r19,r21,4
    78fc:	900b883a 	mov	r5,r18
    7900:	2008d43a 	srli	r4,r4,16
    7904:	9c000017 	ldw	r16,0(r19)
    7908:	0000eb00 	call	eb0 <__mulsi3>
    790c:	b806d43a 	srli	r3,r23,16
    7910:	813fffcc 	andi	r4,r16,65535
    7914:	1105883a 	add	r2,r2,r4
    7918:	10f9883a 	add	fp,r2,r3
    791c:	e02ed43a 	srli	r23,fp,16
    7920:	b53fe736 	bltu	r22,r20,78c0 <__multiply+0x180>
    7924:	af000115 	stw	fp,4(r21)
    7928:	d8c00017 	ldw	r3,0(sp)
    792c:	d9000517 	ldw	r4,20(sp)
    7930:	18c00104 	addi	r3,r3,4
    7934:	d8c00015 	stw	r3,0(sp)
    7938:	d8c00117 	ldw	r3,4(sp)
    793c:	18c00104 	addi	r3,r3,4
    7940:	d8c00115 	stw	r3,4(sp)
    7944:	d8c00017 	ldw	r3,0(sp)
    7948:	193fb136 	bltu	r3,r4,7810 <__multiply+0xd0>
    794c:	d8c00217 	ldw	r3,8(sp)
    7950:	00c00c0e 	bge	zero,r3,7984 <__multiply+0x244>
    7954:	d8c00317 	ldw	r3,12(sp)
    7958:	18bfff17 	ldw	r2,-4(r3)
    795c:	1d7fff04 	addi	r21,r3,-4
    7960:	10000326 	beq	r2,zero,7970 <__multiply+0x230>
    7964:	00000706 	br	7984 <__multiply+0x244>
    7968:	a8800017 	ldw	r2,0(r21)
    796c:	1000051e 	bne	r2,zero,7984 <__multiply+0x244>
    7970:	d8c00217 	ldw	r3,8(sp)
    7974:	ad7fff04 	addi	r21,r21,-4
    7978:	18ffffc4 	addi	r3,r3,-1
    797c:	d8c00215 	stw	r3,8(sp)
    7980:	183ff91e 	bne	r3,zero,7968 <__multiply+0x228>
    7984:	d8c00617 	ldw	r3,24(sp)
    7988:	d9000217 	ldw	r4,8(sp)
    798c:	1805883a 	mov	r2,r3
    7990:	19000415 	stw	r4,16(r3)
    7994:	dfc01017 	ldw	ra,64(sp)
    7998:	df000f17 	ldw	fp,60(sp)
    799c:	ddc00e17 	ldw	r23,56(sp)
    79a0:	dd800d17 	ldw	r22,52(sp)
    79a4:	dd400c17 	ldw	r21,48(sp)
    79a8:	dd000b17 	ldw	r20,44(sp)
    79ac:	dcc00a17 	ldw	r19,40(sp)
    79b0:	dc800917 	ldw	r18,36(sp)
    79b4:	dc400817 	ldw	r17,32(sp)
    79b8:	dc000717 	ldw	r16,28(sp)
    79bc:	dec01104 	addi	sp,sp,68
    79c0:	f800283a 	ret
    79c4:	3025883a 	mov	r18,r6
    79c8:	282d883a 	mov	r22,r5
    79cc:	003f6f06 	br	778c <__multiply+0x4c>

000079d0 <__pow5mult>:
    79d0:	defffa04 	addi	sp,sp,-24
    79d4:	dcc00315 	stw	r19,12(sp)
    79d8:	dc800215 	stw	r18,8(sp)
    79dc:	dc000015 	stw	r16,0(sp)
    79e0:	dfc00515 	stw	ra,20(sp)
    79e4:	dd000415 	stw	r20,16(sp)
    79e8:	dc400115 	stw	r17,4(sp)
    79ec:	308000cc 	andi	r2,r6,3
    79f0:	3021883a 	mov	r16,r6
    79f4:	2027883a 	mov	r19,r4
    79f8:	2825883a 	mov	r18,r5
    79fc:	10002e1e 	bne	r2,zero,7ab8 <__pow5mult+0xe8>
    7a00:	8021d0ba 	srai	r16,r16,2
    7a04:	80001a26 	beq	r16,zero,7a70 <__pow5mult+0xa0>
    7a08:	9c401217 	ldw	r17,72(r19)
    7a0c:	8800061e 	bne	r17,zero,7a28 <__pow5mult+0x58>
    7a10:	00003406 	br	7ae4 <__pow5mult+0x114>
    7a14:	8021d07a 	srai	r16,r16,1
    7a18:	80001526 	beq	r16,zero,7a70 <__pow5mult+0xa0>
    7a1c:	88800017 	ldw	r2,0(r17)
    7a20:	10001c26 	beq	r2,zero,7a94 <__pow5mult+0xc4>
    7a24:	1023883a 	mov	r17,r2
    7a28:	80c0004c 	andi	r3,r16,1
    7a2c:	183ff926 	beq	r3,zero,7a14 <__pow5mult+0x44>
    7a30:	900b883a 	mov	r5,r18
    7a34:	880d883a 	mov	r6,r17
    7a38:	9809883a 	mov	r4,r19
    7a3c:	00077400 	call	7740 <__multiply>
    7a40:	90001b26 	beq	r18,zero,7ab0 <__pow5mult+0xe0>
    7a44:	91c00117 	ldw	r7,4(r18)
    7a48:	98c01317 	ldw	r3,76(r19)
    7a4c:	8021d07a 	srai	r16,r16,1
    7a50:	39cf883a 	add	r7,r7,r7
    7a54:	39cf883a 	add	r7,r7,r7
    7a58:	19c7883a 	add	r3,r3,r7
    7a5c:	19000017 	ldw	r4,0(r3)
    7a60:	91000015 	stw	r4,0(r18)
    7a64:	1c800015 	stw	r18,0(r3)
    7a68:	1025883a 	mov	r18,r2
    7a6c:	803feb1e 	bne	r16,zero,7a1c <__pow5mult+0x4c>
    7a70:	9005883a 	mov	r2,r18
    7a74:	dfc00517 	ldw	ra,20(sp)
    7a78:	dd000417 	ldw	r20,16(sp)
    7a7c:	dcc00317 	ldw	r19,12(sp)
    7a80:	dc800217 	ldw	r18,8(sp)
    7a84:	dc400117 	ldw	r17,4(sp)
    7a88:	dc000017 	ldw	r16,0(sp)
    7a8c:	dec00604 	addi	sp,sp,24
    7a90:	f800283a 	ret
    7a94:	9809883a 	mov	r4,r19
    7a98:	880b883a 	mov	r5,r17
    7a9c:	880d883a 	mov	r6,r17
    7aa0:	00077400 	call	7740 <__multiply>
    7aa4:	88800015 	stw	r2,0(r17)
    7aa8:	10000015 	stw	zero,0(r2)
    7aac:	003fdd06 	br	7a24 <__pow5mult+0x54>
    7ab0:	1025883a 	mov	r18,r2
    7ab4:	003fd706 	br	7a14 <__pow5mult+0x44>
    7ab8:	10bfffc4 	addi	r2,r2,-1
    7abc:	1085883a 	add	r2,r2,r2
    7ac0:	00c00074 	movhi	r3,1
    7ac4:	18c92604 	addi	r3,r3,9368
    7ac8:	1085883a 	add	r2,r2,r2
    7acc:	1885883a 	add	r2,r3,r2
    7ad0:	11800017 	ldw	r6,0(r2)
    7ad4:	000f883a 	mov	r7,zero
    7ad8:	00073a00 	call	73a0 <__multadd>
    7adc:	1025883a 	mov	r18,r2
    7ae0:	003fc706 	br	7a00 <__pow5mult+0x30>
    7ae4:	05000044 	movi	r20,1
    7ae8:	9809883a 	mov	r4,r19
    7aec:	a00b883a 	mov	r5,r20
    7af0:	00072d00 	call	72d0 <_Balloc>
    7af4:	1023883a 	mov	r17,r2
    7af8:	00809c44 	movi	r2,625
    7afc:	88800515 	stw	r2,20(r17)
    7b00:	8d000415 	stw	r20,16(r17)
    7b04:	9c401215 	stw	r17,72(r19)
    7b08:	88000015 	stw	zero,0(r17)
    7b0c:	003fc606 	br	7a28 <__pow5mult+0x58>

00007b10 <__lshift>:
    7b10:	defff904 	addi	sp,sp,-28
    7b14:	dd000415 	stw	r20,16(sp)
    7b18:	dcc00315 	stw	r19,12(sp)
    7b1c:	3029d17a 	srai	r20,r6,5
    7b20:	2cc00417 	ldw	r19,16(r5)
    7b24:	28800217 	ldw	r2,8(r5)
    7b28:	dd400515 	stw	r21,20(sp)
    7b2c:	a4e7883a 	add	r19,r20,r19
    7b30:	dc800215 	stw	r18,8(sp)
    7b34:	dc400115 	stw	r17,4(sp)
    7b38:	dc000015 	stw	r16,0(sp)
    7b3c:	dfc00615 	stw	ra,24(sp)
    7b40:	9c000044 	addi	r16,r19,1
    7b44:	2823883a 	mov	r17,r5
    7b48:	302b883a 	mov	r21,r6
    7b4c:	2025883a 	mov	r18,r4
    7b50:	29400117 	ldw	r5,4(r5)
    7b54:	1400030e 	bge	r2,r16,7b64 <__lshift+0x54>
    7b58:	1085883a 	add	r2,r2,r2
    7b5c:	29400044 	addi	r5,r5,1
    7b60:	143ffd16 	blt	r2,r16,7b58 <__lshift+0x48>
    7b64:	9009883a 	mov	r4,r18
    7b68:	00072d00 	call	72d0 <_Balloc>
    7b6c:	11c00504 	addi	r7,r2,20
    7b70:	0500090e 	bge	zero,r20,7b98 <__lshift+0x88>
    7b74:	3811883a 	mov	r8,r7
    7b78:	0007883a 	mov	r3,zero
    7b7c:	40000015 	stw	zero,0(r8)
    7b80:	18c00044 	addi	r3,r3,1
    7b84:	42000104 	addi	r8,r8,4
    7b88:	1d3ffc1e 	bne	r3,r20,7b7c <__lshift+0x6c>
    7b8c:	18c7883a 	add	r3,r3,r3
    7b90:	18c7883a 	add	r3,r3,r3
    7b94:	38cf883a 	add	r7,r7,r3
    7b98:	89000417 	ldw	r4,16(r17)
    7b9c:	88c00504 	addi	r3,r17,20
    7ba0:	a98007cc 	andi	r6,r21,31
    7ba4:	2109883a 	add	r4,r4,r4
    7ba8:	2109883a 	add	r4,r4,r4
    7bac:	1909883a 	add	r4,r3,r4
    7bb0:	30002326 	beq	r6,zero,7c40 <__lshift+0x130>
    7bb4:	01400804 	movi	r5,32
    7bb8:	298bc83a 	sub	r5,r5,r6
    7bbc:	0013883a 	mov	r9,zero
    7bc0:	1a000017 	ldw	r8,0(r3)
    7bc4:	3815883a 	mov	r10,r7
    7bc8:	39c00104 	addi	r7,r7,4
    7bcc:	4190983a 	sll	r8,r8,r6
    7bd0:	18c00104 	addi	r3,r3,4
    7bd4:	4a10b03a 	or	r8,r9,r8
    7bd8:	3a3fff15 	stw	r8,-4(r7)
    7bdc:	1a3fff17 	ldw	r8,-4(r3)
    7be0:	4152d83a 	srl	r9,r8,r5
    7be4:	193ff636 	bltu	r3,r4,7bc0 <__lshift+0xb0>
    7be8:	52400115 	stw	r9,4(r10)
    7bec:	48001a1e 	bne	r9,zero,7c58 <__lshift+0x148>
    7bf0:	843fffc4 	addi	r16,r16,-1
    7bf4:	14000415 	stw	r16,16(r2)
    7bf8:	88000826 	beq	r17,zero,7c1c <__lshift+0x10c>
    7bfc:	89000117 	ldw	r4,4(r17)
    7c00:	90c01317 	ldw	r3,76(r18)
    7c04:	2109883a 	add	r4,r4,r4
    7c08:	2109883a 	add	r4,r4,r4
    7c0c:	1907883a 	add	r3,r3,r4
    7c10:	19000017 	ldw	r4,0(r3)
    7c14:	89000015 	stw	r4,0(r17)
    7c18:	1c400015 	stw	r17,0(r3)
    7c1c:	dfc00617 	ldw	ra,24(sp)
    7c20:	dd400517 	ldw	r21,20(sp)
    7c24:	dd000417 	ldw	r20,16(sp)
    7c28:	dcc00317 	ldw	r19,12(sp)
    7c2c:	dc800217 	ldw	r18,8(sp)
    7c30:	dc400117 	ldw	r17,4(sp)
    7c34:	dc000017 	ldw	r16,0(sp)
    7c38:	dec00704 	addi	sp,sp,28
    7c3c:	f800283a 	ret
    7c40:	19400017 	ldw	r5,0(r3)
    7c44:	39c00104 	addi	r7,r7,4
    7c48:	18c00104 	addi	r3,r3,4
    7c4c:	397fff15 	stw	r5,-4(r7)
    7c50:	193ffb36 	bltu	r3,r4,7c40 <__lshift+0x130>
    7c54:	003fe606 	br	7bf0 <__lshift+0xe0>
    7c58:	9c000084 	addi	r16,r19,2
    7c5c:	003fe406 	br	7bf0 <__lshift+0xe0>

00007c60 <__mcmp>:
    7c60:	20800417 	ldw	r2,16(r4)
    7c64:	28c00417 	ldw	r3,16(r5)
    7c68:	10c5c83a 	sub	r2,r2,r3
    7c6c:	1000111e 	bne	r2,zero,7cb4 <__mcmp+0x54>
    7c70:	18c7883a 	add	r3,r3,r3
    7c74:	18c7883a 	add	r3,r3,r3
    7c78:	21000504 	addi	r4,r4,20
    7c7c:	29400504 	addi	r5,r5,20
    7c80:	20c5883a 	add	r2,r4,r3
    7c84:	28cb883a 	add	r5,r5,r3
    7c88:	00000106 	br	7c90 <__mcmp+0x30>
    7c8c:	20800a2e 	bgeu	r4,r2,7cb8 <__mcmp+0x58>
    7c90:	10bfff04 	addi	r2,r2,-4
    7c94:	297fff04 	addi	r5,r5,-4
    7c98:	11800017 	ldw	r6,0(r2)
    7c9c:	28c00017 	ldw	r3,0(r5)
    7ca0:	30fffa26 	beq	r6,r3,7c8c <__mcmp+0x2c>
    7ca4:	30c00236 	bltu	r6,r3,7cb0 <__mcmp+0x50>
    7ca8:	00800044 	movi	r2,1
    7cac:	f800283a 	ret
    7cb0:	00bfffc4 	movi	r2,-1
    7cb4:	f800283a 	ret
    7cb8:	0005883a 	mov	r2,zero
    7cbc:	f800283a 	ret

00007cc0 <__mdiff>:
    7cc0:	defffb04 	addi	sp,sp,-20
    7cc4:	dc000015 	stw	r16,0(sp)
    7cc8:	2821883a 	mov	r16,r5
    7ccc:	dcc00315 	stw	r19,12(sp)
    7cd0:	300b883a 	mov	r5,r6
    7cd4:	2027883a 	mov	r19,r4
    7cd8:	8009883a 	mov	r4,r16
    7cdc:	dc800215 	stw	r18,8(sp)
    7ce0:	dfc00415 	stw	ra,16(sp)
    7ce4:	dc400115 	stw	r17,4(sp)
    7ce8:	3025883a 	mov	r18,r6
    7cec:	0007c600 	call	7c60 <__mcmp>
    7cf0:	10005226 	beq	r2,zero,7e3c <__mdiff+0x17c>
    7cf4:	10004c16 	blt	r2,zero,7e28 <__mdiff+0x168>
    7cf8:	0023883a 	mov	r17,zero
    7cfc:	81400117 	ldw	r5,4(r16)
    7d00:	9809883a 	mov	r4,r19
    7d04:	00072d00 	call	72d0 <_Balloc>
    7d08:	83400417 	ldw	r13,16(r16)
    7d0c:	93800417 	ldw	r14,16(r18)
    7d10:	81000504 	addi	r4,r16,20
    7d14:	6b59883a 	add	r12,r13,r13
    7d18:	739d883a 	add	r14,r14,r14
    7d1c:	6319883a 	add	r12,r12,r12
    7d20:	91800504 	addi	r6,r18,20
    7d24:	739d883a 	add	r14,r14,r14
    7d28:	14400315 	stw	r17,12(r2)
    7d2c:	2319883a 	add	r12,r4,r12
    7d30:	339d883a 	add	r14,r6,r14
    7d34:	12400504 	addi	r9,r2,20
    7d38:	0007883a 	mov	r3,zero
    7d3c:	22000017 	ldw	r8,0(r4)
    7d40:	32800017 	ldw	r10,0(r6)
    7d44:	4ac00104 	addi	r11,r9,4
    7d48:	41ffffcc 	andi	r7,r8,65535
    7d4c:	38c7883a 	add	r3,r7,r3
    7d50:	51ffffcc 	andi	r7,r10,65535
    7d54:	19cfc83a 	sub	r7,r3,r7
    7d58:	4010d43a 	srli	r8,r8,16
    7d5c:	5014d43a 	srli	r10,r10,16
    7d60:	3807d43a 	srai	r3,r7,16
    7d64:	39ffffcc 	andi	r7,r7,65535
    7d68:	4291c83a 	sub	r8,r8,r10
    7d6c:	40c7883a 	add	r3,r8,r3
    7d70:	1810943a 	slli	r8,r3,16
    7d74:	31800104 	addi	r6,r6,4
    7d78:	21000104 	addi	r4,r4,4
    7d7c:	41ceb03a 	or	r7,r8,r7
    7d80:	49c00015 	stw	r7,0(r9)
    7d84:	1807d43a 	srai	r3,r3,16
    7d88:	580b883a 	mov	r5,r11
    7d8c:	5813883a 	mov	r9,r11
    7d90:	33bfea36 	bltu	r6,r14,7d3c <__mdiff+0x7c>
    7d94:	2011883a 	mov	r8,r4
    7d98:	2300152e 	bgeu	r4,r12,7df0 <__mdiff+0x130>
    7d9c:	21400017 	ldw	r5,0(r4)
    7da0:	4a400104 	addi	r9,r9,4
    7da4:	21000104 	addi	r4,r4,4
    7da8:	29ffffcc 	andi	r7,r5,65535
    7dac:	38c7883a 	add	r3,r7,r3
    7db0:	280ad43a 	srli	r5,r5,16
    7db4:	180dd43a 	srai	r6,r3,16
    7db8:	19ffffcc 	andi	r7,r3,65535
    7dbc:	3147883a 	add	r3,r6,r5
    7dc0:	180a943a 	slli	r5,r3,16
    7dc4:	1807d43a 	srai	r3,r3,16
    7dc8:	29ceb03a 	or	r7,r5,r7
    7dcc:	49ffff15 	stw	r7,-4(r9)
    7dd0:	233ff236 	bltu	r4,r12,7d9c <__mdiff+0xdc>
    7dd4:	0206303a 	nor	r3,zero,r8
    7dd8:	1b07883a 	add	r3,r3,r12
    7ddc:	1806d0ba 	srli	r3,r3,2
    7de0:	18c00044 	addi	r3,r3,1
    7de4:	18c7883a 	add	r3,r3,r3
    7de8:	18c7883a 	add	r3,r3,r3
    7dec:	58cb883a 	add	r5,r11,r3
    7df0:	28ffff04 	addi	r3,r5,-4
    7df4:	3800041e 	bne	r7,zero,7e08 <__mdiff+0x148>
    7df8:	18ffff04 	addi	r3,r3,-4
    7dfc:	19000017 	ldw	r4,0(r3)
    7e00:	6b7fffc4 	addi	r13,r13,-1
    7e04:	203ffc26 	beq	r4,zero,7df8 <__mdiff+0x138>
    7e08:	13400415 	stw	r13,16(r2)
    7e0c:	dfc00417 	ldw	ra,16(sp)
    7e10:	dcc00317 	ldw	r19,12(sp)
    7e14:	dc800217 	ldw	r18,8(sp)
    7e18:	dc400117 	ldw	r17,4(sp)
    7e1c:	dc000017 	ldw	r16,0(sp)
    7e20:	dec00504 	addi	sp,sp,20
    7e24:	f800283a 	ret
    7e28:	8005883a 	mov	r2,r16
    7e2c:	04400044 	movi	r17,1
    7e30:	9021883a 	mov	r16,r18
    7e34:	1025883a 	mov	r18,r2
    7e38:	003fb006 	br	7cfc <__mdiff+0x3c>
    7e3c:	9809883a 	mov	r4,r19
    7e40:	000b883a 	mov	r5,zero
    7e44:	00072d00 	call	72d0 <_Balloc>
    7e48:	00c00044 	movi	r3,1
    7e4c:	10c00415 	stw	r3,16(r2)
    7e50:	10000515 	stw	zero,20(r2)
    7e54:	003fed06 	br	7e0c <__mdiff+0x14c>

00007e58 <__ulp>:
    7e58:	295ffc2c 	andhi	r5,r5,32752
    7e5c:	00bf3034 	movhi	r2,64704
    7e60:	2887883a 	add	r3,r5,r2
    7e64:	00c0020e 	bge	zero,r3,7e70 <__ulp+0x18>
    7e68:	0005883a 	mov	r2,zero
    7e6c:	f800283a 	ret
    7e70:	00c7c83a 	sub	r3,zero,r3
    7e74:	180bd53a 	srai	r5,r3,20
    7e78:	008004c4 	movi	r2,19
    7e7c:	11400a0e 	bge	r2,r5,7ea8 <__ulp+0x50>
    7e80:	00800c84 	movi	r2,50
    7e84:	0007883a 	mov	r3,zero
    7e88:	11400516 	blt	r2,r5,7ea0 <__ulp+0x48>
    7e8c:	00800cc4 	movi	r2,51
    7e90:	114bc83a 	sub	r5,r2,r5
    7e94:	00800044 	movi	r2,1
    7e98:	1144983a 	sll	r2,r2,r5
    7e9c:	f800283a 	ret
    7ea0:	00800044 	movi	r2,1
    7ea4:	f800283a 	ret
    7ea8:	00800234 	movhi	r2,8
    7eac:	1147d83a 	sra	r3,r2,r5
    7eb0:	0005883a 	mov	r2,zero
    7eb4:	f800283a 	ret

00007eb8 <__b2d>:
    7eb8:	defffa04 	addi	sp,sp,-24
    7ebc:	dc000015 	stw	r16,0(sp)
    7ec0:	24000417 	ldw	r16,16(r4)
    7ec4:	dc400115 	stw	r17,4(sp)
    7ec8:	24400504 	addi	r17,r4,20
    7ecc:	8421883a 	add	r16,r16,r16
    7ed0:	8421883a 	add	r16,r16,r16
    7ed4:	8c21883a 	add	r16,r17,r16
    7ed8:	dc800215 	stw	r18,8(sp)
    7edc:	84bfff17 	ldw	r18,-4(r16)
    7ee0:	dd000415 	stw	r20,16(sp)
    7ee4:	dcc00315 	stw	r19,12(sp)
    7ee8:	9009883a 	mov	r4,r18
    7eec:	2829883a 	mov	r20,r5
    7ef0:	dfc00515 	stw	ra,20(sp)
    7ef4:	00075ec0 	call	75ec <__hi0bits>
    7ef8:	00c00804 	movi	r3,32
    7efc:	1887c83a 	sub	r3,r3,r2
    7f00:	a0c00015 	stw	r3,0(r20)
    7f04:	00c00284 	movi	r3,10
    7f08:	84ffff04 	addi	r19,r16,-4
    7f0c:	18801216 	blt	r3,r2,7f58 <__b2d+0xa0>
    7f10:	014002c4 	movi	r5,11
    7f14:	2889c83a 	sub	r4,r5,r2
    7f18:	9106d83a 	srl	r3,r18,r4
    7f1c:	18cffc34 	orhi	r3,r3,16368
    7f20:	8cc0282e 	bgeu	r17,r19,7fc4 <__b2d+0x10c>
    7f24:	817ffe17 	ldw	r5,-8(r16)
    7f28:	290ad83a 	srl	r5,r5,r4
    7f2c:	10800544 	addi	r2,r2,21
    7f30:	9084983a 	sll	r2,r18,r2
    7f34:	2884b03a 	or	r2,r5,r2
    7f38:	dfc00517 	ldw	ra,20(sp)
    7f3c:	dd000417 	ldw	r20,16(sp)
    7f40:	dcc00317 	ldw	r19,12(sp)
    7f44:	dc800217 	ldw	r18,8(sp)
    7f48:	dc400117 	ldw	r17,4(sp)
    7f4c:	dc000017 	ldw	r16,0(sp)
    7f50:	dec00604 	addi	sp,sp,24
    7f54:	f800283a 	ret
    7f58:	113ffd44 	addi	r4,r2,-11
    7f5c:	8cc00f2e 	bgeu	r17,r19,7f9c <__b2d+0xe4>
    7f60:	81bffe04 	addi	r6,r16,-8
    7f64:	817ffe17 	ldw	r5,-8(r16)
    7f68:	20001326 	beq	r4,zero,7fb8 <__b2d+0x100>
    7f6c:	00c00ac4 	movi	r3,43
    7f70:	1885c83a 	sub	r2,r3,r2
    7f74:	2886d83a 	srl	r3,r5,r2
    7f78:	9124983a 	sll	r18,r18,r4
    7f7c:	90e4b03a 	or	r18,r18,r3
    7f80:	90cffc34 	orhi	r3,r18,16368
    7f84:	8980112e 	bgeu	r17,r6,7fcc <__b2d+0x114>
    7f88:	81bffd17 	ldw	r6,-12(r16)
    7f8c:	308cd83a 	srl	r6,r6,r2
    7f90:	2904983a 	sll	r2,r5,r4
    7f94:	1184b03a 	or	r2,r2,r6
    7f98:	003fe706 	br	7f38 <__b2d+0x80>
    7f9c:	20000526 	beq	r4,zero,7fb4 <__b2d+0xfc>
    7fa0:	9124983a 	sll	r18,r18,r4
    7fa4:	000d883a 	mov	r6,zero
    7fa8:	000b883a 	mov	r5,zero
    7fac:	90cffc34 	orhi	r3,r18,16368
    7fb0:	003ff706 	br	7f90 <__b2d+0xd8>
    7fb4:	000b883a 	mov	r5,zero
    7fb8:	90cffc34 	orhi	r3,r18,16368
    7fbc:	2805883a 	mov	r2,r5
    7fc0:	003fdd06 	br	7f38 <__b2d+0x80>
    7fc4:	000b883a 	mov	r5,zero
    7fc8:	003fd806 	br	7f2c <__b2d+0x74>
    7fcc:	000d883a 	mov	r6,zero
    7fd0:	003fef06 	br	7f90 <__b2d+0xd8>

00007fd4 <__d2b>:
    7fd4:	defff704 	addi	sp,sp,-36
    7fd8:	dc000215 	stw	r16,8(sp)
    7fdc:	3021883a 	mov	r16,r6
    7fe0:	dc400315 	stw	r17,12(sp)
    7fe4:	8022907a 	slli	r17,r16,1
    7fe8:	dd400715 	stw	r21,28(sp)
    7fec:	282b883a 	mov	r21,r5
    7ff0:	01400044 	movi	r5,1
    7ff4:	dd000615 	stw	r20,24(sp)
    7ff8:	dcc00515 	stw	r19,20(sp)
    7ffc:	dc800415 	stw	r18,16(sp)
    8000:	dfc00815 	stw	ra,32(sp)
    8004:	3829883a 	mov	r20,r7
    8008:	dc800917 	ldw	r18,36(sp)
    800c:	8822d57a 	srli	r17,r17,21
    8010:	00072d00 	call	72d0 <_Balloc>
    8014:	1027883a 	mov	r19,r2
    8018:	00800434 	movhi	r2,16
    801c:	10bfffc4 	addi	r2,r2,-1
    8020:	808c703a 	and	r6,r16,r2
    8024:	88000126 	beq	r17,zero,802c <__d2b+0x58>
    8028:	31800434 	orhi	r6,r6,16
    802c:	d9800015 	stw	r6,0(sp)
    8030:	a8001f26 	beq	r21,zero,80b0 <__d2b+0xdc>
    8034:	d9000104 	addi	r4,sp,4
    8038:	dd400115 	stw	r21,4(sp)
    803c:	00076540 	call	7654 <__lo0bits>
    8040:	d8c00017 	ldw	r3,0(sp)
    8044:	1000291e 	bne	r2,zero,80ec <__d2b+0x118>
    8048:	d9000117 	ldw	r4,4(sp)
    804c:	99000515 	stw	r4,20(r19)
    8050:	1820c03a 	cmpne	r16,r3,zero
    8054:	84000044 	addi	r16,r16,1
    8058:	98c00615 	stw	r3,24(r19)
    805c:	9c000415 	stw	r16,16(r19)
    8060:	88001b1e 	bne	r17,zero,80d0 <__d2b+0xfc>
    8064:	800690ba 	slli	r3,r16,2
    8068:	10bef384 	addi	r2,r2,-1074
    806c:	a0800015 	stw	r2,0(r20)
    8070:	98c5883a 	add	r2,r19,r3
    8074:	11000417 	ldw	r4,16(r2)
    8078:	8020917a 	slli	r16,r16,5
    807c:	00075ec0 	call	75ec <__hi0bits>
    8080:	8085c83a 	sub	r2,r16,r2
    8084:	90800015 	stw	r2,0(r18)
    8088:	9805883a 	mov	r2,r19
    808c:	dfc00817 	ldw	ra,32(sp)
    8090:	dd400717 	ldw	r21,28(sp)
    8094:	dd000617 	ldw	r20,24(sp)
    8098:	dcc00517 	ldw	r19,20(sp)
    809c:	dc800417 	ldw	r18,16(sp)
    80a0:	dc400317 	ldw	r17,12(sp)
    80a4:	dc000217 	ldw	r16,8(sp)
    80a8:	dec00904 	addi	sp,sp,36
    80ac:	f800283a 	ret
    80b0:	d809883a 	mov	r4,sp
    80b4:	00076540 	call	7654 <__lo0bits>
    80b8:	d8c00017 	ldw	r3,0(sp)
    80bc:	04000044 	movi	r16,1
    80c0:	9c000415 	stw	r16,16(r19)
    80c4:	98c00515 	stw	r3,20(r19)
    80c8:	10800804 	addi	r2,r2,32
    80cc:	883fe526 	beq	r17,zero,8064 <__d2b+0x90>
    80d0:	8c7ef344 	addi	r17,r17,-1075
    80d4:	88a3883a 	add	r17,r17,r2
    80d8:	00c00d44 	movi	r3,53
    80dc:	a4400015 	stw	r17,0(r20)
    80e0:	1885c83a 	sub	r2,r3,r2
    80e4:	90800015 	stw	r2,0(r18)
    80e8:	003fe706 	br	8088 <__d2b+0xb4>
    80ec:	01000804 	movi	r4,32
    80f0:	2089c83a 	sub	r4,r4,r2
    80f4:	1908983a 	sll	r4,r3,r4
    80f8:	d9400117 	ldw	r5,4(sp)
    80fc:	1886d83a 	srl	r3,r3,r2
    8100:	2148b03a 	or	r4,r4,r5
    8104:	99000515 	stw	r4,20(r19)
    8108:	d8c00015 	stw	r3,0(sp)
    810c:	003fd006 	br	8050 <__d2b+0x7c>

00008110 <__ratio>:
    8110:	defff904 	addi	sp,sp,-28
    8114:	dc400315 	stw	r17,12(sp)
    8118:	2823883a 	mov	r17,r5
    811c:	d9400104 	addi	r5,sp,4
    8120:	dfc00615 	stw	ra,24(sp)
    8124:	dcc00515 	stw	r19,20(sp)
    8128:	dc800415 	stw	r18,16(sp)
    812c:	2027883a 	mov	r19,r4
    8130:	dc000215 	stw	r16,8(sp)
    8134:	0007eb80 	call	7eb8 <__b2d>
    8138:	8809883a 	mov	r4,r17
    813c:	d80b883a 	mov	r5,sp
    8140:	1025883a 	mov	r18,r2
    8144:	1821883a 	mov	r16,r3
    8148:	0007eb80 	call	7eb8 <__b2d>
    814c:	8a400417 	ldw	r9,16(r17)
    8150:	9a000417 	ldw	r8,16(r19)
    8154:	100d883a 	mov	r6,r2
    8158:	d8800017 	ldw	r2,0(sp)
    815c:	4251c83a 	sub	r8,r8,r9
    8160:	4012917a 	slli	r9,r8,5
    8164:	da000117 	ldw	r8,4(sp)
    8168:	4091c83a 	sub	r8,r8,r2
    816c:	4251883a 	add	r8,r8,r9
    8170:	02000d0e 	bge	zero,r8,81a8 <__ratio+0x98>
    8174:	4010953a 	slli	r8,r8,20
    8178:	4421883a 	add	r16,r8,r16
    817c:	9009883a 	mov	r4,r18
    8180:	800b883a 	mov	r5,r16
    8184:	180f883a 	mov	r7,r3
    8188:	000bf500 	call	bf50 <__divdf3>
    818c:	dfc00617 	ldw	ra,24(sp)
    8190:	dcc00517 	ldw	r19,20(sp)
    8194:	dc800417 	ldw	r18,16(sp)
    8198:	dc400317 	ldw	r17,12(sp)
    819c:	dc000217 	ldw	r16,8(sp)
    81a0:	dec00704 	addi	sp,sp,28
    81a4:	f800283a 	ret
    81a8:	4010953a 	slli	r8,r8,20
    81ac:	1a07c83a 	sub	r3,r3,r8
    81b0:	003ff206 	br	817c <__ratio+0x6c>

000081b4 <_mprec_log10>:
    81b4:	defffe04 	addi	sp,sp,-8
    81b8:	dc000015 	stw	r16,0(sp)
    81bc:	dfc00115 	stw	ra,4(sp)
    81c0:	008005c4 	movi	r2,23
    81c4:	2021883a 	mov	r16,r4
    81c8:	11000d0e 	bge	r2,r4,8200 <_mprec_log10+0x4c>
    81cc:	0005883a 	mov	r2,zero
    81d0:	00cffc34 	movhi	r3,16368
    81d4:	843fffc4 	addi	r16,r16,-1
    81d8:	1009883a 	mov	r4,r2
    81dc:	180b883a 	mov	r5,r3
    81e0:	000d883a 	mov	r6,zero
    81e4:	01d00934 	movhi	r7,16420
    81e8:	000cb140 	call	cb14 <__muldf3>
    81ec:	803ff91e 	bne	r16,zero,81d4 <_mprec_log10+0x20>
    81f0:	dfc00117 	ldw	ra,4(sp)
    81f4:	dc000017 	ldw	r16,0(sp)
    81f8:	dec00204 	addi	sp,sp,8
    81fc:	f800283a 	ret
    8200:	202090fa 	slli	r16,r4,3
    8204:	00800074 	movhi	r2,1
    8208:	10893d04 	addi	r2,r2,9460
    820c:	1421883a 	add	r16,r2,r16
    8210:	80800017 	ldw	r2,0(r16)
    8214:	80c00117 	ldw	r3,4(r16)
    8218:	dfc00117 	ldw	ra,4(sp)
    821c:	dc000017 	ldw	r16,0(sp)
    8220:	dec00204 	addi	sp,sp,8
    8224:	f800283a 	ret

00008228 <__copybits>:
    8228:	297fffc4 	addi	r5,r5,-1
    822c:	280fd17a 	srai	r7,r5,5
    8230:	30c00417 	ldw	r3,16(r6)
    8234:	30800504 	addi	r2,r6,20
    8238:	39c00044 	addi	r7,r7,1
    823c:	18c7883a 	add	r3,r3,r3
    8240:	39cf883a 	add	r7,r7,r7
    8244:	18c7883a 	add	r3,r3,r3
    8248:	39cf883a 	add	r7,r7,r7
    824c:	10c7883a 	add	r3,r2,r3
    8250:	21cf883a 	add	r7,r4,r7
    8254:	10c00d2e 	bgeu	r2,r3,828c <__copybits+0x64>
    8258:	200b883a 	mov	r5,r4
    825c:	12000017 	ldw	r8,0(r2)
    8260:	29400104 	addi	r5,r5,4
    8264:	10800104 	addi	r2,r2,4
    8268:	2a3fff15 	stw	r8,-4(r5)
    826c:	10fffb36 	bltu	r2,r3,825c <__copybits+0x34>
    8270:	1985c83a 	sub	r2,r3,r6
    8274:	10bffac4 	addi	r2,r2,-21
    8278:	1004d0ba 	srli	r2,r2,2
    827c:	10800044 	addi	r2,r2,1
    8280:	1085883a 	add	r2,r2,r2
    8284:	1085883a 	add	r2,r2,r2
    8288:	2089883a 	add	r4,r4,r2
    828c:	21c0032e 	bgeu	r4,r7,829c <__copybits+0x74>
    8290:	20000015 	stw	zero,0(r4)
    8294:	21000104 	addi	r4,r4,4
    8298:	21fffd36 	bltu	r4,r7,8290 <__copybits+0x68>
    829c:	f800283a 	ret

000082a0 <__any_on>:
    82a0:	20c00417 	ldw	r3,16(r4)
    82a4:	2805d17a 	srai	r2,r5,5
    82a8:	21000504 	addi	r4,r4,20
    82ac:	18800d0e 	bge	r3,r2,82e4 <__any_on+0x44>
    82b0:	18c7883a 	add	r3,r3,r3
    82b4:	18c7883a 	add	r3,r3,r3
    82b8:	20c7883a 	add	r3,r4,r3
    82bc:	20c0192e 	bgeu	r4,r3,8324 <__any_on+0x84>
    82c0:	18bfff17 	ldw	r2,-4(r3)
    82c4:	18ffff04 	addi	r3,r3,-4
    82c8:	1000041e 	bne	r2,zero,82dc <__any_on+0x3c>
    82cc:	20c0142e 	bgeu	r4,r3,8320 <__any_on+0x80>
    82d0:	18ffff04 	addi	r3,r3,-4
    82d4:	19400017 	ldw	r5,0(r3)
    82d8:	283ffc26 	beq	r5,zero,82cc <__any_on+0x2c>
    82dc:	00800044 	movi	r2,1
    82e0:	f800283a 	ret
    82e4:	10c00a0e 	bge	r2,r3,8310 <__any_on+0x70>
    82e8:	1085883a 	add	r2,r2,r2
    82ec:	1085883a 	add	r2,r2,r2
    82f0:	294007cc 	andi	r5,r5,31
    82f4:	2087883a 	add	r3,r4,r2
    82f8:	283ff026 	beq	r5,zero,82bc <__any_on+0x1c>
    82fc:	19800017 	ldw	r6,0(r3)
    8300:	3144d83a 	srl	r2,r6,r5
    8304:	114a983a 	sll	r5,r2,r5
    8308:	29bff41e 	bne	r5,r6,82dc <__any_on+0x3c>
    830c:	003feb06 	br	82bc <__any_on+0x1c>
    8310:	1085883a 	add	r2,r2,r2
    8314:	1085883a 	add	r2,r2,r2
    8318:	2087883a 	add	r3,r4,r2
    831c:	003fe706 	br	82bc <__any_on+0x1c>
    8320:	f800283a 	ret
    8324:	0005883a 	mov	r2,zero
    8328:	f800283a 	ret

0000832c <_realloc_r>:
    832c:	defff604 	addi	sp,sp,-40
    8330:	dd000415 	stw	r20,16(sp)
    8334:	dc400115 	stw	r17,4(sp)
    8338:	dfc00915 	stw	ra,36(sp)
    833c:	df000815 	stw	fp,32(sp)
    8340:	ddc00715 	stw	r23,28(sp)
    8344:	dd800615 	stw	r22,24(sp)
    8348:	dd400515 	stw	r21,20(sp)
    834c:	dcc00315 	stw	r19,12(sp)
    8350:	dc800215 	stw	r18,8(sp)
    8354:	dc000015 	stw	r16,0(sp)
    8358:	2829883a 	mov	r20,r5
    835c:	3023883a 	mov	r17,r6
    8360:	2800ad26 	beq	r5,zero,8618 <_realloc_r+0x2ec>
    8364:	2025883a 	mov	r18,r4
    8368:	000e3480 	call	e348 <__malloc_lock>
    836c:	a0ffff17 	ldw	r3,-4(r20)
    8370:	043fff04 	movi	r16,-4
    8374:	890002c4 	addi	r4,r17,11
    8378:	01c00584 	movi	r7,22
    837c:	a57ffe04 	addi	r21,r20,-8
    8380:	1c20703a 	and	r16,r3,r16
    8384:	39001d2e 	bgeu	r7,r4,83fc <_realloc_r+0xd0>
    8388:	05bffe04 	movi	r22,-8
    838c:	25ac703a 	and	r22,r4,r22
    8390:	b00f883a 	mov	r7,r22
    8394:	b0006516 	blt	r22,zero,852c <_realloc_r+0x200>
    8398:	b4406436 	bltu	r22,r17,852c <_realloc_r+0x200>
    839c:	81c01a0e 	bge	r16,r7,8408 <_realloc_r+0xdc>
    83a0:	07000074 	movhi	fp,1
    83a4:	e70ace04 	addi	fp,fp,11064
    83a8:	e1400217 	ldw	r5,8(fp)
    83ac:	ac11883a 	add	r8,r21,r16
    83b0:	2a006226 	beq	r5,r8,853c <_realloc_r+0x210>
    83b4:	41800117 	ldw	r6,4(r8)
    83b8:	027fff84 	movi	r9,-2
    83bc:	3252703a 	and	r9,r6,r9
    83c0:	4253883a 	add	r9,r8,r9
    83c4:	49000117 	ldw	r4,4(r9)
    83c8:	2100004c 	andi	r4,r4,1
    83cc:	2000281e 	bne	r4,zero,8470 <_realloc_r+0x144>
    83d0:	00bfff04 	movi	r2,-4
    83d4:	3084703a 	and	r2,r6,r2
    83d8:	1409883a 	add	r4,r2,r16
    83dc:	21c05e16 	blt	r4,r7,8558 <_realloc_r+0x22c>
    83e0:	40800317 	ldw	r2,12(r8)
    83e4:	41400217 	ldw	r5,8(r8)
    83e8:	a023883a 	mov	r17,r20
    83ec:	2021883a 	mov	r16,r4
    83f0:	28800315 	stw	r2,12(r5)
    83f4:	11400215 	stw	r5,8(r2)
    83f8:	00000406 	br	840c <_realloc_r+0xe0>
    83fc:	01c00404 	movi	r7,16
    8400:	382d883a 	mov	r22,r7
    8404:	003fe406 	br	8398 <_realloc_r+0x6c>
    8408:	a023883a 	mov	r17,r20
    840c:	858fc83a 	sub	r7,r16,r22
    8410:	008003c4 	movi	r2,15
    8414:	18c0004c 	andi	r3,r3,1
    8418:	11c07236 	bltu	r2,r7,85e4 <_realloc_r+0x2b8>
    841c:	1c06b03a 	or	r3,r3,r16
    8420:	a8c00115 	stw	r3,4(r21)
    8424:	ac21883a 	add	r16,r21,r16
    8428:	80800117 	ldw	r2,4(r16)
    842c:	10800054 	ori	r2,r2,1
    8430:	80800115 	stw	r2,4(r16)
    8434:	9009883a 	mov	r4,r18
    8438:	000e3680 	call	e368 <__malloc_unlock>
    843c:	8805883a 	mov	r2,r17
    8440:	dfc00917 	ldw	ra,36(sp)
    8444:	df000817 	ldw	fp,32(sp)
    8448:	ddc00717 	ldw	r23,28(sp)
    844c:	dd800617 	ldw	r22,24(sp)
    8450:	dd400517 	ldw	r21,20(sp)
    8454:	dd000417 	ldw	r20,16(sp)
    8458:	dcc00317 	ldw	r19,12(sp)
    845c:	dc800217 	ldw	r18,8(sp)
    8460:	dc400117 	ldw	r17,4(sp)
    8464:	dc000017 	ldw	r16,0(sp)
    8468:	dec00a04 	addi	sp,sp,40
    846c:	f800283a 	ret
    8470:	18c0004c 	andi	r3,r3,1
    8474:	1800081e 	bne	r3,zero,8498 <_realloc_r+0x16c>
    8478:	a4fffe17 	ldw	r19,-8(r20)
    847c:	00bfff04 	movi	r2,-4
    8480:	ace7c83a 	sub	r19,r21,r19
    8484:	98c00117 	ldw	r3,4(r19)
    8488:	1886703a 	and	r3,r3,r2
    848c:	98000226 	beq	r19,zero,8498 <_realloc_r+0x16c>
    8490:	1c2f883a 	add	r23,r3,r16
    8494:	b9c06d0e 	bge	r23,r7,864c <_realloc_r+0x320>
    8498:	880b883a 	mov	r5,r17
    849c:	9009883a 	mov	r4,r18
    84a0:	00066880 	call	6688 <_malloc_r>
    84a4:	1023883a 	mov	r17,r2
    84a8:	1000ef26 	beq	r2,zero,8868 <_realloc_r+0x53c>
    84ac:	a0ffff17 	ldw	r3,-4(r20)
    84b0:	113ffe04 	addi	r4,r2,-8
    84b4:	00bfff84 	movi	r2,-2
    84b8:	1884703a 	and	r2,r3,r2
    84bc:	a885883a 	add	r2,r21,r2
    84c0:	2080bf26 	beq	r4,r2,87c0 <_realloc_r+0x494>
    84c4:	81bfff04 	addi	r6,r16,-4
    84c8:	00800904 	movi	r2,36
    84cc:	11808936 	bltu	r2,r6,86f4 <_realloc_r+0x3c8>
    84d0:	00c004c4 	movi	r3,19
    84d4:	19806c2e 	bgeu	r3,r6,8688 <_realloc_r+0x35c>
    84d8:	a0c00017 	ldw	r3,0(r20)
    84dc:	88c00015 	stw	r3,0(r17)
    84e0:	a0c00117 	ldw	r3,4(r20)
    84e4:	88c00115 	stw	r3,4(r17)
    84e8:	00c006c4 	movi	r3,27
    84ec:	1980ac36 	bltu	r3,r6,87a0 <_realloc_r+0x474>
    84f0:	88800204 	addi	r2,r17,8
    84f4:	a0c00204 	addi	r3,r20,8
    84f8:	19000017 	ldw	r4,0(r3)
    84fc:	11000015 	stw	r4,0(r2)
    8500:	19000117 	ldw	r4,4(r3)
    8504:	11000115 	stw	r4,4(r2)
    8508:	18c00217 	ldw	r3,8(r3)
    850c:	10c00215 	stw	r3,8(r2)
    8510:	a00b883a 	mov	r5,r20
    8514:	9009883a 	mov	r4,r18
    8518:	0005aac0 	call	5aac <_free_r>
    851c:	9009883a 	mov	r4,r18
    8520:	000e3680 	call	e368 <__malloc_unlock>
    8524:	8805883a 	mov	r2,r17
    8528:	003fc506 	br	8440 <_realloc_r+0x114>
    852c:	00800304 	movi	r2,12
    8530:	90800015 	stw	r2,0(r18)
    8534:	0005883a 	mov	r2,zero
    8538:	003fc106 	br	8440 <_realloc_r+0x114>
    853c:	29800117 	ldw	r6,4(r5)
    8540:	00bfff04 	movi	r2,-4
    8544:	b1000404 	addi	r4,r22,16
    8548:	3084703a 	and	r2,r6,r2
    854c:	140d883a 	add	r6,r2,r16
    8550:	31005b0e 	bge	r6,r4,86c0 <_realloc_r+0x394>
    8554:	2811883a 	mov	r8,r5
    8558:	18c0004c 	andi	r3,r3,1
    855c:	183fce1e 	bne	r3,zero,8498 <_realloc_r+0x16c>
    8560:	a4fffe17 	ldw	r19,-8(r20)
    8564:	00ffff04 	movi	r3,-4
    8568:	ace7c83a 	sub	r19,r21,r19
    856c:	99000117 	ldw	r4,4(r19)
    8570:	20c6703a 	and	r3,r4,r3
    8574:	403fc526 	beq	r8,zero,848c <_realloc_r+0x160>
    8578:	1c2f883a 	add	r23,r3,r16
    857c:	b8af883a 	add	r23,r23,r2
    8580:	41406026 	beq	r8,r5,8704 <_realloc_r+0x3d8>
    8584:	b9ffc116 	blt	r23,r7,848c <_realloc_r+0x160>
    8588:	40c00217 	ldw	r3,8(r8)
    858c:	40800317 	ldw	r2,12(r8)
    8590:	81bfff04 	addi	r6,r16,-4
    8594:	01000904 	movi	r4,36
    8598:	18800315 	stw	r2,12(r3)
    859c:	10c00215 	stw	r3,8(r2)
    85a0:	99400217 	ldw	r5,8(r19)
    85a4:	98c00317 	ldw	r3,12(r19)
    85a8:	9c400204 	addi	r17,r19,8
    85ac:	28c00315 	stw	r3,12(r5)
    85b0:	19400215 	stw	r5,8(r3)
    85b4:	21802d36 	bltu	r4,r6,866c <_realloc_r+0x340>
    85b8:	008004c4 	movi	r2,19
    85bc:	1180352e 	bgeu	r2,r6,8694 <_realloc_r+0x368>
    85c0:	a0800017 	ldw	r2,0(r20)
    85c4:	98800215 	stw	r2,8(r19)
    85c8:	a0800117 	ldw	r2,4(r20)
    85cc:	98800315 	stw	r2,12(r19)
    85d0:	008006c4 	movi	r2,27
    85d4:	11808036 	bltu	r2,r6,87d8 <_realloc_r+0x4ac>
    85d8:	98c00404 	addi	r3,r19,16
    85dc:	a5000204 	addi	r20,r20,8
    85e0:	00002d06 	br	8698 <_realloc_r+0x36c>
    85e4:	1d86b03a 	or	r3,r3,r22
    85e8:	ad8b883a 	add	r5,r21,r22
    85ec:	a8c00115 	stw	r3,4(r21)
    85f0:	38800054 	ori	r2,r7,1
    85f4:	28800115 	stw	r2,4(r5)
    85f8:	29cf883a 	add	r7,r5,r7
    85fc:	38800117 	ldw	r2,4(r7)
    8600:	9009883a 	mov	r4,r18
    8604:	29400204 	addi	r5,r5,8
    8608:	10800054 	ori	r2,r2,1
    860c:	38800115 	stw	r2,4(r7)
    8610:	0005aac0 	call	5aac <_free_r>
    8614:	003f8706 	br	8434 <_realloc_r+0x108>
    8618:	300b883a 	mov	r5,r6
    861c:	dfc00917 	ldw	ra,36(sp)
    8620:	df000817 	ldw	fp,32(sp)
    8624:	ddc00717 	ldw	r23,28(sp)
    8628:	dd800617 	ldw	r22,24(sp)
    862c:	dd400517 	ldw	r21,20(sp)
    8630:	dd000417 	ldw	r20,16(sp)
    8634:	dcc00317 	ldw	r19,12(sp)
    8638:	dc800217 	ldw	r18,8(sp)
    863c:	dc400117 	ldw	r17,4(sp)
    8640:	dc000017 	ldw	r16,0(sp)
    8644:	dec00a04 	addi	sp,sp,40
    8648:	00066881 	jmpi	6688 <_malloc_r>
    864c:	98800317 	ldw	r2,12(r19)
    8650:	98c00217 	ldw	r3,8(r19)
    8654:	81bfff04 	addi	r6,r16,-4
    8658:	01000904 	movi	r4,36
    865c:	18800315 	stw	r2,12(r3)
    8660:	10c00215 	stw	r3,8(r2)
    8664:	9c400204 	addi	r17,r19,8
    8668:	21bfd32e 	bgeu	r4,r6,85b8 <_realloc_r+0x28c>
    866c:	8809883a 	mov	r4,r17
    8670:	a00b883a 	mov	r5,r20
    8674:	00070500 	call	7050 <memmove>
    8678:	98c00117 	ldw	r3,4(r19)
    867c:	b821883a 	mov	r16,r23
    8680:	982b883a 	mov	r21,r19
    8684:	003f6106 	br	840c <_realloc_r+0xe0>
    8688:	8805883a 	mov	r2,r17
    868c:	a007883a 	mov	r3,r20
    8690:	003f9906 	br	84f8 <_realloc_r+0x1cc>
    8694:	8807883a 	mov	r3,r17
    8698:	a0800017 	ldw	r2,0(r20)
    869c:	b821883a 	mov	r16,r23
    86a0:	982b883a 	mov	r21,r19
    86a4:	18800015 	stw	r2,0(r3)
    86a8:	a0800117 	ldw	r2,4(r20)
    86ac:	18800115 	stw	r2,4(r3)
    86b0:	a0800217 	ldw	r2,8(r20)
    86b4:	18800215 	stw	r2,8(r3)
    86b8:	98c00117 	ldw	r3,4(r19)
    86bc:	003f5306 	br	840c <_realloc_r+0xe0>
    86c0:	adab883a 	add	r21,r21,r22
    86c4:	3585c83a 	sub	r2,r6,r22
    86c8:	e5400215 	stw	r21,8(fp)
    86cc:	10800054 	ori	r2,r2,1
    86d0:	a8800115 	stw	r2,4(r21)
    86d4:	a0bfff17 	ldw	r2,-4(r20)
    86d8:	9009883a 	mov	r4,r18
    86dc:	1080004c 	andi	r2,r2,1
    86e0:	b0acb03a 	or	r22,r22,r2
    86e4:	a5bfff15 	stw	r22,-4(r20)
    86e8:	000e3680 	call	e368 <__malloc_unlock>
    86ec:	a005883a 	mov	r2,r20
    86f0:	003f5306 	br	8440 <_realloc_r+0x114>
    86f4:	8809883a 	mov	r4,r17
    86f8:	a00b883a 	mov	r5,r20
    86fc:	00070500 	call	7050 <memmove>
    8700:	003f8306 	br	8510 <_realloc_r+0x1e4>
    8704:	b0800404 	addi	r2,r22,16
    8708:	b8bf6016 	blt	r23,r2,848c <_realloc_r+0x160>
    870c:	98800317 	ldw	r2,12(r19)
    8710:	98c00217 	ldw	r3,8(r19)
    8714:	81bfff04 	addi	r6,r16,-4
    8718:	01000904 	movi	r4,36
    871c:	18800315 	stw	r2,12(r3)
    8720:	10c00215 	stw	r3,8(r2)
    8724:	9c400204 	addi	r17,r19,8
    8728:	21804336 	bltu	r4,r6,8838 <_realloc_r+0x50c>
    872c:	008004c4 	movi	r2,19
    8730:	11803f2e 	bgeu	r2,r6,8830 <_realloc_r+0x504>
    8734:	a0800017 	ldw	r2,0(r20)
    8738:	98800215 	stw	r2,8(r19)
    873c:	a0800117 	ldw	r2,4(r20)
    8740:	98800315 	stw	r2,12(r19)
    8744:	008006c4 	movi	r2,27
    8748:	11803f36 	bltu	r2,r6,8848 <_realloc_r+0x51c>
    874c:	98800404 	addi	r2,r19,16
    8750:	a5000204 	addi	r20,r20,8
    8754:	a0c00017 	ldw	r3,0(r20)
    8758:	10c00015 	stw	r3,0(r2)
    875c:	a0c00117 	ldw	r3,4(r20)
    8760:	10c00115 	stw	r3,4(r2)
    8764:	a0c00217 	ldw	r3,8(r20)
    8768:	10c00215 	stw	r3,8(r2)
    876c:	9d87883a 	add	r3,r19,r22
    8770:	bd85c83a 	sub	r2,r23,r22
    8774:	e0c00215 	stw	r3,8(fp)
    8778:	10800054 	ori	r2,r2,1
    877c:	18800115 	stw	r2,4(r3)
    8780:	98800117 	ldw	r2,4(r19)
    8784:	9009883a 	mov	r4,r18
    8788:	1080004c 	andi	r2,r2,1
    878c:	b0acb03a 	or	r22,r22,r2
    8790:	9d800115 	stw	r22,4(r19)
    8794:	000e3680 	call	e368 <__malloc_unlock>
    8798:	8805883a 	mov	r2,r17
    879c:	003f2806 	br	8440 <_realloc_r+0x114>
    87a0:	a0c00217 	ldw	r3,8(r20)
    87a4:	88c00215 	stw	r3,8(r17)
    87a8:	a0c00317 	ldw	r3,12(r20)
    87ac:	88c00315 	stw	r3,12(r17)
    87b0:	30801126 	beq	r6,r2,87f8 <_realloc_r+0x4cc>
    87b4:	88800404 	addi	r2,r17,16
    87b8:	a0c00404 	addi	r3,r20,16
    87bc:	003f4e06 	br	84f8 <_realloc_r+0x1cc>
    87c0:	893fff17 	ldw	r4,-4(r17)
    87c4:	00bfff04 	movi	r2,-4
    87c8:	a023883a 	mov	r17,r20
    87cc:	2084703a 	and	r2,r4,r2
    87d0:	80a1883a 	add	r16,r16,r2
    87d4:	003f0d06 	br	840c <_realloc_r+0xe0>
    87d8:	a0800217 	ldw	r2,8(r20)
    87dc:	98800415 	stw	r2,16(r19)
    87e0:	a0800317 	ldw	r2,12(r20)
    87e4:	98800515 	stw	r2,20(r19)
    87e8:	31000a26 	beq	r6,r4,8814 <_realloc_r+0x4e8>
    87ec:	98c00604 	addi	r3,r19,24
    87f0:	a5000404 	addi	r20,r20,16
    87f4:	003fa806 	br	8698 <_realloc_r+0x36c>
    87f8:	a1000417 	ldw	r4,16(r20)
    87fc:	88800604 	addi	r2,r17,24
    8800:	a0c00604 	addi	r3,r20,24
    8804:	89000415 	stw	r4,16(r17)
    8808:	a1000517 	ldw	r4,20(r20)
    880c:	89000515 	stw	r4,20(r17)
    8810:	003f3906 	br	84f8 <_realloc_r+0x1cc>
    8814:	a0800417 	ldw	r2,16(r20)
    8818:	a5000604 	addi	r20,r20,24
    881c:	98c00804 	addi	r3,r19,32
    8820:	98800615 	stw	r2,24(r19)
    8824:	a0bfff17 	ldw	r2,-4(r20)
    8828:	98800715 	stw	r2,28(r19)
    882c:	003f9a06 	br	8698 <_realloc_r+0x36c>
    8830:	8805883a 	mov	r2,r17
    8834:	003fc706 	br	8754 <_realloc_r+0x428>
    8838:	8809883a 	mov	r4,r17
    883c:	a00b883a 	mov	r5,r20
    8840:	00070500 	call	7050 <memmove>
    8844:	003fc906 	br	876c <_realloc_r+0x440>
    8848:	a0800217 	ldw	r2,8(r20)
    884c:	98800415 	stw	r2,16(r19)
    8850:	a0800317 	ldw	r2,12(r20)
    8854:	98800515 	stw	r2,20(r19)
    8858:	31000726 	beq	r6,r4,8878 <_realloc_r+0x54c>
    885c:	98800604 	addi	r2,r19,24
    8860:	a5000404 	addi	r20,r20,16
    8864:	003fbb06 	br	8754 <_realloc_r+0x428>
    8868:	9009883a 	mov	r4,r18
    886c:	000e3680 	call	e368 <__malloc_unlock>
    8870:	0005883a 	mov	r2,zero
    8874:	003ef206 	br	8440 <_realloc_r+0x114>
    8878:	a0c00417 	ldw	r3,16(r20)
    887c:	a5000604 	addi	r20,r20,24
    8880:	98800804 	addi	r2,r19,32
    8884:	98c00615 	stw	r3,24(r19)
    8888:	a0ffff17 	ldw	r3,-4(r20)
    888c:	98c00715 	stw	r3,28(r19)
    8890:	003fb006 	br	8754 <_realloc_r+0x428>

00008894 <__fpclassifyd>:
    8894:	00a00034 	movhi	r2,32768
    8898:	10bfffc4 	addi	r2,r2,-1
    889c:	2884703a 	and	r2,r5,r2
    88a0:	10000726 	beq	r2,zero,88c0 <__fpclassifyd+0x2c>
    88a4:	00fffc34 	movhi	r3,65520
    88a8:	019ff834 	movhi	r6,32736
    88ac:	28c7883a 	add	r3,r5,r3
    88b0:	31bfffc4 	addi	r6,r6,-1
    88b4:	30c00536 	bltu	r6,r3,88cc <__fpclassifyd+0x38>
    88b8:	00800104 	movi	r2,4
    88bc:	f800283a 	ret
    88c0:	2000021e 	bne	r4,zero,88cc <__fpclassifyd+0x38>
    88c4:	00800084 	movi	r2,2
    88c8:	f800283a 	ret
    88cc:	00dffc34 	movhi	r3,32752
    88d0:	019ff834 	movhi	r6,32736
    88d4:	28cb883a 	add	r5,r5,r3
    88d8:	31bfffc4 	addi	r6,r6,-1
    88dc:	317ff62e 	bgeu	r6,r5,88b8 <__fpclassifyd+0x24>
    88e0:	01400434 	movhi	r5,16
    88e4:	297fffc4 	addi	r5,r5,-1
    88e8:	28800236 	bltu	r5,r2,88f4 <__fpclassifyd+0x60>
    88ec:	008000c4 	movi	r2,3
    88f0:	f800283a 	ret
    88f4:	10c00226 	beq	r2,r3,8900 <__fpclassifyd+0x6c>
    88f8:	0005883a 	mov	r2,zero
    88fc:	f800283a 	ret
    8900:	2005003a 	cmpeq	r2,r4,zero
    8904:	f800283a 	ret

00008908 <_sbrk_r>:
    8908:	defffd04 	addi	sp,sp,-12
    890c:	dc000015 	stw	r16,0(sp)
    8910:	04000074 	movhi	r16,1
    8914:	dc400115 	stw	r17,4(sp)
    8918:	84119204 	addi	r16,r16,17992
    891c:	2023883a 	mov	r17,r4
    8920:	2809883a 	mov	r4,r5
    8924:	dfc00215 	stw	ra,8(sp)
    8928:	80000015 	stw	zero,0(r16)
    892c:	000e55c0 	call	e55c <sbrk>
    8930:	00ffffc4 	movi	r3,-1
    8934:	10c00526 	beq	r2,r3,894c <_sbrk_r+0x44>
    8938:	dfc00217 	ldw	ra,8(sp)
    893c:	dc400117 	ldw	r17,4(sp)
    8940:	dc000017 	ldw	r16,0(sp)
    8944:	dec00304 	addi	sp,sp,12
    8948:	f800283a 	ret
    894c:	80c00017 	ldw	r3,0(r16)
    8950:	183ff926 	beq	r3,zero,8938 <_sbrk_r+0x30>
    8954:	88c00015 	stw	r3,0(r17)
    8958:	003ff706 	br	8938 <_sbrk_r+0x30>

0000895c <__sread>:
    895c:	defffe04 	addi	sp,sp,-8
    8960:	dc000015 	stw	r16,0(sp)
    8964:	2821883a 	mov	r16,r5
    8968:	2940038f 	ldh	r5,14(r5)
    896c:	dfc00115 	stw	ra,4(sp)
    8970:	000a5940 	call	a594 <_read_r>
    8974:	10000716 	blt	r2,zero,8994 <__sread+0x38>
    8978:	80c01417 	ldw	r3,80(r16)
    897c:	1887883a 	add	r3,r3,r2
    8980:	80c01415 	stw	r3,80(r16)
    8984:	dfc00117 	ldw	ra,4(sp)
    8988:	dc000017 	ldw	r16,0(sp)
    898c:	dec00204 	addi	sp,sp,8
    8990:	f800283a 	ret
    8994:	80c0030b 	ldhu	r3,12(r16)
    8998:	18fbffcc 	andi	r3,r3,61439
    899c:	80c0030d 	sth	r3,12(r16)
    89a0:	dfc00117 	ldw	ra,4(sp)
    89a4:	dc000017 	ldw	r16,0(sp)
    89a8:	dec00204 	addi	sp,sp,8
    89ac:	f800283a 	ret

000089b0 <__seofread>:
    89b0:	0005883a 	mov	r2,zero
    89b4:	f800283a 	ret

000089b8 <__swrite>:
    89b8:	2880030b 	ldhu	r2,12(r5)
    89bc:	defffb04 	addi	sp,sp,-20
    89c0:	dcc00315 	stw	r19,12(sp)
    89c4:	dc800215 	stw	r18,8(sp)
    89c8:	dc400115 	stw	r17,4(sp)
    89cc:	dc000015 	stw	r16,0(sp)
    89d0:	dfc00415 	stw	ra,16(sp)
    89d4:	10c0400c 	andi	r3,r2,256
    89d8:	2821883a 	mov	r16,r5
    89dc:	2027883a 	mov	r19,r4
    89e0:	3025883a 	mov	r18,r6
    89e4:	3823883a 	mov	r17,r7
    89e8:	18000526 	beq	r3,zero,8a00 <__swrite+0x48>
    89ec:	2940038f 	ldh	r5,14(r5)
    89f0:	000d883a 	mov	r6,zero
    89f4:	01c00084 	movi	r7,2
    89f8:	000a5380 	call	a538 <_lseek_r>
    89fc:	8080030b 	ldhu	r2,12(r16)
    8a00:	8140038f 	ldh	r5,14(r16)
    8a04:	10bbffcc 	andi	r2,r2,61439
    8a08:	9809883a 	mov	r4,r19
    8a0c:	900d883a 	mov	r6,r18
    8a10:	880f883a 	mov	r7,r17
    8a14:	8080030d 	sth	r2,12(r16)
    8a18:	dfc00417 	ldw	ra,16(sp)
    8a1c:	dcc00317 	ldw	r19,12(sp)
    8a20:	dc800217 	ldw	r18,8(sp)
    8a24:	dc400117 	ldw	r17,4(sp)
    8a28:	dc000017 	ldw	r16,0(sp)
    8a2c:	dec00504 	addi	sp,sp,20
    8a30:	000a0201 	jmpi	a020 <_write_r>

00008a34 <__sseek>:
    8a34:	defffe04 	addi	sp,sp,-8
    8a38:	dc000015 	stw	r16,0(sp)
    8a3c:	2821883a 	mov	r16,r5
    8a40:	2940038f 	ldh	r5,14(r5)
    8a44:	dfc00115 	stw	ra,4(sp)
    8a48:	000a5380 	call	a538 <_lseek_r>
    8a4c:	00ffffc4 	movi	r3,-1
    8a50:	10c00826 	beq	r2,r3,8a74 <__sseek+0x40>
    8a54:	80c0030b 	ldhu	r3,12(r16)
    8a58:	80801415 	stw	r2,80(r16)
    8a5c:	18c40014 	ori	r3,r3,4096
    8a60:	80c0030d 	sth	r3,12(r16)
    8a64:	dfc00117 	ldw	ra,4(sp)
    8a68:	dc000017 	ldw	r16,0(sp)
    8a6c:	dec00204 	addi	sp,sp,8
    8a70:	f800283a 	ret
    8a74:	80c0030b 	ldhu	r3,12(r16)
    8a78:	18fbffcc 	andi	r3,r3,61439
    8a7c:	80c0030d 	sth	r3,12(r16)
    8a80:	dfc00117 	ldw	ra,4(sp)
    8a84:	dc000017 	ldw	r16,0(sp)
    8a88:	dec00204 	addi	sp,sp,8
    8a8c:	f800283a 	ret

00008a90 <__sclose>:
    8a90:	2940038f 	ldh	r5,14(r5)
    8a94:	000a07c1 	jmpi	a07c <_close_r>

00008a98 <strcmp>:
    8a98:	2144b03a 	or	r2,r4,r5
    8a9c:	108000cc 	andi	r2,r2,3
    8aa0:	1000171e 	bne	r2,zero,8b00 <strcmp+0x68>
    8aa4:	20800017 	ldw	r2,0(r4)
    8aa8:	28c00017 	ldw	r3,0(r5)
    8aac:	10c0141e 	bne	r2,r3,8b00 <strcmp+0x68>
    8ab0:	027fbff4 	movhi	r9,65279
    8ab4:	4a7fbfc4 	addi	r9,r9,-257
    8ab8:	0086303a 	nor	r3,zero,r2
    8abc:	02202074 	movhi	r8,32897
    8ac0:	1245883a 	add	r2,r2,r9
    8ac4:	42202004 	addi	r8,r8,-32640
    8ac8:	10c4703a 	and	r2,r2,r3
    8acc:	1204703a 	and	r2,r2,r8
    8ad0:	10000226 	beq	r2,zero,8adc <strcmp+0x44>
    8ad4:	00001706 	br	8b34 <strcmp+0x9c>
    8ad8:	1000161e 	bne	r2,zero,8b34 <strcmp+0x9c>
    8adc:	21000104 	addi	r4,r4,4
    8ae0:	20c00017 	ldw	r3,0(r4)
    8ae4:	29400104 	addi	r5,r5,4
    8ae8:	29800017 	ldw	r6,0(r5)
    8aec:	1a4f883a 	add	r7,r3,r9
    8af0:	00c4303a 	nor	r2,zero,r3
    8af4:	3884703a 	and	r2,r7,r2
    8af8:	1204703a 	and	r2,r2,r8
    8afc:	19bff626 	beq	r3,r6,8ad8 <strcmp+0x40>
    8b00:	20800007 	ldb	r2,0(r4)
    8b04:	1000051e 	bne	r2,zero,8b1c <strcmp+0x84>
    8b08:	00000606 	br	8b24 <strcmp+0x8c>
    8b0c:	21000044 	addi	r4,r4,1
    8b10:	20800007 	ldb	r2,0(r4)
    8b14:	29400044 	addi	r5,r5,1
    8b18:	10000226 	beq	r2,zero,8b24 <strcmp+0x8c>
    8b1c:	28c00007 	ldb	r3,0(r5)
    8b20:	10fffa26 	beq	r2,r3,8b0c <strcmp+0x74>
    8b24:	20800003 	ldbu	r2,0(r4)
    8b28:	28c00003 	ldbu	r3,0(r5)
    8b2c:	10c5c83a 	sub	r2,r2,r3
    8b30:	f800283a 	ret
    8b34:	0005883a 	mov	r2,zero
    8b38:	f800283a 	ret

00008b3c <__sprint_r.part.0>:
    8b3c:	28801917 	ldw	r2,100(r5)
    8b40:	defff604 	addi	sp,sp,-40
    8b44:	dd400515 	stw	r21,20(sp)
    8b48:	dcc00315 	stw	r19,12(sp)
    8b4c:	dfc00915 	stw	ra,36(sp)
    8b50:	df000815 	stw	fp,32(sp)
    8b54:	ddc00715 	stw	r23,28(sp)
    8b58:	dd800615 	stw	r22,24(sp)
    8b5c:	dd000415 	stw	r20,16(sp)
    8b60:	dc800215 	stw	r18,8(sp)
    8b64:	dc400115 	stw	r17,4(sp)
    8b68:	dc000015 	stw	r16,0(sp)
    8b6c:	1088000c 	andi	r2,r2,8192
    8b70:	2827883a 	mov	r19,r5
    8b74:	302b883a 	mov	r21,r6
    8b78:	10002d26 	beq	r2,zero,8c30 <__sprint_r.part.0+0xf4>
    8b7c:	30800217 	ldw	r2,8(r6)
    8b80:	35800017 	ldw	r22,0(r6)
    8b84:	10002826 	beq	r2,zero,8c28 <__sprint_r.part.0+0xec>
    8b88:	2029883a 	mov	r20,r4
    8b8c:	b5c00104 	addi	r23,r22,4
    8b90:	04bfffc4 	movi	r18,-1
    8b94:	bc400017 	ldw	r17,0(r23)
    8b98:	b4000017 	ldw	r16,0(r22)
    8b9c:	0039883a 	mov	fp,zero
    8ba0:	8822d0ba 	srli	r17,r17,2
    8ba4:	04400316 	blt	zero,r17,8bb4 <__sprint_r.part.0+0x78>
    8ba8:	00001806 	br	8c0c <__sprint_r.part.0+0xd0>
    8bac:	84000104 	addi	r16,r16,4
    8bb0:	8f001526 	beq	r17,fp,8c08 <__sprint_r.part.0+0xcc>
    8bb4:	81400017 	ldw	r5,0(r16)
    8bb8:	a009883a 	mov	r4,r20
    8bbc:	980d883a 	mov	r6,r19
    8bc0:	000a2ac0 	call	a2ac <_fputwc_r>
    8bc4:	e7000044 	addi	fp,fp,1
    8bc8:	14bff81e 	bne	r2,r18,8bac <__sprint_r.part.0+0x70>
    8bcc:	9005883a 	mov	r2,r18
    8bd0:	a8000215 	stw	zero,8(r21)
    8bd4:	a8000115 	stw	zero,4(r21)
    8bd8:	dfc00917 	ldw	ra,36(sp)
    8bdc:	df000817 	ldw	fp,32(sp)
    8be0:	ddc00717 	ldw	r23,28(sp)
    8be4:	dd800617 	ldw	r22,24(sp)
    8be8:	dd400517 	ldw	r21,20(sp)
    8bec:	dd000417 	ldw	r20,16(sp)
    8bf0:	dcc00317 	ldw	r19,12(sp)
    8bf4:	dc800217 	ldw	r18,8(sp)
    8bf8:	dc400117 	ldw	r17,4(sp)
    8bfc:	dc000017 	ldw	r16,0(sp)
    8c00:	dec00a04 	addi	sp,sp,40
    8c04:	f800283a 	ret
    8c08:	a8800217 	ldw	r2,8(r21)
    8c0c:	8c63883a 	add	r17,r17,r17
    8c10:	8c63883a 	add	r17,r17,r17
    8c14:	1445c83a 	sub	r2,r2,r17
    8c18:	a8800215 	stw	r2,8(r21)
    8c1c:	b5800204 	addi	r22,r22,8
    8c20:	bdc00204 	addi	r23,r23,8
    8c24:	103fdb1e 	bne	r2,zero,8b94 <__sprint_r.part.0+0x58>
    8c28:	0005883a 	mov	r2,zero
    8c2c:	003fe806 	br	8bd0 <__sprint_r.part.0+0x94>
    8c30:	0005d9c0 	call	5d9c <__sfvwrite_r>
    8c34:	003fe606 	br	8bd0 <__sprint_r.part.0+0x94>

00008c38 <__sprint_r>:
    8c38:	30c00217 	ldw	r3,8(r6)
    8c3c:	18000126 	beq	r3,zero,8c44 <__sprint_r+0xc>
    8c40:	0008b3c1 	jmpi	8b3c <__sprint_r.part.0>
    8c44:	30000115 	stw	zero,4(r6)
    8c48:	0005883a 	mov	r2,zero
    8c4c:	f800283a 	ret

00008c50 <___vfiprintf_internal_r>:
    8c50:	deffca04 	addi	sp,sp,-216
    8c54:	dcc02f15 	stw	r19,188(sp)
    8c58:	dfc03515 	stw	ra,212(sp)
    8c5c:	df003415 	stw	fp,208(sp)
    8c60:	ddc03315 	stw	r23,204(sp)
    8c64:	dd803215 	stw	r22,200(sp)
    8c68:	dd403115 	stw	r21,196(sp)
    8c6c:	dd003015 	stw	r20,192(sp)
    8c70:	dc802e15 	stw	r18,184(sp)
    8c74:	dc402d15 	stw	r17,180(sp)
    8c78:	dc002c15 	stw	r16,176(sp)
    8c7c:	d9002215 	stw	r4,136(sp)
    8c80:	d9402115 	stw	r5,132(sp)
    8c84:	d9c02315 	stw	r7,140(sp)
    8c88:	3027883a 	mov	r19,r6
    8c8c:	20000226 	beq	r4,zero,8c98 <___vfiprintf_internal_r+0x48>
    8c90:	20800e17 	ldw	r2,56(r4)
    8c94:	10018d26 	beq	r2,zero,92cc <___vfiprintf_internal_r+0x67c>
    8c98:	d8c02117 	ldw	r3,132(sp)
    8c9c:	1880030b 	ldhu	r2,12(r3)
    8ca0:	10c8000c 	andi	r3,r2,8192
    8ca4:	1800071e 	bne	r3,zero,8cc4 <___vfiprintf_internal_r+0x74>
    8ca8:	d9402117 	ldw	r5,132(sp)
    8cac:	00f7ffc4 	movi	r3,-8193
    8cb0:	10880014 	ori	r2,r2,8192
    8cb4:	29001917 	ldw	r4,100(r5)
    8cb8:	2880030d 	sth	r2,12(r5)
    8cbc:	20c6703a 	and	r3,r4,r3
    8cc0:	28c01915 	stw	r3,100(r5)
    8cc4:	10c0020c 	andi	r3,r2,8
    8cc8:	18016126 	beq	r3,zero,9250 <___vfiprintf_internal_r+0x600>
    8ccc:	d9002117 	ldw	r4,132(sp)
    8cd0:	20c00417 	ldw	r3,16(r4)
    8cd4:	18015e26 	beq	r3,zero,9250 <___vfiprintf_internal_r+0x600>
    8cd8:	1080068c 	andi	r2,r2,26
    8cdc:	00c00284 	movi	r3,10
    8ce0:	10c16426 	beq	r2,r3,9274 <___vfiprintf_internal_r+0x624>
    8ce4:	d9001a04 	addi	r4,sp,104
    8ce8:	d94019c4 	addi	r5,sp,103
    8cec:	04400074 	movhi	r17,1
    8cf0:	2145c83a 	sub	r2,r4,r5
    8cf4:	8c496f04 	addi	r17,r17,9660
    8cf8:	d9001e15 	stw	r4,120(sp)
    8cfc:	d9401f15 	stw	r5,124(sp)
    8d00:	dec01a15 	stw	sp,104(sp)
    8d04:	d8001c15 	stw	zero,112(sp)
    8d08:	d8001b15 	stw	zero,108(sp)
    8d0c:	d8002715 	stw	zero,156(sp)
    8d10:	d8002515 	stw	zero,148(sp)
    8d14:	d8802815 	stw	r2,160(sp)
    8d18:	d829883a 	mov	r20,sp
    8d1c:	982d883a 	mov	r22,r19
    8d20:	b0800007 	ldb	r2,0(r22)
    8d24:	10038126 	beq	r2,zero,9b2c <___vfiprintf_internal_r+0xedc>
    8d28:	01000944 	movi	r4,37
    8d2c:	11037f26 	beq	r2,r4,9b2c <___vfiprintf_internal_r+0xedc>
    8d30:	b005883a 	mov	r2,r22
    8d34:	00000106 	br	8d3c <___vfiprintf_internal_r+0xec>
    8d38:	19000326 	beq	r3,r4,8d48 <___vfiprintf_internal_r+0xf8>
    8d3c:	10800044 	addi	r2,r2,1
    8d40:	10c00007 	ldb	r3,0(r2)
    8d44:	183ffc1e 	bne	r3,zero,8d38 <___vfiprintf_internal_r+0xe8>
    8d48:	15a1c83a 	sub	r16,r2,r22
    8d4c:	102b883a 	mov	r21,r2
    8d50:	80001026 	beq	r16,zero,8d94 <___vfiprintf_internal_r+0x144>
    8d54:	d8c01c17 	ldw	r3,112(sp)
    8d58:	d8801b17 	ldw	r2,108(sp)
    8d5c:	a5800015 	stw	r22,0(r20)
    8d60:	80c7883a 	add	r3,r16,r3
    8d64:	10800044 	addi	r2,r2,1
    8d68:	a4000115 	stw	r16,4(r20)
    8d6c:	d8c01c15 	stw	r3,112(sp)
    8d70:	d8801b15 	stw	r2,108(sp)
    8d74:	010001c4 	movi	r4,7
    8d78:	2080730e 	bge	r4,r2,8f48 <___vfiprintf_internal_r+0x2f8>
    8d7c:	1803781e 	bne	r3,zero,9b60 <___vfiprintf_internal_r+0xf10>
    8d80:	d8c02517 	ldw	r3,148(sp)
    8d84:	d8001b15 	stw	zero,108(sp)
    8d88:	d829883a 	mov	r20,sp
    8d8c:	1c07883a 	add	r3,r3,r16
    8d90:	d8c02515 	stw	r3,148(sp)
    8d94:	a8800007 	ldb	r2,0(r21)
    8d98:	1002a126 	beq	r2,zero,9820 <___vfiprintf_internal_r+0xbd0>
    8d9c:	a8800044 	addi	r2,r21,1
    8da0:	a9800047 	ldb	r6,1(r21)
    8da4:	d8001d85 	stb	zero,118(sp)
    8da8:	d8002005 	stb	zero,128(sp)
    8dac:	043fffc4 	movi	r16,-1
    8db0:	d8002415 	stw	zero,144(sp)
    8db4:	0025883a 	mov	r18,zero
    8db8:	05401604 	movi	r21,88
    8dbc:	04c00244 	movi	r19,9
    8dc0:	15800044 	addi	r22,r2,1
    8dc4:	30bff804 	addi	r2,r6,-32
    8dc8:	a8823d36 	bltu	r21,r2,96c0 <___vfiprintf_internal_r+0xa70>
    8dcc:	100490ba 	slli	r2,r2,2
    8dd0:	01000074 	movhi	r4,1
    8dd4:	21237904 	addi	r4,r4,-29212
    8dd8:	1105883a 	add	r2,r2,r4
    8ddc:	10800017 	ldw	r2,0(r2)
    8de0:	1000683a 	jmp	r2
    8de4:	00009500 	call	950 <test_motor+0x194>
    8de8:	000096c0 	call	96c <test_motor+0x1b0>
    8dec:	000096c0 	call	96c <test_motor+0x1b0>
    8df0:	0000951c 	xori	zero,zero,596
    8df4:	000096c0 	call	96c <test_motor+0x1b0>
    8df8:	000096c0 	call	96c <test_motor+0x1b0>
    8dfc:	000096c0 	call	96c <test_motor+0x1b0>
    8e00:	000096c0 	call	96c <test_motor+0x1b0>
    8e04:	000096c0 	call	96c <test_motor+0x1b0>
    8e08:	000096c0 	call	96c <test_motor+0x1b0>
    8e0c:	0000952c 	andhi	zero,zero,596
    8e10:	00009554 	movui	zero,597
    8e14:	000096c0 	call	96c <test_motor+0x1b0>
    8e18:	000092d4 	movui	zero,587
    8e1c:	00009458 	cmpnei	zero,zero,593
    8e20:	000096c0 	call	96c <test_motor+0x1b0>
    8e24:	000093c8 	cmpgei	zero,zero,591
    8e28:	000093d8 	cmpnei	zero,zero,591
    8e2c:	000093d8 	cmpnei	zero,zero,591
    8e30:	000093d8 	cmpnei	zero,zero,591
    8e34:	000093d8 	cmpnei	zero,zero,591
    8e38:	000093d8 	cmpnei	zero,zero,591
    8e3c:	000093d8 	cmpnei	zero,zero,591
    8e40:	000093d8 	cmpnei	zero,zero,591
    8e44:	000093d8 	cmpnei	zero,zero,591
    8e48:	000093d8 	cmpnei	zero,zero,591
    8e4c:	000096c0 	call	96c <test_motor+0x1b0>
    8e50:	000096c0 	call	96c <test_motor+0x1b0>
    8e54:	000096c0 	call	96c <test_motor+0x1b0>
    8e58:	000096c0 	call	96c <test_motor+0x1b0>
    8e5c:	000096c0 	call	96c <test_motor+0x1b0>
    8e60:	000096c0 	call	96c <test_motor+0x1b0>
    8e64:	000096c0 	call	96c <test_motor+0x1b0>
    8e68:	000096c0 	call	96c <test_motor+0x1b0>
    8e6c:	000096c0 	call	96c <test_motor+0x1b0>
    8e70:	000096c0 	call	96c <test_motor+0x1b0>
    8e74:	00009410 	cmplti	zero,zero,592
    8e78:	000096c0 	call	96c <test_motor+0x1b0>
    8e7c:	000096c0 	call	96c <test_motor+0x1b0>
    8e80:	000096c0 	call	96c <test_motor+0x1b0>
    8e84:	000096c0 	call	96c <test_motor+0x1b0>
    8e88:	000096c0 	call	96c <test_motor+0x1b0>
    8e8c:	000096c0 	call	96c <test_motor+0x1b0>
    8e90:	000096c0 	call	96c <test_motor+0x1b0>
    8e94:	000096c0 	call	96c <test_motor+0x1b0>
    8e98:	000096c0 	call	96c <test_motor+0x1b0>
    8e9c:	000096c0 	call	96c <test_motor+0x1b0>
    8ea0:	00008f90 	cmplti	zero,zero,574
    8ea4:	000096c0 	call	96c <test_motor+0x1b0>
    8ea8:	000096c0 	call	96c <test_motor+0x1b0>
    8eac:	000096c0 	call	96c <test_motor+0x1b0>
    8eb0:	000096c0 	call	96c <test_motor+0x1b0>
    8eb4:	000096c0 	call	96c <test_motor+0x1b0>
    8eb8:	00008f5c 	xori	zero,zero,573
    8ebc:	000096c0 	call	96c <test_motor+0x1b0>
    8ec0:	000096c0 	call	96c <test_motor+0x1b0>
    8ec4:	00009344 	movi	zero,589
    8ec8:	000096c0 	call	96c <test_motor+0x1b0>
    8ecc:	000096c0 	call	96c <test_motor+0x1b0>
    8ed0:	000096c0 	call	96c <test_motor+0x1b0>
    8ed4:	000096c0 	call	96c <test_motor+0x1b0>
    8ed8:	000096c0 	call	96c <test_motor+0x1b0>
    8edc:	000096c0 	call	96c <test_motor+0x1b0>
    8ee0:	000096c0 	call	96c <test_motor+0x1b0>
    8ee4:	000096c0 	call	96c <test_motor+0x1b0>
    8ee8:	000096c0 	call	96c <test_motor+0x1b0>
    8eec:	000096c0 	call	96c <test_motor+0x1b0>
    8ef0:	0000939c 	xori	zero,zero,590
    8ef4:	00009568 	cmpgeui	zero,zero,597
    8ef8:	000096c0 	call	96c <test_motor+0x1b0>
    8efc:	000096c0 	call	96c <test_motor+0x1b0>
    8f00:	000096c0 	call	96c <test_motor+0x1b0>
    8f04:	00009624 	muli	zero,zero,600
    8f08:	00009568 	cmpgeui	zero,zero,597
    8f0c:	000096c0 	call	96c <test_motor+0x1b0>
    8f10:	000096c0 	call	96c <test_motor+0x1b0>
    8f14:	00009634 	movhi	zero,600
    8f18:	000096c0 	call	96c <test_motor+0x1b0>
    8f1c:	000094a8 	cmpgeui	zero,zero,594
    8f20:	00008f94 	movui	zero,574
    8f24:	0000964c 	andi	zero,zero,601
    8f28:	0000968c 	andi	zero,zero,602
    8f2c:	000096c0 	call	96c <test_motor+0x1b0>
    8f30:	000095a0 	cmpeqi	zero,zero,598
    8f34:	000096c0 	call	96c <test_motor+0x1b0>
    8f38:	00008f60 	cmpeqi	zero,zero,573
    8f3c:	000096c0 	call	96c <test_motor+0x1b0>
    8f40:	000096c0 	call	96c <test_motor+0x1b0>
    8f44:	000095e8 	cmpgeui	zero,zero,599
    8f48:	a5000204 	addi	r20,r20,8
    8f4c:	d8c02517 	ldw	r3,148(sp)
    8f50:	1c07883a 	add	r3,r3,r16
    8f54:	d8c02515 	stw	r3,148(sp)
    8f58:	003f8e06 	br	8d94 <___vfiprintf_internal_r+0x144>
    8f5c:	94800414 	ori	r18,r18,16
    8f60:	9080080c 	andi	r2,r18,32
    8f64:	1001cd1e 	bne	r2,zero,969c <___vfiprintf_internal_r+0xa4c>
    8f68:	9080040c 	andi	r2,r18,16
    8f6c:	10034e26 	beq	r2,zero,9ca8 <___vfiprintf_internal_r+0x1058>
    8f70:	d9002317 	ldw	r4,140(sp)
    8f74:	002f883a 	mov	r23,zero
    8f78:	00800044 	movi	r2,1
    8f7c:	24c00017 	ldw	r19,0(r4)
    8f80:	21000104 	addi	r4,r4,4
    8f84:	d9002315 	stw	r4,140(sp)
    8f88:	9807883a 	mov	r3,r19
    8f8c:	00000c06 	br	8fc0 <___vfiprintf_internal_r+0x370>
    8f90:	94800414 	ori	r18,r18,16
    8f94:	9080080c 	andi	r2,r18,32
    8f98:	1001501e 	bne	r2,zero,94dc <___vfiprintf_internal_r+0x88c>
    8f9c:	9080040c 	andi	r2,r18,16
    8fa0:	10033726 	beq	r2,zero,9c80 <___vfiprintf_internal_r+0x1030>
    8fa4:	d9002317 	ldw	r4,140(sp)
    8fa8:	002f883a 	mov	r23,zero
    8fac:	0005883a 	mov	r2,zero
    8fb0:	24c00017 	ldw	r19,0(r4)
    8fb4:	21000104 	addi	r4,r4,4
    8fb8:	d9002315 	stw	r4,140(sp)
    8fbc:	9807883a 	mov	r3,r19
    8fc0:	d8001d85 	stb	zero,118(sp)
    8fc4:	dc002015 	stw	r16,128(sp)
    8fc8:	0015883a 	mov	r10,zero
    8fcc:	80000216 	blt	r16,zero,8fd8 <___vfiprintf_internal_r+0x388>
    8fd0:	013fdfc4 	movi	r4,-129
    8fd4:	9124703a 	and	r18,r18,r4
    8fd8:	1801ec1e 	bne	r3,zero,978c <___vfiprintf_internal_r+0xb3c>
    8fdc:	8002b826 	beq	r16,zero,9ac0 <___vfiprintf_internal_r+0xe70>
    8fe0:	10803fcc 	andi	r2,r2,255
    8fe4:	00c00044 	movi	r3,1
    8fe8:	10c20726 	beq	r2,r3,9808 <___vfiprintf_internal_r+0xbb8>
    8fec:	00c00084 	movi	r3,2
    8ff0:	df001a04 	addi	fp,sp,104
    8ff4:	10c0bb1e 	bne	r2,r3,92e4 <___vfiprintf_internal_r+0x694>
    8ff8:	d9002717 	ldw	r4,156(sp)
    8ffc:	988003cc 	andi	r2,r19,15
    9000:	b806973a 	slli	r3,r23,28
    9004:	2085883a 	add	r2,r4,r2
    9008:	9826d13a 	srli	r19,r19,4
    900c:	10800003 	ldbu	r2,0(r2)
    9010:	b82ed13a 	srli	r23,r23,4
    9014:	e73fffc4 	addi	fp,fp,-1
    9018:	1ce6b03a 	or	r19,r3,r19
    901c:	e0800005 	stb	r2,0(fp)
    9020:	9dc4b03a 	or	r2,r19,r23
    9024:	103ff51e 	bne	r2,zero,8ffc <___vfiprintf_internal_r+0x3ac>
    9028:	d8c01e17 	ldw	r3,120(sp)
    902c:	1f07c83a 	sub	r3,r3,fp
    9030:	d8c02015 	stw	r3,128(sp)
    9034:	dd402017 	ldw	r21,128(sp)
    9038:	ac00010e 	bge	r21,r16,9040 <___vfiprintf_internal_r+0x3f0>
    903c:	802b883a 	mov	r21,r16
    9040:	52803fcc 	andi	r10,r10,255
    9044:	5280201c 	xori	r10,r10,128
    9048:	52bfe004 	addi	r10,r10,-128
    904c:	50000126 	beq	r10,zero,9054 <___vfiprintf_internal_r+0x404>
    9050:	ad400044 	addi	r21,r21,1
    9054:	91c0008c 	andi	r7,r18,2
    9058:	38000126 	beq	r7,zero,9060 <___vfiprintf_internal_r+0x410>
    905c:	ad400084 	addi	r21,r21,2
    9060:	95c0210c 	andi	r23,r18,132
    9064:	b801ad1e 	bne	r23,zero,971c <___vfiprintf_internal_r+0xacc>
    9068:	d9002417 	ldw	r4,144(sp)
    906c:	2567c83a 	sub	r19,r4,r21
    9070:	04c1aa0e 	bge	zero,r19,971c <___vfiprintf_internal_r+0xacc>
    9074:	00c00404 	movi	r3,16
    9078:	d8801c17 	ldw	r2,112(sp)
    907c:	1cc37f0e 	bge	r3,r19,9e7c <___vfiprintf_internal_r+0x122c>
    9080:	01000074 	movhi	r4,1
    9084:	21097304 	addi	r4,r4,9676
    9088:	dc002915 	stw	r16,164(sp)
    908c:	d9801b17 	ldw	r6,108(sp)
    9090:	9821883a 	mov	r16,r19
    9094:	d9002615 	stw	r4,152(sp)
    9098:	02c001c4 	movi	r11,7
    909c:	3827883a 	mov	r19,r7
    90a0:	00000506 	br	90b8 <___vfiprintf_internal_r+0x468>
    90a4:	31400084 	addi	r5,r6,2
    90a8:	a5000204 	addi	r20,r20,8
    90ac:	200d883a 	mov	r6,r4
    90b0:	843ffc04 	addi	r16,r16,-16
    90b4:	1c000f0e 	bge	r3,r16,90f4 <___vfiprintf_internal_r+0x4a4>
    90b8:	01400074 	movhi	r5,1
    90bc:	10800404 	addi	r2,r2,16
    90c0:	31000044 	addi	r4,r6,1
    90c4:	29497304 	addi	r5,r5,9676
    90c8:	a1400015 	stw	r5,0(r20)
    90cc:	a0c00115 	stw	r3,4(r20)
    90d0:	d8801c15 	stw	r2,112(sp)
    90d4:	d9001b15 	stw	r4,108(sp)
    90d8:	593ff20e 	bge	r11,r4,90a4 <___vfiprintf_internal_r+0x454>
    90dc:	1001811e 	bne	r2,zero,96e4 <___vfiprintf_internal_r+0xa94>
    90e0:	843ffc04 	addi	r16,r16,-16
    90e4:	000d883a 	mov	r6,zero
    90e8:	01400044 	movi	r5,1
    90ec:	d829883a 	mov	r20,sp
    90f0:	1c3ff116 	blt	r3,r16,90b8 <___vfiprintf_internal_r+0x468>
    90f4:	980f883a 	mov	r7,r19
    90f8:	8027883a 	mov	r19,r16
    90fc:	dc002917 	ldw	r16,164(sp)
    9100:	d8c02617 	ldw	r3,152(sp)
    9104:	9885883a 	add	r2,r19,r2
    9108:	a4c00115 	stw	r19,4(r20)
    910c:	a0c00015 	stw	r3,0(r20)
    9110:	d8801c15 	stw	r2,112(sp)
    9114:	d9401b15 	stw	r5,108(sp)
    9118:	00c001c4 	movi	r3,7
    911c:	19427416 	blt	r3,r5,9af0 <___vfiprintf_internal_r+0xea0>
    9120:	d8c01d87 	ldb	r3,118(sp)
    9124:	a5000204 	addi	r20,r20,8
    9128:	29000044 	addi	r4,r5,1
    912c:	1801801e 	bne	r3,zero,9730 <___vfiprintf_internal_r+0xae0>
    9130:	38000c26 	beq	r7,zero,9164 <___vfiprintf_internal_r+0x514>
    9134:	d8c01d04 	addi	r3,sp,116
    9138:	10800084 	addi	r2,r2,2
    913c:	a0c00015 	stw	r3,0(r20)
    9140:	00c00084 	movi	r3,2
    9144:	a0c00115 	stw	r3,4(r20)
    9148:	d8801c15 	stw	r2,112(sp)
    914c:	d9001b15 	stw	r4,108(sp)
    9150:	00c001c4 	movi	r3,7
    9154:	19025516 	blt	r3,r4,9aac <___vfiprintf_internal_r+0xe5c>
    9158:	200b883a 	mov	r5,r4
    915c:	a5000204 	addi	r20,r20,8
    9160:	21000044 	addi	r4,r4,1
    9164:	00c02004 	movi	r3,128
    9168:	b8c21326 	beq	r23,r3,99b8 <___vfiprintf_internal_r+0xd68>
    916c:	d8c02017 	ldw	r3,128(sp)
    9170:	80e1c83a 	sub	r16,r16,r3
    9174:	0400230e 	bge	zero,r16,9204 <___vfiprintf_internal_r+0x5b4>
    9178:	04c00404 	movi	r19,16
    917c:	9c03240e 	bge	r19,r16,9e10 <___vfiprintf_internal_r+0x11c0>
    9180:	00c00074 	movhi	r3,1
    9184:	18c96f04 	addi	r3,r3,9660
    9188:	d8c02615 	stw	r3,152(sp)
    918c:	05c001c4 	movi	r23,7
    9190:	00000506 	br	91a8 <___vfiprintf_internal_r+0x558>
    9194:	29000084 	addi	r4,r5,2
    9198:	a5000204 	addi	r20,r20,8
    919c:	180b883a 	mov	r5,r3
    91a0:	843ffc04 	addi	r16,r16,-16
    91a4:	9c000d0e 	bge	r19,r16,91dc <___vfiprintf_internal_r+0x58c>
    91a8:	10800404 	addi	r2,r2,16
    91ac:	28c00044 	addi	r3,r5,1
    91b0:	a4400015 	stw	r17,0(r20)
    91b4:	a4c00115 	stw	r19,4(r20)
    91b8:	d8801c15 	stw	r2,112(sp)
    91bc:	d8c01b15 	stw	r3,108(sp)
    91c0:	b8fff40e 	bge	r23,r3,9194 <___vfiprintf_internal_r+0x544>
    91c4:	1001671e 	bne	r2,zero,9764 <___vfiprintf_internal_r+0xb14>
    91c8:	843ffc04 	addi	r16,r16,-16
    91cc:	01000044 	movi	r4,1
    91d0:	000b883a 	mov	r5,zero
    91d4:	d829883a 	mov	r20,sp
    91d8:	9c3ff316 	blt	r19,r16,91a8 <___vfiprintf_internal_r+0x558>
    91dc:	d8c02617 	ldw	r3,152(sp)
    91e0:	1405883a 	add	r2,r2,r16
    91e4:	a4000115 	stw	r16,4(r20)
    91e8:	a0c00015 	stw	r3,0(r20)
    91ec:	d8801c15 	stw	r2,112(sp)
    91f0:	d9001b15 	stw	r4,108(sp)
    91f4:	00c001c4 	movi	r3,7
    91f8:	19019516 	blt	r3,r4,9850 <___vfiprintf_internal_r+0xc00>
    91fc:	a5000204 	addi	r20,r20,8
    9200:	21000044 	addi	r4,r4,1
    9204:	d8c02017 	ldw	r3,128(sp)
    9208:	a7000015 	stw	fp,0(r20)
    920c:	d9001b15 	stw	r4,108(sp)
    9210:	10c5883a 	add	r2,r2,r3
    9214:	a0c00115 	stw	r3,4(r20)
    9218:	d8801c15 	stw	r2,112(sp)
    921c:	00c001c4 	movi	r3,7
    9220:	1901930e 	bge	r3,r4,9870 <___vfiprintf_internal_r+0xc20>
    9224:	1002431e 	bne	r2,zero,9b34 <___vfiprintf_internal_r+0xee4>
    9228:	d8001b15 	stw	zero,108(sp)
    922c:	9480010c 	andi	r18,r18,4
    9230:	9002391e 	bne	r18,zero,9b18 <___vfiprintf_internal_r+0xec8>
    9234:	d8802417 	ldw	r2,144(sp)
    9238:	a880010e 	bge	r21,r2,9240 <___vfiprintf_internal_r+0x5f0>
    923c:	102b883a 	mov	r21,r2
    9240:	d8c02517 	ldw	r3,148(sp)
    9244:	1d47883a 	add	r3,r3,r21
    9248:	d8c02515 	stw	r3,148(sp)
    924c:	0001cd06 	br	9984 <___vfiprintf_internal_r+0xd34>
    9250:	d9002217 	ldw	r4,136(sp)
    9254:	d9402117 	ldw	r5,132(sp)
    9258:	00038a00 	call	38a0 <__swsetup_r>
    925c:	10000e1e 	bne	r2,zero,9298 <___vfiprintf_internal_r+0x648>
    9260:	d9402117 	ldw	r5,132(sp)
    9264:	00c00284 	movi	r3,10
    9268:	2880030b 	ldhu	r2,12(r5)
    926c:	1080068c 	andi	r2,r2,26
    9270:	10fe9c1e 	bne	r2,r3,8ce4 <___vfiprintf_internal_r+0x94>
    9274:	d8c02117 	ldw	r3,132(sp)
    9278:	1880038f 	ldh	r2,14(r3)
    927c:	103e9916 	blt	r2,zero,8ce4 <___vfiprintf_internal_r+0x94>
    9280:	d9002217 	ldw	r4,136(sp)
    9284:	d9c02317 	ldw	r7,140(sp)
    9288:	180b883a 	mov	r5,r3
    928c:	980d883a 	mov	r6,r19
    9290:	0009f640 	call	9f64 <__sbprintf>
    9294:	00000106 	br	929c <___vfiprintf_internal_r+0x64c>
    9298:	00bfffc4 	movi	r2,-1
    929c:	dfc03517 	ldw	ra,212(sp)
    92a0:	df003417 	ldw	fp,208(sp)
    92a4:	ddc03317 	ldw	r23,204(sp)
    92a8:	dd803217 	ldw	r22,200(sp)
    92ac:	dd403117 	ldw	r21,196(sp)
    92b0:	dd003017 	ldw	r20,192(sp)
    92b4:	dcc02f17 	ldw	r19,188(sp)
    92b8:	dc802e17 	ldw	r18,184(sp)
    92bc:	dc402d17 	ldw	r17,180(sp)
    92c0:	dc002c17 	ldw	r16,176(sp)
    92c4:	dec03604 	addi	sp,sp,216
    92c8:	f800283a 	ret
    92cc:	00059380 	call	5938 <__sinit>
    92d0:	003e7106 	br	8c98 <___vfiprintf_internal_r+0x48>
    92d4:	b005883a 	mov	r2,r22
    92d8:	94800114 	ori	r18,r18,4
    92dc:	b1800007 	ldb	r6,0(r22)
    92e0:	003eb706 	br	8dc0 <___vfiprintf_internal_r+0x170>
    92e4:	9806d0fa 	srli	r3,r19,3
    92e8:	b808977a 	slli	r4,r23,29
    92ec:	b82ed0fa 	srli	r23,r23,3
    92f0:	9cc001cc 	andi	r19,r19,7
    92f4:	98800c04 	addi	r2,r19,48
    92f8:	e73fffc4 	addi	fp,fp,-1
    92fc:	20e6b03a 	or	r19,r4,r3
    9300:	e0800005 	stb	r2,0(fp)
    9304:	9dc6b03a 	or	r3,r19,r23
    9308:	183ff61e 	bne	r3,zero,92e4 <___vfiprintf_internal_r+0x694>
    930c:	90c0004c 	andi	r3,r18,1
    9310:	e009883a 	mov	r4,fp
    9314:	183f4426 	beq	r3,zero,9028 <___vfiprintf_internal_r+0x3d8>
    9318:	10803fcc 	andi	r2,r2,255
    931c:	1080201c 	xori	r2,r2,128
    9320:	10bfe004 	addi	r2,r2,-128
    9324:	00c00c04 	movi	r3,48
    9328:	10ff3f26 	beq	r2,r3,9028 <___vfiprintf_internal_r+0x3d8>
    932c:	20ffffc5 	stb	r3,-1(r4)
    9330:	d8c01e17 	ldw	r3,120(sp)
    9334:	e73fffc4 	addi	fp,fp,-1
    9338:	1f07c83a 	sub	r3,r3,fp
    933c:	d8c02015 	stw	r3,128(sp)
    9340:	003f3c06 	br	9034 <___vfiprintf_internal_r+0x3e4>
    9344:	d8c02003 	ldbu	r3,128(sp)
    9348:	01000074 	movhi	r4,1
    934c:	21090904 	addi	r4,r4,9252
    9350:	d8c01d85 	stb	r3,118(sp)
    9354:	d9002715 	stw	r4,156(sp)
    9358:	9080080c 	andi	r2,r18,32
    935c:	1000a926 	beq	r2,zero,9604 <___vfiprintf_internal_r+0x9b4>
    9360:	d9002317 	ldw	r4,140(sp)
    9364:	24c00017 	ldw	r19,0(r4)
    9368:	25c00117 	ldw	r23,4(r4)
    936c:	21000204 	addi	r4,r4,8
    9370:	d9002315 	stw	r4,140(sp)
    9374:	9080004c 	andi	r2,r18,1
    9378:	1001f626 	beq	r2,zero,9b54 <___vfiprintf_internal_r+0xf04>
    937c:	9dc6b03a 	or	r3,r19,r23
    9380:	18023d26 	beq	r3,zero,9c78 <___vfiprintf_internal_r+0x1028>
    9384:	00800c04 	movi	r2,48
    9388:	d8801d05 	stb	r2,116(sp)
    938c:	d9801d45 	stb	r6,117(sp)
    9390:	94800094 	ori	r18,r18,2
    9394:	00800084 	movi	r2,2
    9398:	003f0906 	br	8fc0 <___vfiprintf_internal_r+0x370>
    939c:	d9002317 	ldw	r4,140(sp)
    93a0:	05400044 	movi	r21,1
    93a4:	d8001d85 	stb	zero,118(sp)
    93a8:	20800017 	ldw	r2,0(r4)
    93ac:	21000104 	addi	r4,r4,4
    93b0:	d9002315 	stw	r4,140(sp)
    93b4:	d8801005 	stb	r2,64(sp)
    93b8:	dd402015 	stw	r21,128(sp)
    93bc:	df001004 	addi	fp,sp,64
    93c0:	0021883a 	mov	r16,zero
    93c4:	003f2306 	br	9054 <___vfiprintf_internal_r+0x404>
    93c8:	94802014 	ori	r18,r18,128
    93cc:	b005883a 	mov	r2,r22
    93d0:	b1800007 	ldb	r6,0(r22)
    93d4:	003e7a06 	br	8dc0 <___vfiprintf_internal_r+0x170>
    93d8:	b039883a 	mov	fp,r22
    93dc:	d8002415 	stw	zero,144(sp)
    93e0:	35fff404 	addi	r23,r6,-48
    93e4:	0009883a 	mov	r4,zero
    93e8:	01400284 	movi	r5,10
    93ec:	0000eb00 	call	eb0 <__mulsi3>
    93f0:	e1800007 	ldb	r6,0(fp)
    93f4:	15c9883a 	add	r4,r2,r23
    93f8:	b5800044 	addi	r22,r22,1
    93fc:	35fff404 	addi	r23,r6,-48
    9400:	b039883a 	mov	fp,r22
    9404:	9dfff82e 	bgeu	r19,r23,93e8 <___vfiprintf_internal_r+0x798>
    9408:	d9002415 	stw	r4,144(sp)
    940c:	003e6d06 	br	8dc4 <___vfiprintf_internal_r+0x174>
    9410:	d8c02003 	ldbu	r3,128(sp)
    9414:	94800414 	ori	r18,r18,16
    9418:	9080080c 	andi	r2,r18,32
    941c:	d8c01d85 	stb	r3,118(sp)
    9420:	d8c02317 	ldw	r3,140(sp)
    9424:	10005526 	beq	r2,zero,957c <___vfiprintf_internal_r+0x92c>
    9428:	d9002317 	ldw	r4,140(sp)
    942c:	18800117 	ldw	r2,4(r3)
    9430:	1cc00017 	ldw	r19,0(r3)
    9434:	21000204 	addi	r4,r4,8
    9438:	d9002315 	stw	r4,140(sp)
    943c:	102f883a 	mov	r23,r2
    9440:	1001f716 	blt	r2,zero,9c20 <___vfiprintf_internal_r+0xfd0>
    9444:	da801d83 	ldbu	r10,118(sp)
    9448:	dc002015 	stw	r16,128(sp)
    944c:	00800044 	movi	r2,1
    9450:	9dc6b03a 	or	r3,r19,r23
    9454:	003edd06 	br	8fcc <___vfiprintf_internal_r+0x37c>
    9458:	b1800007 	ldb	r6,0(r22)
    945c:	01000a84 	movi	r4,42
    9460:	b0800044 	addi	r2,r22,1
    9464:	3102ae26 	beq	r6,r4,9f20 <___vfiprintf_internal_r+0x12d0>
    9468:	35fff404 	addi	r23,r6,-48
    946c:	102d883a 	mov	r22,r2
    9470:	0021883a 	mov	r16,zero
    9474:	9dfe5336 	bltu	r19,r23,8dc4 <___vfiprintf_internal_r+0x174>
    9478:	0009883a 	mov	r4,zero
    947c:	01400284 	movi	r5,10
    9480:	0000eb00 	call	eb0 <__mulsi3>
    9484:	b1800007 	ldb	r6,0(r22)
    9488:	b889883a 	add	r4,r23,r2
    948c:	b5800044 	addi	r22,r22,1
    9490:	35fff404 	addi	r23,r6,-48
    9494:	9dfff92e 	bgeu	r19,r23,947c <___vfiprintf_internal_r+0x82c>
    9498:	2021883a 	mov	r16,r4
    949c:	203e490e 	bge	r4,zero,8dc4 <___vfiprintf_internal_r+0x174>
    94a0:	043fffc4 	movi	r16,-1
    94a4:	003e4706 	br	8dc4 <___vfiprintf_internal_r+0x174>
    94a8:	d8c02003 	ldbu	r3,128(sp)
    94ac:	9080080c 	andi	r2,r18,32
    94b0:	d8c01d85 	stb	r3,118(sp)
    94b4:	10020e26 	beq	r2,zero,9cf0 <___vfiprintf_internal_r+0x10a0>
    94b8:	d9002317 	ldw	r4,140(sp)
    94bc:	d9402517 	ldw	r5,148(sp)
    94c0:	20800017 	ldw	r2,0(r4)
    94c4:	2807d7fa 	srai	r3,r5,31
    94c8:	21000104 	addi	r4,r4,4
    94cc:	d9002315 	stw	r4,140(sp)
    94d0:	11400015 	stw	r5,0(r2)
    94d4:	10c00115 	stw	r3,4(r2)
    94d8:	003e1106 	br	8d20 <___vfiprintf_internal_r+0xd0>
    94dc:	d8802317 	ldw	r2,140(sp)
    94e0:	d8c02317 	ldw	r3,140(sp)
    94e4:	14c00017 	ldw	r19,0(r2)
    94e8:	15c00117 	ldw	r23,4(r2)
    94ec:	18c00204 	addi	r3,r3,8
    94f0:	d8c02315 	stw	r3,140(sp)
    94f4:	0005883a 	mov	r2,zero
    94f8:	9dc6b03a 	or	r3,r19,r23
    94fc:	003eb006 	br	8fc0 <___vfiprintf_internal_r+0x370>
    9500:	d8802007 	ldb	r2,128(sp)
    9504:	1001d91e 	bne	r2,zero,9c6c <___vfiprintf_internal_r+0x101c>
    9508:	00c00804 	movi	r3,32
    950c:	d8c02005 	stb	r3,128(sp)
    9510:	b005883a 	mov	r2,r22
    9514:	b1800007 	ldb	r6,0(r22)
    9518:	003e2906 	br	8dc0 <___vfiprintf_internal_r+0x170>
    951c:	94800054 	ori	r18,r18,1
    9520:	b005883a 	mov	r2,r22
    9524:	b1800007 	ldb	r6,0(r22)
    9528:	003e2506 	br	8dc0 <___vfiprintf_internal_r+0x170>
    952c:	d9002317 	ldw	r4,140(sp)
    9530:	d9402317 	ldw	r5,140(sp)
    9534:	21000017 	ldw	r4,0(r4)
    9538:	28c00104 	addi	r3,r5,4
    953c:	d9002415 	stw	r4,144(sp)
    9540:	20023b16 	blt	r4,zero,9e30 <___vfiprintf_internal_r+0x11e0>
    9544:	d8c02315 	stw	r3,140(sp)
    9548:	b005883a 	mov	r2,r22
    954c:	b1800007 	ldb	r6,0(r22)
    9550:	003e1b06 	br	8dc0 <___vfiprintf_internal_r+0x170>
    9554:	00c00ac4 	movi	r3,43
    9558:	d8c02005 	stb	r3,128(sp)
    955c:	b005883a 	mov	r2,r22
    9560:	b1800007 	ldb	r6,0(r22)
    9564:	003e1606 	br	8dc0 <___vfiprintf_internal_r+0x170>
    9568:	d8c02003 	ldbu	r3,128(sp)
    956c:	9080080c 	andi	r2,r18,32
    9570:	d8c01d85 	stb	r3,118(sp)
    9574:	d8c02317 	ldw	r3,140(sp)
    9578:	103fab1e 	bne	r2,zero,9428 <___vfiprintf_internal_r+0x7d8>
    957c:	9080040c 	andi	r2,r18,16
    9580:	1001e626 	beq	r2,zero,9d1c <___vfiprintf_internal_r+0x10cc>
    9584:	1cc00017 	ldw	r19,0(r3)
    9588:	d9402317 	ldw	r5,140(sp)
    958c:	982fd7fa 	srai	r23,r19,31
    9590:	29400104 	addi	r5,r5,4
    9594:	d9402315 	stw	r5,140(sp)
    9598:	b805883a 	mov	r2,r23
    959c:	003fa806 	br	9440 <___vfiprintf_internal_r+0x7f0>
    95a0:	d9402317 	ldw	r5,140(sp)
    95a4:	d8001d85 	stb	zero,118(sp)
    95a8:	2f000017 	ldw	fp,0(r5)
    95ac:	2cc00104 	addi	r19,r5,4
    95b0:	e0023826 	beq	fp,zero,9e94 <___vfiprintf_internal_r+0x1244>
    95b4:	e009883a 	mov	r4,fp
    95b8:	80022316 	blt	r16,zero,9e48 <___vfiprintf_internal_r+0x11f8>
    95bc:	000b883a 	mov	r5,zero
    95c0:	800d883a 	mov	r6,r16
    95c4:	0006e300 	call	6e30 <memchr>
    95c8:	10024e26 	beq	r2,zero,9f04 <___vfiprintf_internal_r+0x12b4>
    95cc:	1705c83a 	sub	r2,r2,fp
    95d0:	d8802015 	stw	r2,128(sp)
    95d4:	8081e816 	blt	r16,r2,9d78 <___vfiprintf_internal_r+0x1128>
    95d8:	da801d83 	ldbu	r10,118(sp)
    95dc:	dcc02315 	stw	r19,140(sp)
    95e0:	0021883a 	mov	r16,zero
    95e4:	003e9306 	br	9034 <___vfiprintf_internal_r+0x3e4>
    95e8:	00c00074 	movhi	r3,1
    95ec:	18c90e04 	addi	r3,r3,9272
    95f0:	d8c02715 	stw	r3,156(sp)
    95f4:	d8c02003 	ldbu	r3,128(sp)
    95f8:	9080080c 	andi	r2,r18,32
    95fc:	d8c01d85 	stb	r3,118(sp)
    9600:	103f571e 	bne	r2,zero,9360 <___vfiprintf_internal_r+0x710>
    9604:	9080040c 	andi	r2,r18,16
    9608:	1001b126 	beq	r2,zero,9cd0 <___vfiprintf_internal_r+0x1080>
    960c:	d9402317 	ldw	r5,140(sp)
    9610:	002f883a 	mov	r23,zero
    9614:	2cc00017 	ldw	r19,0(r5)
    9618:	29400104 	addi	r5,r5,4
    961c:	d9402315 	stw	r5,140(sp)
    9620:	003f5406 	br	9374 <___vfiprintf_internal_r+0x724>
    9624:	94801014 	ori	r18,r18,64
    9628:	b005883a 	mov	r2,r22
    962c:	b1800007 	ldb	r6,0(r22)
    9630:	003de306 	br	8dc0 <___vfiprintf_internal_r+0x170>
    9634:	b1800007 	ldb	r6,0(r22)
    9638:	00c01b04 	movi	r3,108
    963c:	b005883a 	mov	r2,r22
    9640:	30c1f726 	beq	r6,r3,9e20 <___vfiprintf_internal_r+0x11d0>
    9644:	94800414 	ori	r18,r18,16
    9648:	003ddd06 	br	8dc0 <___vfiprintf_internal_r+0x170>
    964c:	d8c02317 	ldw	r3,140(sp)
    9650:	00800c04 	movi	r2,48
    9654:	01000074 	movhi	r4,1
    9658:	1cc00017 	ldw	r19,0(r3)
    965c:	d8801d05 	stb	r2,116(sp)
    9660:	18c00104 	addi	r3,r3,4
    9664:	00801e04 	movi	r2,120
    9668:	21090e04 	addi	r4,r4,9272
    966c:	d8801d45 	stb	r2,117(sp)
    9670:	d8c02315 	stw	r3,140(sp)
    9674:	002f883a 	mov	r23,zero
    9678:	94800094 	ori	r18,r18,2
    967c:	d9002715 	stw	r4,156(sp)
    9680:	00800084 	movi	r2,2
    9684:	9807883a 	mov	r3,r19
    9688:	003e4d06 	br	8fc0 <___vfiprintf_internal_r+0x370>
    968c:	94800814 	ori	r18,r18,32
    9690:	b005883a 	mov	r2,r22
    9694:	b1800007 	ldb	r6,0(r22)
    9698:	003dc906 	br	8dc0 <___vfiprintf_internal_r+0x170>
    969c:	d8802317 	ldw	r2,140(sp)
    96a0:	d8c02317 	ldw	r3,140(sp)
    96a4:	14c00017 	ldw	r19,0(r2)
    96a8:	15c00117 	ldw	r23,4(r2)
    96ac:	18c00204 	addi	r3,r3,8
    96b0:	d8c02315 	stw	r3,140(sp)
    96b4:	00800044 	movi	r2,1
    96b8:	9dc6b03a 	or	r3,r19,r23
    96bc:	003e4006 	br	8fc0 <___vfiprintf_internal_r+0x370>
    96c0:	d8c02003 	ldbu	r3,128(sp)
    96c4:	d8c01d85 	stb	r3,118(sp)
    96c8:	30005526 	beq	r6,zero,9820 <___vfiprintf_internal_r+0xbd0>
    96cc:	05400044 	movi	r21,1
    96d0:	d9801005 	stb	r6,64(sp)
    96d4:	d8001d85 	stb	zero,118(sp)
    96d8:	dd402015 	stw	r21,128(sp)
    96dc:	df001004 	addi	fp,sp,64
    96e0:	003f3706 	br	93c0 <___vfiprintf_internal_r+0x770>
    96e4:	d9002217 	ldw	r4,136(sp)
    96e8:	d9402117 	ldw	r5,132(sp)
    96ec:	d9801a04 	addi	r6,sp,104
    96f0:	d8c02a15 	stw	r3,168(sp)
    96f4:	dac02b15 	stw	r11,172(sp)
    96f8:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    96fc:	d8c02a17 	ldw	r3,168(sp)
    9700:	dac02b17 	ldw	r11,172(sp)
    9704:	10004c1e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9708:	d9801b17 	ldw	r6,108(sp)
    970c:	d8801c17 	ldw	r2,112(sp)
    9710:	d829883a 	mov	r20,sp
    9714:	31400044 	addi	r5,r6,1
    9718:	003e6506 	br	90b0 <___vfiprintf_internal_r+0x460>
    971c:	d9401b17 	ldw	r5,108(sp)
    9720:	d8801c17 	ldw	r2,112(sp)
    9724:	29000044 	addi	r4,r5,1
    9728:	d8c01d87 	ldb	r3,118(sp)
    972c:	183e8026 	beq	r3,zero,9130 <___vfiprintf_internal_r+0x4e0>
    9730:	00c00044 	movi	r3,1
    9734:	d9401d84 	addi	r5,sp,118
    9738:	10c5883a 	add	r2,r2,r3
    973c:	a1400015 	stw	r5,0(r20)
    9740:	a0c00115 	stw	r3,4(r20)
    9744:	d8801c15 	stw	r2,112(sp)
    9748:	d9001b15 	stw	r4,108(sp)
    974c:	014001c4 	movi	r5,7
    9750:	2900cd16 	blt	r5,r4,9a88 <___vfiprintf_internal_r+0xe38>
    9754:	200b883a 	mov	r5,r4
    9758:	a5000204 	addi	r20,r20,8
    975c:	21000044 	addi	r4,r4,1
    9760:	003e7306 	br	9130 <___vfiprintf_internal_r+0x4e0>
    9764:	d9002217 	ldw	r4,136(sp)
    9768:	d9402117 	ldw	r5,132(sp)
    976c:	d9801a04 	addi	r6,sp,104
    9770:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9774:	1000301e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9778:	d9401b17 	ldw	r5,108(sp)
    977c:	d8801c17 	ldw	r2,112(sp)
    9780:	d829883a 	mov	r20,sp
    9784:	29000044 	addi	r4,r5,1
    9788:	003e8506 	br	91a0 <___vfiprintf_internal_r+0x550>
    978c:	10803fcc 	andi	r2,r2,255
    9790:	00c00044 	movi	r3,1
    9794:	10fe151e 	bne	r2,r3,8fec <___vfiprintf_internal_r+0x39c>
    9798:	b800021e 	bne	r23,zero,97a4 <___vfiprintf_internal_r+0xb54>
    979c:	00800244 	movi	r2,9
    97a0:	14c0192e 	bgeu	r2,r19,9808 <___vfiprintf_internal_r+0xbb8>
    97a4:	dd401a04 	addi	r21,sp,104
    97a8:	5039883a 	mov	fp,r10
    97ac:	9809883a 	mov	r4,r19
    97b0:	b80b883a 	mov	r5,r23
    97b4:	01800284 	movi	r6,10
    97b8:	000f883a 	mov	r7,zero
    97bc:	000af6c0 	call	af6c <__umoddi3>
    97c0:	10800c04 	addi	r2,r2,48
    97c4:	ad7fffc4 	addi	r21,r21,-1
    97c8:	9809883a 	mov	r4,r19
    97cc:	b80b883a 	mov	r5,r23
    97d0:	01800284 	movi	r6,10
    97d4:	000f883a 	mov	r7,zero
    97d8:	a8800005 	stb	r2,0(r21)
    97dc:	000a92c0 	call	a92c <__udivdi3>
    97e0:	1027883a 	mov	r19,r2
    97e4:	10c4b03a 	or	r2,r2,r3
    97e8:	182f883a 	mov	r23,r3
    97ec:	103fef1e 	bne	r2,zero,97ac <___vfiprintf_internal_r+0xb5c>
    97f0:	d8c01e17 	ldw	r3,120(sp)
    97f4:	e015883a 	mov	r10,fp
    97f8:	a839883a 	mov	fp,r21
    97fc:	1d47c83a 	sub	r3,r3,r21
    9800:	d8c02015 	stw	r3,128(sp)
    9804:	003e0b06 	br	9034 <___vfiprintf_internal_r+0x3e4>
    9808:	d9002817 	ldw	r4,160(sp)
    980c:	9cc00c04 	addi	r19,r19,48
    9810:	dcc019c5 	stb	r19,103(sp)
    9814:	d9002015 	stw	r4,128(sp)
    9818:	df0019c4 	addi	fp,sp,103
    981c:	003e0506 	br	9034 <___vfiprintf_internal_r+0x3e4>
    9820:	d8801c17 	ldw	r2,112(sp)
    9824:	10000426 	beq	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9828:	d9002217 	ldw	r4,136(sp)
    982c:	d9402117 	ldw	r5,132(sp)
    9830:	d9801a04 	addi	r6,sp,104
    9834:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9838:	d8c02117 	ldw	r3,132(sp)
    983c:	1880030b 	ldhu	r2,12(r3)
    9840:	1080100c 	andi	r2,r2,64
    9844:	103e941e 	bne	r2,zero,9298 <___vfiprintf_internal_r+0x648>
    9848:	d8802517 	ldw	r2,148(sp)
    984c:	003e9306 	br	929c <___vfiprintf_internal_r+0x64c>
    9850:	1000e91e 	bne	r2,zero,9bf8 <___vfiprintf_internal_r+0xfa8>
    9854:	d8802017 	ldw	r2,128(sp)
    9858:	00c00044 	movi	r3,1
    985c:	df000015 	stw	fp,0(sp)
    9860:	d8800115 	stw	r2,4(sp)
    9864:	d8801c15 	stw	r2,112(sp)
    9868:	d8c01b15 	stw	r3,108(sp)
    986c:	d829883a 	mov	r20,sp
    9870:	a2000204 	addi	r8,r20,8
    9874:	9480010c 	andi	r18,r18,4
    9878:	90003626 	beq	r18,zero,9954 <___vfiprintf_internal_r+0xd04>
    987c:	d9002417 	ldw	r4,144(sp)
    9880:	2565c83a 	sub	r18,r4,r21
    9884:	0480330e 	bge	zero,r18,9954 <___vfiprintf_internal_r+0xd04>
    9888:	04000404 	movi	r16,16
    988c:	84818b0e 	bge	r16,r18,9ebc <___vfiprintf_internal_r+0x126c>
    9890:	00c00074 	movhi	r3,1
    9894:	18c97304 	addi	r3,r3,9676
    9898:	d9001b17 	ldw	r4,108(sp)
    989c:	d8c02615 	stw	r3,152(sp)
    98a0:	04c001c4 	movi	r19,7
    98a4:	dd002217 	ldw	r20,136(sp)
    98a8:	ddc02117 	ldw	r23,132(sp)
    98ac:	00000506 	br	98c4 <___vfiprintf_internal_r+0xc74>
    98b0:	21400084 	addi	r5,r4,2
    98b4:	42000204 	addi	r8,r8,8
    98b8:	1809883a 	mov	r4,r3
    98bc:	94bffc04 	addi	r18,r18,-16
    98c0:	84800f0e 	bge	r16,r18,9900 <___vfiprintf_internal_r+0xcb0>
    98c4:	01400074 	movhi	r5,1
    98c8:	10800404 	addi	r2,r2,16
    98cc:	20c00044 	addi	r3,r4,1
    98d0:	29497304 	addi	r5,r5,9676
    98d4:	41400015 	stw	r5,0(r8)
    98d8:	44000115 	stw	r16,4(r8)
    98dc:	d8801c15 	stw	r2,112(sp)
    98e0:	d8c01b15 	stw	r3,108(sp)
    98e4:	98fff20e 	bge	r19,r3,98b0 <___vfiprintf_internal_r+0xc60>
    98e8:	1000291e 	bne	r2,zero,9990 <___vfiprintf_internal_r+0xd40>
    98ec:	94bffc04 	addi	r18,r18,-16
    98f0:	01400044 	movi	r5,1
    98f4:	0009883a 	mov	r4,zero
    98f8:	d811883a 	mov	r8,sp
    98fc:	84bff116 	blt	r16,r18,98c4 <___vfiprintf_internal_r+0xc74>
    9900:	d8c02617 	ldw	r3,152(sp)
    9904:	1485883a 	add	r2,r2,r18
    9908:	44800115 	stw	r18,4(r8)
    990c:	40c00015 	stw	r3,0(r8)
    9910:	d8801c15 	stw	r2,112(sp)
    9914:	d9401b15 	stw	r5,108(sp)
    9918:	00c001c4 	movi	r3,7
    991c:	19400d0e 	bge	r3,r5,9954 <___vfiprintf_internal_r+0xd04>
    9920:	1000061e 	bne	r2,zero,993c <___vfiprintf_internal_r+0xcec>
    9924:	d9002417 	ldw	r4,144(sp)
    9928:	a9011116 	blt	r21,r4,9d70 <___vfiprintf_internal_r+0x1120>
    992c:	d9402517 	ldw	r5,148(sp)
    9930:	2d4b883a 	add	r5,r5,r21
    9934:	d9402515 	stw	r5,148(sp)
    9938:	00001206 	br	9984 <___vfiprintf_internal_r+0xd34>
    993c:	d9002217 	ldw	r4,136(sp)
    9940:	d9402117 	ldw	r5,132(sp)
    9944:	d9801a04 	addi	r6,sp,104
    9948:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    994c:	103fba1e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9950:	d8801c17 	ldw	r2,112(sp)
    9954:	d9002417 	ldw	r4,144(sp)
    9958:	a900010e 	bge	r21,r4,9960 <___vfiprintf_internal_r+0xd10>
    995c:	202b883a 	mov	r21,r4
    9960:	d9402517 	ldw	r5,148(sp)
    9964:	2d4b883a 	add	r5,r5,r21
    9968:	d9402515 	stw	r5,148(sp)
    996c:	10000526 	beq	r2,zero,9984 <___vfiprintf_internal_r+0xd34>
    9970:	d9002217 	ldw	r4,136(sp)
    9974:	d9402117 	ldw	r5,132(sp)
    9978:	d9801a04 	addi	r6,sp,104
    997c:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9980:	103fad1e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9984:	d8001b15 	stw	zero,108(sp)
    9988:	d829883a 	mov	r20,sp
    998c:	003ce406 	br	8d20 <___vfiprintf_internal_r+0xd0>
    9990:	a009883a 	mov	r4,r20
    9994:	b80b883a 	mov	r5,r23
    9998:	d9801a04 	addi	r6,sp,104
    999c:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    99a0:	103fa51e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    99a4:	d9001b17 	ldw	r4,108(sp)
    99a8:	d8801c17 	ldw	r2,112(sp)
    99ac:	d811883a 	mov	r8,sp
    99b0:	21400044 	addi	r5,r4,1
    99b4:	003fc106 	br	98bc <___vfiprintf_internal_r+0xc6c>
    99b8:	d8c02417 	ldw	r3,144(sp)
    99bc:	1d6fc83a 	sub	r23,r3,r21
    99c0:	05fdea0e 	bge	zero,r23,916c <___vfiprintf_internal_r+0x51c>
    99c4:	04c00404 	movi	r19,16
    99c8:	9dc1490e 	bge	r19,r23,9ef0 <___vfiprintf_internal_r+0x12a0>
    99cc:	01000074 	movhi	r4,1
    99d0:	21096f04 	addi	r4,r4,9660
    99d4:	d9002615 	stw	r4,152(sp)
    99d8:	028001c4 	movi	r10,7
    99dc:	00000506 	br	99f4 <___vfiprintf_internal_r+0xda4>
    99e0:	29800084 	addi	r6,r5,2
    99e4:	a5000204 	addi	r20,r20,8
    99e8:	180b883a 	mov	r5,r3
    99ec:	bdfffc04 	addi	r23,r23,-16
    99f0:	9dc00d0e 	bge	r19,r23,9a28 <___vfiprintf_internal_r+0xdd8>
    99f4:	10800404 	addi	r2,r2,16
    99f8:	28c00044 	addi	r3,r5,1
    99fc:	a4400015 	stw	r17,0(r20)
    9a00:	a4c00115 	stw	r19,4(r20)
    9a04:	d8801c15 	stw	r2,112(sp)
    9a08:	d8c01b15 	stw	r3,108(sp)
    9a0c:	50fff40e 	bge	r10,r3,99e0 <___vfiprintf_internal_r+0xd90>
    9a10:	1000111e 	bne	r2,zero,9a58 <___vfiprintf_internal_r+0xe08>
    9a14:	bdfffc04 	addi	r23,r23,-16
    9a18:	01800044 	movi	r6,1
    9a1c:	000b883a 	mov	r5,zero
    9a20:	d829883a 	mov	r20,sp
    9a24:	9dfff316 	blt	r19,r23,99f4 <___vfiprintf_internal_r+0xda4>
    9a28:	d8c02617 	ldw	r3,152(sp)
    9a2c:	15c5883a 	add	r2,r2,r23
    9a30:	a5c00115 	stw	r23,4(r20)
    9a34:	a0c00015 	stw	r3,0(r20)
    9a38:	d8801c15 	stw	r2,112(sp)
    9a3c:	d9801b15 	stw	r6,108(sp)
    9a40:	00c001c4 	movi	r3,7
    9a44:	19806716 	blt	r3,r6,9be4 <___vfiprintf_internal_r+0xf94>
    9a48:	a5000204 	addi	r20,r20,8
    9a4c:	31000044 	addi	r4,r6,1
    9a50:	300b883a 	mov	r5,r6
    9a54:	003dc506 	br	916c <___vfiprintf_internal_r+0x51c>
    9a58:	d9002217 	ldw	r4,136(sp)
    9a5c:	d9402117 	ldw	r5,132(sp)
    9a60:	d9801a04 	addi	r6,sp,104
    9a64:	da802a15 	stw	r10,168(sp)
    9a68:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9a6c:	da802a17 	ldw	r10,168(sp)
    9a70:	103f711e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9a74:	d9401b17 	ldw	r5,108(sp)
    9a78:	d8801c17 	ldw	r2,112(sp)
    9a7c:	d829883a 	mov	r20,sp
    9a80:	29800044 	addi	r6,r5,1
    9a84:	003fd906 	br	99ec <___vfiprintf_internal_r+0xd9c>
    9a88:	1000401e 	bne	r2,zero,9b8c <___vfiprintf_internal_r+0xf3c>
    9a8c:	38003b26 	beq	r7,zero,9b7c <___vfiprintf_internal_r+0xf2c>
    9a90:	d9001d04 	addi	r4,sp,116
    9a94:	00800084 	movi	r2,2
    9a98:	d9000015 	stw	r4,0(sp)
    9a9c:	d8800115 	stw	r2,4(sp)
    9aa0:	1809883a 	mov	r4,r3
    9aa4:	d829883a 	mov	r20,sp
    9aa8:	003dab06 	br	9158 <___vfiprintf_internal_r+0x508>
    9aac:	1000431e 	bne	r2,zero,9bbc <___vfiprintf_internal_r+0xf6c>
    9ab0:	01000044 	movi	r4,1
    9ab4:	000b883a 	mov	r5,zero
    9ab8:	d829883a 	mov	r20,sp
    9abc:	003da906 	br	9164 <___vfiprintf_internal_r+0x514>
    9ac0:	10803fcc 	andi	r2,r2,255
    9ac4:	1000081e 	bne	r2,zero,9ae8 <___vfiprintf_internal_r+0xe98>
    9ac8:	9080004c 	andi	r2,r18,1
    9acc:	10000626 	beq	r2,zero,9ae8 <___vfiprintf_internal_r+0xe98>
    9ad0:	d9002817 	ldw	r4,160(sp)
    9ad4:	00800c04 	movi	r2,48
    9ad8:	d88019c5 	stb	r2,103(sp)
    9adc:	d9002015 	stw	r4,128(sp)
    9ae0:	df0019c4 	addi	fp,sp,103
    9ae4:	003d5306 	br	9034 <___vfiprintf_internal_r+0x3e4>
    9ae8:	df001a04 	addi	fp,sp,104
    9aec:	003d5106 	br	9034 <___vfiprintf_internal_r+0x3e4>
    9af0:	1000931e 	bne	r2,zero,9d40 <___vfiprintf_internal_r+0x10f0>
    9af4:	d8c01d87 	ldb	r3,118(sp)
    9af8:	18005326 	beq	r3,zero,9c48 <___vfiprintf_internal_r+0xff8>
    9afc:	00800044 	movi	r2,1
    9b00:	d8c01d84 	addi	r3,sp,118
    9b04:	1009883a 	mov	r4,r2
    9b08:	d8c00015 	stw	r3,0(sp)
    9b0c:	d8800115 	stw	r2,4(sp)
    9b10:	d829883a 	mov	r20,sp
    9b14:	003f0f06 	br	9754 <___vfiprintf_internal_r+0xb04>
    9b18:	d8c02417 	ldw	r3,144(sp)
    9b1c:	d811883a 	mov	r8,sp
    9b20:	1d65c83a 	sub	r18,r3,r21
    9b24:	04bf5816 	blt	zero,r18,9888 <___vfiprintf_internal_r+0xc38>
    9b28:	003f7e06 	br	9924 <___vfiprintf_internal_r+0xcd4>
    9b2c:	b02b883a 	mov	r21,r22
    9b30:	003c9806 	br	8d94 <___vfiprintf_internal_r+0x144>
    9b34:	d9002217 	ldw	r4,136(sp)
    9b38:	d9402117 	ldw	r5,132(sp)
    9b3c:	d9801a04 	addi	r6,sp,104
    9b40:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9b44:	103f3c1e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9b48:	d8801c17 	ldw	r2,112(sp)
    9b4c:	d811883a 	mov	r8,sp
    9b50:	003f4806 	br	9874 <___vfiprintf_internal_r+0xc24>
    9b54:	00800084 	movi	r2,2
    9b58:	9dc6b03a 	or	r3,r19,r23
    9b5c:	003d1806 	br	8fc0 <___vfiprintf_internal_r+0x370>
    9b60:	d9002217 	ldw	r4,136(sp)
    9b64:	d9402117 	ldw	r5,132(sp)
    9b68:	d9801a04 	addi	r6,sp,104
    9b6c:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9b70:	103f311e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9b74:	d829883a 	mov	r20,sp
    9b78:	003cf406 	br	8f4c <___vfiprintf_internal_r+0x2fc>
    9b7c:	000b883a 	mov	r5,zero
    9b80:	1809883a 	mov	r4,r3
    9b84:	d829883a 	mov	r20,sp
    9b88:	003d7606 	br	9164 <___vfiprintf_internal_r+0x514>
    9b8c:	d9002217 	ldw	r4,136(sp)
    9b90:	d9402117 	ldw	r5,132(sp)
    9b94:	d9801a04 	addi	r6,sp,104
    9b98:	d9c02a15 	stw	r7,168(sp)
    9b9c:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9ba0:	d9c02a17 	ldw	r7,168(sp)
    9ba4:	103f241e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9ba8:	d9401b17 	ldw	r5,108(sp)
    9bac:	d8801c17 	ldw	r2,112(sp)
    9bb0:	d829883a 	mov	r20,sp
    9bb4:	29000044 	addi	r4,r5,1
    9bb8:	003d5d06 	br	9130 <___vfiprintf_internal_r+0x4e0>
    9bbc:	d9002217 	ldw	r4,136(sp)
    9bc0:	d9402117 	ldw	r5,132(sp)
    9bc4:	d9801a04 	addi	r6,sp,104
    9bc8:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9bcc:	103f1a1e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9bd0:	d9401b17 	ldw	r5,108(sp)
    9bd4:	d8801c17 	ldw	r2,112(sp)
    9bd8:	d829883a 	mov	r20,sp
    9bdc:	29000044 	addi	r4,r5,1
    9be0:	003d6006 	br	9164 <___vfiprintf_internal_r+0x514>
    9be4:	10009b1e 	bne	r2,zero,9e54 <___vfiprintf_internal_r+0x1204>
    9be8:	01000044 	movi	r4,1
    9bec:	000b883a 	mov	r5,zero
    9bf0:	d829883a 	mov	r20,sp
    9bf4:	003d5d06 	br	916c <___vfiprintf_internal_r+0x51c>
    9bf8:	d9002217 	ldw	r4,136(sp)
    9bfc:	d9402117 	ldw	r5,132(sp)
    9c00:	d9801a04 	addi	r6,sp,104
    9c04:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9c08:	103f0b1e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9c0c:	d9001b17 	ldw	r4,108(sp)
    9c10:	d8801c17 	ldw	r2,112(sp)
    9c14:	d829883a 	mov	r20,sp
    9c18:	21000044 	addi	r4,r4,1
    9c1c:	003d7906 	br	9204 <___vfiprintf_internal_r+0x5b4>
    9c20:	04e7c83a 	sub	r19,zero,r19
    9c24:	9804c03a 	cmpne	r2,r19,zero
    9c28:	05efc83a 	sub	r23,zero,r23
    9c2c:	b8afc83a 	sub	r23,r23,r2
    9c30:	02800b44 	movi	r10,45
    9c34:	da801d85 	stb	r10,118(sp)
    9c38:	dc002015 	stw	r16,128(sp)
    9c3c:	00800044 	movi	r2,1
    9c40:	9dc6b03a 	or	r3,r19,r23
    9c44:	003ce106 	br	8fcc <___vfiprintf_internal_r+0x37c>
    9c48:	000b883a 	mov	r5,zero
    9c4c:	01000044 	movi	r4,1
    9c50:	d829883a 	mov	r20,sp
    9c54:	383d4326 	beq	r7,zero,9164 <___vfiprintf_internal_r+0x514>
    9c58:	00800084 	movi	r2,2
    9c5c:	d8c01d04 	addi	r3,sp,116
    9c60:	d8c00015 	stw	r3,0(sp)
    9c64:	d8800115 	stw	r2,4(sp)
    9c68:	003d3b06 	br	9158 <___vfiprintf_internal_r+0x508>
    9c6c:	b1800007 	ldb	r6,0(r22)
    9c70:	b005883a 	mov	r2,r22
    9c74:	003c5206 	br	8dc0 <___vfiprintf_internal_r+0x170>
    9c78:	00800084 	movi	r2,2
    9c7c:	003cd006 	br	8fc0 <___vfiprintf_internal_r+0x370>
    9c80:	9080100c 	andi	r2,r18,64
    9c84:	10003e26 	beq	r2,zero,9d80 <___vfiprintf_internal_r+0x1130>
    9c88:	d9402317 	ldw	r5,140(sp)
    9c8c:	002f883a 	mov	r23,zero
    9c90:	0005883a 	mov	r2,zero
    9c94:	2cc0000b 	ldhu	r19,0(r5)
    9c98:	29400104 	addi	r5,r5,4
    9c9c:	d9402315 	stw	r5,140(sp)
    9ca0:	9807883a 	mov	r3,r19
    9ca4:	003cc606 	br	8fc0 <___vfiprintf_internal_r+0x370>
    9ca8:	9080100c 	andi	r2,r18,64
    9cac:	10004226 	beq	r2,zero,9db8 <___vfiprintf_internal_r+0x1168>
    9cb0:	d9402317 	ldw	r5,140(sp)
    9cb4:	002f883a 	mov	r23,zero
    9cb8:	00800044 	movi	r2,1
    9cbc:	2cc0000b 	ldhu	r19,0(r5)
    9cc0:	29400104 	addi	r5,r5,4
    9cc4:	d9402315 	stw	r5,140(sp)
    9cc8:	9807883a 	mov	r3,r19
    9ccc:	003cbc06 	br	8fc0 <___vfiprintf_internal_r+0x370>
    9cd0:	9080100c 	andi	r2,r18,64
    9cd4:	10003226 	beq	r2,zero,9da0 <___vfiprintf_internal_r+0x1150>
    9cd8:	d8802317 	ldw	r2,140(sp)
    9cdc:	002f883a 	mov	r23,zero
    9ce0:	14c0000b 	ldhu	r19,0(r2)
    9ce4:	10800104 	addi	r2,r2,4
    9ce8:	d8802315 	stw	r2,140(sp)
    9cec:	003da106 	br	9374 <___vfiprintf_internal_r+0x724>
    9cf0:	9080040c 	andi	r2,r18,16
    9cf4:	10003f1e 	bne	r2,zero,9df4 <___vfiprintf_internal_r+0x11a4>
    9cf8:	9480100c 	andi	r18,r18,64
    9cfc:	90007526 	beq	r18,zero,9ed4 <___vfiprintf_internal_r+0x1284>
    9d00:	d9402317 	ldw	r5,140(sp)
    9d04:	d8c02517 	ldw	r3,148(sp)
    9d08:	28800017 	ldw	r2,0(r5)
    9d0c:	29400104 	addi	r5,r5,4
    9d10:	d9402315 	stw	r5,140(sp)
    9d14:	10c0000d 	sth	r3,0(r2)
    9d18:	003c0106 	br	8d20 <___vfiprintf_internal_r+0xd0>
    9d1c:	9080100c 	andi	r2,r18,64
    9d20:	10002d26 	beq	r2,zero,9dd8 <___vfiprintf_internal_r+0x1188>
    9d24:	1cc0000f 	ldh	r19,0(r3)
    9d28:	d8802317 	ldw	r2,140(sp)
    9d2c:	982fd7fa 	srai	r23,r19,31
    9d30:	10800104 	addi	r2,r2,4
    9d34:	d8802315 	stw	r2,140(sp)
    9d38:	b805883a 	mov	r2,r23
    9d3c:	003dc006 	br	9440 <___vfiprintf_internal_r+0x7f0>
    9d40:	d9002217 	ldw	r4,136(sp)
    9d44:	d9402117 	ldw	r5,132(sp)
    9d48:	d9801a04 	addi	r6,sp,104
    9d4c:	d9c02a15 	stw	r7,168(sp)
    9d50:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9d54:	d9c02a17 	ldw	r7,168(sp)
    9d58:	103eb71e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9d5c:	d9401b17 	ldw	r5,108(sp)
    9d60:	d8801c17 	ldw	r2,112(sp)
    9d64:	d829883a 	mov	r20,sp
    9d68:	29000044 	addi	r4,r5,1
    9d6c:	003e6e06 	br	9728 <___vfiprintf_internal_r+0xad8>
    9d70:	202b883a 	mov	r21,r4
    9d74:	003eed06 	br	992c <___vfiprintf_internal_r+0xcdc>
    9d78:	dc002015 	stw	r16,128(sp)
    9d7c:	003e1606 	br	95d8 <___vfiprintf_internal_r+0x988>
    9d80:	d8802317 	ldw	r2,140(sp)
    9d84:	002f883a 	mov	r23,zero
    9d88:	14c00017 	ldw	r19,0(r2)
    9d8c:	10800104 	addi	r2,r2,4
    9d90:	d8802315 	stw	r2,140(sp)
    9d94:	9807883a 	mov	r3,r19
    9d98:	0005883a 	mov	r2,zero
    9d9c:	003c8806 	br	8fc0 <___vfiprintf_internal_r+0x370>
    9da0:	d8c02317 	ldw	r3,140(sp)
    9da4:	002f883a 	mov	r23,zero
    9da8:	1cc00017 	ldw	r19,0(r3)
    9dac:	18c00104 	addi	r3,r3,4
    9db0:	d8c02315 	stw	r3,140(sp)
    9db4:	003d6f06 	br	9374 <___vfiprintf_internal_r+0x724>
    9db8:	d8802317 	ldw	r2,140(sp)
    9dbc:	002f883a 	mov	r23,zero
    9dc0:	14c00017 	ldw	r19,0(r2)
    9dc4:	10800104 	addi	r2,r2,4
    9dc8:	d8802315 	stw	r2,140(sp)
    9dcc:	9807883a 	mov	r3,r19
    9dd0:	00800044 	movi	r2,1
    9dd4:	003c7a06 	br	8fc0 <___vfiprintf_internal_r+0x370>
    9dd8:	1cc00017 	ldw	r19,0(r3)
    9ddc:	d8c02317 	ldw	r3,140(sp)
    9de0:	982fd7fa 	srai	r23,r19,31
    9de4:	18c00104 	addi	r3,r3,4
    9de8:	d8c02315 	stw	r3,140(sp)
    9dec:	b805883a 	mov	r2,r23
    9df0:	003d9306 	br	9440 <___vfiprintf_internal_r+0x7f0>
    9df4:	d8c02317 	ldw	r3,140(sp)
    9df8:	d9002517 	ldw	r4,148(sp)
    9dfc:	18800017 	ldw	r2,0(r3)
    9e00:	18c00104 	addi	r3,r3,4
    9e04:	d8c02315 	stw	r3,140(sp)
    9e08:	11000015 	stw	r4,0(r2)
    9e0c:	003bc406 	br	8d20 <___vfiprintf_internal_r+0xd0>
    9e10:	01400074 	movhi	r5,1
    9e14:	29496f04 	addi	r5,r5,9660
    9e18:	d9402615 	stw	r5,152(sp)
    9e1c:	003cef06 	br	91dc <___vfiprintf_internal_r+0x58c>
    9e20:	b0800044 	addi	r2,r22,1
    9e24:	94800814 	ori	r18,r18,32
    9e28:	b1800047 	ldb	r6,1(r22)
    9e2c:	003be406 	br	8dc0 <___vfiprintf_internal_r+0x170>
    9e30:	d8802417 	ldw	r2,144(sp)
    9e34:	d8c02315 	stw	r3,140(sp)
    9e38:	0085c83a 	sub	r2,zero,r2
    9e3c:	d8802415 	stw	r2,144(sp)
    9e40:	b005883a 	mov	r2,r22
    9e44:	003d2406 	br	92d8 <___vfiprintf_internal_r+0x688>
    9e48:	00016d00 	call	16d0 <strlen>
    9e4c:	d8802015 	stw	r2,128(sp)
    9e50:	003de106 	br	95d8 <___vfiprintf_internal_r+0x988>
    9e54:	d9002217 	ldw	r4,136(sp)
    9e58:	d9402117 	ldw	r5,132(sp)
    9e5c:	d9801a04 	addi	r6,sp,104
    9e60:	0008b3c0 	call	8b3c <__sprint_r.part.0>
    9e64:	103e741e 	bne	r2,zero,9838 <___vfiprintf_internal_r+0xbe8>
    9e68:	d9401b17 	ldw	r5,108(sp)
    9e6c:	d8801c17 	ldw	r2,112(sp)
    9e70:	d829883a 	mov	r20,sp
    9e74:	29000044 	addi	r4,r5,1
    9e78:	003cbc06 	br	916c <___vfiprintf_internal_r+0x51c>
    9e7c:	01400074 	movhi	r5,1
    9e80:	29497304 	addi	r5,r5,9676
    9e84:	d9402615 	stw	r5,152(sp)
    9e88:	d9401b17 	ldw	r5,108(sp)
    9e8c:	29400044 	addi	r5,r5,1
    9e90:	003c9b06 	br	9100 <___vfiprintf_internal_r+0x4b0>
    9e94:	00800184 	movi	r2,6
    9e98:	1400012e 	bgeu	r2,r16,9ea0 <___vfiprintf_internal_r+0x1250>
    9e9c:	1021883a 	mov	r16,r2
    9ea0:	dc002015 	stw	r16,128(sp)
    9ea4:	802b883a 	mov	r21,r16
    9ea8:	80001b16 	blt	r16,zero,9f18 <___vfiprintf_internal_r+0x12c8>
    9eac:	07000074 	movhi	fp,1
    9eb0:	dcc02315 	stw	r19,140(sp)
    9eb4:	e7091304 	addi	fp,fp,9292
    9eb8:	003d4106 	br	93c0 <___vfiprintf_internal_r+0x770>
    9ebc:	01400074 	movhi	r5,1
    9ec0:	29497304 	addi	r5,r5,9676
    9ec4:	d9402615 	stw	r5,152(sp)
    9ec8:	d9401b17 	ldw	r5,108(sp)
    9ecc:	29400044 	addi	r5,r5,1
    9ed0:	003e8b06 	br	9900 <___vfiprintf_internal_r+0xcb0>
    9ed4:	d9002317 	ldw	r4,140(sp)
    9ed8:	d9402517 	ldw	r5,148(sp)
    9edc:	20800017 	ldw	r2,0(r4)
    9ee0:	21000104 	addi	r4,r4,4
    9ee4:	d9002315 	stw	r4,140(sp)
    9ee8:	11400015 	stw	r5,0(r2)
    9eec:	003b8c06 	br	8d20 <___vfiprintf_internal_r+0xd0>
    9ef0:	01400074 	movhi	r5,1
    9ef4:	29496f04 	addi	r5,r5,9660
    9ef8:	d9402615 	stw	r5,152(sp)
    9efc:	200d883a 	mov	r6,r4
    9f00:	003ec906 	br	9a28 <___vfiprintf_internal_r+0xdd8>
    9f04:	dc002015 	stw	r16,128(sp)
    9f08:	da801d83 	ldbu	r10,118(sp)
    9f0c:	dcc02315 	stw	r19,140(sp)
    9f10:	0021883a 	mov	r16,zero
    9f14:	003c4706 	br	9034 <___vfiprintf_internal_r+0x3e4>
    9f18:	002b883a 	mov	r21,zero
    9f1c:	003fe306 	br	9eac <___vfiprintf_internal_r+0x125c>
    9f20:	d9402317 	ldw	r5,140(sp)
    9f24:	2c000017 	ldw	r16,0(r5)
    9f28:	28c00104 	addi	r3,r5,4
    9f2c:	d8c02315 	stw	r3,140(sp)
    9f30:	803fbd0e 	bge	r16,zero,9e28 <___vfiprintf_internal_r+0x11d8>
    9f34:	043fffc4 	movi	r16,-1
    9f38:	b1800047 	ldb	r6,1(r22)
    9f3c:	003ba006 	br	8dc0 <___vfiprintf_internal_r+0x170>

00009f40 <__vfiprintf_internal>:
    9f40:	2007883a 	mov	r3,r4
    9f44:	01000074 	movhi	r4,1
    9f48:	21117b04 	addi	r4,r4,17900
    9f4c:	21000017 	ldw	r4,0(r4)
    9f50:	2805883a 	mov	r2,r5
    9f54:	300f883a 	mov	r7,r6
    9f58:	180b883a 	mov	r5,r3
    9f5c:	100d883a 	mov	r6,r2
    9f60:	0008c501 	jmpi	8c50 <___vfiprintf_internal_r>

00009f64 <__sbprintf>:
    9f64:	2880030b 	ldhu	r2,12(r5)
    9f68:	2ac01917 	ldw	r11,100(r5)
    9f6c:	2a80038b 	ldhu	r10,14(r5)
    9f70:	2a400717 	ldw	r9,28(r5)
    9f74:	2a000917 	ldw	r8,36(r5)
    9f78:	defee204 	addi	sp,sp,-1144
    9f7c:	00c10004 	movi	r3,1024
    9f80:	dc011a15 	stw	r16,1128(sp)
    9f84:	10bfff4c 	andi	r2,r2,65533
    9f88:	2821883a 	mov	r16,r5
    9f8c:	d8cb883a 	add	r5,sp,r3
    9f90:	dc811c15 	stw	r18,1136(sp)
    9f94:	dc411b15 	stw	r17,1132(sp)
    9f98:	dfc11d15 	stw	ra,1140(sp)
    9f9c:	2025883a 	mov	r18,r4
    9fa0:	d881030d 	sth	r2,1036(sp)
    9fa4:	dac11915 	stw	r11,1124(sp)
    9fa8:	da81038d 	sth	r10,1038(sp)
    9fac:	da410715 	stw	r9,1052(sp)
    9fb0:	da010915 	stw	r8,1060(sp)
    9fb4:	dec10015 	stw	sp,1024(sp)
    9fb8:	dec10415 	stw	sp,1040(sp)
    9fbc:	d8c10215 	stw	r3,1032(sp)
    9fc0:	d8c10515 	stw	r3,1044(sp)
    9fc4:	d8010615 	stw	zero,1048(sp)
    9fc8:	0008c500 	call	8c50 <___vfiprintf_internal_r>
    9fcc:	1023883a 	mov	r17,r2
    9fd0:	10000416 	blt	r2,zero,9fe4 <__sbprintf+0x80>
    9fd4:	9009883a 	mov	r4,r18
    9fd8:	d9410004 	addi	r5,sp,1024
    9fdc:	000554c0 	call	554c <_fflush_r>
    9fe0:	10000d1e 	bne	r2,zero,a018 <__sbprintf+0xb4>
    9fe4:	d8c1030b 	ldhu	r3,1036(sp)
    9fe8:	18c0100c 	andi	r3,r3,64
    9fec:	18000326 	beq	r3,zero,9ffc <__sbprintf+0x98>
    9ff0:	8080030b 	ldhu	r2,12(r16)
    9ff4:	10801014 	ori	r2,r2,64
    9ff8:	8080030d 	sth	r2,12(r16)
    9ffc:	8805883a 	mov	r2,r17
    a000:	dfc11d17 	ldw	ra,1140(sp)
    a004:	dc811c17 	ldw	r18,1136(sp)
    a008:	dc411b17 	ldw	r17,1132(sp)
    a00c:	dc011a17 	ldw	r16,1128(sp)
    a010:	dec11e04 	addi	sp,sp,1144
    a014:	f800283a 	ret
    a018:	047fffc4 	movi	r17,-1
    a01c:	003ff106 	br	9fe4 <__sbprintf+0x80>

0000a020 <_write_r>:
    a020:	defffd04 	addi	sp,sp,-12
    a024:	dc000015 	stw	r16,0(sp)
    a028:	04000074 	movhi	r16,1
    a02c:	dc400115 	stw	r17,4(sp)
    a030:	84119204 	addi	r16,r16,17992
    a034:	2023883a 	mov	r17,r4
    a038:	2809883a 	mov	r4,r5
    a03c:	300b883a 	mov	r5,r6
    a040:	380d883a 	mov	r6,r7
    a044:	dfc00215 	stw	ra,8(sp)
    a048:	80000015 	stw	zero,0(r16)
    a04c:	000e65c0 	call	e65c <write>
    a050:	00ffffc4 	movi	r3,-1
    a054:	10c00526 	beq	r2,r3,a06c <_write_r+0x4c>
    a058:	dfc00217 	ldw	ra,8(sp)
    a05c:	dc400117 	ldw	r17,4(sp)
    a060:	dc000017 	ldw	r16,0(sp)
    a064:	dec00304 	addi	sp,sp,12
    a068:	f800283a 	ret
    a06c:	80c00017 	ldw	r3,0(r16)
    a070:	183ff926 	beq	r3,zero,a058 <_write_r+0x38>
    a074:	88c00015 	stw	r3,0(r17)
    a078:	003ff706 	br	a058 <_write_r+0x38>

0000a07c <_close_r>:
    a07c:	defffd04 	addi	sp,sp,-12
    a080:	dc000015 	stw	r16,0(sp)
    a084:	04000074 	movhi	r16,1
    a088:	dc400115 	stw	r17,4(sp)
    a08c:	84119204 	addi	r16,r16,17992
    a090:	2023883a 	mov	r17,r4
    a094:	2809883a 	mov	r4,r5
    a098:	dfc00215 	stw	ra,8(sp)
    a09c:	80000015 	stw	zero,0(r16)
    a0a0:	000de9c0 	call	de9c <close>
    a0a4:	00ffffc4 	movi	r3,-1
    a0a8:	10c00526 	beq	r2,r3,a0c0 <_close_r+0x44>
    a0ac:	dfc00217 	ldw	ra,8(sp)
    a0b0:	dc400117 	ldw	r17,4(sp)
    a0b4:	dc000017 	ldw	r16,0(sp)
    a0b8:	dec00304 	addi	sp,sp,12
    a0bc:	f800283a 	ret
    a0c0:	80c00017 	ldw	r3,0(r16)
    a0c4:	183ff926 	beq	r3,zero,a0ac <_close_r+0x30>
    a0c8:	88c00015 	stw	r3,0(r17)
    a0cc:	003ff706 	br	a0ac <_close_r+0x30>

0000a0d0 <_calloc_r>:
    a0d0:	defffe04 	addi	sp,sp,-8
    a0d4:	dc000015 	stw	r16,0(sp)
    a0d8:	2021883a 	mov	r16,r4
    a0dc:	2809883a 	mov	r4,r5
    a0e0:	300b883a 	mov	r5,r6
    a0e4:	dfc00115 	stw	ra,4(sp)
    a0e8:	0000eb00 	call	eb0 <__mulsi3>
    a0ec:	8009883a 	mov	r4,r16
    a0f0:	100b883a 	mov	r5,r2
    a0f4:	00066880 	call	6688 <_malloc_r>
    a0f8:	1021883a 	mov	r16,r2
    a0fc:	10002826 	beq	r2,zero,a1a0 <_calloc_r+0xd0>
    a100:	11bfff17 	ldw	r6,-4(r2)
    a104:	00bfff04 	movi	r2,-4
    a108:	00c00904 	movi	r3,36
    a10c:	308c703a 	and	r6,r6,r2
    a110:	308d883a 	add	r6,r6,r2
    a114:	19801436 	bltu	r3,r6,a168 <_calloc_r+0x98>
    a118:	008004c4 	movi	r2,19
    a11c:	11800936 	bltu	r2,r6,a144 <_calloc_r+0x74>
    a120:	8005883a 	mov	r2,r16
    a124:	10000015 	stw	zero,0(r2)
    a128:	10000115 	stw	zero,4(r2)
    a12c:	10000215 	stw	zero,8(r2)
    a130:	8005883a 	mov	r2,r16
    a134:	dfc00117 	ldw	ra,4(sp)
    a138:	dc000017 	ldw	r16,0(sp)
    a13c:	dec00204 	addi	sp,sp,8
    a140:	f800283a 	ret
    a144:	80000015 	stw	zero,0(r16)
    a148:	80000115 	stw	zero,4(r16)
    a14c:	008006c4 	movi	r2,27
    a150:	11800d2e 	bgeu	r2,r6,a188 <_calloc_r+0xb8>
    a154:	80000215 	stw	zero,8(r16)
    a158:	80000315 	stw	zero,12(r16)
    a15c:	30c00c26 	beq	r6,r3,a190 <_calloc_r+0xc0>
    a160:	80800404 	addi	r2,r16,16
    a164:	003fef06 	br	a124 <_calloc_r+0x54>
    a168:	8009883a 	mov	r4,r16
    a16c:	000b883a 	mov	r5,zero
    a170:	00071ac0 	call	71ac <memset>
    a174:	8005883a 	mov	r2,r16
    a178:	dfc00117 	ldw	ra,4(sp)
    a17c:	dc000017 	ldw	r16,0(sp)
    a180:	dec00204 	addi	sp,sp,8
    a184:	f800283a 	ret
    a188:	80800204 	addi	r2,r16,8
    a18c:	003fe506 	br	a124 <_calloc_r+0x54>
    a190:	80000415 	stw	zero,16(r16)
    a194:	80800604 	addi	r2,r16,24
    a198:	80000515 	stw	zero,20(r16)
    a19c:	003fe106 	br	a124 <_calloc_r+0x54>
    a1a0:	0005883a 	mov	r2,zero
    a1a4:	003fe306 	br	a134 <_calloc_r+0x64>

0000a1a8 <_fclose_r>:
    a1a8:	28003926 	beq	r5,zero,a290 <_fclose_r+0xe8>
    a1ac:	defffc04 	addi	sp,sp,-16
    a1b0:	dc400115 	stw	r17,4(sp)
    a1b4:	dc000015 	stw	r16,0(sp)
    a1b8:	dfc00315 	stw	ra,12(sp)
    a1bc:	dc800215 	stw	r18,8(sp)
    a1c0:	2023883a 	mov	r17,r4
    a1c4:	2821883a 	mov	r16,r5
    a1c8:	20000226 	beq	r4,zero,a1d4 <_fclose_r+0x2c>
    a1cc:	20800e17 	ldw	r2,56(r4)
    a1d0:	10002726 	beq	r2,zero,a270 <_fclose_r+0xc8>
    a1d4:	8080030f 	ldh	r2,12(r16)
    a1d8:	1000071e 	bne	r2,zero,a1f8 <_fclose_r+0x50>
    a1dc:	0005883a 	mov	r2,zero
    a1e0:	dfc00317 	ldw	ra,12(sp)
    a1e4:	dc800217 	ldw	r18,8(sp)
    a1e8:	dc400117 	ldw	r17,4(sp)
    a1ec:	dc000017 	ldw	r16,0(sp)
    a1f0:	dec00404 	addi	sp,sp,16
    a1f4:	f800283a 	ret
    a1f8:	8809883a 	mov	r4,r17
    a1fc:	800b883a 	mov	r5,r16
    a200:	00053440 	call	5344 <__sflush_r>
    a204:	1025883a 	mov	r18,r2
    a208:	80800b17 	ldw	r2,44(r16)
    a20c:	10000426 	beq	r2,zero,a220 <_fclose_r+0x78>
    a210:	81400717 	ldw	r5,28(r16)
    a214:	8809883a 	mov	r4,r17
    a218:	103ee83a 	callr	r2
    a21c:	10001616 	blt	r2,zero,a278 <_fclose_r+0xd0>
    a220:	8080030b 	ldhu	r2,12(r16)
    a224:	1080200c 	andi	r2,r2,128
    a228:	1000151e 	bne	r2,zero,a280 <_fclose_r+0xd8>
    a22c:	81400c17 	ldw	r5,48(r16)
    a230:	28000526 	beq	r5,zero,a248 <_fclose_r+0xa0>
    a234:	80801004 	addi	r2,r16,64
    a238:	28800226 	beq	r5,r2,a244 <_fclose_r+0x9c>
    a23c:	8809883a 	mov	r4,r17
    a240:	0005aac0 	call	5aac <_free_r>
    a244:	80000c15 	stw	zero,48(r16)
    a248:	81401117 	ldw	r5,68(r16)
    a24c:	28000326 	beq	r5,zero,a25c <_fclose_r+0xb4>
    a250:	8809883a 	mov	r4,r17
    a254:	0005aac0 	call	5aac <_free_r>
    a258:	80001115 	stw	zero,68(r16)
    a25c:	00059480 	call	5948 <__sfp_lock_acquire>
    a260:	8000030d 	sth	zero,12(r16)
    a264:	000594c0 	call	594c <__sfp_lock_release>
    a268:	9005883a 	mov	r2,r18
    a26c:	003fdc06 	br	a1e0 <_fclose_r+0x38>
    a270:	00059380 	call	5938 <__sinit>
    a274:	003fd706 	br	a1d4 <_fclose_r+0x2c>
    a278:	04bfffc4 	movi	r18,-1
    a27c:	003fe806 	br	a220 <_fclose_r+0x78>
    a280:	81400417 	ldw	r5,16(r16)
    a284:	8809883a 	mov	r4,r17
    a288:	0005aac0 	call	5aac <_free_r>
    a28c:	003fe706 	br	a22c <_fclose_r+0x84>
    a290:	0005883a 	mov	r2,zero
    a294:	f800283a 	ret

0000a298 <fclose>:
    a298:	00800074 	movhi	r2,1
    a29c:	10917b04 	addi	r2,r2,17900
    a2a0:	200b883a 	mov	r5,r4
    a2a4:	11000017 	ldw	r4,0(r2)
    a2a8:	000a1a81 	jmpi	a1a8 <_fclose_r>

0000a2ac <_fputwc_r>:
    a2ac:	3080030b 	ldhu	r2,12(r6)
    a2b0:	defff804 	addi	sp,sp,-32
    a2b4:	dcc00415 	stw	r19,16(sp)
    a2b8:	dc800315 	stw	r18,12(sp)
    a2bc:	dc000115 	stw	r16,4(sp)
    a2c0:	dfc00715 	stw	ra,28(sp)
    a2c4:	dd400615 	stw	r21,24(sp)
    a2c8:	dd000515 	stw	r20,20(sp)
    a2cc:	dc400215 	stw	r17,8(sp)
    a2d0:	10c8000c 	andi	r3,r2,8192
    a2d4:	3021883a 	mov	r16,r6
    a2d8:	2027883a 	mov	r19,r4
    a2dc:	2825883a 	mov	r18,r5
    a2e0:	1800051e 	bne	r3,zero,a2f8 <_fputwc_r+0x4c>
    a2e4:	30c01917 	ldw	r3,100(r6)
    a2e8:	10880014 	ori	r2,r2,8192
    a2ec:	3080030d 	sth	r2,12(r6)
    a2f0:	18880014 	ori	r2,r3,8192
    a2f4:	30801915 	stw	r2,100(r6)
    a2f8:	00064780 	call	6478 <__locale_mb_cur_max>
    a2fc:	00c00044 	movi	r3,1
    a300:	10c03e26 	beq	r2,r3,a3fc <_fputwc_r+0x150>
    a304:	9809883a 	mov	r4,r19
    a308:	d80b883a 	mov	r5,sp
    a30c:	900d883a 	mov	r6,r18
    a310:	81c01704 	addi	r7,r16,92
    a314:	000a7440 	call	a744 <_wcrtomb_r>
    a318:	1029883a 	mov	r20,r2
    a31c:	00bfffc4 	movi	r2,-1
    a320:	a0802026 	beq	r20,r2,a3a4 <_fputwc_r+0xf8>
    a324:	d9400003 	ldbu	r5,0(sp)
    a328:	a0001c26 	beq	r20,zero,a39c <_fputwc_r+0xf0>
    a32c:	0023883a 	mov	r17,zero
    a330:	05400284 	movi	r21,10
    a334:	00000906 	br	a35c <_fputwc_r+0xb0>
    a338:	80800017 	ldw	r2,0(r16)
    a33c:	11400005 	stb	r5,0(r2)
    a340:	80c00017 	ldw	r3,0(r16)
    a344:	18c00044 	addi	r3,r3,1
    a348:	80c00015 	stw	r3,0(r16)
    a34c:	8c400044 	addi	r17,r17,1
    a350:	dc45883a 	add	r2,sp,r17
    a354:	8d00112e 	bgeu	r17,r20,a39c <_fputwc_r+0xf0>
    a358:	11400003 	ldbu	r5,0(r2)
    a35c:	80c00217 	ldw	r3,8(r16)
    a360:	18ffffc4 	addi	r3,r3,-1
    a364:	80c00215 	stw	r3,8(r16)
    a368:	183ff30e 	bge	r3,zero,a338 <_fputwc_r+0x8c>
    a36c:	80800617 	ldw	r2,24(r16)
    a370:	18801916 	blt	r3,r2,a3d8 <_fputwc_r+0x12c>
    a374:	80800017 	ldw	r2,0(r16)
    a378:	11400005 	stb	r5,0(r2)
    a37c:	80800017 	ldw	r2,0(r16)
    a380:	10c00003 	ldbu	r3,0(r2)
    a384:	10800044 	addi	r2,r2,1
    a388:	1d402326 	beq	r3,r21,a418 <_fputwc_r+0x16c>
    a38c:	80800015 	stw	r2,0(r16)
    a390:	8c400044 	addi	r17,r17,1
    a394:	dc45883a 	add	r2,sp,r17
    a398:	8d3fef36 	bltu	r17,r20,a358 <_fputwc_r+0xac>
    a39c:	9005883a 	mov	r2,r18
    a3a0:	00000406 	br	a3b4 <_fputwc_r+0x108>
    a3a4:	80c0030b 	ldhu	r3,12(r16)
    a3a8:	a005883a 	mov	r2,r20
    a3ac:	18c01014 	ori	r3,r3,64
    a3b0:	80c0030d 	sth	r3,12(r16)
    a3b4:	dfc00717 	ldw	ra,28(sp)
    a3b8:	dd400617 	ldw	r21,24(sp)
    a3bc:	dd000517 	ldw	r20,20(sp)
    a3c0:	dcc00417 	ldw	r19,16(sp)
    a3c4:	dc800317 	ldw	r18,12(sp)
    a3c8:	dc400217 	ldw	r17,8(sp)
    a3cc:	dc000117 	ldw	r16,4(sp)
    a3d0:	dec00804 	addi	sp,sp,32
    a3d4:	f800283a 	ret
    a3d8:	9809883a 	mov	r4,r19
    a3dc:	29403fcc 	andi	r5,r5,255
    a3e0:	800d883a 	mov	r6,r16
    a3e4:	000a5f00 	call	a5f0 <__swbuf_r>
    a3e8:	10bfffe0 	cmpeqi	r2,r2,-1
    a3ec:	10803fcc 	andi	r2,r2,255
    a3f0:	103fd626 	beq	r2,zero,a34c <_fputwc_r+0xa0>
    a3f4:	00bfffc4 	movi	r2,-1
    a3f8:	003fee06 	br	a3b4 <_fputwc_r+0x108>
    a3fc:	90ffffc4 	addi	r3,r18,-1
    a400:	01003f84 	movi	r4,254
    a404:	20ffbf36 	bltu	r4,r3,a304 <_fputwc_r+0x58>
    a408:	900b883a 	mov	r5,r18
    a40c:	dc800005 	stb	r18,0(sp)
    a410:	1029883a 	mov	r20,r2
    a414:	003fc506 	br	a32c <_fputwc_r+0x80>
    a418:	9809883a 	mov	r4,r19
    a41c:	a80b883a 	mov	r5,r21
    a420:	800d883a 	mov	r6,r16
    a424:	000a5f00 	call	a5f0 <__swbuf_r>
    a428:	10bfffe0 	cmpeqi	r2,r2,-1
    a42c:	003fef06 	br	a3ec <_fputwc_r+0x140>

0000a430 <fputwc>:
    a430:	00800074 	movhi	r2,1
    a434:	defffc04 	addi	sp,sp,-16
    a438:	10917b04 	addi	r2,r2,17900
    a43c:	dc000115 	stw	r16,4(sp)
    a440:	14000017 	ldw	r16,0(r2)
    a444:	dc400215 	stw	r17,8(sp)
    a448:	dfc00315 	stw	ra,12(sp)
    a44c:	2023883a 	mov	r17,r4
    a450:	280d883a 	mov	r6,r5
    a454:	80000626 	beq	r16,zero,a470 <fputwc+0x40>
    a458:	80800e17 	ldw	r2,56(r16)
    a45c:	1000041e 	bne	r2,zero,a470 <fputwc+0x40>
    a460:	8009883a 	mov	r4,r16
    a464:	d9400015 	stw	r5,0(sp)
    a468:	00059380 	call	5938 <__sinit>
    a46c:	d9800017 	ldw	r6,0(sp)
    a470:	8009883a 	mov	r4,r16
    a474:	880b883a 	mov	r5,r17
    a478:	dfc00317 	ldw	ra,12(sp)
    a47c:	dc400217 	ldw	r17,8(sp)
    a480:	dc000117 	ldw	r16,4(sp)
    a484:	dec00404 	addi	sp,sp,16
    a488:	000a2ac1 	jmpi	a2ac <_fputwc_r>

0000a48c <_fstat_r>:
    a48c:	defffd04 	addi	sp,sp,-12
    a490:	dc000015 	stw	r16,0(sp)
    a494:	04000074 	movhi	r16,1
    a498:	dc400115 	stw	r17,4(sp)
    a49c:	84119204 	addi	r16,r16,17992
    a4a0:	2023883a 	mov	r17,r4
    a4a4:	2809883a 	mov	r4,r5
    a4a8:	300b883a 	mov	r5,r6
    a4ac:	dfc00215 	stw	ra,8(sp)
    a4b0:	80000015 	stw	zero,0(r16)
    a4b4:	000dff00 	call	dff0 <fstat>
    a4b8:	00ffffc4 	movi	r3,-1
    a4bc:	10c00526 	beq	r2,r3,a4d4 <_fstat_r+0x48>
    a4c0:	dfc00217 	ldw	ra,8(sp)
    a4c4:	dc400117 	ldw	r17,4(sp)
    a4c8:	dc000017 	ldw	r16,0(sp)
    a4cc:	dec00304 	addi	sp,sp,12
    a4d0:	f800283a 	ret
    a4d4:	80c00017 	ldw	r3,0(r16)
    a4d8:	183ff926 	beq	r3,zero,a4c0 <_fstat_r+0x34>
    a4dc:	88c00015 	stw	r3,0(r17)
    a4e0:	003ff706 	br	a4c0 <_fstat_r+0x34>

0000a4e4 <_isatty_r>:
    a4e4:	defffd04 	addi	sp,sp,-12
    a4e8:	dc000015 	stw	r16,0(sp)
    a4ec:	04000074 	movhi	r16,1
    a4f0:	dc400115 	stw	r17,4(sp)
    a4f4:	84119204 	addi	r16,r16,17992
    a4f8:	2023883a 	mov	r17,r4
    a4fc:	2809883a 	mov	r4,r5
    a500:	dfc00215 	stw	ra,8(sp)
    a504:	80000015 	stw	zero,0(r16)
    a508:	000e0f80 	call	e0f8 <isatty>
    a50c:	00ffffc4 	movi	r3,-1
    a510:	10c00526 	beq	r2,r3,a528 <_isatty_r+0x44>
    a514:	dfc00217 	ldw	ra,8(sp)
    a518:	dc400117 	ldw	r17,4(sp)
    a51c:	dc000017 	ldw	r16,0(sp)
    a520:	dec00304 	addi	sp,sp,12
    a524:	f800283a 	ret
    a528:	80c00017 	ldw	r3,0(r16)
    a52c:	183ff926 	beq	r3,zero,a514 <_isatty_r+0x30>
    a530:	88c00015 	stw	r3,0(r17)
    a534:	003ff706 	br	a514 <_isatty_r+0x30>

0000a538 <_lseek_r>:
    a538:	defffd04 	addi	sp,sp,-12
    a53c:	dc000015 	stw	r16,0(sp)
    a540:	04000074 	movhi	r16,1
    a544:	dc400115 	stw	r17,4(sp)
    a548:	84119204 	addi	r16,r16,17992
    a54c:	2023883a 	mov	r17,r4
    a550:	2809883a 	mov	r4,r5
    a554:	300b883a 	mov	r5,r6
    a558:	380d883a 	mov	r6,r7
    a55c:	dfc00215 	stw	ra,8(sp)
    a560:	80000015 	stw	zero,0(r16)
    a564:	000e1f40 	call	e1f4 <lseek>
    a568:	00ffffc4 	movi	r3,-1
    a56c:	10c00526 	beq	r2,r3,a584 <_lseek_r+0x4c>
    a570:	dfc00217 	ldw	ra,8(sp)
    a574:	dc400117 	ldw	r17,4(sp)
    a578:	dc000017 	ldw	r16,0(sp)
    a57c:	dec00304 	addi	sp,sp,12
    a580:	f800283a 	ret
    a584:	80c00017 	ldw	r3,0(r16)
    a588:	183ff926 	beq	r3,zero,a570 <_lseek_r+0x38>
    a58c:	88c00015 	stw	r3,0(r17)
    a590:	003ff706 	br	a570 <_lseek_r+0x38>

0000a594 <_read_r>:
    a594:	defffd04 	addi	sp,sp,-12
    a598:	dc000015 	stw	r16,0(sp)
    a59c:	04000074 	movhi	r16,1
    a5a0:	dc400115 	stw	r17,4(sp)
    a5a4:	84119204 	addi	r16,r16,17992
    a5a8:	2023883a 	mov	r17,r4
    a5ac:	2809883a 	mov	r4,r5
    a5b0:	300b883a 	mov	r5,r6
    a5b4:	380d883a 	mov	r6,r7
    a5b8:	dfc00215 	stw	ra,8(sp)
    a5bc:	80000015 	stw	zero,0(r16)
    a5c0:	000e3d80 	call	e3d8 <read>
    a5c4:	00ffffc4 	movi	r3,-1
    a5c8:	10c00526 	beq	r2,r3,a5e0 <_read_r+0x4c>
    a5cc:	dfc00217 	ldw	ra,8(sp)
    a5d0:	dc400117 	ldw	r17,4(sp)
    a5d4:	dc000017 	ldw	r16,0(sp)
    a5d8:	dec00304 	addi	sp,sp,12
    a5dc:	f800283a 	ret
    a5e0:	80c00017 	ldw	r3,0(r16)
    a5e4:	183ff926 	beq	r3,zero,a5cc <_read_r+0x38>
    a5e8:	88c00015 	stw	r3,0(r17)
    a5ec:	003ff706 	br	a5cc <_read_r+0x38>

0000a5f0 <__swbuf_r>:
    a5f0:	defffc04 	addi	sp,sp,-16
    a5f4:	dc800215 	stw	r18,8(sp)
    a5f8:	dc400115 	stw	r17,4(sp)
    a5fc:	dc000015 	stw	r16,0(sp)
    a600:	dfc00315 	stw	ra,12(sp)
    a604:	2025883a 	mov	r18,r4
    a608:	2823883a 	mov	r17,r5
    a60c:	3021883a 	mov	r16,r6
    a610:	20000226 	beq	r4,zero,a61c <__swbuf_r+0x2c>
    a614:	20800e17 	ldw	r2,56(r4)
    a618:	10004126 	beq	r2,zero,a720 <__swbuf_r+0x130>
    a61c:	80c00617 	ldw	r3,24(r16)
    a620:	8180030b 	ldhu	r6,12(r16)
    a624:	80c00215 	stw	r3,8(r16)
    a628:	30c0020c 	andi	r3,r6,8
    a62c:	18003526 	beq	r3,zero,a704 <__swbuf_r+0x114>
    a630:	80c00417 	ldw	r3,16(r16)
    a634:	18003326 	beq	r3,zero,a704 <__swbuf_r+0x114>
    a638:	3088000c 	andi	r2,r6,8192
    a63c:	8c403fcc 	andi	r17,r17,255
    a640:	10001726 	beq	r2,zero,a6a0 <__swbuf_r+0xb0>
    a644:	80800017 	ldw	r2,0(r16)
    a648:	81000517 	ldw	r4,20(r16)
    a64c:	10c7c83a 	sub	r3,r2,r3
    a650:	19001d0e 	bge	r3,r4,a6c8 <__swbuf_r+0xd8>
    a654:	18c00044 	addi	r3,r3,1
    a658:	81400217 	ldw	r5,8(r16)
    a65c:	11000044 	addi	r4,r2,1
    a660:	81000015 	stw	r4,0(r16)
    a664:	297fffc4 	addi	r5,r5,-1
    a668:	81400215 	stw	r5,8(r16)
    a66c:	14400005 	stb	r17,0(r2)
    a670:	80800517 	ldw	r2,20(r16)
    a674:	10c01d26 	beq	r2,r3,a6ec <__swbuf_r+0xfc>
    a678:	8080030b 	ldhu	r2,12(r16)
    a67c:	1080004c 	andi	r2,r2,1
    a680:	1000181e 	bne	r2,zero,a6e4 <__swbuf_r+0xf4>
    a684:	8805883a 	mov	r2,r17
    a688:	dfc00317 	ldw	ra,12(sp)
    a68c:	dc800217 	ldw	r18,8(sp)
    a690:	dc400117 	ldw	r17,4(sp)
    a694:	dc000017 	ldw	r16,0(sp)
    a698:	dec00404 	addi	sp,sp,16
    a69c:	f800283a 	ret
    a6a0:	81001917 	ldw	r4,100(r16)
    a6a4:	00b7ffc4 	movi	r2,-8193
    a6a8:	31880014 	ori	r6,r6,8192
    a6ac:	2084703a 	and	r2,r4,r2
    a6b0:	80801915 	stw	r2,100(r16)
    a6b4:	80800017 	ldw	r2,0(r16)
    a6b8:	81000517 	ldw	r4,20(r16)
    a6bc:	8180030d 	sth	r6,12(r16)
    a6c0:	10c7c83a 	sub	r3,r2,r3
    a6c4:	193fe316 	blt	r3,r4,a654 <__swbuf_r+0x64>
    a6c8:	9009883a 	mov	r4,r18
    a6cc:	800b883a 	mov	r5,r16
    a6d0:	000554c0 	call	554c <_fflush_r>
    a6d4:	1000091e 	bne	r2,zero,a6fc <__swbuf_r+0x10c>
    a6d8:	80800017 	ldw	r2,0(r16)
    a6dc:	00c00044 	movi	r3,1
    a6e0:	003fdd06 	br	a658 <__swbuf_r+0x68>
    a6e4:	00800284 	movi	r2,10
    a6e8:	88bfe61e 	bne	r17,r2,a684 <__swbuf_r+0x94>
    a6ec:	9009883a 	mov	r4,r18
    a6f0:	800b883a 	mov	r5,r16
    a6f4:	000554c0 	call	554c <_fflush_r>
    a6f8:	103fe226 	beq	r2,zero,a684 <__swbuf_r+0x94>
    a6fc:	00bfffc4 	movi	r2,-1
    a700:	003fe106 	br	a688 <__swbuf_r+0x98>
    a704:	9009883a 	mov	r4,r18
    a708:	800b883a 	mov	r5,r16
    a70c:	00038a00 	call	38a0 <__swsetup_r>
    a710:	103ffa1e 	bne	r2,zero,a6fc <__swbuf_r+0x10c>
    a714:	8180030b 	ldhu	r6,12(r16)
    a718:	80c00417 	ldw	r3,16(r16)
    a71c:	003fc606 	br	a638 <__swbuf_r+0x48>
    a720:	00059380 	call	5938 <__sinit>
    a724:	003fbd06 	br	a61c <__swbuf_r+0x2c>

0000a728 <__swbuf>:
    a728:	00c00074 	movhi	r3,1
    a72c:	18d17b04 	addi	r3,r3,17900
    a730:	2005883a 	mov	r2,r4
    a734:	19000017 	ldw	r4,0(r3)
    a738:	280d883a 	mov	r6,r5
    a73c:	100b883a 	mov	r5,r2
    a740:	000a5f01 	jmpi	a5f0 <__swbuf_r>

0000a744 <_wcrtomb_r>:
    a744:	defff604 	addi	sp,sp,-40
    a748:	00800074 	movhi	r2,1
    a74c:	dc800815 	stw	r18,32(sp)
    a750:	dc400715 	stw	r17,28(sp)
    a754:	dc000615 	stw	r16,24(sp)
    a758:	10917f04 	addi	r2,r2,17916
    a75c:	dfc00915 	stw	ra,36(sp)
    a760:	2021883a 	mov	r16,r4
    a764:	3823883a 	mov	r17,r7
    a768:	14800017 	ldw	r18,0(r2)
    a76c:	28001426 	beq	r5,zero,a7c0 <_wcrtomb_r+0x7c>
    a770:	d9400415 	stw	r5,16(sp)
    a774:	d9800515 	stw	r6,20(sp)
    a778:	000646c0 	call	646c <__locale_charset>
    a77c:	d9400417 	ldw	r5,16(sp)
    a780:	d9800517 	ldw	r6,20(sp)
    a784:	8009883a 	mov	r4,r16
    a788:	dc400015 	stw	r17,0(sp)
    a78c:	100f883a 	mov	r7,r2
    a790:	903ee83a 	callr	r18
    a794:	00ffffc4 	movi	r3,-1
    a798:	10c0031e 	bne	r2,r3,a7a8 <_wcrtomb_r+0x64>
    a79c:	88000015 	stw	zero,0(r17)
    a7a0:	00c02284 	movi	r3,138
    a7a4:	80c00015 	stw	r3,0(r16)
    a7a8:	dfc00917 	ldw	ra,36(sp)
    a7ac:	dc800817 	ldw	r18,32(sp)
    a7b0:	dc400717 	ldw	r17,28(sp)
    a7b4:	dc000617 	ldw	r16,24(sp)
    a7b8:	dec00a04 	addi	sp,sp,40
    a7bc:	f800283a 	ret
    a7c0:	000646c0 	call	646c <__locale_charset>
    a7c4:	8009883a 	mov	r4,r16
    a7c8:	dc400015 	stw	r17,0(sp)
    a7cc:	d9400104 	addi	r5,sp,4
    a7d0:	000d883a 	mov	r6,zero
    a7d4:	100f883a 	mov	r7,r2
    a7d8:	903ee83a 	callr	r18
    a7dc:	003fed06 	br	a794 <_wcrtomb_r+0x50>

0000a7e0 <wcrtomb>:
    a7e0:	defff604 	addi	sp,sp,-40
    a7e4:	00800074 	movhi	r2,1
    a7e8:	dc800615 	stw	r18,24(sp)
    a7ec:	dc400515 	stw	r17,20(sp)
    a7f0:	dc000415 	stw	r16,16(sp)
    a7f4:	10917b04 	addi	r2,r2,17900
    a7f8:	dfc00915 	stw	ra,36(sp)
    a7fc:	dd000815 	stw	r20,32(sp)
    a800:	dcc00715 	stw	r19,28(sp)
    a804:	2021883a 	mov	r16,r4
    a808:	3025883a 	mov	r18,r6
    a80c:	14400017 	ldw	r17,0(r2)
    a810:	20001826 	beq	r4,zero,a874 <wcrtomb+0x94>
    a814:	00800074 	movhi	r2,1
    a818:	10917f04 	addi	r2,r2,17916
    a81c:	15000017 	ldw	r20,0(r2)
    a820:	2827883a 	mov	r19,r5
    a824:	000646c0 	call	646c <__locale_charset>
    a828:	8809883a 	mov	r4,r17
    a82c:	dc800015 	stw	r18,0(sp)
    a830:	800b883a 	mov	r5,r16
    a834:	980d883a 	mov	r6,r19
    a838:	100f883a 	mov	r7,r2
    a83c:	a03ee83a 	callr	r20
    a840:	00ffffc4 	movi	r3,-1
    a844:	10c0031e 	bne	r2,r3,a854 <wcrtomb+0x74>
    a848:	90000015 	stw	zero,0(r18)
    a84c:	00c02284 	movi	r3,138
    a850:	88c00015 	stw	r3,0(r17)
    a854:	dfc00917 	ldw	ra,36(sp)
    a858:	dd000817 	ldw	r20,32(sp)
    a85c:	dcc00717 	ldw	r19,28(sp)
    a860:	dc800617 	ldw	r18,24(sp)
    a864:	dc400517 	ldw	r17,20(sp)
    a868:	dc000417 	ldw	r16,16(sp)
    a86c:	dec00a04 	addi	sp,sp,40
    a870:	f800283a 	ret
    a874:	00800074 	movhi	r2,1
    a878:	10917f04 	addi	r2,r2,17916
    a87c:	14000017 	ldw	r16,0(r2)
    a880:	000646c0 	call	646c <__locale_charset>
    a884:	8809883a 	mov	r4,r17
    a888:	dc800015 	stw	r18,0(sp)
    a88c:	d9400104 	addi	r5,sp,4
    a890:	000d883a 	mov	r6,zero
    a894:	100f883a 	mov	r7,r2
    a898:	803ee83a 	callr	r16
    a89c:	003fe806 	br	a840 <wcrtomb+0x60>

0000a8a0 <__ascii_wctomb>:
    a8a0:	28000526 	beq	r5,zero,a8b8 <__ascii_wctomb+0x18>
    a8a4:	00803fc4 	movi	r2,255
    a8a8:	11800536 	bltu	r2,r6,a8c0 <__ascii_wctomb+0x20>
    a8ac:	29800005 	stb	r6,0(r5)
    a8b0:	00800044 	movi	r2,1
    a8b4:	f800283a 	ret
    a8b8:	0005883a 	mov	r2,zero
    a8bc:	f800283a 	ret
    a8c0:	00802284 	movi	r2,138
    a8c4:	20800015 	stw	r2,0(r4)
    a8c8:	00bfffc4 	movi	r2,-1
    a8cc:	f800283a 	ret

0000a8d0 <_wctomb_r>:
    a8d0:	00800074 	movhi	r2,1
    a8d4:	defff904 	addi	sp,sp,-28
    a8d8:	10917f04 	addi	r2,r2,17916
    a8dc:	dfc00615 	stw	ra,24(sp)
    a8e0:	dc400515 	stw	r17,20(sp)
    a8e4:	dc000415 	stw	r16,16(sp)
    a8e8:	3823883a 	mov	r17,r7
    a8ec:	14000017 	ldw	r16,0(r2)
    a8f0:	d9000115 	stw	r4,4(sp)
    a8f4:	d9400215 	stw	r5,8(sp)
    a8f8:	d9800315 	stw	r6,12(sp)
    a8fc:	000646c0 	call	646c <__locale_charset>
    a900:	d9000117 	ldw	r4,4(sp)
    a904:	d9400217 	ldw	r5,8(sp)
    a908:	d9800317 	ldw	r6,12(sp)
    a90c:	dc400015 	stw	r17,0(sp)
    a910:	100f883a 	mov	r7,r2
    a914:	803ee83a 	callr	r16
    a918:	dfc00617 	ldw	ra,24(sp)
    a91c:	dc400517 	ldw	r17,20(sp)
    a920:	dc000417 	ldw	r16,16(sp)
    a924:	dec00704 	addi	sp,sp,28
    a928:	f800283a 	ret

0000a92c <__udivdi3>:
    a92c:	defff504 	addi	sp,sp,-44
    a930:	dcc00415 	stw	r19,16(sp)
    a934:	dc000115 	stw	r16,4(sp)
    a938:	dfc00a15 	stw	ra,40(sp)
    a93c:	df000915 	stw	fp,36(sp)
    a940:	ddc00815 	stw	r23,32(sp)
    a944:	dd800715 	stw	r22,28(sp)
    a948:	dd400615 	stw	r21,24(sp)
    a94c:	dd000515 	stw	r20,20(sp)
    a950:	dc800315 	stw	r18,12(sp)
    a954:	dc400215 	stw	r17,8(sp)
    a958:	2027883a 	mov	r19,r4
    a95c:	2821883a 	mov	r16,r5
    a960:	3800471e 	bne	r7,zero,aa80 <__udivdi3+0x154>
    a964:	3025883a 	mov	r18,r6
    a968:	2023883a 	mov	r17,r4
    a96c:	2980592e 	bgeu	r5,r6,aad4 <__udivdi3+0x1a8>
    a970:	00bfffd4 	movui	r2,65535
    a974:	2829883a 	mov	r20,r5
    a978:	1180b236 	bltu	r2,r6,ac44 <__udivdi3+0x318>
    a97c:	00803fc4 	movi	r2,255
    a980:	1181622e 	bgeu	r2,r6,af0c <__udivdi3+0x5e0>
    a984:	00800204 	movi	r2,8
    a988:	1007883a 	mov	r3,r2
    a98c:	3084d83a 	srl	r2,r6,r2
    a990:	01000074 	movhi	r4,1
    a994:	2108c404 	addi	r4,r4,8976
    a998:	2085883a 	add	r2,r4,r2
    a99c:	11000003 	ldbu	r4,0(r2)
    a9a0:	20c9883a 	add	r4,r4,r3
    a9a4:	00c00804 	movi	r3,32
    a9a8:	1907c83a 	sub	r3,r3,r4
    a9ac:	18000526 	beq	r3,zero,a9c4 <__udivdi3+0x98>
    a9b0:	80e0983a 	sll	r16,r16,r3
    a9b4:	9908d83a 	srl	r4,r19,r4
    a9b8:	30e4983a 	sll	r18,r6,r3
    a9bc:	98e2983a 	sll	r17,r19,r3
    a9c0:	8128b03a 	or	r20,r16,r4
    a9c4:	902ad43a 	srli	r21,r18,16
    a9c8:	a009883a 	mov	r4,r20
    a9cc:	95bfffcc 	andi	r22,r18,65535
    a9d0:	a80b883a 	mov	r5,r21
    a9d4:	000b6ac0 	call	b6ac <__umodsi3>
    a9d8:	a009883a 	mov	r4,r20
    a9dc:	a80b883a 	mov	r5,r21
    a9e0:	102f883a 	mov	r23,r2
    a9e4:	000b6a40 	call	b6a4 <__udivsi3>
    a9e8:	1009883a 	mov	r4,r2
    a9ec:	b00b883a 	mov	r5,r22
    a9f0:	1021883a 	mov	r16,r2
    a9f4:	0000eb00 	call	eb0 <__mulsi3>
    a9f8:	b82e943a 	slli	r23,r23,16
    a9fc:	8808d43a 	srli	r4,r17,16
    aa00:	b906b03a 	or	r3,r23,r4
    aa04:	1880052e 	bgeu	r3,r2,aa1c <__udivdi3+0xf0>
    aa08:	1c87883a 	add	r3,r3,r18
    aa0c:	813fffc4 	addi	r4,r16,-1
    aa10:	1c800136 	bltu	r3,r18,aa18 <__udivdi3+0xec>
    aa14:	18815236 	bltu	r3,r2,af60 <__udivdi3+0x634>
    aa18:	2021883a 	mov	r16,r4
    aa1c:	18a7c83a 	sub	r19,r3,r2
    aa20:	9809883a 	mov	r4,r19
    aa24:	a80b883a 	mov	r5,r21
    aa28:	000b6ac0 	call	b6ac <__umodsi3>
    aa2c:	1029883a 	mov	r20,r2
    aa30:	9809883a 	mov	r4,r19
    aa34:	a80b883a 	mov	r5,r21
    aa38:	a028943a 	slli	r20,r20,16
    aa3c:	000b6a40 	call	b6a4 <__udivsi3>
    aa40:	1009883a 	mov	r4,r2
    aa44:	b00b883a 	mov	r5,r22
    aa48:	8c7fffcc 	andi	r17,r17,65535
    aa4c:	1027883a 	mov	r19,r2
    aa50:	a462b03a 	or	r17,r20,r17
    aa54:	0000eb00 	call	eb0 <__mulsi3>
    aa58:	8880052e 	bgeu	r17,r2,aa70 <__udivdi3+0x144>
    aa5c:	8ca3883a 	add	r17,r17,r18
    aa60:	98ffffc4 	addi	r3,r19,-1
    aa64:	8c811036 	bltu	r17,r18,aea8 <__udivdi3+0x57c>
    aa68:	88810f2e 	bgeu	r17,r2,aea8 <__udivdi3+0x57c>
    aa6c:	9cffff84 	addi	r19,r19,-2
    aa70:	8020943a 	slli	r16,r16,16
    aa74:	0007883a 	mov	r3,zero
    aa78:	9c04b03a 	or	r2,r19,r16
    aa7c:	00006006 	br	ac00 <__udivdi3+0x2d4>
    aa80:	29c05d36 	bltu	r5,r7,abf8 <__udivdi3+0x2cc>
    aa84:	00bfffd4 	movui	r2,65535
    aa88:	11c0692e 	bgeu	r2,r7,ac30 <__udivdi3+0x304>
    aa8c:	00804034 	movhi	r2,256
    aa90:	10bfffc4 	addi	r2,r2,-1
    aa94:	11c10e2e 	bgeu	r2,r7,aed0 <__udivdi3+0x5a4>
    aa98:	01400604 	movi	r5,24
    aa9c:	2811883a 	mov	r8,r5
    aaa0:	394ad83a 	srl	r5,r7,r5
    aaa4:	00800074 	movhi	r2,1
    aaa8:	1088c404 	addi	r2,r2,8976
    aaac:	114b883a 	add	r5,r2,r5
    aab0:	29400003 	ldbu	r5,0(r5)
    aab4:	00c00804 	movi	r3,32
    aab8:	2a0b883a 	add	r5,r5,r8
    aabc:	196fc83a 	sub	r23,r3,r5
    aac0:	b8006b1e 	bne	r23,zero,ac70 <__udivdi3+0x344>
    aac4:	3c011436 	bltu	r7,r16,af18 <__udivdi3+0x5ec>
    aac8:	9985403a 	cmpgeu	r2,r19,r6
    aacc:	0007883a 	mov	r3,zero
    aad0:	00004b06 	br	ac00 <__udivdi3+0x2d4>
    aad4:	3000041e 	bne	r6,zero,aae8 <__udivdi3+0x1bc>
    aad8:	01000044 	movi	r4,1
    aadc:	000b883a 	mov	r5,zero
    aae0:	000b6a40 	call	b6a4 <__udivsi3>
    aae4:	1025883a 	mov	r18,r2
    aae8:	00bfffd4 	movui	r2,65535
    aaec:	14805b2e 	bgeu	r2,r18,ac5c <__udivdi3+0x330>
    aaf0:	00804034 	movhi	r2,256
    aaf4:	10bfffc4 	addi	r2,r2,-1
    aaf8:	1480fe2e 	bgeu	r2,r18,aef4 <__udivdi3+0x5c8>
    aafc:	00800604 	movi	r2,24
    ab00:	1007883a 	mov	r3,r2
    ab04:	9084d83a 	srl	r2,r18,r2
    ab08:	01000074 	movhi	r4,1
    ab0c:	2108c404 	addi	r4,r4,8976
    ab10:	2085883a 	add	r2,r4,r2
    ab14:	11800003 	ldbu	r6,0(r2)
    ab18:	01c00804 	movi	r7,32
    ab1c:	30c7883a 	add	r3,r6,r3
    ab20:	38cfc83a 	sub	r7,r7,r3
    ab24:	3800a71e 	bne	r7,zero,adc4 <__udivdi3+0x498>
    ab28:	9028d43a 	srli	r20,r18,16
    ab2c:	84a1c83a 	sub	r16,r16,r18
    ab30:	957fffcc 	andi	r21,r18,65535
    ab34:	00c00044 	movi	r3,1
    ab38:	8009883a 	mov	r4,r16
    ab3c:	a00b883a 	mov	r5,r20
    ab40:	d8c00015 	stw	r3,0(sp)
    ab44:	000b6ac0 	call	b6ac <__umodsi3>
    ab48:	8009883a 	mov	r4,r16
    ab4c:	a00b883a 	mov	r5,r20
    ab50:	102d883a 	mov	r22,r2
    ab54:	000b6a40 	call	b6a4 <__udivsi3>
    ab58:	1009883a 	mov	r4,r2
    ab5c:	a80b883a 	mov	r5,r21
    ab60:	1021883a 	mov	r16,r2
    ab64:	0000eb00 	call	eb0 <__mulsi3>
    ab68:	b02c943a 	slli	r22,r22,16
    ab6c:	880ed43a 	srli	r7,r17,16
    ab70:	d8c00017 	ldw	r3,0(sp)
    ab74:	b1ccb03a 	or	r6,r22,r7
    ab78:	3080052e 	bgeu	r6,r2,ab90 <__udivdi3+0x264>
    ab7c:	348d883a 	add	r6,r6,r18
    ab80:	813fffc4 	addi	r4,r16,-1
    ab84:	34800136 	bltu	r6,r18,ab8c <__udivdi3+0x260>
    ab88:	3080f236 	bltu	r6,r2,af54 <__udivdi3+0x628>
    ab8c:	2021883a 	mov	r16,r4
    ab90:	30a7c83a 	sub	r19,r6,r2
    ab94:	9809883a 	mov	r4,r19
    ab98:	a00b883a 	mov	r5,r20
    ab9c:	d8c00015 	stw	r3,0(sp)
    aba0:	000b6ac0 	call	b6ac <__umodsi3>
    aba4:	102d883a 	mov	r22,r2
    aba8:	9809883a 	mov	r4,r19
    abac:	a00b883a 	mov	r5,r20
    abb0:	b02c943a 	slli	r22,r22,16
    abb4:	000b6a40 	call	b6a4 <__udivsi3>
    abb8:	1009883a 	mov	r4,r2
    abbc:	a80b883a 	mov	r5,r21
    abc0:	8c7fffcc 	andi	r17,r17,65535
    abc4:	1027883a 	mov	r19,r2
    abc8:	b462b03a 	or	r17,r22,r17
    abcc:	0000eb00 	call	eb0 <__mulsi3>
    abd0:	d8c00017 	ldw	r3,0(sp)
    abd4:	8880052e 	bgeu	r17,r2,abec <__udivdi3+0x2c0>
    abd8:	8ca3883a 	add	r17,r17,r18
    abdc:	993fffc4 	addi	r4,r19,-1
    abe0:	8c80af36 	bltu	r17,r18,aea0 <__udivdi3+0x574>
    abe4:	8880ae2e 	bgeu	r17,r2,aea0 <__udivdi3+0x574>
    abe8:	9cffff84 	addi	r19,r19,-2
    abec:	8020943a 	slli	r16,r16,16
    abf0:	9c04b03a 	or	r2,r19,r16
    abf4:	00000206 	br	ac00 <__udivdi3+0x2d4>
    abf8:	0007883a 	mov	r3,zero
    abfc:	0005883a 	mov	r2,zero
    ac00:	dfc00a17 	ldw	ra,40(sp)
    ac04:	df000917 	ldw	fp,36(sp)
    ac08:	ddc00817 	ldw	r23,32(sp)
    ac0c:	dd800717 	ldw	r22,28(sp)
    ac10:	dd400617 	ldw	r21,24(sp)
    ac14:	dd000517 	ldw	r20,20(sp)
    ac18:	dcc00417 	ldw	r19,16(sp)
    ac1c:	dc800317 	ldw	r18,12(sp)
    ac20:	dc400217 	ldw	r17,8(sp)
    ac24:	dc000117 	ldw	r16,4(sp)
    ac28:	dec00b04 	addi	sp,sp,44
    ac2c:	f800283a 	ret
    ac30:	00803fc4 	movi	r2,255
    ac34:	11c0a92e 	bgeu	r2,r7,aedc <__udivdi3+0x5b0>
    ac38:	01400204 	movi	r5,8
    ac3c:	2811883a 	mov	r8,r5
    ac40:	003f9706 	br	aaa0 <__udivdi3+0x174>
    ac44:	00804034 	movhi	r2,256
    ac48:	10bfffc4 	addi	r2,r2,-1
    ac4c:	1180a62e 	bgeu	r2,r6,aee8 <__udivdi3+0x5bc>
    ac50:	00800604 	movi	r2,24
    ac54:	1007883a 	mov	r3,r2
    ac58:	003f4c06 	br	a98c <__udivdi3+0x60>
    ac5c:	00803fc4 	movi	r2,255
    ac60:	1480a72e 	bgeu	r2,r18,af00 <__udivdi3+0x5d4>
    ac64:	00800204 	movi	r2,8
    ac68:	1007883a 	mov	r3,r2
    ac6c:	003fa506 	br	ab04 <__udivdi3+0x1d8>
    ac70:	3178d83a 	srl	fp,r6,r5
    ac74:	3dce983a 	sll	r7,r7,r23
    ac78:	8168d83a 	srl	r20,r16,r5
    ac7c:	9950d83a 	srl	r8,r19,r5
    ac80:	3f38b03a 	or	fp,r7,fp
    ac84:	e024d43a 	srli	r18,fp,16
    ac88:	85e0983a 	sll	r16,r16,r23
    ac8c:	a009883a 	mov	r4,r20
    ac90:	900b883a 	mov	r5,r18
    ac94:	8220b03a 	or	r16,r16,r8
    ac98:	35ea983a 	sll	r21,r6,r23
    ac9c:	000b6ac0 	call	b6ac <__umodsi3>
    aca0:	a009883a 	mov	r4,r20
    aca4:	900b883a 	mov	r5,r18
    aca8:	1023883a 	mov	r17,r2
    acac:	e5bfffcc 	andi	r22,fp,65535
    acb0:	000b6a40 	call	b6a4 <__udivsi3>
    acb4:	1009883a 	mov	r4,r2
    acb8:	b00b883a 	mov	r5,r22
    acbc:	1029883a 	mov	r20,r2
    acc0:	0000eb00 	call	eb0 <__mulsi3>
    acc4:	8806943a 	slli	r3,r17,16
    acc8:	8014d43a 	srli	r10,r16,16
    accc:	1a92b03a 	or	r9,r3,r10
    acd0:	4880042e 	bgeu	r9,r2,ace4 <__udivdi3+0x3b8>
    acd4:	4f13883a 	add	r9,r9,fp
    acd8:	a0ffffc4 	addi	r3,r20,-1
    acdc:	4f00952e 	bgeu	r9,fp,af34 <__udivdi3+0x608>
    ace0:	1829883a 	mov	r20,r3
    ace4:	48a3c83a 	sub	r17,r9,r2
    ace8:	8809883a 	mov	r4,r17
    acec:	900b883a 	mov	r5,r18
    acf0:	000b6ac0 	call	b6ac <__umodsi3>
    acf4:	8809883a 	mov	r4,r17
    acf8:	900b883a 	mov	r5,r18
    acfc:	d8800015 	stw	r2,0(sp)
    ad00:	000b6a40 	call	b6a4 <__udivsi3>
    ad04:	1009883a 	mov	r4,r2
    ad08:	b00b883a 	mov	r5,r22
    ad0c:	1023883a 	mov	r17,r2
    ad10:	0000eb00 	call	eb0 <__mulsi3>
    ad14:	d8c00017 	ldw	r3,0(sp)
    ad18:	823fffcc 	andi	r8,r16,65535
    ad1c:	1806943a 	slli	r3,r3,16
    ad20:	1a20b03a 	or	r16,r3,r8
    ad24:	8080042e 	bgeu	r16,r2,ad38 <__udivdi3+0x40c>
    ad28:	8721883a 	add	r16,r16,fp
    ad2c:	88ffffc4 	addi	r3,r17,-1
    ad30:	87007c2e 	bgeu	r16,fp,af24 <__udivdi3+0x5f8>
    ad34:	1823883a 	mov	r17,r3
    ad38:	a028943a 	slli	r20,r20,16
    ad3c:	acbfffcc 	andi	r18,r21,65535
    ad40:	900b883a 	mov	r5,r18
    ad44:	8d28b03a 	or	r20,r17,r20
    ad48:	a022d43a 	srli	r17,r20,16
    ad4c:	a5bfffcc 	andi	r22,r20,65535
    ad50:	b009883a 	mov	r4,r22
    ad54:	a82ad43a 	srli	r21,r21,16
    ad58:	80a1c83a 	sub	r16,r16,r2
    ad5c:	0000eb00 	call	eb0 <__mulsi3>
    ad60:	8809883a 	mov	r4,r17
    ad64:	900b883a 	mov	r5,r18
    ad68:	1039883a 	mov	fp,r2
    ad6c:	0000eb00 	call	eb0 <__mulsi3>
    ad70:	8809883a 	mov	r4,r17
    ad74:	a80b883a 	mov	r5,r21
    ad78:	1025883a 	mov	r18,r2
    ad7c:	0000eb00 	call	eb0 <__mulsi3>
    ad80:	b009883a 	mov	r4,r22
    ad84:	a80b883a 	mov	r5,r21
    ad88:	1023883a 	mov	r17,r2
    ad8c:	0000eb00 	call	eb0 <__mulsi3>
    ad90:	e006d43a 	srli	r3,fp,16
    ad94:	9085883a 	add	r2,r18,r2
    ad98:	10c7883a 	add	r3,r2,r3
    ad9c:	1c80022e 	bgeu	r3,r18,ada8 <__udivdi3+0x47c>
    ada0:	00800074 	movhi	r2,1
    ada4:	88a3883a 	add	r17,r17,r2
    ada8:	1808d43a 	srli	r4,r3,16
    adac:	8909883a 	add	r4,r17,r4
    adb0:	81004436 	bltu	r16,r4,aec4 <__udivdi3+0x598>
    adb4:	81003e26 	beq	r16,r4,aeb0 <__udivdi3+0x584>
    adb8:	a005883a 	mov	r2,r20
    adbc:	0007883a 	mov	r3,zero
    adc0:	003f8f06 	br	ac00 <__udivdi3+0x2d4>
    adc4:	91e4983a 	sll	r18,r18,r7
    adc8:	80eed83a 	srl	r23,r16,r3
    adcc:	81cc983a 	sll	r6,r16,r7
    add0:	9028d43a 	srli	r20,r18,16
    add4:	98c6d83a 	srl	r3,r19,r3
    add8:	b809883a 	mov	r4,r23
    addc:	a00b883a 	mov	r5,r20
    ade0:	30ecb03a 	or	r22,r6,r3
    ade4:	99e2983a 	sll	r17,r19,r7
    ade8:	000b6ac0 	call	b6ac <__umodsi3>
    adec:	b809883a 	mov	r4,r23
    adf0:	a00b883a 	mov	r5,r20
    adf4:	1021883a 	mov	r16,r2
    adf8:	957fffcc 	andi	r21,r18,65535
    adfc:	000b6a40 	call	b6a4 <__udivsi3>
    ae00:	a80b883a 	mov	r5,r21
    ae04:	1009883a 	mov	r4,r2
    ae08:	102f883a 	mov	r23,r2
    ae0c:	0000eb00 	call	eb0 <__mulsi3>
    ae10:	8020943a 	slli	r16,r16,16
    ae14:	b00ad43a 	srli	r5,r22,16
    ae18:	814cb03a 	or	r6,r16,r5
    ae1c:	3080062e 	bgeu	r6,r2,ae38 <__udivdi3+0x50c>
    ae20:	348d883a 	add	r6,r6,r18
    ae24:	b8ffffc4 	addi	r3,r23,-1
    ae28:	34804836 	bltu	r6,r18,af4c <__udivdi3+0x620>
    ae2c:	3080472e 	bgeu	r6,r2,af4c <__udivdi3+0x620>
    ae30:	bdffff84 	addi	r23,r23,-2
    ae34:	348d883a 	add	r6,r6,r18
    ae38:	30a7c83a 	sub	r19,r6,r2
    ae3c:	9809883a 	mov	r4,r19
    ae40:	a00b883a 	mov	r5,r20
    ae44:	000b6ac0 	call	b6ac <__umodsi3>
    ae48:	9809883a 	mov	r4,r19
    ae4c:	a00b883a 	mov	r5,r20
    ae50:	1039883a 	mov	fp,r2
    ae54:	000b6a40 	call	b6a4 <__udivsi3>
    ae58:	1009883a 	mov	r4,r2
    ae5c:	a80b883a 	mov	r5,r21
    ae60:	e038943a 	slli	fp,fp,16
    ae64:	1027883a 	mov	r19,r2
    ae68:	0000eb00 	call	eb0 <__mulsi3>
    ae6c:	b1bfffcc 	andi	r6,r22,65535
    ae70:	e18cb03a 	or	r6,fp,r6
    ae74:	3080062e 	bgeu	r6,r2,ae90 <__udivdi3+0x564>
    ae78:	348d883a 	add	r6,r6,r18
    ae7c:	98ffffc4 	addi	r3,r19,-1
    ae80:	34803036 	bltu	r6,r18,af44 <__udivdi3+0x618>
    ae84:	30802f2e 	bgeu	r6,r2,af44 <__udivdi3+0x618>
    ae88:	9cffff84 	addi	r19,r19,-2
    ae8c:	348d883a 	add	r6,r6,r18
    ae90:	b82e943a 	slli	r23,r23,16
    ae94:	30a1c83a 	sub	r16,r6,r2
    ae98:	9dc6b03a 	or	r3,r19,r23
    ae9c:	003f2606 	br	ab38 <__udivdi3+0x20c>
    aea0:	2027883a 	mov	r19,r4
    aea4:	003f5106 	br	abec <__udivdi3+0x2c0>
    aea8:	1827883a 	mov	r19,r3
    aeac:	003ef006 	br	aa70 <__udivdi3+0x144>
    aeb0:	1808943a 	slli	r4,r3,16
    aeb4:	9dc6983a 	sll	r3,r19,r23
    aeb8:	e73fffcc 	andi	fp,fp,65535
    aebc:	2709883a 	add	r4,r4,fp
    aec0:	193fbd2e 	bgeu	r3,r4,adb8 <__udivdi3+0x48c>
    aec4:	a0bfffc4 	addi	r2,r20,-1
    aec8:	0007883a 	mov	r3,zero
    aecc:	003f4c06 	br	ac00 <__udivdi3+0x2d4>
    aed0:	01400404 	movi	r5,16
    aed4:	2811883a 	mov	r8,r5
    aed8:	003ef106 	br	aaa0 <__udivdi3+0x174>
    aedc:	000b883a 	mov	r5,zero
    aee0:	0011883a 	mov	r8,zero
    aee4:	003eee06 	br	aaa0 <__udivdi3+0x174>
    aee8:	00800404 	movi	r2,16
    aeec:	1007883a 	mov	r3,r2
    aef0:	003ea606 	br	a98c <__udivdi3+0x60>
    aef4:	00800404 	movi	r2,16
    aef8:	1007883a 	mov	r3,r2
    aefc:	003f0106 	br	ab04 <__udivdi3+0x1d8>
    af00:	0005883a 	mov	r2,zero
    af04:	0007883a 	mov	r3,zero
    af08:	003efe06 	br	ab04 <__udivdi3+0x1d8>
    af0c:	0005883a 	mov	r2,zero
    af10:	0007883a 	mov	r3,zero
    af14:	003e9d06 	br	a98c <__udivdi3+0x60>
    af18:	0007883a 	mov	r3,zero
    af1c:	00800044 	movi	r2,1
    af20:	003f3706 	br	ac00 <__udivdi3+0x2d4>
    af24:	80bf832e 	bgeu	r16,r2,ad34 <__udivdi3+0x408>
    af28:	8c7fff84 	addi	r17,r17,-2
    af2c:	8721883a 	add	r16,r16,fp
    af30:	003f8106 	br	ad38 <__udivdi3+0x40c>
    af34:	48bf6a2e 	bgeu	r9,r2,ace0 <__udivdi3+0x3b4>
    af38:	a53fff84 	addi	r20,r20,-2
    af3c:	4f13883a 	add	r9,r9,fp
    af40:	003f6806 	br	ace4 <__udivdi3+0x3b8>
    af44:	1827883a 	mov	r19,r3
    af48:	003fd106 	br	ae90 <__udivdi3+0x564>
    af4c:	182f883a 	mov	r23,r3
    af50:	003fb906 	br	ae38 <__udivdi3+0x50c>
    af54:	843fff84 	addi	r16,r16,-2
    af58:	348d883a 	add	r6,r6,r18
    af5c:	003f0c06 	br	ab90 <__udivdi3+0x264>
    af60:	843fff84 	addi	r16,r16,-2
    af64:	1c87883a 	add	r3,r3,r18
    af68:	003eac06 	br	aa1c <__udivdi3+0xf0>

0000af6c <__umoddi3>:
    af6c:	defff404 	addi	sp,sp,-48
    af70:	dd800815 	stw	r22,32(sp)
    af74:	dc400315 	stw	r17,12(sp)
    af78:	dc000215 	stw	r16,8(sp)
    af7c:	dfc00b15 	stw	ra,44(sp)
    af80:	df000a15 	stw	fp,40(sp)
    af84:	ddc00915 	stw	r23,36(sp)
    af88:	dd400715 	stw	r21,28(sp)
    af8c:	dd000615 	stw	r20,24(sp)
    af90:	dcc00515 	stw	r19,20(sp)
    af94:	dc800415 	stw	r18,16(sp)
    af98:	2021883a 	mov	r16,r4
    af9c:	2823883a 	mov	r17,r5
    afa0:	282d883a 	mov	r22,r5
    afa4:	38003c1e 	bne	r7,zero,b098 <__umoddi3+0x12c>
    afa8:	3027883a 	mov	r19,r6
    afac:	2029883a 	mov	r20,r4
    afb0:	2980522e 	bgeu	r5,r6,b0fc <__umoddi3+0x190>
    afb4:	00bfffd4 	movui	r2,65535
    afb8:	1180a436 	bltu	r2,r6,b24c <__umoddi3+0x2e0>
    afbc:	00803fc4 	movi	r2,255
    afc0:	11815e2e 	bgeu	r2,r6,b53c <__umoddi3+0x5d0>
    afc4:	01400204 	movi	r5,8
    afc8:	2805883a 	mov	r2,r5
    afcc:	314ad83a 	srl	r5,r6,r5
    afd0:	00c00074 	movhi	r3,1
    afd4:	18c8c404 	addi	r3,r3,8976
    afd8:	194b883a 	add	r5,r3,r5
    afdc:	29000003 	ldbu	r4,0(r5)
    afe0:	2089883a 	add	r4,r4,r2
    afe4:	00800804 	movi	r2,32
    afe8:	1105c83a 	sub	r2,r2,r4
    afec:	10010c26 	beq	r2,zero,b420 <__umoddi3+0x4b4>
    aff0:	88a2983a 	sll	r17,r17,r2
    aff4:	8108d83a 	srl	r4,r16,r4
    aff8:	30a6983a 	sll	r19,r6,r2
    affc:	80a8983a 	sll	r20,r16,r2
    b000:	1025883a 	mov	r18,r2
    b004:	892cb03a 	or	r22,r17,r4
    b008:	9822d43a 	srli	r17,r19,16
    b00c:	b009883a 	mov	r4,r22
    b010:	9d7fffcc 	andi	r21,r19,65535
    b014:	880b883a 	mov	r5,r17
    b018:	000b6ac0 	call	b6ac <__umodsi3>
    b01c:	b009883a 	mov	r4,r22
    b020:	880b883a 	mov	r5,r17
    b024:	102f883a 	mov	r23,r2
    b028:	000b6a40 	call	b6a4 <__udivsi3>
    b02c:	1009883a 	mov	r4,r2
    b030:	a80b883a 	mov	r5,r21
    b034:	0000eb00 	call	eb0 <__mulsi3>
    b038:	b82e943a 	slli	r23,r23,16
    b03c:	a008d43a 	srli	r4,r20,16
    b040:	b906b03a 	or	r3,r23,r4
    b044:	1880042e 	bgeu	r3,r2,b058 <__umoddi3+0xec>
    b048:	1cc7883a 	add	r3,r3,r19
    b04c:	1cc00236 	bltu	r3,r19,b058 <__umoddi3+0xec>
    b050:	1880012e 	bgeu	r3,r2,b058 <__umoddi3+0xec>
    b054:	1cc7883a 	add	r3,r3,r19
    b058:	18a1c83a 	sub	r16,r3,r2
    b05c:	8009883a 	mov	r4,r16
    b060:	880b883a 	mov	r5,r17
    b064:	000b6ac0 	call	b6ac <__umodsi3>
    b068:	8009883a 	mov	r4,r16
    b06c:	880b883a 	mov	r5,r17
    b070:	102d883a 	mov	r22,r2
    b074:	000b6a40 	call	b6a4 <__udivsi3>
    b078:	1009883a 	mov	r4,r2
    b07c:	a80b883a 	mov	r5,r21
    b080:	b02c943a 	slli	r22,r22,16
    b084:	0000eb00 	call	eb0 <__mulsi3>
    b088:	a13fffcc 	andi	r4,r20,65535
    b08c:	b106b03a 	or	r3,r22,r4
    b090:	1880572e 	bgeu	r3,r2,b1f0 <__umoddi3+0x284>
    b094:	00005206 	br	b1e0 <__umoddi3+0x274>
    b098:	29c05936 	bltu	r5,r7,b200 <__umoddi3+0x294>
    b09c:	00bfffd4 	movui	r2,65535
    b0a0:	11c0652e 	bgeu	r2,r7,b238 <__umoddi3+0x2cc>
    b0a4:	00804034 	movhi	r2,256
    b0a8:	10bfffc4 	addi	r2,r2,-1
    b0ac:	11c1172e 	bgeu	r2,r7,b50c <__umoddi3+0x5a0>
    b0b0:	01400604 	movi	r5,24
    b0b4:	282b883a 	mov	r21,r5
    b0b8:	394ad83a 	srl	r5,r7,r5
    b0bc:	00c00074 	movhi	r3,1
    b0c0:	18c8c404 	addi	r3,r3,8976
    b0c4:	194b883a 	add	r5,r3,r5
    b0c8:	28800003 	ldbu	r2,0(r5)
    b0cc:	00c00804 	movi	r3,32
    b0d0:	156b883a 	add	r21,r2,r21
    b0d4:	1d69c83a 	sub	r20,r3,r21
    b0d8:	a000671e 	bne	r20,zero,b278 <__umoddi3+0x30c>
    b0dc:	3c400136 	bltu	r7,r17,b0e4 <__umoddi3+0x178>
    b0e0:	81812336 	bltu	r16,r6,b570 <__umoddi3+0x604>
    b0e4:	8185c83a 	sub	r2,r16,r6
    b0e8:	89e3c83a 	sub	r17,r17,r7
    b0ec:	8087803a 	cmpltu	r3,r16,r2
    b0f0:	88edc83a 	sub	r22,r17,r3
    b0f4:	b007883a 	mov	r3,r22
    b0f8:	00004306 	br	b208 <__umoddi3+0x29c>
    b0fc:	3000041e 	bne	r6,zero,b110 <__umoddi3+0x1a4>
    b100:	01000044 	movi	r4,1
    b104:	000b883a 	mov	r5,zero
    b108:	000b6a40 	call	b6a4 <__udivsi3>
    b10c:	1027883a 	mov	r19,r2
    b110:	00bfffd4 	movui	r2,65535
    b114:	14c0532e 	bgeu	r2,r19,b264 <__umoddi3+0x2f8>
    b118:	00804034 	movhi	r2,256
    b11c:	10bfffc4 	addi	r2,r2,-1
    b120:	14c1032e 	bgeu	r2,r19,b530 <__umoddi3+0x5c4>
    b124:	00800604 	movi	r2,24
    b128:	1007883a 	mov	r3,r2
    b12c:	9884d83a 	srl	r2,r19,r2
    b130:	01000074 	movhi	r4,1
    b134:	2108c404 	addi	r4,r4,8976
    b138:	2085883a 	add	r2,r4,r2
    b13c:	11000003 	ldbu	r4,0(r2)
    b140:	00800804 	movi	r2,32
    b144:	20c7883a 	add	r3,r4,r3
    b148:	10c5c83a 	sub	r2,r2,r3
    b14c:	1000b61e 	bne	r2,zero,b428 <__umoddi3+0x4bc>
    b150:	982ad43a 	srli	r21,r19,16
    b154:	8ce3c83a 	sub	r17,r17,r19
    b158:	9dbfffcc 	andi	r22,r19,65535
    b15c:	0025883a 	mov	r18,zero
    b160:	8809883a 	mov	r4,r17
    b164:	a80b883a 	mov	r5,r21
    b168:	000b6ac0 	call	b6ac <__umodsi3>
    b16c:	8809883a 	mov	r4,r17
    b170:	a80b883a 	mov	r5,r21
    b174:	102f883a 	mov	r23,r2
    b178:	000b6a40 	call	b6a4 <__udivsi3>
    b17c:	1009883a 	mov	r4,r2
    b180:	b00b883a 	mov	r5,r22
    b184:	0000eb00 	call	eb0 <__mulsi3>
    b188:	b82e943a 	slli	r23,r23,16
    b18c:	a008d43a 	srli	r4,r20,16
    b190:	b906b03a 	or	r3,r23,r4
    b194:	1880032e 	bgeu	r3,r2,b1a4 <__umoddi3+0x238>
    b198:	1cc7883a 	add	r3,r3,r19
    b19c:	1cc00136 	bltu	r3,r19,b1a4 <__umoddi3+0x238>
    b1a0:	1880f136 	bltu	r3,r2,b568 <__umoddi3+0x5fc>
    b1a4:	18a1c83a 	sub	r16,r3,r2
    b1a8:	8009883a 	mov	r4,r16
    b1ac:	a80b883a 	mov	r5,r21
    b1b0:	000b6ac0 	call	b6ac <__umodsi3>
    b1b4:	8009883a 	mov	r4,r16
    b1b8:	a80b883a 	mov	r5,r21
    b1bc:	1023883a 	mov	r17,r2
    b1c0:	000b6a40 	call	b6a4 <__udivsi3>
    b1c4:	1009883a 	mov	r4,r2
    b1c8:	b00b883a 	mov	r5,r22
    b1cc:	8822943a 	slli	r17,r17,16
    b1d0:	0000eb00 	call	eb0 <__mulsi3>
    b1d4:	a13fffcc 	andi	r4,r20,65535
    b1d8:	8906b03a 	or	r3,r17,r4
    b1dc:	1880042e 	bgeu	r3,r2,b1f0 <__umoddi3+0x284>
    b1e0:	1cc7883a 	add	r3,r3,r19
    b1e4:	1cc00236 	bltu	r3,r19,b1f0 <__umoddi3+0x284>
    b1e8:	1880012e 	bgeu	r3,r2,b1f0 <__umoddi3+0x284>
    b1ec:	1cc7883a 	add	r3,r3,r19
    b1f0:	1887c83a 	sub	r3,r3,r2
    b1f4:	1c84d83a 	srl	r2,r3,r18
    b1f8:	0007883a 	mov	r3,zero
    b1fc:	00000206 	br	b208 <__umoddi3+0x29c>
    b200:	2005883a 	mov	r2,r4
    b204:	2807883a 	mov	r3,r5
    b208:	dfc00b17 	ldw	ra,44(sp)
    b20c:	df000a17 	ldw	fp,40(sp)
    b210:	ddc00917 	ldw	r23,36(sp)
    b214:	dd800817 	ldw	r22,32(sp)
    b218:	dd400717 	ldw	r21,28(sp)
    b21c:	dd000617 	ldw	r20,24(sp)
    b220:	dcc00517 	ldw	r19,20(sp)
    b224:	dc800417 	ldw	r18,16(sp)
    b228:	dc400317 	ldw	r17,12(sp)
    b22c:	dc000217 	ldw	r16,8(sp)
    b230:	dec00c04 	addi	sp,sp,48
    b234:	f800283a 	ret
    b238:	00803fc4 	movi	r2,255
    b23c:	11c0b02e 	bgeu	r2,r7,b500 <__umoddi3+0x594>
    b240:	01400204 	movi	r5,8
    b244:	282b883a 	mov	r21,r5
    b248:	003f9b06 	br	b0b8 <__umoddi3+0x14c>
    b24c:	00804034 	movhi	r2,256
    b250:	10bfffc4 	addi	r2,r2,-1
    b254:	1180b02e 	bgeu	r2,r6,b518 <__umoddi3+0x5ac>
    b258:	01400604 	movi	r5,24
    b25c:	2805883a 	mov	r2,r5
    b260:	003f5a06 	br	afcc <__umoddi3+0x60>
    b264:	00803fc4 	movi	r2,255
    b268:	14c0ae2e 	bgeu	r2,r19,b524 <__umoddi3+0x5b8>
    b26c:	00800204 	movi	r2,8
    b270:	1007883a 	mov	r3,r2
    b274:	003fad06 	br	b12c <__umoddi3+0x1c0>
    b278:	3d0a983a 	sll	r5,r7,r20
    b27c:	356cd83a 	srl	r22,r6,r21
    b280:	8d78d83a 	srl	fp,r17,r21
    b284:	8d10983a 	sll	r8,r17,r20
    b288:	2dacb03a 	or	r22,r5,r22
    b28c:	b02ed43a 	srli	r23,r22,16
    b290:	8564d83a 	srl	r18,r16,r21
    b294:	e009883a 	mov	r4,fp
    b298:	b80b883a 	mov	r5,r23
    b29c:	44a4b03a 	or	r18,r8,r18
    b2a0:	3526983a 	sll	r19,r6,r20
    b2a4:	000b6ac0 	call	b6ac <__umodsi3>
    b2a8:	e009883a 	mov	r4,fp
    b2ac:	b80b883a 	mov	r5,r23
    b2b0:	b47fffcc 	andi	r17,r22,65535
    b2b4:	d8800015 	stw	r2,0(sp)
    b2b8:	000b6a40 	call	b6a4 <__udivsi3>
    b2bc:	1009883a 	mov	r4,r2
    b2c0:	880b883a 	mov	r5,r17
    b2c4:	1039883a 	mov	fp,r2
    b2c8:	0000eb00 	call	eb0 <__mulsi3>
    b2cc:	d9800017 	ldw	r6,0(sp)
    b2d0:	9008d43a 	srli	r4,r18,16
    b2d4:	8520983a 	sll	r16,r16,r20
    b2d8:	300c943a 	slli	r6,r6,16
    b2dc:	3106b03a 	or	r3,r6,r4
    b2e0:	1880042e 	bgeu	r3,r2,b2f4 <__umoddi3+0x388>
    b2e4:	1d87883a 	add	r3,r3,r22
    b2e8:	e13fffc4 	addi	r4,fp,-1
    b2ec:	1d809a2e 	bgeu	r3,r22,b558 <__umoddi3+0x5ec>
    b2f0:	2039883a 	mov	fp,r4
    b2f4:	1887c83a 	sub	r3,r3,r2
    b2f8:	1809883a 	mov	r4,r3
    b2fc:	b80b883a 	mov	r5,r23
    b300:	d8c00115 	stw	r3,4(sp)
    b304:	000b6ac0 	call	b6ac <__umodsi3>
    b308:	d8c00117 	ldw	r3,4(sp)
    b30c:	b80b883a 	mov	r5,r23
    b310:	d8800015 	stw	r2,0(sp)
    b314:	1809883a 	mov	r4,r3
    b318:	000b6a40 	call	b6a4 <__udivsi3>
    b31c:	880b883a 	mov	r5,r17
    b320:	1009883a 	mov	r4,r2
    b324:	102f883a 	mov	r23,r2
    b328:	0000eb00 	call	eb0 <__mulsi3>
    b32c:	d9800017 	ldw	r6,0(sp)
    b330:	947fffcc 	andi	r17,r18,65535
    b334:	300c943a 	slli	r6,r6,16
    b338:	3464b03a 	or	r18,r6,r17
    b33c:	9080042e 	bgeu	r18,r2,b350 <__umoddi3+0x3e4>
    b340:	95a5883a 	add	r18,r18,r22
    b344:	b8ffffc4 	addi	r3,r23,-1
    b348:	95807f2e 	bgeu	r18,r22,b548 <__umoddi3+0x5dc>
    b34c:	182f883a 	mov	r23,r3
    b350:	e038943a 	slli	fp,fp,16
    b354:	980cd43a 	srli	r6,r19,16
    b358:	98ffffcc 	andi	r3,r19,65535
    b35c:	bf38b03a 	or	fp,r23,fp
    b360:	e02ed43a 	srli	r23,fp,16
    b364:	e73fffcc 	andi	fp,fp,65535
    b368:	180b883a 	mov	r5,r3
    b36c:	e009883a 	mov	r4,fp
    b370:	d9800015 	stw	r6,0(sp)
    b374:	d8c00115 	stw	r3,4(sp)
    b378:	90a5c83a 	sub	r18,r18,r2
    b37c:	0000eb00 	call	eb0 <__mulsi3>
    b380:	d8c00117 	ldw	r3,4(sp)
    b384:	b809883a 	mov	r4,r23
    b388:	1023883a 	mov	r17,r2
    b38c:	180b883a 	mov	r5,r3
    b390:	0000eb00 	call	eb0 <__mulsi3>
    b394:	d9800017 	ldw	r6,0(sp)
    b398:	b809883a 	mov	r4,r23
    b39c:	d8800115 	stw	r2,4(sp)
    b3a0:	300b883a 	mov	r5,r6
    b3a4:	302f883a 	mov	r23,r6
    b3a8:	0000eb00 	call	eb0 <__mulsi3>
    b3ac:	e009883a 	mov	r4,fp
    b3b0:	b80b883a 	mov	r5,r23
    b3b4:	d8800015 	stw	r2,0(sp)
    b3b8:	0000eb00 	call	eb0 <__mulsi3>
    b3bc:	d8c00117 	ldw	r3,4(sp)
    b3c0:	880cd43a 	srli	r6,r17,16
    b3c4:	d9c00017 	ldw	r7,0(sp)
    b3c8:	1885883a 	add	r2,r3,r2
    b3cc:	118d883a 	add	r6,r2,r6
    b3d0:	30c0022e 	bgeu	r6,r3,b3dc <__umoddi3+0x470>
    b3d4:	00800074 	movhi	r2,1
    b3d8:	388f883a 	add	r7,r7,r2
    b3dc:	3006d43a 	srli	r3,r6,16
    b3e0:	300c943a 	slli	r6,r6,16
    b3e4:	8c7fffcc 	andi	r17,r17,65535
    b3e8:	38c7883a 	add	r3,r7,r3
    b3ec:	3463883a 	add	r17,r6,r17
    b3f0:	90c03d36 	bltu	r18,r3,b4e8 <__umoddi3+0x57c>
    b3f4:	90c06026 	beq	r18,r3,b578 <__umoddi3+0x60c>
    b3f8:	90c9c83a 	sub	r4,r18,r3
    b3fc:	880f883a 	mov	r7,r17
    b400:	81cfc83a 	sub	r7,r16,r7
    b404:	81c7803a 	cmpltu	r3,r16,r7
    b408:	20c7c83a 	sub	r3,r4,r3
    b40c:	1d44983a 	sll	r2,r3,r21
    b410:	3d0ed83a 	srl	r7,r7,r20
    b414:	1d06d83a 	srl	r3,r3,r20
    b418:	11c4b03a 	or	r2,r2,r7
    b41c:	003f7a06 	br	b208 <__umoddi3+0x29c>
    b420:	0025883a 	mov	r18,zero
    b424:	003ef806 	br	b008 <__umoddi3+0x9c>
    b428:	98a6983a 	sll	r19,r19,r2
    b42c:	88e8d83a 	srl	r20,r17,r3
    b430:	80c6d83a 	srl	r3,r16,r3
    b434:	982ad43a 	srli	r21,r19,16
    b438:	88a2983a 	sll	r17,r17,r2
    b43c:	a009883a 	mov	r4,r20
    b440:	a80b883a 	mov	r5,r21
    b444:	88eeb03a 	or	r23,r17,r3
    b448:	1025883a 	mov	r18,r2
    b44c:	000b6ac0 	call	b6ac <__umodsi3>
    b450:	a009883a 	mov	r4,r20
    b454:	a80b883a 	mov	r5,r21
    b458:	1023883a 	mov	r17,r2
    b45c:	9dbfffcc 	andi	r22,r19,65535
    b460:	000b6a40 	call	b6a4 <__udivsi3>
    b464:	1009883a 	mov	r4,r2
    b468:	b00b883a 	mov	r5,r22
    b46c:	0000eb00 	call	eb0 <__mulsi3>
    b470:	8822943a 	slli	r17,r17,16
    b474:	b808d43a 	srli	r4,r23,16
    b478:	84a8983a 	sll	r20,r16,r18
    b47c:	8906b03a 	or	r3,r17,r4
    b480:	1880042e 	bgeu	r3,r2,b494 <__umoddi3+0x528>
    b484:	1cc7883a 	add	r3,r3,r19
    b488:	1cc00236 	bltu	r3,r19,b494 <__umoddi3+0x528>
    b48c:	1880012e 	bgeu	r3,r2,b494 <__umoddi3+0x528>
    b490:	1cc7883a 	add	r3,r3,r19
    b494:	18a1c83a 	sub	r16,r3,r2
    b498:	8009883a 	mov	r4,r16
    b49c:	a80b883a 	mov	r5,r21
    b4a0:	000b6ac0 	call	b6ac <__umodsi3>
    b4a4:	8009883a 	mov	r4,r16
    b4a8:	a80b883a 	mov	r5,r21
    b4ac:	1039883a 	mov	fp,r2
    b4b0:	000b6a40 	call	b6a4 <__udivsi3>
    b4b4:	1009883a 	mov	r4,r2
    b4b8:	b00b883a 	mov	r5,r22
    b4bc:	0000eb00 	call	eb0 <__mulsi3>
    b4c0:	e006943a 	slli	r3,fp,16
    b4c4:	b93fffcc 	andi	r4,r23,65535
    b4c8:	1906b03a 	or	r3,r3,r4
    b4cc:	1880042e 	bgeu	r3,r2,b4e0 <__umoddi3+0x574>
    b4d0:	1cc7883a 	add	r3,r3,r19
    b4d4:	1cc00236 	bltu	r3,r19,b4e0 <__umoddi3+0x574>
    b4d8:	1880012e 	bgeu	r3,r2,b4e0 <__umoddi3+0x574>
    b4dc:	1cc7883a 	add	r3,r3,r19
    b4e0:	18a3c83a 	sub	r17,r3,r2
    b4e4:	003f1e06 	br	b160 <__umoddi3+0x1f4>
    b4e8:	8ccfc83a 	sub	r7,r17,r19
    b4ec:	1d89c83a 	sub	r4,r3,r22
    b4f0:	89e3803a 	cmpltu	r17,r17,r7
    b4f4:	2463c83a 	sub	r17,r4,r17
    b4f8:	9449c83a 	sub	r4,r18,r17
    b4fc:	003fc006 	br	b400 <__umoddi3+0x494>
    b500:	000b883a 	mov	r5,zero
    b504:	002b883a 	mov	r21,zero
    b508:	003eeb06 	br	b0b8 <__umoddi3+0x14c>
    b50c:	01400404 	movi	r5,16
    b510:	282b883a 	mov	r21,r5
    b514:	003ee806 	br	b0b8 <__umoddi3+0x14c>
    b518:	01400404 	movi	r5,16
    b51c:	2805883a 	mov	r2,r5
    b520:	003eaa06 	br	afcc <__umoddi3+0x60>
    b524:	0005883a 	mov	r2,zero
    b528:	0007883a 	mov	r3,zero
    b52c:	003eff06 	br	b12c <__umoddi3+0x1c0>
    b530:	00800404 	movi	r2,16
    b534:	1007883a 	mov	r3,r2
    b538:	003efc06 	br	b12c <__umoddi3+0x1c0>
    b53c:	000b883a 	mov	r5,zero
    b540:	0005883a 	mov	r2,zero
    b544:	003ea106 	br	afcc <__umoddi3+0x60>
    b548:	90bf802e 	bgeu	r18,r2,b34c <__umoddi3+0x3e0>
    b54c:	bdffff84 	addi	r23,r23,-2
    b550:	95a5883a 	add	r18,r18,r22
    b554:	003f7e06 	br	b350 <__umoddi3+0x3e4>
    b558:	18bf652e 	bgeu	r3,r2,b2f0 <__umoddi3+0x384>
    b55c:	e73fff84 	addi	fp,fp,-2
    b560:	1d87883a 	add	r3,r3,r22
    b564:	003f6306 	br	b2f4 <__umoddi3+0x388>
    b568:	1cc7883a 	add	r3,r3,r19
    b56c:	003f0d06 	br	b1a4 <__umoddi3+0x238>
    b570:	8005883a 	mov	r2,r16
    b574:	003edf06 	br	b0f4 <__umoddi3+0x188>
    b578:	847fdb36 	bltu	r16,r17,b4e8 <__umoddi3+0x57c>
    b57c:	880f883a 	mov	r7,r17
    b580:	0009883a 	mov	r4,zero
    b584:	003f9e06 	br	b400 <__umoddi3+0x494>

0000b588 <udivmodsi4>:
    b588:	2900182e 	bgeu	r5,r4,b5ec <udivmodsi4+0x64>
    b58c:	28001716 	blt	r5,zero,b5ec <udivmodsi4+0x64>
    b590:	00800804 	movi	r2,32
    b594:	00c00044 	movi	r3,1
    b598:	00000206 	br	b5a4 <udivmodsi4+0x1c>
    b59c:	10001126 	beq	r2,zero,b5e4 <udivmodsi4+0x5c>
    b5a0:	28000516 	blt	r5,zero,b5b8 <udivmodsi4+0x30>
    b5a4:	294b883a 	add	r5,r5,r5
    b5a8:	10bfffc4 	addi	r2,r2,-1
    b5ac:	18c7883a 	add	r3,r3,r3
    b5b0:	293ffa36 	bltu	r5,r4,b59c <udivmodsi4+0x14>
    b5b4:	18000b26 	beq	r3,zero,b5e4 <udivmodsi4+0x5c>
    b5b8:	0005883a 	mov	r2,zero
    b5bc:	21400236 	bltu	r4,r5,b5c8 <udivmodsi4+0x40>
    b5c0:	2149c83a 	sub	r4,r4,r5
    b5c4:	10c4b03a 	or	r2,r2,r3
    b5c8:	1806d07a 	srli	r3,r3,1
    b5cc:	280ad07a 	srli	r5,r5,1
    b5d0:	183ffa1e 	bne	r3,zero,b5bc <udivmodsi4+0x34>
    b5d4:	3000011e 	bne	r6,zero,b5dc <udivmodsi4+0x54>
    b5d8:	f800283a 	ret
    b5dc:	2005883a 	mov	r2,r4
    b5e0:	f800283a 	ret
    b5e4:	0005883a 	mov	r2,zero
    b5e8:	003ffa06 	br	b5d4 <udivmodsi4+0x4c>
    b5ec:	00c00044 	movi	r3,1
    b5f0:	003ff106 	br	b5b8 <udivmodsi4+0x30>

0000b5f4 <__divsi3>:
    b5f4:	defffe04 	addi	sp,sp,-8
    b5f8:	dfc00115 	stw	ra,4(sp)
    b5fc:	dc000015 	stw	r16,0(sp)
    b600:	20000b16 	blt	r4,zero,b630 <__divsi3+0x3c>
    b604:	0021883a 	mov	r16,zero
    b608:	28000c16 	blt	r5,zero,b63c <__divsi3+0x48>
    b60c:	000d883a 	mov	r6,zero
    b610:	000b5880 	call	b588 <udivmodsi4>
    b614:	0407c83a 	sub	r3,zero,r16
    b618:	1884f03a 	xor	r2,r3,r2
    b61c:	1405883a 	add	r2,r2,r16
    b620:	dfc00117 	ldw	ra,4(sp)
    b624:	dc000017 	ldw	r16,0(sp)
    b628:	dec00204 	addi	sp,sp,8
    b62c:	f800283a 	ret
    b630:	0109c83a 	sub	r4,zero,r4
    b634:	04000044 	movi	r16,1
    b638:	283ff40e 	bge	r5,zero,b60c <__divsi3+0x18>
    b63c:	014bc83a 	sub	r5,zero,r5
    b640:	8400005c 	xori	r16,r16,1
    b644:	003ff106 	br	b60c <__divsi3+0x18>

0000b648 <__modsi3>:
    b648:	defffd04 	addi	sp,sp,-12
    b64c:	dfc00215 	stw	ra,8(sp)
    b650:	dc400115 	stw	r17,4(sp)
    b654:	dc000015 	stw	r16,0(sp)
    b658:	20000c16 	blt	r4,zero,b68c <__modsi3+0x44>
    b65c:	0023883a 	mov	r17,zero
    b660:	0021883a 	mov	r16,zero
    b664:	28000d16 	blt	r5,zero,b69c <__modsi3+0x54>
    b668:	01800044 	movi	r6,1
    b66c:	000b5880 	call	b588 <udivmodsi4>
    b670:	1404f03a 	xor	r2,r2,r16
    b674:	8885883a 	add	r2,r17,r2
    b678:	dfc00217 	ldw	ra,8(sp)
    b67c:	dc400117 	ldw	r17,4(sp)
    b680:	dc000017 	ldw	r16,0(sp)
    b684:	dec00304 	addi	sp,sp,12
    b688:	f800283a 	ret
    b68c:	0109c83a 	sub	r4,zero,r4
    b690:	04400044 	movi	r17,1
    b694:	043fffc4 	movi	r16,-1
    b698:	283ff30e 	bge	r5,zero,b668 <__modsi3+0x20>
    b69c:	014bc83a 	sub	r5,zero,r5
    b6a0:	003ff106 	br	b668 <__modsi3+0x20>

0000b6a4 <__udivsi3>:
    b6a4:	000d883a 	mov	r6,zero
    b6a8:	000b5881 	jmpi	b588 <udivmodsi4>

0000b6ac <__umodsi3>:
    b6ac:	01800044 	movi	r6,1
    b6b0:	000b5881 	jmpi	b588 <udivmodsi4>

0000b6b4 <__adddf3>:
    b6b4:	02000434 	movhi	r8,16
    b6b8:	423fffc4 	addi	r8,r8,-1
    b6bc:	defffb04 	addi	sp,sp,-20
    b6c0:	2a12703a 	and	r9,r5,r8
    b6c4:	2806d7fa 	srli	r3,r5,31
    b6c8:	3a10703a 	and	r8,r7,r8
    b6cc:	3804d53a 	srli	r2,r7,20
    b6d0:	3014d77a 	srli	r10,r6,29
    b6d4:	dc000015 	stw	r16,0(sp)
    b6d8:	481290fa 	slli	r9,r9,3
    b6dc:	2820d53a 	srli	r16,r5,20
    b6e0:	401090fa 	slli	r8,r8,3
    b6e4:	200ad77a 	srli	r5,r4,29
    b6e8:	380ed7fa 	srli	r7,r7,31
    b6ec:	dc800215 	stw	r18,8(sp)
    b6f0:	dc400115 	stw	r17,4(sp)
    b6f4:	dfc00415 	stw	ra,16(sp)
    b6f8:	dcc00315 	stw	r19,12(sp)
    b6fc:	1c803fcc 	andi	r18,r3,255
    b700:	8401ffcc 	andi	r16,r16,2047
    b704:	494ab03a 	or	r5,r9,r5
    b708:	202290fa 	slli	r17,r4,3
    b70c:	1081ffcc 	andi	r2,r2,2047
    b710:	4290b03a 	or	r8,r8,r10
    b714:	300c90fa 	slli	r6,r6,3
    b718:	91c07026 	beq	r18,r7,b8dc <__adddf3+0x228>
    b71c:	8087c83a 	sub	r3,r16,r2
    b720:	00c0b30e 	bge	zero,r3,b9f0 <__adddf3+0x33c>
    b724:	10002a1e 	bne	r2,zero,b7d0 <__adddf3+0x11c>
    b728:	4184b03a 	or	r2,r8,r6
    b72c:	1000991e 	bne	r2,zero,b994 <__adddf3+0x2e0>
    b730:	888001cc 	andi	r2,r17,7
    b734:	10005b26 	beq	r2,zero,b8a4 <__adddf3+0x1f0>
    b738:	88c003cc 	andi	r3,r17,15
    b73c:	00800104 	movi	r2,4
    b740:	18805826 	beq	r3,r2,b8a4 <__adddf3+0x1f0>
    b744:	89800104 	addi	r6,r17,4
    b748:	3463803a 	cmpltu	r17,r6,r17
    b74c:	2c4b883a 	add	r5,r5,r17
    b750:	2880202c 	andhi	r2,r5,128
    b754:	9007883a 	mov	r3,r18
    b758:	3023883a 	mov	r17,r6
    b75c:	10005426 	beq	r2,zero,b8b0 <__adddf3+0x1fc>
    b760:	84000044 	addi	r16,r16,1
    b764:	0081ffc4 	movi	r2,2047
    b768:	8080c126 	beq	r16,r2,ba70 <__adddf3+0x3bc>
    b76c:	013fe034 	movhi	r4,65408
    b770:	213fffc4 	addi	r4,r4,-1
    b774:	290a703a 	and	r5,r5,r4
    b778:	2804977a 	slli	r2,r5,29
    b77c:	280a927a 	slli	r5,r5,9
    b780:	8822d0fa 	srli	r17,r17,3
    b784:	8401ffcc 	andi	r16,r16,2047
    b788:	2808d33a 	srli	r4,r5,12
    b78c:	1444b03a 	or	r2,r2,r17
    b790:	8401ffcc 	andi	r16,r16,2047
    b794:	800a953a 	slli	r5,r16,20
    b798:	18c03fcc 	andi	r3,r3,255
    b79c:	04000434 	movhi	r16,16
    b7a0:	180697fa 	slli	r3,r3,31
    b7a4:	843fffc4 	addi	r16,r16,-1
    b7a8:	2420703a 	and	r16,r4,r16
    b7ac:	8160b03a 	or	r16,r16,r5
    b7b0:	80c6b03a 	or	r3,r16,r3
    b7b4:	dfc00417 	ldw	ra,16(sp)
    b7b8:	dcc00317 	ldw	r19,12(sp)
    b7bc:	dc800217 	ldw	r18,8(sp)
    b7c0:	dc400117 	ldw	r17,4(sp)
    b7c4:	dc000017 	ldw	r16,0(sp)
    b7c8:	dec00504 	addi	sp,sp,20
    b7cc:	f800283a 	ret
    b7d0:	0081ffc4 	movi	r2,2047
    b7d4:	80bfd626 	beq	r16,r2,b730 <__adddf3+0x7c>
    b7d8:	42002034 	orhi	r8,r8,128
    b7dc:	00800e04 	movi	r2,56
    b7e0:	10c0a616 	blt	r2,r3,ba7c <__adddf3+0x3c8>
    b7e4:	008007c4 	movi	r2,31
    b7e8:	10c0c916 	blt	r2,r3,bb10 <__adddf3+0x45c>
    b7ec:	00800804 	movi	r2,32
    b7f0:	10c5c83a 	sub	r2,r2,r3
    b7f4:	408e983a 	sll	r7,r8,r2
    b7f8:	30c8d83a 	srl	r4,r6,r3
    b7fc:	3084983a 	sll	r2,r6,r2
    b800:	40c6d83a 	srl	r3,r8,r3
    b804:	390cb03a 	or	r6,r7,r4
    b808:	1004c03a 	cmpne	r2,r2,zero
    b80c:	308cb03a 	or	r6,r6,r2
    b810:	898dc83a 	sub	r6,r17,r6
    b814:	89a3803a 	cmpltu	r17,r17,r6
    b818:	28cbc83a 	sub	r5,r5,r3
    b81c:	2c4bc83a 	sub	r5,r5,r17
    b820:	3023883a 	mov	r17,r6
    b824:	2880202c 	andhi	r2,r5,128
    b828:	10006d26 	beq	r2,zero,b9e0 <__adddf3+0x32c>
    b82c:	04c02034 	movhi	r19,128
    b830:	9cffffc4 	addi	r19,r19,-1
    b834:	2ce6703a 	and	r19,r5,r19
    b838:	98007e26 	beq	r19,zero,ba34 <__adddf3+0x380>
    b83c:	9809883a 	mov	r4,r19
    b840:	00015480 	call	1548 <__clzsi2>
    b844:	10fffe04 	addi	r3,r2,-8
    b848:	010007c4 	movi	r4,31
    b84c:	20c07f16 	blt	r4,r3,ba4c <__adddf3+0x398>
    b850:	01400a04 	movi	r5,40
    b854:	2885c83a 	sub	r2,r5,r2
    b858:	888ad83a 	srl	r5,r17,r2
    b85c:	98e6983a 	sll	r19,r19,r3
    b860:	88e2983a 	sll	r17,r17,r3
    b864:	2ce6b03a 	or	r19,r5,r19
    b868:	1c007c16 	blt	r3,r16,ba5c <__adddf3+0x3a8>
    b86c:	1c21c83a 	sub	r16,r3,r16
    b870:	81400044 	addi	r5,r16,1
    b874:	00c007c4 	movi	r3,31
    b878:	19409816 	blt	r3,r5,badc <__adddf3+0x428>
    b87c:	1c21c83a 	sub	r16,r3,r16
    b880:	8c08983a 	sll	r4,r17,r16
    b884:	8946d83a 	srl	r3,r17,r5
    b888:	9c20983a 	sll	r16,r19,r16
    b88c:	2008c03a 	cmpne	r4,r4,zero
    b890:	994ad83a 	srl	r5,r19,r5
    b894:	1c06b03a 	or	r3,r3,r16
    b898:	1922b03a 	or	r17,r3,r4
    b89c:	0021883a 	mov	r16,zero
    b8a0:	003fa306 	br	b730 <__adddf3+0x7c>
    b8a4:	2880202c 	andhi	r2,r5,128
    b8a8:	9007883a 	mov	r3,r18
    b8ac:	103fac1e 	bne	r2,zero,b760 <__adddf3+0xac>
    b8b0:	2804977a 	slli	r2,r5,29
    b8b4:	8822d0fa 	srli	r17,r17,3
    b8b8:	0101ffc4 	movi	r4,2047
    b8bc:	280ad0fa 	srli	r5,r5,3
    b8c0:	1444b03a 	or	r2,r2,r17
    b8c4:	81002c26 	beq	r16,r4,b978 <__adddf3+0x2c4>
    b8c8:	8120703a 	and	r16,r16,r4
    b8cc:	01000434 	movhi	r4,16
    b8d0:	213fffc4 	addi	r4,r4,-1
    b8d4:	2908703a 	and	r4,r5,r4
    b8d8:	003fad06 	br	b790 <__adddf3+0xdc>
    b8dc:	8089c83a 	sub	r4,r16,r2
    b8e0:	01006a0e 	bge	zero,r4,ba8c <__adddf3+0x3d8>
    b8e4:	10003326 	beq	r2,zero,b9b4 <__adddf3+0x300>
    b8e8:	0081ffc4 	movi	r2,2047
    b8ec:	80bf9026 	beq	r16,r2,b730 <__adddf3+0x7c>
    b8f0:	42002034 	orhi	r8,r8,128
    b8f4:	00800e04 	movi	r2,56
    b8f8:	1100b116 	blt	r2,r4,bbc0 <__adddf3+0x50c>
    b8fc:	008007c4 	movi	r2,31
    b900:	1100e216 	blt	r2,r4,bc8c <__adddf3+0x5d8>
    b904:	00800804 	movi	r2,32
    b908:	1105c83a 	sub	r2,r2,r4
    b90c:	4092983a 	sll	r9,r8,r2
    b910:	310ed83a 	srl	r7,r6,r4
    b914:	3084983a 	sll	r2,r6,r2
    b918:	4110d83a 	srl	r8,r8,r4
    b91c:	49ccb03a 	or	r6,r9,r7
    b920:	1004c03a 	cmpne	r2,r2,zero
    b924:	308cb03a 	or	r6,r6,r2
    b928:	344d883a 	add	r6,r6,r17
    b92c:	3463803a 	cmpltu	r17,r6,r17
    b930:	414b883a 	add	r5,r8,r5
    b934:	2c4b883a 	add	r5,r5,r17
    b938:	3023883a 	mov	r17,r6
    b93c:	2880202c 	andhi	r2,r5,128
    b940:	10002726 	beq	r2,zero,b9e0 <__adddf3+0x32c>
    b944:	84000044 	addi	r16,r16,1
    b948:	0081ffc4 	movi	r2,2047
    b94c:	8080ae26 	beq	r16,r2,bc08 <__adddf3+0x554>
    b950:	00bfe034 	movhi	r2,65408
    b954:	10bfffc4 	addi	r2,r2,-1
    b958:	288a703a 	and	r5,r5,r2
    b95c:	880cd07a 	srli	r6,r17,1
    b960:	280897fa 	slli	r4,r5,31
    b964:	88c0004c 	andi	r3,r17,1
    b968:	30e2b03a 	or	r17,r6,r3
    b96c:	280ad07a 	srli	r5,r5,1
    b970:	8922b03a 	or	r17,r17,r4
    b974:	003f6e06 	br	b730 <__adddf3+0x7c>
    b978:	1148b03a 	or	r4,r2,r5
    b97c:	20003c26 	beq	r4,zero,ba70 <__adddf3+0x3bc>
    b980:	29000234 	orhi	r4,r5,8
    b984:	01400434 	movhi	r5,16
    b988:	297fffc4 	addi	r5,r5,-1
    b98c:	2148703a 	and	r4,r4,r5
    b990:	003f7f06 	br	b790 <__adddf3+0xdc>
    b994:	18ffffc4 	addi	r3,r3,-1
    b998:	18004d1e 	bne	r3,zero,bad0 <__adddf3+0x41c>
    b99c:	898dc83a 	sub	r6,r17,r6
    b9a0:	89a3803a 	cmpltu	r17,r17,r6
    b9a4:	2a0bc83a 	sub	r5,r5,r8
    b9a8:	2c4bc83a 	sub	r5,r5,r17
    b9ac:	3023883a 	mov	r17,r6
    b9b0:	003f9c06 	br	b824 <__adddf3+0x170>
    b9b4:	4184b03a 	or	r2,r8,r6
    b9b8:	103f5d26 	beq	r2,zero,b730 <__adddf3+0x7c>
    b9bc:	213fffc4 	addi	r4,r4,-1
    b9c0:	203fd926 	beq	r4,zero,b928 <__adddf3+0x274>
    b9c4:	0081ffc4 	movi	r2,2047
    b9c8:	80bfca1e 	bne	r16,r2,b8f4 <__adddf3+0x240>
    b9cc:	003f5806 	br	b730 <__adddf3+0x7c>
    b9d0:	10c8b03a 	or	r4,r2,r3
    b9d4:	20008b26 	beq	r4,zero,bc04 <__adddf3+0x550>
    b9d8:	100b883a 	mov	r5,r2
    b9dc:	1823883a 	mov	r17,r3
    b9e0:	888001cc 	andi	r2,r17,7
    b9e4:	103f541e 	bne	r2,zero,b738 <__adddf3+0x84>
    b9e8:	9007883a 	mov	r3,r18
    b9ec:	003fb006 	br	b8b0 <__adddf3+0x1fc>
    b9f0:	1800531e 	bne	r3,zero,bb40 <__adddf3+0x48c>
    b9f4:	80800044 	addi	r2,r16,1
    b9f8:	1081ffcc 	andi	r2,r2,2047
    b9fc:	00c00044 	movi	r3,1
    ba00:	1880990e 	bge	r3,r2,bc68 <__adddf3+0x5b4>
    ba04:	8985c83a 	sub	r2,r17,r6
    ba08:	8887803a 	cmpltu	r3,r17,r2
    ba0c:	2a27c83a 	sub	r19,r5,r8
    ba10:	98e7c83a 	sub	r19,r19,r3
    ba14:	98c0202c 	andhi	r3,r19,128
    ba18:	18006226 	beq	r3,zero,bba4 <__adddf3+0x4f0>
    ba1c:	3463c83a 	sub	r17,r6,r17
    ba20:	4151c83a 	sub	r8,r8,r5
    ba24:	344d803a 	cmpltu	r6,r6,r17
    ba28:	41a7c83a 	sub	r19,r8,r6
    ba2c:	3825883a 	mov	r18,r7
    ba30:	983f821e 	bne	r19,zero,b83c <__adddf3+0x188>
    ba34:	8809883a 	mov	r4,r17
    ba38:	00015480 	call	1548 <__clzsi2>
    ba3c:	10800804 	addi	r2,r2,32
    ba40:	10fffe04 	addi	r3,r2,-8
    ba44:	010007c4 	movi	r4,31
    ba48:	20ff810e 	bge	r4,r3,b850 <__adddf3+0x19c>
    ba4c:	14fff604 	addi	r19,r2,-40
    ba50:	8ce6983a 	sll	r19,r17,r19
    ba54:	0023883a 	mov	r17,zero
    ba58:	1c3f840e 	bge	r3,r16,b86c <__adddf3+0x1b8>
    ba5c:	017fe034 	movhi	r5,65408
    ba60:	297fffc4 	addi	r5,r5,-1
    ba64:	80e1c83a 	sub	r16,r16,r3
    ba68:	994a703a 	and	r5,r19,r5
    ba6c:	003f3006 	br	b730 <__adddf3+0x7c>
    ba70:	0009883a 	mov	r4,zero
    ba74:	0005883a 	mov	r2,zero
    ba78:	003f4506 	br	b790 <__adddf3+0xdc>
    ba7c:	418cb03a 	or	r6,r8,r6
    ba80:	300cc03a 	cmpne	r6,r6,zero
    ba84:	0007883a 	mov	r3,zero
    ba88:	003f6106 	br	b810 <__adddf3+0x15c>
    ba8c:	2000921e 	bne	r4,zero,bcd8 <__adddf3+0x624>
    ba90:	80800044 	addi	r2,r16,1
    ba94:	11c1ffcc 	andi	r7,r2,2047
    ba98:	01000044 	movi	r4,1
    ba9c:	21c0610e 	bge	r4,r7,bc24 <__adddf3+0x570>
    baa0:	0101ffc4 	movi	r4,2047
    baa4:	1100a326 	beq	r2,r4,bd34 <__adddf3+0x680>
    baa8:	344d883a 	add	r6,r6,r17
    baac:	3463803a 	cmpltu	r17,r6,r17
    bab0:	414b883a 	add	r5,r8,r5
    bab4:	2c4b883a 	add	r5,r5,r17
    bab8:	282297fa 	slli	r17,r5,31
    babc:	300cd07a 	srli	r6,r6,1
    bac0:	280ad07a 	srli	r5,r5,1
    bac4:	1021883a 	mov	r16,r2
    bac8:	89a2b03a 	or	r17,r17,r6
    bacc:	003f1806 	br	b730 <__adddf3+0x7c>
    bad0:	0081ffc4 	movi	r2,2047
    bad4:	80bf411e 	bne	r16,r2,b7dc <__adddf3+0x128>
    bad8:	003f1506 	br	b730 <__adddf3+0x7c>
    badc:	80bff844 	addi	r2,r16,-31
    bae0:	00c00804 	movi	r3,32
    bae4:	9884d83a 	srl	r2,r19,r2
    bae8:	28c04a26 	beq	r5,r3,bc14 <__adddf3+0x560>
    baec:	00c00fc4 	movi	r3,63
    baf0:	1c21c83a 	sub	r16,r3,r16
    baf4:	9c26983a 	sll	r19,r19,r16
    baf8:	9c62b03a 	or	r17,r19,r17
    bafc:	8822c03a 	cmpne	r17,r17,zero
    bb00:	88a2b03a 	or	r17,r17,r2
    bb04:	000b883a 	mov	r5,zero
    bb08:	0021883a 	mov	r16,zero
    bb0c:	003fb406 	br	b9e0 <__adddf3+0x32c>
    bb10:	18bff804 	addi	r2,r3,-32
    bb14:	01000804 	movi	r4,32
    bb18:	4084d83a 	srl	r2,r8,r2
    bb1c:	19003f26 	beq	r3,r4,bc1c <__adddf3+0x568>
    bb20:	01001004 	movi	r4,64
    bb24:	20c7c83a 	sub	r3,r4,r3
    bb28:	40d0983a 	sll	r8,r8,r3
    bb2c:	418cb03a 	or	r6,r8,r6
    bb30:	300cc03a 	cmpne	r6,r6,zero
    bb34:	308cb03a 	or	r6,r6,r2
    bb38:	0007883a 	mov	r3,zero
    bb3c:	003f3406 	br	b810 <__adddf3+0x15c>
    bb40:	80002326 	beq	r16,zero,bbd0 <__adddf3+0x51c>
    bb44:	0101ffc4 	movi	r4,2047
    bb48:	11005e26 	beq	r2,r4,bcc4 <__adddf3+0x610>
    bb4c:	00c7c83a 	sub	r3,zero,r3
    bb50:	29402034 	orhi	r5,r5,128
    bb54:	01000e04 	movi	r4,56
    bb58:	20c07216 	blt	r4,r3,bd24 <__adddf3+0x670>
    bb5c:	010007c4 	movi	r4,31
    bb60:	20c0ce16 	blt	r4,r3,be9c <__adddf3+0x7e8>
    bb64:	01000804 	movi	r4,32
    bb68:	20c9c83a 	sub	r4,r4,r3
    bb6c:	2914983a 	sll	r10,r5,r4
    bb70:	88d2d83a 	srl	r9,r17,r3
    bb74:	8908983a 	sll	r4,r17,r4
    bb78:	28c6d83a 	srl	r3,r5,r3
    bb7c:	5262b03a 	or	r17,r10,r9
    bb80:	2008c03a 	cmpne	r4,r4,zero
    bb84:	8922b03a 	or	r17,r17,r4
    bb88:	3463c83a 	sub	r17,r6,r17
    bb8c:	40c7c83a 	sub	r3,r8,r3
    bb90:	344d803a 	cmpltu	r6,r6,r17
    bb94:	198bc83a 	sub	r5,r3,r6
    bb98:	1021883a 	mov	r16,r2
    bb9c:	3825883a 	mov	r18,r7
    bba0:	003f2006 	br	b824 <__adddf3+0x170>
    bba4:	9886b03a 	or	r3,r19,r2
    bba8:	1800141e 	bne	r3,zero,bbfc <__adddf3+0x548>
    bbac:	0007883a 	mov	r3,zero
    bbb0:	000b883a 	mov	r5,zero
    bbb4:	0023883a 	mov	r17,zero
    bbb8:	0021883a 	mov	r16,zero
    bbbc:	003f3c06 	br	b8b0 <__adddf3+0x1fc>
    bbc0:	418cb03a 	or	r6,r8,r6
    bbc4:	300cc03a 	cmpne	r6,r6,zero
    bbc8:	0011883a 	mov	r8,zero
    bbcc:	003f5606 	br	b928 <__adddf3+0x274>
    bbd0:	2c48b03a 	or	r4,r5,r17
    bbd4:	20003b26 	beq	r4,zero,bcc4 <__adddf3+0x610>
    bbd8:	00c6303a 	nor	r3,zero,r3
    bbdc:	1800371e 	bne	r3,zero,bcbc <__adddf3+0x608>
    bbe0:	3463c83a 	sub	r17,r6,r17
    bbe4:	414bc83a 	sub	r5,r8,r5
    bbe8:	344d803a 	cmpltu	r6,r6,r17
    bbec:	298bc83a 	sub	r5,r5,r6
    bbf0:	1021883a 	mov	r16,r2
    bbf4:	3825883a 	mov	r18,r7
    bbf8:	003f0a06 	br	b824 <__adddf3+0x170>
    bbfc:	1023883a 	mov	r17,r2
    bc00:	003f0d06 	br	b838 <__adddf3+0x184>
    bc04:	0007883a 	mov	r3,zero
    bc08:	000b883a 	mov	r5,zero
    bc0c:	0023883a 	mov	r17,zero
    bc10:	003f2706 	br	b8b0 <__adddf3+0x1fc>
    bc14:	0027883a 	mov	r19,zero
    bc18:	003fb706 	br	baf8 <__adddf3+0x444>
    bc1c:	0011883a 	mov	r8,zero
    bc20:	003fc206 	br	bb2c <__adddf3+0x478>
    bc24:	2c44b03a 	or	r2,r5,r17
    bc28:	8000871e 	bne	r16,zero,be48 <__adddf3+0x794>
    bc2c:	1000b126 	beq	r2,zero,bef4 <__adddf3+0x840>
    bc30:	4184b03a 	or	r2,r8,r6
    bc34:	103ebe26 	beq	r2,zero,b730 <__adddf3+0x7c>
    bc38:	3445883a 	add	r2,r6,r17
    bc3c:	1463803a 	cmpltu	r17,r2,r17
    bc40:	414b883a 	add	r5,r8,r5
    bc44:	2c4b883a 	add	r5,r5,r17
    bc48:	28c0202c 	andhi	r3,r5,128
    bc4c:	1023883a 	mov	r17,r2
    bc50:	183f6326 	beq	r3,zero,b9e0 <__adddf3+0x32c>
    bc54:	00bfe034 	movhi	r2,65408
    bc58:	10bfffc4 	addi	r2,r2,-1
    bc5c:	2021883a 	mov	r16,r4
    bc60:	288a703a 	and	r5,r5,r2
    bc64:	003eb206 	br	b730 <__adddf3+0x7c>
    bc68:	2c44b03a 	or	r2,r5,r17
    bc6c:	8000251e 	bne	r16,zero,bd04 <__adddf3+0x650>
    bc70:	10004b1e 	bne	r2,zero,bda0 <__adddf3+0x6ec>
    bc74:	4184b03a 	or	r2,r8,r6
    bc78:	103fe226 	beq	r2,zero,bc04 <__adddf3+0x550>
    bc7c:	400b883a 	mov	r5,r8
    bc80:	3023883a 	mov	r17,r6
    bc84:	3825883a 	mov	r18,r7
    bc88:	003ea906 	br	b730 <__adddf3+0x7c>
    bc8c:	20bff804 	addi	r2,r4,-32
    bc90:	01c00804 	movi	r7,32
    bc94:	4084d83a 	srl	r2,r8,r2
    bc98:	21c07e26 	beq	r4,r7,be94 <__adddf3+0x7e0>
    bc9c:	01c01004 	movi	r7,64
    bca0:	3909c83a 	sub	r4,r7,r4
    bca4:	4110983a 	sll	r8,r8,r4
    bca8:	418cb03a 	or	r6,r8,r6
    bcac:	300cc03a 	cmpne	r6,r6,zero
    bcb0:	308cb03a 	or	r6,r6,r2
    bcb4:	0011883a 	mov	r8,zero
    bcb8:	003f1b06 	br	b928 <__adddf3+0x274>
    bcbc:	0101ffc4 	movi	r4,2047
    bcc0:	113fa41e 	bne	r2,r4,bb54 <__adddf3+0x4a0>
    bcc4:	400b883a 	mov	r5,r8
    bcc8:	3023883a 	mov	r17,r6
    bccc:	1021883a 	mov	r16,r2
    bcd0:	3825883a 	mov	r18,r7
    bcd4:	003e9606 	br	b730 <__adddf3+0x7c>
    bcd8:	80001a1e 	bne	r16,zero,bd44 <__adddf3+0x690>
    bcdc:	2c4eb03a 	or	r7,r5,r17
    bce0:	38005526 	beq	r7,zero,be38 <__adddf3+0x784>
    bce4:	0108303a 	nor	r4,zero,r4
    bce8:	2000511e 	bne	r4,zero,be30 <__adddf3+0x77c>
    bcec:	89a3883a 	add	r17,r17,r6
    bcf0:	414b883a 	add	r5,r8,r5
    bcf4:	898d803a 	cmpltu	r6,r17,r6
    bcf8:	298b883a 	add	r5,r5,r6
    bcfc:	1021883a 	mov	r16,r2
    bd00:	003f0e06 	br	b93c <__adddf3+0x288>
    bd04:	1000341e 	bne	r2,zero,bdd8 <__adddf3+0x724>
    bd08:	4184b03a 	or	r2,r8,r6
    bd0c:	10006f26 	beq	r2,zero,becc <__adddf3+0x818>
    bd10:	400b883a 	mov	r5,r8
    bd14:	3023883a 	mov	r17,r6
    bd18:	3825883a 	mov	r18,r7
    bd1c:	0401ffc4 	movi	r16,2047
    bd20:	003e8306 	br	b730 <__adddf3+0x7c>
    bd24:	2c62b03a 	or	r17,r5,r17
    bd28:	8822c03a 	cmpne	r17,r17,zero
    bd2c:	0007883a 	mov	r3,zero
    bd30:	003f9506 	br	bb88 <__adddf3+0x4d4>
    bd34:	1021883a 	mov	r16,r2
    bd38:	000b883a 	mov	r5,zero
    bd3c:	0023883a 	mov	r17,zero
    bd40:	003edb06 	br	b8b0 <__adddf3+0x1fc>
    bd44:	01c1ffc4 	movi	r7,2047
    bd48:	11c03b26 	beq	r2,r7,be38 <__adddf3+0x784>
    bd4c:	0109c83a 	sub	r4,zero,r4
    bd50:	29402034 	orhi	r5,r5,128
    bd54:	01c00e04 	movi	r7,56
    bd58:	39006216 	blt	r7,r4,bee4 <__adddf3+0x830>
    bd5c:	01c007c4 	movi	r7,31
    bd60:	39006b16 	blt	r7,r4,bf10 <__adddf3+0x85c>
    bd64:	01c00804 	movi	r7,32
    bd68:	390fc83a 	sub	r7,r7,r4
    bd6c:	29d4983a 	sll	r10,r5,r7
    bd70:	8912d83a 	srl	r9,r17,r4
    bd74:	89ce983a 	sll	r7,r17,r7
    bd78:	2908d83a 	srl	r4,r5,r4
    bd7c:	5262b03a 	or	r17,r10,r9
    bd80:	380ac03a 	cmpne	r5,r7,zero
    bd84:	8962b03a 	or	r17,r17,r5
    bd88:	89a3883a 	add	r17,r17,r6
    bd8c:	2211883a 	add	r8,r4,r8
    bd90:	898d803a 	cmpltu	r6,r17,r6
    bd94:	418b883a 	add	r5,r8,r6
    bd98:	1021883a 	mov	r16,r2
    bd9c:	003ee706 	br	b93c <__adddf3+0x288>
    bda0:	4184b03a 	or	r2,r8,r6
    bda4:	103e6226 	beq	r2,zero,b730 <__adddf3+0x7c>
    bda8:	8987c83a 	sub	r3,r17,r6
    bdac:	88c9803a 	cmpltu	r4,r17,r3
    bdb0:	2a05c83a 	sub	r2,r5,r8
    bdb4:	1105c83a 	sub	r2,r2,r4
    bdb8:	1100202c 	andhi	r4,r2,128
    bdbc:	203f0426 	beq	r4,zero,b9d0 <__adddf3+0x31c>
    bdc0:	3463c83a 	sub	r17,r6,r17
    bdc4:	414bc83a 	sub	r5,r8,r5
    bdc8:	344d803a 	cmpltu	r6,r6,r17
    bdcc:	298bc83a 	sub	r5,r5,r6
    bdd0:	3825883a 	mov	r18,r7
    bdd4:	003e5606 	br	b730 <__adddf3+0x7c>
    bdd8:	4184b03a 	or	r2,r8,r6
    bddc:	10002b26 	beq	r2,zero,be8c <__adddf3+0x7d8>
    bde0:	2804d0fa 	srli	r2,r5,3
    bde4:	8822d0fa 	srli	r17,r17,3
    bde8:	280a977a 	slli	r5,r5,29
    bdec:	10c0022c 	andhi	r3,r2,8
    bdf0:	2c62b03a 	or	r17,r5,r17
    bdf4:	18000826 	beq	r3,zero,be18 <__adddf3+0x764>
    bdf8:	4008d0fa 	srli	r4,r8,3
    bdfc:	20c0022c 	andhi	r3,r4,8
    be00:	1800051e 	bne	r3,zero,be18 <__adddf3+0x764>
    be04:	300cd0fa 	srli	r6,r6,3
    be08:	4010977a 	slli	r8,r8,29
    be0c:	2005883a 	mov	r2,r4
    be10:	3825883a 	mov	r18,r7
    be14:	41a2b03a 	or	r17,r8,r6
    be18:	880ad77a 	srli	r5,r17,29
    be1c:	100490fa 	slli	r2,r2,3
    be20:	882290fa 	slli	r17,r17,3
    be24:	0401ffc4 	movi	r16,2047
    be28:	288ab03a 	or	r5,r5,r2
    be2c:	003e4006 	br	b730 <__adddf3+0x7c>
    be30:	01c1ffc4 	movi	r7,2047
    be34:	11ffc71e 	bne	r2,r7,bd54 <__adddf3+0x6a0>
    be38:	400b883a 	mov	r5,r8
    be3c:	3023883a 	mov	r17,r6
    be40:	1021883a 	mov	r16,r2
    be44:	003e3a06 	br	b730 <__adddf3+0x7c>
    be48:	10002d26 	beq	r2,zero,bf00 <__adddf3+0x84c>
    be4c:	4184b03a 	or	r2,r8,r6
    be50:	10000e26 	beq	r2,zero,be8c <__adddf3+0x7d8>
    be54:	2804d0fa 	srli	r2,r5,3
    be58:	8822d0fa 	srli	r17,r17,3
    be5c:	280a977a 	slli	r5,r5,29
    be60:	10c0022c 	andhi	r3,r2,8
    be64:	2c62b03a 	or	r17,r5,r17
    be68:	183feb26 	beq	r3,zero,be18 <__adddf3+0x764>
    be6c:	4008d0fa 	srli	r4,r8,3
    be70:	20c0022c 	andhi	r3,r4,8
    be74:	183fe81e 	bne	r3,zero,be18 <__adddf3+0x764>
    be78:	300cd0fa 	srli	r6,r6,3
    be7c:	4010977a 	slli	r8,r8,29
    be80:	2005883a 	mov	r2,r4
    be84:	41a2b03a 	or	r17,r8,r6
    be88:	003fe306 	br	be18 <__adddf3+0x764>
    be8c:	0401ffc4 	movi	r16,2047
    be90:	003e2706 	br	b730 <__adddf3+0x7c>
    be94:	0011883a 	mov	r8,zero
    be98:	003f8306 	br	bca8 <__adddf3+0x5f4>
    be9c:	193ff804 	addi	r4,r3,-32
    bea0:	02400804 	movi	r9,32
    bea4:	2908d83a 	srl	r4,r5,r4
    bea8:	1a402526 	beq	r3,r9,bf40 <__adddf3+0x88c>
    beac:	02401004 	movi	r9,64
    beb0:	48c7c83a 	sub	r3,r9,r3
    beb4:	28ca983a 	sll	r5,r5,r3
    beb8:	2c62b03a 	or	r17,r5,r17
    bebc:	8822c03a 	cmpne	r17,r17,zero
    bec0:	8922b03a 	or	r17,r17,r4
    bec4:	0007883a 	mov	r3,zero
    bec8:	003f2f06 	br	bb88 <__adddf3+0x4d4>
    becc:	01402034 	movhi	r5,128
    bed0:	0007883a 	mov	r3,zero
    bed4:	297fffc4 	addi	r5,r5,-1
    bed8:	047ffe04 	movi	r17,-8
    bedc:	0401ffc4 	movi	r16,2047
    bee0:	003e7306 	br	b8b0 <__adddf3+0x1fc>
    bee4:	2c62b03a 	or	r17,r5,r17
    bee8:	8822c03a 	cmpne	r17,r17,zero
    beec:	0009883a 	mov	r4,zero
    bef0:	003fa506 	br	bd88 <__adddf3+0x6d4>
    bef4:	400b883a 	mov	r5,r8
    bef8:	3023883a 	mov	r17,r6
    befc:	003e0c06 	br	b730 <__adddf3+0x7c>
    bf00:	400b883a 	mov	r5,r8
    bf04:	3023883a 	mov	r17,r6
    bf08:	0401ffc4 	movi	r16,2047
    bf0c:	003e0806 	br	b730 <__adddf3+0x7c>
    bf10:	21fff804 	addi	r7,r4,-32
    bf14:	02400804 	movi	r9,32
    bf18:	29ced83a 	srl	r7,r5,r7
    bf1c:	22400a26 	beq	r4,r9,bf48 <__adddf3+0x894>
    bf20:	02401004 	movi	r9,64
    bf24:	4909c83a 	sub	r4,r9,r4
    bf28:	290a983a 	sll	r5,r5,r4
    bf2c:	2c62b03a 	or	r17,r5,r17
    bf30:	8822c03a 	cmpne	r17,r17,zero
    bf34:	89e2b03a 	or	r17,r17,r7
    bf38:	0009883a 	mov	r4,zero
    bf3c:	003f9206 	br	bd88 <__adddf3+0x6d4>
    bf40:	000b883a 	mov	r5,zero
    bf44:	003fdc06 	br	beb8 <__adddf3+0x804>
    bf48:	000b883a 	mov	r5,zero
    bf4c:	003ff706 	br	bf2c <__adddf3+0x878>

0000bf50 <__divdf3>:
    bf50:	defff004 	addi	sp,sp,-64
    bf54:	dc800815 	stw	r18,32(sp)
    bf58:	2824d53a 	srli	r18,r5,20
    bf5c:	dd800c15 	stw	r22,48(sp)
    bf60:	282cd7fa 	srli	r22,r5,31
    bf64:	dc000615 	stw	r16,24(sp)
    bf68:	04000434 	movhi	r16,16
    bf6c:	df000e15 	stw	fp,56(sp)
    bf70:	dd000a15 	stw	r20,40(sp)
    bf74:	dcc00915 	stw	r19,36(sp)
    bf78:	dc400715 	stw	r17,28(sp)
    bf7c:	843fffc4 	addi	r16,r16,-1
    bf80:	dfc00f15 	stw	ra,60(sp)
    bf84:	ddc00d15 	stw	r23,52(sp)
    bf88:	dd400b15 	stw	r21,44(sp)
    bf8c:	9481ffcc 	andi	r18,r18,2047
    bf90:	2029883a 	mov	r20,r4
    bf94:	2027883a 	mov	r19,r4
    bf98:	2c22703a 	and	r17,r5,r16
    bf9c:	b7003fcc 	andi	fp,r22,255
    bfa0:	90005e26 	beq	r18,zero,c11c <__divdf3+0x1cc>
    bfa4:	0081ffc4 	movi	r2,2047
    bfa8:	90803526 	beq	r18,r2,c080 <__divdf3+0x130>
    bfac:	8c000434 	orhi	r16,r17,16
    bfb0:	2004d77a 	srli	r2,r4,29
    bfb4:	802090fa 	slli	r16,r16,3
    bfb8:	202690fa 	slli	r19,r4,3
    bfbc:	94bf0044 	addi	r18,r18,-1023
    bfc0:	80a2b03a 	or	r17,r16,r2
    bfc4:	0029883a 	mov	r20,zero
    bfc8:	0011883a 	mov	r8,zero
    bfcc:	380ad53a 	srli	r5,r7,20
    bfd0:	382ed7fa 	srli	r23,r7,31
    bfd4:	04000434 	movhi	r16,16
    bfd8:	843fffc4 	addi	r16,r16,-1
    bfdc:	2941ffcc 	andi	r5,r5,2047
    bfe0:	302b883a 	mov	r21,r6
    bfe4:	3c20703a 	and	r16,r7,r16
    bfe8:	ba403fcc 	andi	r9,r23,255
    bfec:	28006726 	beq	r5,zero,c18c <__divdf3+0x23c>
    bff0:	0081ffc4 	movi	r2,2047
    bff4:	28805f26 	beq	r5,r2,c174 <__divdf3+0x224>
    bff8:	84000434 	orhi	r16,r16,16
    bffc:	3004d77a 	srli	r2,r6,29
    c000:	802090fa 	slli	r16,r16,3
    c004:	302a90fa 	slli	r21,r6,3
    c008:	297f0044 	addi	r5,r5,-1023
    c00c:	80a0b03a 	or	r16,r16,r2
    c010:	000f883a 	mov	r7,zero
    c014:	3d06b03a 	or	r3,r7,r20
    c018:	180690ba 	slli	r3,r3,2
    c01c:	00800074 	movhi	r2,1
    c020:	10b01004 	addi	r2,r2,-16320
    c024:	1885883a 	add	r2,r3,r2
    c028:	10800017 	ldw	r2,0(r2)
    c02c:	b5c8f03a 	xor	r4,r22,r23
    c030:	200d883a 	mov	r6,r4
    c034:	25003fcc 	andi	r20,r4,255
    c038:	9165c83a 	sub	r18,r18,r5
    c03c:	1000683a 	jmp	r2
    c040:	0000c288 	cmpgei	zero,zero,778
    c044:	0000c0b8 	rdprs	zero,zero,770
    c048:	0000c24c 	andi	zero,zero,777
    c04c:	0000c09c 	xori	zero,zero,770
    c050:	0000c24c 	andi	zero,zero,777
    c054:	0000c220 	cmpeqi	zero,zero,776
    c058:	0000c24c 	andi	zero,zero,777
    c05c:	0000c09c 	xori	zero,zero,770
    c060:	0000c0b8 	rdprs	zero,zero,770
    c064:	0000c0b8 	rdprs	zero,zero,770
    c068:	0000c220 	cmpeqi	zero,zero,776
    c06c:	0000c09c 	xori	zero,zero,770
    c070:	0000c0ac 	andhi	zero,zero,770
    c074:	0000c0ac 	andhi	zero,zero,770
    c078:	0000c0ac 	andhi	zero,zero,770
    c07c:	0000c25c 	xori	zero,zero,777
    c080:	8904b03a 	or	r2,r17,r4
    c084:	1000631e 	bne	r2,zero,c214 <__divdf3+0x2c4>
    c088:	05000204 	movi	r20,8
    c08c:	0023883a 	mov	r17,zero
    c090:	0027883a 	mov	r19,zero
    c094:	02000084 	movi	r8,2
    c098:	003fcc06 	br	bfcc <__divdf3+0x7c>
    c09c:	8023883a 	mov	r17,r16
    c0a0:	a827883a 	mov	r19,r21
    c0a4:	4839883a 	mov	fp,r9
    c0a8:	3811883a 	mov	r8,r7
    c0ac:	00800084 	movi	r2,2
    c0b0:	4081531e 	bne	r8,r2,c600 <__divdf3+0x6b0>
    c0b4:	e029883a 	mov	r20,fp
    c0b8:	a180004c 	andi	r6,r20,1
    c0bc:	0201ffc4 	movi	r8,2047
    c0c0:	000b883a 	mov	r5,zero
    c0c4:	0027883a 	mov	r19,zero
    c0c8:	4010953a 	slli	r8,r8,20
    c0cc:	30c03fcc 	andi	r3,r6,255
    c0d0:	04000434 	movhi	r16,16
    c0d4:	180697fa 	slli	r3,r3,31
    c0d8:	843fffc4 	addi	r16,r16,-1
    c0dc:	2c20703a 	and	r16,r5,r16
    c0e0:	8220b03a 	or	r16,r16,r8
    c0e4:	80c6b03a 	or	r3,r16,r3
    c0e8:	9805883a 	mov	r2,r19
    c0ec:	dfc00f17 	ldw	ra,60(sp)
    c0f0:	df000e17 	ldw	fp,56(sp)
    c0f4:	ddc00d17 	ldw	r23,52(sp)
    c0f8:	dd800c17 	ldw	r22,48(sp)
    c0fc:	dd400b17 	ldw	r21,44(sp)
    c100:	dd000a17 	ldw	r20,40(sp)
    c104:	dcc00917 	ldw	r19,36(sp)
    c108:	dc800817 	ldw	r18,32(sp)
    c10c:	dc400717 	ldw	r17,28(sp)
    c110:	dc000617 	ldw	r16,24(sp)
    c114:	dec01004 	addi	sp,sp,64
    c118:	f800283a 	ret
    c11c:	8904b03a 	or	r2,r17,r4
    c120:	10003726 	beq	r2,zero,c200 <__divdf3+0x2b0>
    c124:	88014d26 	beq	r17,zero,c65c <__divdf3+0x70c>
    c128:	8809883a 	mov	r4,r17
    c12c:	d9800215 	stw	r6,8(sp)
    c130:	d9c00515 	stw	r7,20(sp)
    c134:	00015480 	call	1548 <__clzsi2>
    c138:	d9800217 	ldw	r6,8(sp)
    c13c:	d9c00517 	ldw	r7,20(sp)
    c140:	1007883a 	mov	r3,r2
    c144:	01000a04 	movi	r4,40
    c148:	1cfffe04 	addi	r19,r3,-8
    c14c:	20c9c83a 	sub	r4,r4,r3
    c150:	8cca983a 	sll	r5,r17,r19
    c154:	a108d83a 	srl	r4,r20,r4
    c158:	a4e6983a 	sll	r19,r20,r19
    c15c:	2162b03a 	or	r17,r4,r5
    c160:	04bf0344 	movi	r18,-1011
    c164:	90e5c83a 	sub	r18,r18,r3
    c168:	0029883a 	mov	r20,zero
    c16c:	0011883a 	mov	r8,zero
    c170:	003f9606 	br	bfcc <__divdf3+0x7c>
    c174:	8184b03a 	or	r2,r16,r6
    c178:	10001f1e 	bne	r2,zero,c1f8 <__divdf3+0x2a8>
    c17c:	0021883a 	mov	r16,zero
    c180:	002b883a 	mov	r21,zero
    c184:	01c00084 	movi	r7,2
    c188:	003fa206 	br	c014 <__divdf3+0xc4>
    c18c:	8184b03a 	or	r2,r16,r6
    c190:	10001526 	beq	r2,zero,c1e8 <__divdf3+0x298>
    c194:	80013d26 	beq	r16,zero,c68c <__divdf3+0x73c>
    c198:	8009883a 	mov	r4,r16
    c19c:	d9800215 	stw	r6,8(sp)
    c1a0:	da000315 	stw	r8,12(sp)
    c1a4:	da400415 	stw	r9,16(sp)
    c1a8:	00015480 	call	1548 <__clzsi2>
    c1ac:	d9800217 	ldw	r6,8(sp)
    c1b0:	da000317 	ldw	r8,12(sp)
    c1b4:	da400417 	ldw	r9,16(sp)
    c1b8:	1007883a 	mov	r3,r2
    c1bc:	01000a04 	movi	r4,40
    c1c0:	1d7ffe04 	addi	r21,r3,-8
    c1c4:	20c9c83a 	sub	r4,r4,r3
    c1c8:	8560983a 	sll	r16,r16,r21
    c1cc:	3108d83a 	srl	r4,r6,r4
    c1d0:	356a983a 	sll	r21,r6,r21
    c1d4:	2420b03a 	or	r16,r4,r16
    c1d8:	017f0344 	movi	r5,-1011
    c1dc:	28cbc83a 	sub	r5,r5,r3
    c1e0:	000f883a 	mov	r7,zero
    c1e4:	003f8b06 	br	c014 <__divdf3+0xc4>
    c1e8:	0021883a 	mov	r16,zero
    c1ec:	002b883a 	mov	r21,zero
    c1f0:	01c00044 	movi	r7,1
    c1f4:	003f8706 	br	c014 <__divdf3+0xc4>
    c1f8:	01c000c4 	movi	r7,3
    c1fc:	003f8506 	br	c014 <__divdf3+0xc4>
    c200:	05000104 	movi	r20,4
    c204:	0023883a 	mov	r17,zero
    c208:	0027883a 	mov	r19,zero
    c20c:	02000044 	movi	r8,1
    c210:	003f6e06 	br	bfcc <__divdf3+0x7c>
    c214:	05000304 	movi	r20,12
    c218:	020000c4 	movi	r8,3
    c21c:	003f6b06 	br	bfcc <__divdf3+0x7c>
    c220:	01400434 	movhi	r5,16
    c224:	000d883a 	mov	r6,zero
    c228:	297fffc4 	addi	r5,r5,-1
    c22c:	04ffffc4 	movi	r19,-1
    c230:	0201ffc4 	movi	r8,2047
    c234:	003fa406 	br	c0c8 <__divdf3+0x178>
    c238:	043f0084 	movi	r16,-1022
    c23c:	84a1c83a 	sub	r16,r16,r18
    c240:	00800e04 	movi	r2,56
    c244:	14014d0e 	bge	r2,r16,c77c <__divdf3+0x82c>
    c248:	a180004c 	andi	r6,r20,1
    c24c:	0011883a 	mov	r8,zero
    c250:	000b883a 	mov	r5,zero
    c254:	0027883a 	mov	r19,zero
    c258:	003f9b06 	br	c0c8 <__divdf3+0x178>
    c25c:	8880022c 	andhi	r2,r17,8
    c260:	1000f026 	beq	r2,zero,c624 <__divdf3+0x6d4>
    c264:	8080022c 	andhi	r2,r16,8
    c268:	1000ee1e 	bne	r2,zero,c624 <__divdf3+0x6d4>
    c26c:	00800434 	movhi	r2,16
    c270:	81400234 	orhi	r5,r16,8
    c274:	10bfffc4 	addi	r2,r2,-1
    c278:	b80d883a 	mov	r6,r23
    c27c:	288a703a 	and	r5,r5,r2
    c280:	a827883a 	mov	r19,r21
    c284:	003fea06 	br	c230 <__divdf3+0x2e0>
    c288:	84411c36 	bltu	r16,r17,c6fc <__divdf3+0x7ac>
    c28c:	8c011a26 	beq	r17,r16,c6f8 <__divdf3+0x7a8>
    c290:	94bfffc4 	addi	r18,r18,-1
    c294:	dcc00015 	stw	r19,0(sp)
    c298:	8811883a 	mov	r8,r17
    c29c:	002d883a 	mov	r22,zero
    c2a0:	a80cd63a 	srli	r6,r21,24
    c2a4:	8020923a 	slli	r16,r16,8
    c2a8:	a82a923a 	slli	r21,r21,8
    c2ac:	4009883a 	mov	r4,r8
    c2b0:	342eb03a 	or	r23,r6,r16
    c2b4:	dd400115 	stw	r21,4(sp)
    c2b8:	b82ad43a 	srli	r21,r23,16
    c2bc:	da000315 	stw	r8,12(sp)
    c2c0:	bcffffcc 	andi	r19,r23,65535
    c2c4:	a80b883a 	mov	r5,r21
    c2c8:	000b6a40 	call	b6a4 <__udivsi3>
    c2cc:	1009883a 	mov	r4,r2
    c2d0:	980b883a 	mov	r5,r19
    c2d4:	1023883a 	mov	r17,r2
    c2d8:	0000eb00 	call	eb0 <__mulsi3>
    c2dc:	da000317 	ldw	r8,12(sp)
    c2e0:	a80b883a 	mov	r5,r21
    c2e4:	1039883a 	mov	fp,r2
    c2e8:	4009883a 	mov	r4,r8
    c2ec:	000b6ac0 	call	b6ac <__umodsi3>
    c2f0:	d8c00017 	ldw	r3,0(sp)
    c2f4:	1004943a 	slli	r2,r2,16
    c2f8:	1810d43a 	srli	r8,r3,16
    c2fc:	120eb03a 	or	r7,r2,r8
    c300:	3f00062e 	bgeu	r7,fp,c31c <__divdf3+0x3cc>
    c304:	3dcf883a 	add	r7,r7,r23
    c308:	88bfffc4 	addi	r2,r17,-1
    c30c:	3dc10a36 	bltu	r7,r23,c738 <__divdf3+0x7e8>
    c310:	3f01092e 	bgeu	r7,fp,c738 <__divdf3+0x7e8>
    c314:	8c7fff84 	addi	r17,r17,-2
    c318:	3dcf883a 	add	r7,r7,r23
    c31c:	3f39c83a 	sub	fp,r7,fp
    c320:	e009883a 	mov	r4,fp
    c324:	a80b883a 	mov	r5,r21
    c328:	000b6a40 	call	b6a4 <__udivsi3>
    c32c:	1009883a 	mov	r4,r2
    c330:	980b883a 	mov	r5,r19
    c334:	1021883a 	mov	r16,r2
    c338:	0000eb00 	call	eb0 <__mulsi3>
    c33c:	e009883a 	mov	r4,fp
    c340:	a80b883a 	mov	r5,r21
    c344:	d8800315 	stw	r2,12(sp)
    c348:	000b6ac0 	call	b6ac <__umodsi3>
    c34c:	d9000017 	ldw	r4,0(sp)
    c350:	1004943a 	slli	r2,r2,16
    c354:	da000317 	ldw	r8,12(sp)
    c358:	20ffffcc 	andi	r3,r4,65535
    c35c:	10ceb03a 	or	r7,r2,r3
    c360:	3a00062e 	bgeu	r7,r8,c37c <__divdf3+0x42c>
    c364:	3dcf883a 	add	r7,r7,r23
    c368:	80bfffc4 	addi	r2,r16,-1
    c36c:	3dc0f036 	bltu	r7,r23,c730 <__divdf3+0x7e0>
    c370:	3a00ef2e 	bgeu	r7,r8,c730 <__divdf3+0x7e0>
    c374:	843fff84 	addi	r16,r16,-2
    c378:	3dcf883a 	add	r7,r7,r23
    c37c:	d8c00117 	ldw	r3,4(sp)
    c380:	8822943a 	slli	r17,r17,16
    c384:	3a0fc83a 	sub	r7,r7,r8
    c388:	1806d43a 	srli	r3,r3,16
    c38c:	8462b03a 	or	r17,r16,r17
    c390:	8affffcc 	andi	r11,r17,65535
    c394:	d8c00015 	stw	r3,0(sp)
    c398:	d8c00117 	ldw	r3,4(sp)
    c39c:	8820d43a 	srli	r16,r17,16
    c3a0:	5809883a 	mov	r4,r11
    c3a4:	1f3fffcc 	andi	fp,r3,65535
    c3a8:	e00b883a 	mov	r5,fp
    c3ac:	d9c00515 	stw	r7,20(sp)
    c3b0:	dac00215 	stw	r11,8(sp)
    c3b4:	0000eb00 	call	eb0 <__mulsi3>
    c3b8:	8009883a 	mov	r4,r16
    c3bc:	e00b883a 	mov	r5,fp
    c3c0:	d8800415 	stw	r2,16(sp)
    c3c4:	0000eb00 	call	eb0 <__mulsi3>
    c3c8:	d9400017 	ldw	r5,0(sp)
    c3cc:	8009883a 	mov	r4,r16
    c3d0:	d8800315 	stw	r2,12(sp)
    c3d4:	0000eb00 	call	eb0 <__mulsi3>
    c3d8:	dac00217 	ldw	r11,8(sp)
    c3dc:	d9400017 	ldw	r5,0(sp)
    c3e0:	d8800215 	stw	r2,8(sp)
    c3e4:	5809883a 	mov	r4,r11
    c3e8:	0000eb00 	call	eb0 <__mulsi3>
    c3ec:	da400417 	ldw	r9,16(sp)
    c3f0:	da800317 	ldw	r10,12(sp)
    c3f4:	d9c00517 	ldw	r7,20(sp)
    c3f8:	480ad43a 	srli	r5,r9,16
    c3fc:	5085883a 	add	r2,r10,r2
    c400:	db000217 	ldw	r12,8(sp)
    c404:	1151883a 	add	r8,r2,r5
    c408:	4280022e 	bgeu	r8,r10,c414 <__divdf3+0x4c4>
    c40c:	00800074 	movhi	r2,1
    c410:	6099883a 	add	r12,r12,r2
    c414:	400ad43a 	srli	r5,r8,16
    c418:	4010943a 	slli	r8,r8,16
    c41c:	4c3fffcc 	andi	r16,r9,65535
    c420:	6149883a 	add	r4,r12,r5
    c424:	4411883a 	add	r8,r8,r16
    c428:	3900a736 	bltu	r7,r4,c6c8 <__divdf3+0x778>
    c42c:	3900c426 	beq	r7,r4,c740 <__divdf3+0x7f0>
    c430:	3909c83a 	sub	r4,r7,r4
    c434:	b221c83a 	sub	r16,r22,r8
    c438:	b42d803a 	cmpltu	r22,r22,r16
    c43c:	25adc83a 	sub	r22,r4,r22
    c440:	b5c0c626 	beq	r22,r23,c75c <__divdf3+0x80c>
    c444:	b009883a 	mov	r4,r22
    c448:	a80b883a 	mov	r5,r21
    c44c:	000b6a40 	call	b6a4 <__udivsi3>
    c450:	1009883a 	mov	r4,r2
    c454:	980b883a 	mov	r5,r19
    c458:	d8800315 	stw	r2,12(sp)
    c45c:	0000eb00 	call	eb0 <__mulsi3>
    c460:	a80b883a 	mov	r5,r21
    c464:	b009883a 	mov	r4,r22
    c468:	d8800415 	stw	r2,16(sp)
    c46c:	000b6ac0 	call	b6ac <__umodsi3>
    c470:	1004943a 	slli	r2,r2,16
    c474:	800ed43a 	srli	r7,r16,16
    c478:	da400417 	ldw	r9,16(sp)
    c47c:	da000317 	ldw	r8,12(sp)
    c480:	11cab03a 	or	r5,r2,r7
    c484:	2a40062e 	bgeu	r5,r9,c4a0 <__divdf3+0x550>
    c488:	2dcb883a 	add	r5,r5,r23
    c48c:	40bfffc4 	addi	r2,r8,-1
    c490:	2dc0b436 	bltu	r5,r23,c764 <__divdf3+0x814>
    c494:	2a40b32e 	bgeu	r5,r9,c764 <__divdf3+0x814>
    c498:	423fff84 	addi	r8,r8,-2
    c49c:	2dcb883a 	add	r5,r5,r23
    c4a0:	2a6dc83a 	sub	r22,r5,r9
    c4a4:	b009883a 	mov	r4,r22
    c4a8:	a80b883a 	mov	r5,r21
    c4ac:	da000315 	stw	r8,12(sp)
    c4b0:	000b6a40 	call	b6a4 <__udivsi3>
    c4b4:	980b883a 	mov	r5,r19
    c4b8:	1009883a 	mov	r4,r2
    c4bc:	d8800415 	stw	r2,16(sp)
    c4c0:	0000eb00 	call	eb0 <__mulsi3>
    c4c4:	b009883a 	mov	r4,r22
    c4c8:	a80b883a 	mov	r5,r21
    c4cc:	1027883a 	mov	r19,r2
    c4d0:	000b6ac0 	call	b6ac <__umodsi3>
    c4d4:	1004943a 	slli	r2,r2,16
    c4d8:	843fffcc 	andi	r16,r16,65535
    c4dc:	da000317 	ldw	r8,12(sp)
    c4e0:	140eb03a 	or	r7,r2,r16
    c4e4:	da400417 	ldw	r9,16(sp)
    c4e8:	3cc0062e 	bgeu	r7,r19,c504 <__divdf3+0x5b4>
    c4ec:	3dcf883a 	add	r7,r7,r23
    c4f0:	48bfffc4 	addi	r2,r9,-1
    c4f4:	3dc09d36 	bltu	r7,r23,c76c <__divdf3+0x81c>
    c4f8:	3cc09c2e 	bgeu	r7,r19,c76c <__divdf3+0x81c>
    c4fc:	4a7fff84 	addi	r9,r9,-2
    c500:	3dcf883a 	add	r7,r7,r23
    c504:	4010943a 	slli	r8,r8,16
    c508:	3cebc83a 	sub	r21,r7,r19
    c50c:	e00b883a 	mov	r5,fp
    c510:	4a26b03a 	or	r19,r9,r8
    c514:	99ffffcc 	andi	r7,r19,65535
    c518:	9820d43a 	srli	r16,r19,16
    c51c:	3809883a 	mov	r4,r7
    c520:	d9c00515 	stw	r7,20(sp)
    c524:	0000eb00 	call	eb0 <__mulsi3>
    c528:	8009883a 	mov	r4,r16
    c52c:	e00b883a 	mov	r5,fp
    c530:	102d883a 	mov	r22,r2
    c534:	0000eb00 	call	eb0 <__mulsi3>
    c538:	d9400017 	ldw	r5,0(sp)
    c53c:	8009883a 	mov	r4,r16
    c540:	1039883a 	mov	fp,r2
    c544:	0000eb00 	call	eb0 <__mulsi3>
    c548:	d9c00517 	ldw	r7,20(sp)
    c54c:	d9400017 	ldw	r5,0(sp)
    c550:	1021883a 	mov	r16,r2
    c554:	3809883a 	mov	r4,r7
    c558:	0000eb00 	call	eb0 <__mulsi3>
    c55c:	b008d43a 	srli	r4,r22,16
    c560:	e085883a 	add	r2,fp,r2
    c564:	1109883a 	add	r4,r2,r4
    c568:	2700022e 	bgeu	r4,fp,c574 <__divdf3+0x624>
    c56c:	00800074 	movhi	r2,1
    c570:	80a1883a 	add	r16,r16,r2
    c574:	200ad43a 	srli	r5,r4,16
    c578:	2008943a 	slli	r4,r4,16
    c57c:	b5bfffcc 	andi	r22,r22,65535
    c580:	8145883a 	add	r2,r16,r5
    c584:	2589883a 	add	r4,r4,r22
    c588:	a8802c36 	bltu	r21,r2,c63c <__divdf3+0x6ec>
    c58c:	a880a426 	beq	r21,r2,c820 <__divdf3+0x8d0>
    c590:	9cc00054 	ori	r19,r19,1
    c594:	9200ffc4 	addi	r8,r18,1023
    c598:	023f270e 	bge	zero,r8,c238 <__divdf3+0x2e8>
    c59c:	988001cc 	andi	r2,r19,7
    c5a0:	10000726 	beq	r2,zero,c5c0 <__divdf3+0x670>
    c5a4:	990003cc 	andi	r4,r19,15
    c5a8:	00800104 	movi	r2,4
    c5ac:	20800426 	beq	r4,r2,c5c0 <__divdf3+0x670>
    c5b0:	9885883a 	add	r2,r19,r2
    c5b4:	14e7803a 	cmpltu	r19,r2,r19
    c5b8:	8ce3883a 	add	r17,r17,r19
    c5bc:	1027883a 	mov	r19,r2
    c5c0:	8880402c 	andhi	r2,r17,256
    c5c4:	10000426 	beq	r2,zero,c5d8 <__divdf3+0x688>
    c5c8:	00bfc034 	movhi	r2,65280
    c5cc:	10bfffc4 	addi	r2,r2,-1
    c5d0:	92010004 	addi	r8,r18,1024
    c5d4:	88a2703a 	and	r17,r17,r2
    c5d8:	0081ff84 	movi	r2,2046
    c5dc:	123eb616 	blt	r2,r8,c0b8 <__divdf3+0x168>
    c5e0:	9826d0fa 	srli	r19,r19,3
    c5e4:	8804977a 	slli	r2,r17,29
    c5e8:	8820927a 	slli	r16,r17,9
    c5ec:	4201ffcc 	andi	r8,r8,2047
    c5f0:	14e6b03a 	or	r19,r2,r19
    c5f4:	800ad33a 	srli	r5,r16,12
    c5f8:	a180004c 	andi	r6,r20,1
    c5fc:	003eb206 	br	c0c8 <__divdf3+0x178>
    c600:	008000c4 	movi	r2,3
    c604:	4080ac26 	beq	r8,r2,c8b8 <__divdf3+0x968>
    c608:	00800044 	movi	r2,1
    c60c:	4080591e 	bne	r8,r2,c774 <__divdf3+0x824>
    c610:	e00d883a 	mov	r6,fp
    c614:	0011883a 	mov	r8,zero
    c618:	000b883a 	mov	r5,zero
    c61c:	0027883a 	mov	r19,zero
    c620:	003ea906 	br	c0c8 <__divdf3+0x178>
    c624:	00800434 	movhi	r2,16
    c628:	89400234 	orhi	r5,r17,8
    c62c:	10bfffc4 	addi	r2,r2,-1
    c630:	b00d883a 	mov	r6,r22
    c634:	288a703a 	and	r5,r5,r2
    c638:	003efd06 	br	c230 <__divdf3+0x2e0>
    c63c:	adcf883a 	add	r7,r21,r23
    c640:	997fffc4 	addi	r5,r19,-1
    c644:	3dc0412e 	bgeu	r7,r23,c74c <__divdf3+0x7fc>
    c648:	2827883a 	mov	r19,r5
    c64c:	38bfd01e 	bne	r7,r2,c590 <__divdf3+0x640>
    c650:	d8c00117 	ldw	r3,4(sp)
    c654:	193fce1e 	bne	r3,r4,c590 <__divdf3+0x640>
    c658:	003fce06 	br	c594 <__divdf3+0x644>
    c65c:	d9800215 	stw	r6,8(sp)
    c660:	d9c00515 	stw	r7,20(sp)
    c664:	00015480 	call	1548 <__clzsi2>
    c668:	10c00804 	addi	r3,r2,32
    c66c:	010009c4 	movi	r4,39
    c670:	d9800217 	ldw	r6,8(sp)
    c674:	d9c00517 	ldw	r7,20(sp)
    c678:	20feb20e 	bge	r4,r3,c144 <__divdf3+0x1f4>
    c67c:	117ffe04 	addi	r5,r2,-8
    c680:	a162983a 	sll	r17,r20,r5
    c684:	0027883a 	mov	r19,zero
    c688:	003eb506 	br	c160 <__divdf3+0x210>
    c68c:	3009883a 	mov	r4,r6
    c690:	d9800215 	stw	r6,8(sp)
    c694:	da000315 	stw	r8,12(sp)
    c698:	da400415 	stw	r9,16(sp)
    c69c:	00015480 	call	1548 <__clzsi2>
    c6a0:	10c00804 	addi	r3,r2,32
    c6a4:	010009c4 	movi	r4,39
    c6a8:	d9800217 	ldw	r6,8(sp)
    c6ac:	da000317 	ldw	r8,12(sp)
    c6b0:	da400417 	ldw	r9,16(sp)
    c6b4:	20fec10e 	bge	r4,r3,c1bc <__divdf3+0x26c>
    c6b8:	10bffe04 	addi	r2,r2,-8
    c6bc:	a8a0983a 	sll	r16,r21,r2
    c6c0:	002b883a 	mov	r21,zero
    c6c4:	003ec406 	br	c1d8 <__divdf3+0x288>
    c6c8:	d8c00117 	ldw	r3,4(sp)
    c6cc:	b0ed883a 	add	r22,r22,r3
    c6d0:	b0c5803a 	cmpltu	r2,r22,r3
    c6d4:	15c5883a 	add	r2,r2,r23
    c6d8:	11cf883a 	add	r7,r2,r7
    c6dc:	88bfffc4 	addi	r2,r17,-1
    c6e0:	b9c00d2e 	bgeu	r23,r7,c718 <__divdf3+0x7c8>
    c6e4:	39003f36 	bltu	r7,r4,c7e4 <__divdf3+0x894>
    c6e8:	21c06a26 	beq	r4,r7,c894 <__divdf3+0x944>
    c6ec:	3909c83a 	sub	r4,r7,r4
    c6f0:	1023883a 	mov	r17,r2
    c6f4:	003f4f06 	br	c434 <__divdf3+0x4e4>
    c6f8:	9d7ee536 	bltu	r19,r21,c290 <__divdf3+0x340>
    c6fc:	982ed07a 	srli	r23,r19,1
    c700:	880497fa 	slli	r2,r17,31
    c704:	8810d07a 	srli	r8,r17,1
    c708:	982c97fa 	slli	r22,r19,31
    c70c:	b884b03a 	or	r2,r23,r2
    c710:	d8800015 	stw	r2,0(sp)
    c714:	003ee206 	br	c2a0 <__divdf3+0x350>
    c718:	3dfff41e 	bne	r7,r23,c6ec <__divdf3+0x79c>
    c71c:	d8c00117 	ldw	r3,4(sp)
    c720:	b0fff02e 	bgeu	r22,r3,c6e4 <__divdf3+0x794>
    c724:	b909c83a 	sub	r4,r23,r4
    c728:	1023883a 	mov	r17,r2
    c72c:	003f4106 	br	c434 <__divdf3+0x4e4>
    c730:	1021883a 	mov	r16,r2
    c734:	003f1106 	br	c37c <__divdf3+0x42c>
    c738:	1023883a 	mov	r17,r2
    c73c:	003ef706 	br	c31c <__divdf3+0x3cc>
    c740:	b23fe136 	bltu	r22,r8,c6c8 <__divdf3+0x778>
    c744:	0009883a 	mov	r4,zero
    c748:	003f3a06 	br	c434 <__divdf3+0x4e4>
    c74c:	38802c36 	bltu	r7,r2,c800 <__divdf3+0x8b0>
    c750:	11c05326 	beq	r2,r7,c8a0 <__divdf3+0x950>
    c754:	2827883a 	mov	r19,r5
    c758:	003f8d06 	br	c590 <__divdf3+0x640>
    c75c:	04ffffc4 	movi	r19,-1
    c760:	003f8c06 	br	c594 <__divdf3+0x644>
    c764:	1011883a 	mov	r8,r2
    c768:	003f4d06 	br	c4a0 <__divdf3+0x550>
    c76c:	1013883a 	mov	r9,r2
    c770:	003f6406 	br	c504 <__divdf3+0x5b4>
    c774:	e029883a 	mov	r20,fp
    c778:	003f8606 	br	c594 <__divdf3+0x644>
    c77c:	008007c4 	movi	r2,31
    c780:	14002a16 	blt	r2,r16,c82c <__divdf3+0x8dc>
    c784:	91410784 	addi	r5,r18,1054
    c788:	9c0cd83a 	srl	r6,r19,r16
    c78c:	8948983a 	sll	r4,r17,r5
    c790:	9944983a 	sll	r2,r19,r5
    c794:	8c20d83a 	srl	r16,r17,r16
    c798:	3108b03a 	or	r4,r6,r4
    c79c:	1004c03a 	cmpne	r2,r2,zero
    c7a0:	2084b03a 	or	r2,r4,r2
    c7a4:	110001cc 	andi	r4,r2,7
    c7a8:	20000726 	beq	r4,zero,c7c8 <__divdf3+0x878>
    c7ac:	114003cc 	andi	r5,r2,15
    c7b0:	01000104 	movi	r4,4
    c7b4:	29000426 	beq	r5,r4,c7c8 <__divdf3+0x878>
    c7b8:	11000104 	addi	r4,r2,4
    c7bc:	2085803a 	cmpltu	r2,r4,r2
    c7c0:	80a1883a 	add	r16,r16,r2
    c7c4:	2005883a 	mov	r2,r4
    c7c8:	8100202c 	andhi	r4,r16,128
    c7cc:	20002d26 	beq	r4,zero,c884 <__divdf3+0x934>
    c7d0:	a180004c 	andi	r6,r20,1
    c7d4:	02000044 	movi	r8,1
    c7d8:	000b883a 	mov	r5,zero
    c7dc:	0027883a 	mov	r19,zero
    c7e0:	003e3906 	br	c0c8 <__divdf3+0x178>
    c7e4:	d8c00117 	ldw	r3,4(sp)
    c7e8:	8c7fff84 	addi	r17,r17,-2
    c7ec:	b0ed883a 	add	r22,r22,r3
    c7f0:	b0c5803a 	cmpltu	r2,r22,r3
    c7f4:	15c5883a 	add	r2,r2,r23
    c7f8:	11cf883a 	add	r7,r2,r7
    c7fc:	003f0c06 	br	c430 <__divdf3+0x4e0>
    c800:	d8c00117 	ldw	r3,4(sp)
    c804:	997fff84 	addi	r5,r19,-2
    c808:	18d1883a 	add	r8,r3,r3
    c80c:	40c7803a 	cmpltu	r3,r8,r3
    c810:	1dcd883a 	add	r6,r3,r23
    c814:	398f883a 	add	r7,r7,r6
    c818:	da000115 	stw	r8,4(sp)
    c81c:	003f8a06 	br	c648 <__divdf3+0x6f8>
    c820:	203f861e 	bne	r4,zero,c63c <__divdf3+0x6ec>
    c824:	d8000115 	stw	zero,4(sp)
    c828:	003f8906 	br	c650 <__divdf3+0x700>
    c82c:	00bef884 	movi	r2,-1054
    c830:	1485c83a 	sub	r2,r2,r18
    c834:	01000804 	movi	r4,32
    c838:	8884d83a 	srl	r2,r17,r2
    c83c:	81001c26 	beq	r16,r4,c8b0 <__divdf3+0x960>
    c840:	91010f84 	addi	r4,r18,1086
    c844:	8908983a 	sll	r4,r17,r4
    c848:	24c8b03a 	or	r4,r4,r19
    c84c:	2008c03a 	cmpne	r4,r4,zero
    c850:	2084b03a 	or	r2,r4,r2
    c854:	140001cc 	andi	r16,r2,7
    c858:	8000061e 	bne	r16,zero,c874 <__divdf3+0x924>
    c85c:	000b883a 	mov	r5,zero
    c860:	1004d0fa 	srli	r2,r2,3
    c864:	a180004c 	andi	r6,r20,1
    c868:	0011883a 	mov	r8,zero
    c86c:	1426b03a 	or	r19,r2,r16
    c870:	003e1506 	br	c0c8 <__divdf3+0x178>
    c874:	114003cc 	andi	r5,r2,15
    c878:	01000104 	movi	r4,4
    c87c:	0021883a 	mov	r16,zero
    c880:	293fcd1e 	bne	r5,r4,c7b8 <__divdf3+0x868>
    c884:	800a927a 	slli	r5,r16,9
    c888:	8020977a 	slli	r16,r16,29
    c88c:	280ad33a 	srli	r5,r5,12
    c890:	003ff306 	br	c860 <__divdf3+0x910>
    c894:	b23fd336 	bltu	r22,r8,c7e4 <__divdf3+0x894>
    c898:	1023883a 	mov	r17,r2
    c89c:	003fa906 	br	c744 <__divdf3+0x7f4>
    c8a0:	d8c00117 	ldw	r3,4(sp)
    c8a4:	193fd636 	bltu	r3,r4,c800 <__divdf3+0x8b0>
    c8a8:	2827883a 	mov	r19,r5
    c8ac:	003f6806 	br	c650 <__divdf3+0x700>
    c8b0:	0009883a 	mov	r4,zero
    c8b4:	003fe406 	br	c848 <__divdf3+0x8f8>
    c8b8:	00800434 	movhi	r2,16
    c8bc:	89400234 	orhi	r5,r17,8
    c8c0:	10bfffc4 	addi	r2,r2,-1
    c8c4:	e00d883a 	mov	r6,fp
    c8c8:	288a703a 	and	r5,r5,r2
    c8cc:	003e5806 	br	c230 <__divdf3+0x2e0>

0000c8d0 <__eqdf2>:
    c8d0:	2804d53a 	srli	r2,r5,20
    c8d4:	3806d53a 	srli	r3,r7,20
    c8d8:	02000434 	movhi	r8,16
    c8dc:	423fffc4 	addi	r8,r8,-1
    c8e0:	1081ffcc 	andi	r2,r2,2047
    c8e4:	0241ffc4 	movi	r9,2047
    c8e8:	2a14703a 	and	r10,r5,r8
    c8ec:	18c1ffcc 	andi	r3,r3,2047
    c8f0:	3a10703a 	and	r8,r7,r8
    c8f4:	280ad7fa 	srli	r5,r5,31
    c8f8:	380ed7fa 	srli	r7,r7,31
    c8fc:	12400f26 	beq	r2,r9,c93c <__eqdf2+0x6c>
    c900:	0241ffc4 	movi	r9,2047
    c904:	1a400326 	beq	r3,r9,c914 <__eqdf2+0x44>
    c908:	10c00526 	beq	r2,r3,c920 <__eqdf2+0x50>
    c90c:	00800044 	movi	r2,1
    c910:	f800283a 	ret
    c914:	4192b03a 	or	r9,r8,r6
    c918:	483ffc1e 	bne	r9,zero,c90c <__eqdf2+0x3c>
    c91c:	10fffb1e 	bne	r2,r3,c90c <__eqdf2+0x3c>
    c920:	523ffa1e 	bne	r10,r8,c90c <__eqdf2+0x3c>
    c924:	21bff91e 	bne	r4,r6,c90c <__eqdf2+0x3c>
    c928:	29c00826 	beq	r5,r7,c94c <__eqdf2+0x7c>
    c92c:	103ff71e 	bne	r2,zero,c90c <__eqdf2+0x3c>
    c930:	5104b03a 	or	r2,r10,r4
    c934:	1004c03a 	cmpne	r2,r2,zero
    c938:	f800283a 	ret
    c93c:	5112b03a 	or	r9,r10,r4
    c940:	483fef26 	beq	r9,zero,c900 <__eqdf2+0x30>
    c944:	00800044 	movi	r2,1
    c948:	f800283a 	ret
    c94c:	0005883a 	mov	r2,zero
    c950:	f800283a 	ret

0000c954 <__gedf2>:
    c954:	2804d53a 	srli	r2,r5,20
    c958:	3806d53a 	srli	r3,r7,20
    c95c:	02000434 	movhi	r8,16
    c960:	423fffc4 	addi	r8,r8,-1
    c964:	0241ffc4 	movi	r9,2047
    c968:	1081ffcc 	andi	r2,r2,2047
    c96c:	2a14703a 	and	r10,r5,r8
    c970:	1a46703a 	and	r3,r3,r9
    c974:	3a10703a 	and	r8,r7,r8
    c978:	280ad7fa 	srli	r5,r5,31
    c97c:	380ed7fa 	srli	r7,r7,31
    c980:	12400b26 	beq	r2,r9,c9b0 <__gedf2+0x5c>
    c984:	1a401626 	beq	r3,r9,c9e0 <__gedf2+0x8c>
    c988:	10000c1e 	bne	r2,zero,c9bc <__gedf2+0x68>
    c98c:	5112b03a 	or	r9,r10,r4
    c990:	4813003a 	cmpeq	r9,r9,zero
    c994:	4817883a 	mov	r11,r9
    c998:	18000c1e 	bne	r3,zero,c9cc <__gedf2+0x78>
    c99c:	4198b03a 	or	r12,r8,r6
    c9a0:	60000a1e 	bne	r12,zero,c9cc <__gedf2+0x78>
    c9a4:	48001326 	beq	r9,zero,c9f4 <__gedf2+0xa0>
    c9a8:	0005883a 	mov	r2,zero
    c9ac:	f800283a 	ret
    c9b0:	5112b03a 	or	r9,r10,r4
    c9b4:	4800191e 	bne	r9,zero,ca1c <__gedf2+0xc8>
    c9b8:	18800926 	beq	r3,r2,c9e0 <__gedf2+0x8c>
    c9bc:	18000b1e 	bne	r3,zero,c9ec <__gedf2+0x98>
    c9c0:	4192b03a 	or	r9,r8,r6
    c9c4:	0017883a 	mov	r11,zero
    c9c8:	48000a26 	beq	r9,zero,c9f4 <__gedf2+0xa0>
    c9cc:	39c03fcc 	andi	r7,r7,255
    c9d0:	58000726 	beq	r11,zero,c9f0 <__gedf2+0x9c>
    c9d4:	3800081e 	bne	r7,zero,c9f8 <__gedf2+0xa4>
    c9d8:	00bfffc4 	movi	r2,-1
    c9dc:	f800283a 	ret
    c9e0:	4192b03a 	or	r9,r8,r6
    c9e4:	48000d1e 	bne	r9,zero,ca1c <__gedf2+0xc8>
    c9e8:	103fe826 	beq	r2,zero,c98c <__gedf2+0x38>
    c9ec:	39c03fcc 	andi	r7,r7,255
    c9f0:	29c00326 	beq	r5,r7,ca00 <__gedf2+0xac>
    c9f4:	283ff81e 	bne	r5,zero,c9d8 <__gedf2+0x84>
    c9f8:	00800044 	movi	r2,1
    c9fc:	f800283a 	ret
    ca00:	18bffc16 	blt	r3,r2,c9f4 <__gedf2+0xa0>
    ca04:	10c00316 	blt	r2,r3,ca14 <__gedf2+0xc0>
    ca08:	42bffa36 	bltu	r8,r10,c9f4 <__gedf2+0xa0>
    ca0c:	52000526 	beq	r10,r8,ca24 <__gedf2+0xd0>
    ca10:	523fe52e 	bgeu	r10,r8,c9a8 <__gedf2+0x54>
    ca14:	283ff026 	beq	r5,zero,c9d8 <__gedf2+0x84>
    ca18:	003ff706 	br	c9f8 <__gedf2+0xa4>
    ca1c:	00bfff84 	movi	r2,-2
    ca20:	f800283a 	ret
    ca24:	313ff336 	bltu	r6,r4,c9f4 <__gedf2+0xa0>
    ca28:	21bfdf2e 	bgeu	r4,r6,c9a8 <__gedf2+0x54>
    ca2c:	283fea26 	beq	r5,zero,c9d8 <__gedf2+0x84>
    ca30:	003ff106 	br	c9f8 <__gedf2+0xa4>

0000ca34 <__ledf2>:
    ca34:	2804d53a 	srli	r2,r5,20
    ca38:	3810d53a 	srli	r8,r7,20
    ca3c:	00c00434 	movhi	r3,16
    ca40:	18ffffc4 	addi	r3,r3,-1
    ca44:	0241ffc4 	movi	r9,2047
    ca48:	1081ffcc 	andi	r2,r2,2047
    ca4c:	28d4703a 	and	r10,r5,r3
    ca50:	4250703a 	and	r8,r8,r9
    ca54:	38c6703a 	and	r3,r7,r3
    ca58:	280ad7fa 	srli	r5,r5,31
    ca5c:	380ed7fa 	srli	r7,r7,31
    ca60:	12400b26 	beq	r2,r9,ca90 <__ledf2+0x5c>
    ca64:	42401926 	beq	r8,r9,cacc <__ledf2+0x98>
    ca68:	10000c1e 	bne	r2,zero,ca9c <__ledf2+0x68>
    ca6c:	5112b03a 	or	r9,r10,r4
    ca70:	4813003a 	cmpeq	r9,r9,zero
    ca74:	4817883a 	mov	r11,r9
    ca78:	40000f26 	beq	r8,zero,cab8 <__ledf2+0x84>
    ca7c:	39c03fcc 	andi	r7,r7,255
    ca80:	58001826 	beq	r11,zero,cae4 <__ledf2+0xb0>
    ca84:	38000a1e 	bne	r7,zero,cab0 <__ledf2+0x7c>
    ca88:	00bfffc4 	movi	r2,-1
    ca8c:	f800283a 	ret
    ca90:	5112b03a 	or	r9,r10,r4
    ca94:	48000f1e 	bne	r9,zero,cad4 <__ledf2+0xa0>
    ca98:	40800c26 	beq	r8,r2,cacc <__ledf2+0x98>
    ca9c:	4000101e 	bne	r8,zero,cae0 <__ledf2+0xac>
    caa0:	1992b03a 	or	r9,r3,r6
    caa4:	0017883a 	mov	r11,zero
    caa8:	483ff41e 	bne	r9,zero,ca7c <__ledf2+0x48>
    caac:	283ff61e 	bne	r5,zero,ca88 <__ledf2+0x54>
    cab0:	00800044 	movi	r2,1
    cab4:	f800283a 	ret
    cab8:	1998b03a 	or	r12,r3,r6
    cabc:	603fef1e 	bne	r12,zero,ca7c <__ledf2+0x48>
    cac0:	483ffa26 	beq	r9,zero,caac <__ledf2+0x78>
    cac4:	0005883a 	mov	r2,zero
    cac8:	f800283a 	ret
    cacc:	1992b03a 	or	r9,r3,r6
    cad0:	48000226 	beq	r9,zero,cadc <__ledf2+0xa8>
    cad4:	00800084 	movi	r2,2
    cad8:	f800283a 	ret
    cadc:	103fe326 	beq	r2,zero,ca6c <__ledf2+0x38>
    cae0:	39c03fcc 	andi	r7,r7,255
    cae4:	29fff11e 	bne	r5,r7,caac <__ledf2+0x78>
    cae8:	40bff016 	blt	r8,r2,caac <__ledf2+0x78>
    caec:	12000316 	blt	r2,r8,cafc <__ledf2+0xc8>
    caf0:	1abfee36 	bltu	r3,r10,caac <__ledf2+0x78>
    caf4:	50c00326 	beq	r10,r3,cb04 <__ledf2+0xd0>
    caf8:	50fff22e 	bgeu	r10,r3,cac4 <__ledf2+0x90>
    cafc:	283fe226 	beq	r5,zero,ca88 <__ledf2+0x54>
    cb00:	003feb06 	br	cab0 <__ledf2+0x7c>
    cb04:	313fe936 	bltu	r6,r4,caac <__ledf2+0x78>
    cb08:	21bfee2e 	bgeu	r4,r6,cac4 <__ledf2+0x90>
    cb0c:	283fde26 	beq	r5,zero,ca88 <__ledf2+0x54>
    cb10:	003fe706 	br	cab0 <__ledf2+0x7c>

0000cb14 <__muldf3>:
    cb14:	deffee04 	addi	sp,sp,-72
    cb18:	dd000c15 	stw	r20,48(sp)
    cb1c:	2828d53a 	srli	r20,r5,20
    cb20:	dd400d15 	stw	r21,52(sp)
    cb24:	282ad7fa 	srli	r21,r5,31
    cb28:	dc000815 	stw	r16,32(sp)
    cb2c:	04000434 	movhi	r16,16
    cb30:	ddc00f15 	stw	r23,60(sp)
    cb34:	dcc00b15 	stw	r19,44(sp)
    cb38:	dc800a15 	stw	r18,40(sp)
    cb3c:	843fffc4 	addi	r16,r16,-1
    cb40:	dfc01115 	stw	ra,68(sp)
    cb44:	df001015 	stw	fp,64(sp)
    cb48:	dd800e15 	stw	r22,56(sp)
    cb4c:	dc400915 	stw	r17,36(sp)
    cb50:	a501ffcc 	andi	r20,r20,2047
    cb54:	2025883a 	mov	r18,r4
    cb58:	202f883a 	mov	r23,r4
    cb5c:	2c20703a 	and	r16,r5,r16
    cb60:	a827883a 	mov	r19,r21
    cb64:	aa403fcc 	andi	r9,r21,255
    cb68:	a0005926 	beq	r20,zero,ccd0 <__muldf3+0x1bc>
    cb6c:	0081ffc4 	movi	r2,2047
    cb70:	a0803426 	beq	r20,r2,cc44 <__muldf3+0x130>
    cb74:	84000434 	orhi	r16,r16,16
    cb78:	2004d77a 	srli	r2,r4,29
    cb7c:	802090fa 	slli	r16,r16,3
    cb80:	202e90fa 	slli	r23,r4,3
    cb84:	a53f0044 	addi	r20,r20,-1023
    cb88:	80a0b03a 	or	r16,r16,r2
    cb8c:	000b883a 	mov	r5,zero
    cb90:	0039883a 	mov	fp,zero
    cb94:	3806d53a 	srli	r3,r7,20
    cb98:	382cd7fa 	srli	r22,r7,31
    cb9c:	00800434 	movhi	r2,16
    cba0:	10bfffc4 	addi	r2,r2,-1
    cba4:	18c1ffcc 	andi	r3,r3,2047
    cba8:	3025883a 	mov	r18,r6
    cbac:	38a2703a 	and	r17,r7,r2
    cbb0:	b2803fcc 	andi	r10,r22,255
    cbb4:	18006426 	beq	r3,zero,cd48 <__muldf3+0x234>
    cbb8:	0081ffc4 	movi	r2,2047
    cbbc:	18805c26 	beq	r3,r2,cd30 <__muldf3+0x21c>
    cbc0:	8c400434 	orhi	r17,r17,16
    cbc4:	3004d77a 	srli	r2,r6,29
    cbc8:	882290fa 	slli	r17,r17,3
    cbcc:	302490fa 	slli	r18,r6,3
    cbd0:	18ff0044 	addi	r3,r3,-1023
    cbd4:	88a2b03a 	or	r17,r17,r2
    cbd8:	000f883a 	mov	r7,zero
    cbdc:	394ab03a 	or	r5,r7,r5
    cbe0:	280a90ba 	slli	r5,r5,2
    cbe4:	00800074 	movhi	r2,1
    cbe8:	10b30104 	addi	r2,r2,-13308
    cbec:	288b883a 	add	r5,r5,r2
    cbf0:	28800017 	ldw	r2,0(r5)
    cbf4:	a0c7883a 	add	r3,r20,r3
    cbf8:	b54cf03a 	xor	r6,r22,r21
    cbfc:	1a000044 	addi	r8,r3,1
    cc00:	1000683a 	jmp	r2
    cc04:	0000ce48 	cmpgei	zero,zero,825
    cc08:	0000ce34 	movhi	zero,824
    cc0c:	0000ce34 	movhi	zero,824
    cc10:	0000ce20 	cmpeqi	zero,zero,824
    cc14:	0000cc60 	cmpeqi	zero,zero,817
    cc18:	0000cc60 	cmpeqi	zero,zero,817
    cc1c:	0000ce08 	cmpgei	zero,zero,824
    cc20:	0000ce20 	cmpeqi	zero,zero,824
    cc24:	0000cc60 	cmpeqi	zero,zero,817
    cc28:	0000ce08 	cmpgei	zero,zero,824
    cc2c:	0000cc60 	cmpeqi	zero,zero,817
    cc30:	0000ce20 	cmpeqi	zero,zero,824
    cc34:	0000cc64 	muli	zero,zero,817
    cc38:	0000cc64 	muli	zero,zero,817
    cc3c:	0000cc64 	muli	zero,zero,817
    cc40:	0000d184 	movi	zero,838
    cc44:	8104b03a 	or	r2,r16,r4
    cc48:	10006c1e 	bne	r2,zero,cdfc <__muldf3+0x2e8>
    cc4c:	01400204 	movi	r5,8
    cc50:	0021883a 	mov	r16,zero
    cc54:	002f883a 	mov	r23,zero
    cc58:	07000084 	movi	fp,2
    cc5c:	003fcd06 	br	cb94 <__muldf3+0x80>
    cc60:	3013883a 	mov	r9,r6
    cc64:	00800084 	movi	r2,2
    cc68:	e080501e 	bne	fp,r2,cdac <__muldf3+0x298>
    cc6c:	4cc0004c 	andi	r19,r9,1
    cc70:	0101ffc4 	movi	r4,2047
    cc74:	0021883a 	mov	r16,zero
    cc78:	002f883a 	mov	r23,zero
    cc7c:	2008953a 	slli	r4,r4,20
    cc80:	98c03fcc 	andi	r3,r19,255
    cc84:	04400434 	movhi	r17,16
    cc88:	8c7fffc4 	addi	r17,r17,-1
    cc8c:	180697fa 	slli	r3,r3,31
    cc90:	8460703a 	and	r16,r16,r17
    cc94:	8120b03a 	or	r16,r16,r4
    cc98:	80c6b03a 	or	r3,r16,r3
    cc9c:	b805883a 	mov	r2,r23
    cca0:	dfc01117 	ldw	ra,68(sp)
    cca4:	df001017 	ldw	fp,64(sp)
    cca8:	ddc00f17 	ldw	r23,60(sp)
    ccac:	dd800e17 	ldw	r22,56(sp)
    ccb0:	dd400d17 	ldw	r21,52(sp)
    ccb4:	dd000c17 	ldw	r20,48(sp)
    ccb8:	dcc00b17 	ldw	r19,44(sp)
    ccbc:	dc800a17 	ldw	r18,40(sp)
    ccc0:	dc400917 	ldw	r17,36(sp)
    ccc4:	dc000817 	ldw	r16,32(sp)
    ccc8:	dec01204 	addi	sp,sp,72
    cccc:	f800283a 	ret
    ccd0:	8104b03a 	or	r2,r16,r4
    ccd4:	10004426 	beq	r2,zero,cde8 <__muldf3+0x2d4>
    ccd8:	80014b26 	beq	r16,zero,d208 <__muldf3+0x6f4>
    ccdc:	8009883a 	mov	r4,r16
    cce0:	d9800715 	stw	r6,28(sp)
    cce4:	d9c00215 	stw	r7,8(sp)
    cce8:	da400415 	stw	r9,16(sp)
    ccec:	00015480 	call	1548 <__clzsi2>
    ccf0:	d9800717 	ldw	r6,28(sp)
    ccf4:	d9c00217 	ldw	r7,8(sp)
    ccf8:	da400417 	ldw	r9,16(sp)
    ccfc:	1007883a 	mov	r3,r2
    cd00:	01000a04 	movi	r4,40
    cd04:	1dfffe04 	addi	r23,r3,-8
    cd08:	20c9c83a 	sub	r4,r4,r3
    cd0c:	85e0983a 	sll	r16,r16,r23
    cd10:	9108d83a 	srl	r4,r18,r4
    cd14:	95ee983a 	sll	r23,r18,r23
    cd18:	2420b03a 	or	r16,r4,r16
    cd1c:	053f0344 	movi	r20,-1011
    cd20:	a0e9c83a 	sub	r20,r20,r3
    cd24:	000b883a 	mov	r5,zero
    cd28:	0039883a 	mov	fp,zero
    cd2c:	003f9906 	br	cb94 <__muldf3+0x80>
    cd30:	8984b03a 	or	r2,r17,r6
    cd34:	10002a1e 	bne	r2,zero,cde0 <__muldf3+0x2cc>
    cd38:	0023883a 	mov	r17,zero
    cd3c:	0025883a 	mov	r18,zero
    cd40:	01c00084 	movi	r7,2
    cd44:	003fa506 	br	cbdc <__muldf3+0xc8>
    cd48:	8984b03a 	or	r2,r17,r6
    cd4c:	10002026 	beq	r2,zero,cdd0 <__muldf3+0x2bc>
    cd50:	88011c26 	beq	r17,zero,d1c4 <__muldf3+0x6b0>
    cd54:	8809883a 	mov	r4,r17
    cd58:	d9400215 	stw	r5,8(sp)
    cd5c:	d9800715 	stw	r6,28(sp)
    cd60:	da400415 	stw	r9,16(sp)
    cd64:	da800315 	stw	r10,12(sp)
    cd68:	00015480 	call	1548 <__clzsi2>
    cd6c:	d9400217 	ldw	r5,8(sp)
    cd70:	d9800717 	ldw	r6,28(sp)
    cd74:	da400417 	ldw	r9,16(sp)
    cd78:	da800317 	ldw	r10,12(sp)
    cd7c:	1007883a 	mov	r3,r2
    cd80:	01000a04 	movi	r4,40
    cd84:	1cbffe04 	addi	r18,r3,-8
    cd88:	20c9c83a 	sub	r4,r4,r3
    cd8c:	8ca2983a 	sll	r17,r17,r18
    cd90:	3108d83a 	srl	r4,r6,r4
    cd94:	34a4983a 	sll	r18,r6,r18
    cd98:	2462b03a 	or	r17,r4,r17
    cd9c:	00bf0344 	movi	r2,-1011
    cda0:	10c7c83a 	sub	r3,r2,r3
    cda4:	000f883a 	mov	r7,zero
    cda8:	003f8c06 	br	cbdc <__muldf3+0xc8>
    cdac:	008000c4 	movi	r2,3
    cdb0:	e0816d26 	beq	fp,r2,d368 <__muldf3+0x854>
    cdb4:	00800044 	movi	r2,1
    cdb8:	e081321e 	bne	fp,r2,d284 <__muldf3+0x770>
    cdbc:	48a6703a 	and	r19,r9,r2
    cdc0:	0009883a 	mov	r4,zero
    cdc4:	0021883a 	mov	r16,zero
    cdc8:	002f883a 	mov	r23,zero
    cdcc:	003fab06 	br	cc7c <__muldf3+0x168>
    cdd0:	0023883a 	mov	r17,zero
    cdd4:	0025883a 	mov	r18,zero
    cdd8:	01c00044 	movi	r7,1
    cddc:	003f7f06 	br	cbdc <__muldf3+0xc8>
    cde0:	01c000c4 	movi	r7,3
    cde4:	003f7d06 	br	cbdc <__muldf3+0xc8>
    cde8:	01400104 	movi	r5,4
    cdec:	0021883a 	mov	r16,zero
    cdf0:	002f883a 	mov	r23,zero
    cdf4:	07000044 	movi	fp,1
    cdf8:	003f6606 	br	cb94 <__muldf3+0x80>
    cdfc:	01400304 	movi	r5,12
    ce00:	070000c4 	movi	fp,3
    ce04:	003f6306 	br	cb94 <__muldf3+0x80>
    ce08:	04000434 	movhi	r16,16
    ce0c:	0027883a 	mov	r19,zero
    ce10:	843fffc4 	addi	r16,r16,-1
    ce14:	05ffffc4 	movi	r23,-1
    ce18:	0101ffc4 	movi	r4,2047
    ce1c:	003f9706 	br	cc7c <__muldf3+0x168>
    ce20:	8821883a 	mov	r16,r17
    ce24:	902f883a 	mov	r23,r18
    ce28:	5013883a 	mov	r9,r10
    ce2c:	3839883a 	mov	fp,r7
    ce30:	003f8c06 	br	cc64 <__muldf3+0x150>
    ce34:	8821883a 	mov	r16,r17
    ce38:	902f883a 	mov	r23,r18
    ce3c:	3013883a 	mov	r9,r6
    ce40:	3839883a 	mov	fp,r7
    ce44:	003f8706 	br	cc64 <__muldf3+0x150>
    ce48:	b82ad43a 	srli	r21,r23,16
    ce4c:	9038d43a 	srli	fp,r18,16
    ce50:	bdffffcc 	andi	r23,r23,65535
    ce54:	94bfffcc 	andi	r18,r18,65535
    ce58:	9009883a 	mov	r4,r18
    ce5c:	b80b883a 	mov	r5,r23
    ce60:	d8c00515 	stw	r3,20(sp)
    ce64:	d9800715 	stw	r6,28(sp)
    ce68:	da000615 	stw	r8,24(sp)
    ce6c:	0000eb00 	call	eb0 <__mulsi3>
    ce70:	9009883a 	mov	r4,r18
    ce74:	a80b883a 	mov	r5,r21
    ce78:	1029883a 	mov	r20,r2
    ce7c:	0000eb00 	call	eb0 <__mulsi3>
    ce80:	e009883a 	mov	r4,fp
    ce84:	a80b883a 	mov	r5,r21
    ce88:	102d883a 	mov	r22,r2
    ce8c:	0000eb00 	call	eb0 <__mulsi3>
    ce90:	e009883a 	mov	r4,fp
    ce94:	b80b883a 	mov	r5,r23
    ce98:	1027883a 	mov	r19,r2
    ce9c:	0000eb00 	call	eb0 <__mulsi3>
    cea0:	a008d43a 	srli	r4,r20,16
    cea4:	b085883a 	add	r2,r22,r2
    cea8:	d8c00517 	ldw	r3,20(sp)
    ceac:	110f883a 	add	r7,r2,r4
    ceb0:	d9800717 	ldw	r6,28(sp)
    ceb4:	da000617 	ldw	r8,24(sp)
    ceb8:	3d80022e 	bgeu	r7,r22,cec4 <__muldf3+0x3b0>
    cebc:	00800074 	movhi	r2,1
    cec0:	98a7883a 	add	r19,r19,r2
    cec4:	3804943a 	slli	r2,r7,16
    cec8:	380ed43a 	srli	r7,r7,16
    cecc:	882cd43a 	srli	r22,r17,16
    ced0:	a53fffcc 	andi	r20,r20,65535
    ced4:	8c7fffcc 	andi	r17,r17,65535
    ced8:	1529883a 	add	r20,r2,r20
    cedc:	8809883a 	mov	r4,r17
    cee0:	b80b883a 	mov	r5,r23
    cee4:	d8c00515 	stw	r3,20(sp)
    cee8:	d9800715 	stw	r6,28(sp)
    ceec:	da000615 	stw	r8,24(sp)
    cef0:	d9c00015 	stw	r7,0(sp)
    cef4:	dd000115 	stw	r20,4(sp)
    cef8:	0000eb00 	call	eb0 <__mulsi3>
    cefc:	a80b883a 	mov	r5,r21
    cf00:	8809883a 	mov	r4,r17
    cf04:	d8800415 	stw	r2,16(sp)
    cf08:	0000eb00 	call	eb0 <__mulsi3>
    cf0c:	a80b883a 	mov	r5,r21
    cf10:	b009883a 	mov	r4,r22
    cf14:	1029883a 	mov	r20,r2
    cf18:	0000eb00 	call	eb0 <__mulsi3>
    cf1c:	b009883a 	mov	r4,r22
    cf20:	b80b883a 	mov	r5,r23
    cf24:	102b883a 	mov	r21,r2
    cf28:	0000eb00 	call	eb0 <__mulsi3>
    cf2c:	da400417 	ldw	r9,16(sp)
    cf30:	a085883a 	add	r2,r20,r2
    cf34:	d8c00517 	ldw	r3,20(sp)
    cf38:	4808d43a 	srli	r4,r9,16
    cf3c:	d9800717 	ldw	r6,28(sp)
    cf40:	da000617 	ldw	r8,24(sp)
    cf44:	1109883a 	add	r4,r2,r4
    cf48:	2500022e 	bgeu	r4,r20,cf54 <__muldf3+0x440>
    cf4c:	00800074 	movhi	r2,1
    cf50:	a8ab883a 	add	r21,r21,r2
    cf54:	200e943a 	slli	r7,r4,16
    cf58:	2004d43a 	srli	r2,r4,16
    cf5c:	802ed43a 	srli	r23,r16,16
    cf60:	843fffcc 	andi	r16,r16,65535
    cf64:	4d3fffcc 	andi	r20,r9,65535
    cf68:	9009883a 	mov	r4,r18
    cf6c:	800b883a 	mov	r5,r16
    cf70:	3d29883a 	add	r20,r7,r20
    cf74:	d8c00515 	stw	r3,20(sp)
    cf78:	d9800715 	stw	r6,28(sp)
    cf7c:	da000615 	stw	r8,24(sp)
    cf80:	a8ab883a 	add	r21,r21,r2
    cf84:	0000eb00 	call	eb0 <__mulsi3>
    cf88:	9009883a 	mov	r4,r18
    cf8c:	b80b883a 	mov	r5,r23
    cf90:	d8800315 	stw	r2,12(sp)
    cf94:	0000eb00 	call	eb0 <__mulsi3>
    cf98:	e009883a 	mov	r4,fp
    cf9c:	b80b883a 	mov	r5,r23
    cfa0:	1025883a 	mov	r18,r2
    cfa4:	0000eb00 	call	eb0 <__mulsi3>
    cfa8:	e009883a 	mov	r4,fp
    cfac:	800b883a 	mov	r5,r16
    cfb0:	d8800215 	stw	r2,8(sp)
    cfb4:	0000eb00 	call	eb0 <__mulsi3>
    cfb8:	da800317 	ldw	r10,12(sp)
    cfbc:	d9400017 	ldw	r5,0(sp)
    cfc0:	9085883a 	add	r2,r18,r2
    cfc4:	5008d43a 	srli	r4,r10,16
    cfc8:	a153883a 	add	r9,r20,r5
    cfcc:	d8c00517 	ldw	r3,20(sp)
    cfd0:	1109883a 	add	r4,r2,r4
    cfd4:	d9800717 	ldw	r6,28(sp)
    cfd8:	da000617 	ldw	r8,24(sp)
    cfdc:	dac00217 	ldw	r11,8(sp)
    cfe0:	2480022e 	bgeu	r4,r18,cfec <__muldf3+0x4d8>
    cfe4:	00800074 	movhi	r2,1
    cfe8:	5897883a 	add	r11,r11,r2
    cfec:	200e943a 	slli	r7,r4,16
    cff0:	2038d43a 	srli	fp,r4,16
    cff4:	52bfffcc 	andi	r10,r10,65535
    cff8:	3a8f883a 	add	r7,r7,r10
    cffc:	8809883a 	mov	r4,r17
    d000:	800b883a 	mov	r5,r16
    d004:	d8c00515 	stw	r3,20(sp)
    d008:	d9800715 	stw	r6,28(sp)
    d00c:	d9c00215 	stw	r7,8(sp)
    d010:	da000615 	stw	r8,24(sp)
    d014:	da400415 	stw	r9,16(sp)
    d018:	5f39883a 	add	fp,r11,fp
    d01c:	0000eb00 	call	eb0 <__mulsi3>
    d020:	8809883a 	mov	r4,r17
    d024:	b80b883a 	mov	r5,r23
    d028:	1025883a 	mov	r18,r2
    d02c:	0000eb00 	call	eb0 <__mulsi3>
    d030:	b009883a 	mov	r4,r22
    d034:	b80b883a 	mov	r5,r23
    d038:	d8800315 	stw	r2,12(sp)
    d03c:	0000eb00 	call	eb0 <__mulsi3>
    d040:	b009883a 	mov	r4,r22
    d044:	800b883a 	mov	r5,r16
    d048:	1023883a 	mov	r17,r2
    d04c:	0000eb00 	call	eb0 <__mulsi3>
    d050:	da800317 	ldw	r10,12(sp)
    d054:	9008d43a 	srli	r4,r18,16
    d058:	d8c00517 	ldw	r3,20(sp)
    d05c:	5085883a 	add	r2,r10,r2
    d060:	1109883a 	add	r4,r2,r4
    d064:	d9800717 	ldw	r6,28(sp)
    d068:	d9c00217 	ldw	r7,8(sp)
    d06c:	da000617 	ldw	r8,24(sp)
    d070:	da400417 	ldw	r9,16(sp)
    d074:	2280022e 	bgeu	r4,r10,d080 <__muldf3+0x56c>
    d078:	00800074 	movhi	r2,1
    d07c:	88a3883a 	add	r17,r17,r2
    d080:	2004943a 	slli	r2,r4,16
    d084:	94bfffcc 	andi	r18,r18,65535
    d088:	4ce7883a 	add	r19,r9,r19
    d08c:	14a5883a 	add	r18,r2,r18
    d090:	9d29803a 	cmpltu	r20,r19,r20
    d094:	9565883a 	add	r18,r18,r21
    d098:	9505883a 	add	r2,r18,r20
    d09c:	99e7883a 	add	r19,r19,r7
    d0a0:	99cf803a 	cmpltu	r7,r19,r7
    d0a4:	e08b883a 	add	r5,fp,r2
    d0a8:	2008d43a 	srli	r4,r4,16
    d0ac:	29ef883a 	add	r23,r5,r7
    d0b0:	1529803a 	cmpltu	r20,r2,r20
    d0b4:	956b803a 	cmpltu	r21,r18,r21
    d0b8:	b9cf803a 	cmpltu	r7,r23,r7
    d0bc:	a564b03a 	or	r18,r20,r21
    d0c0:	2f39803a 	cmpltu	fp,r5,fp
    d0c4:	9125883a 	add	r18,r18,r4
    d0c8:	3f38b03a 	or	fp,r7,fp
    d0cc:	9725883a 	add	r18,r18,fp
    d0d0:	9804927a 	slli	r2,r19,9
    d0d4:	9463883a 	add	r17,r18,r17
    d0d8:	d9000117 	ldw	r4,4(sp)
    d0dc:	b820d5fa 	srli	r16,r23,23
    d0e0:	8822927a 	slli	r17,r17,9
    d0e4:	9826d5fa 	srli	r19,r19,23
    d0e8:	1104b03a 	or	r2,r2,r4
    d0ec:	b82e927a 	slli	r23,r23,9
    d0f0:	1004c03a 	cmpne	r2,r2,zero
    d0f4:	8c20b03a 	or	r16,r17,r16
    d0f8:	14e6b03a 	or	r19,r2,r19
    d0fc:	8080402c 	andhi	r2,r16,256
    d100:	9deeb03a 	or	r23,r19,r23
    d104:	10000726 	beq	r2,zero,d124 <__muldf3+0x610>
    d108:	b804d07a 	srli	r2,r23,1
    d10c:	800697fa 	slli	r3,r16,31
    d110:	bdc0004c 	andi	r23,r23,1
    d114:	8020d07a 	srli	r16,r16,1
    d118:	b8aeb03a 	or	r23,r23,r2
    d11c:	b8eeb03a 	or	r23,r23,r3
    d120:	4007883a 	mov	r3,r8
    d124:	1900ffc4 	addi	r4,r3,1023
    d128:	01004d0e 	bge	zero,r4,d260 <__muldf3+0x74c>
    d12c:	b88001cc 	andi	r2,r23,7
    d130:	10000726 	beq	r2,zero,d150 <__muldf3+0x63c>
    d134:	b94003cc 	andi	r5,r23,15
    d138:	00800104 	movi	r2,4
    d13c:	28800426 	beq	r5,r2,d150 <__muldf3+0x63c>
    d140:	b885883a 	add	r2,r23,r2
    d144:	15ef803a 	cmpltu	r23,r2,r23
    d148:	85e1883a 	add	r16,r16,r23
    d14c:	102f883a 	mov	r23,r2
    d150:	8080402c 	andhi	r2,r16,256
    d154:	10000426 	beq	r2,zero,d168 <__muldf3+0x654>
    d158:	00bfc034 	movhi	r2,65280
    d15c:	10bfffc4 	addi	r2,r2,-1
    d160:	19010004 	addi	r4,r3,1024
    d164:	80a0703a 	and	r16,r16,r2
    d168:	0081ff84 	movi	r2,2046
    d16c:	1100340e 	bge	r2,r4,d240 <__muldf3+0x72c>
    d170:	34c0004c 	andi	r19,r6,1
    d174:	0101ffc4 	movi	r4,2047
    d178:	0021883a 	mov	r16,zero
    d17c:	002f883a 	mov	r23,zero
    d180:	003ebe06 	br	cc7c <__muldf3+0x168>
    d184:	8080022c 	andhi	r2,r16,8
    d188:	10000926 	beq	r2,zero,d1b0 <__muldf3+0x69c>
    d18c:	8880022c 	andhi	r2,r17,8
    d190:	1000071e 	bne	r2,zero,d1b0 <__muldf3+0x69c>
    d194:	00800434 	movhi	r2,16
    d198:	8c000234 	orhi	r16,r17,8
    d19c:	10bfffc4 	addi	r2,r2,-1
    d1a0:	b027883a 	mov	r19,r22
    d1a4:	80a0703a 	and	r16,r16,r2
    d1a8:	902f883a 	mov	r23,r18
    d1ac:	003f1a06 	br	ce18 <__muldf3+0x304>
    d1b0:	00800434 	movhi	r2,16
    d1b4:	84000234 	orhi	r16,r16,8
    d1b8:	10bfffc4 	addi	r2,r2,-1
    d1bc:	80a0703a 	and	r16,r16,r2
    d1c0:	003f1506 	br	ce18 <__muldf3+0x304>
    d1c4:	3009883a 	mov	r4,r6
    d1c8:	d9400215 	stw	r5,8(sp)
    d1cc:	d9800715 	stw	r6,28(sp)
    d1d0:	da400415 	stw	r9,16(sp)
    d1d4:	da800315 	stw	r10,12(sp)
    d1d8:	00015480 	call	1548 <__clzsi2>
    d1dc:	10c00804 	addi	r3,r2,32
    d1e0:	010009c4 	movi	r4,39
    d1e4:	d9400217 	ldw	r5,8(sp)
    d1e8:	d9800717 	ldw	r6,28(sp)
    d1ec:	da400417 	ldw	r9,16(sp)
    d1f0:	da800317 	ldw	r10,12(sp)
    d1f4:	20fee20e 	bge	r4,r3,cd80 <__muldf3+0x26c>
    d1f8:	147ffe04 	addi	r17,r2,-8
    d1fc:	9462983a 	sll	r17,r18,r17
    d200:	0025883a 	mov	r18,zero
    d204:	003ee506 	br	cd9c <__muldf3+0x288>
    d208:	d9800715 	stw	r6,28(sp)
    d20c:	d9c00215 	stw	r7,8(sp)
    d210:	da400415 	stw	r9,16(sp)
    d214:	00015480 	call	1548 <__clzsi2>
    d218:	10c00804 	addi	r3,r2,32
    d21c:	010009c4 	movi	r4,39
    d220:	d9800717 	ldw	r6,28(sp)
    d224:	d9c00217 	ldw	r7,8(sp)
    d228:	da400417 	ldw	r9,16(sp)
    d22c:	20feb40e 	bge	r4,r3,cd00 <__muldf3+0x1ec>
    d230:	143ffe04 	addi	r16,r2,-8
    d234:	9420983a 	sll	r16,r18,r16
    d238:	002f883a 	mov	r23,zero
    d23c:	003eb706 	br	cd1c <__muldf3+0x208>
    d240:	8004977a 	slli	r2,r16,29
    d244:	b82ed0fa 	srli	r23,r23,3
    d248:	8020927a 	slli	r16,r16,9
    d24c:	2101ffcc 	andi	r4,r4,2047
    d250:	15eeb03a 	or	r23,r2,r23
    d254:	8020d33a 	srli	r16,r16,12
    d258:	34c0004c 	andi	r19,r6,1
    d25c:	003e8706 	br	cc7c <__muldf3+0x168>
    d260:	00bf0084 	movi	r2,-1022
    d264:	10c5c83a 	sub	r2,r2,r3
    d268:	01000e04 	movi	r4,56
    d26c:	2080080e 	bge	r4,r2,d290 <__muldf3+0x77c>
    d270:	34c0004c 	andi	r19,r6,1
    d274:	0009883a 	mov	r4,zero
    d278:	0021883a 	mov	r16,zero
    d27c:	002f883a 	mov	r23,zero
    d280:	003e7e06 	br	cc7c <__muldf3+0x168>
    d284:	4007883a 	mov	r3,r8
    d288:	480d883a 	mov	r6,r9
    d28c:	003fa506 	br	d124 <__muldf3+0x610>
    d290:	010007c4 	movi	r4,31
    d294:	20801816 	blt	r4,r2,d2f8 <__muldf3+0x7e4>
    d298:	18c10784 	addi	r3,r3,1054
    d29c:	80c8983a 	sll	r4,r16,r3
    d2a0:	b88ad83a 	srl	r5,r23,r2
    d2a4:	b8c6983a 	sll	r3,r23,r3
    d2a8:	80a0d83a 	srl	r16,r16,r2
    d2ac:	2908b03a 	or	r4,r5,r4
    d2b0:	1804c03a 	cmpne	r2,r3,zero
    d2b4:	2088b03a 	or	r4,r4,r2
    d2b8:	208001cc 	andi	r2,r4,7
    d2bc:	10000726 	beq	r2,zero,d2dc <__muldf3+0x7c8>
    d2c0:	20c003cc 	andi	r3,r4,15
    d2c4:	00800104 	movi	r2,4
    d2c8:	18800426 	beq	r3,r2,d2dc <__muldf3+0x7c8>
    d2cc:	20c00104 	addi	r3,r4,4
    d2d0:	1905803a 	cmpltu	r2,r3,r4
    d2d4:	80a1883a 	add	r16,r16,r2
    d2d8:	1809883a 	mov	r4,r3
    d2dc:	8080202c 	andhi	r2,r16,128
    d2e0:	10001b26 	beq	r2,zero,d350 <__muldf3+0x83c>
    d2e4:	34c0004c 	andi	r19,r6,1
    d2e8:	01000044 	movi	r4,1
    d2ec:	0021883a 	mov	r16,zero
    d2f0:	002f883a 	mov	r23,zero
    d2f4:	003e6106 	br	cc7c <__muldf3+0x168>
    d2f8:	013ef884 	movi	r4,-1054
    d2fc:	20c9c83a 	sub	r4,r4,r3
    d300:	01400804 	movi	r5,32
    d304:	8108d83a 	srl	r4,r16,r4
    d308:	11401526 	beq	r2,r5,d360 <__muldf3+0x84c>
    d30c:	18c10f84 	addi	r3,r3,1086
    d310:	80e0983a 	sll	r16,r16,r3
    d314:	85eeb03a 	or	r23,r16,r23
    d318:	b804c03a 	cmpne	r2,r23,zero
    d31c:	1108b03a 	or	r4,r2,r4
    d320:	20c001cc 	andi	r3,r4,7
    d324:	1800061e 	bne	r3,zero,d340 <__muldf3+0x82c>
    d328:	0021883a 	mov	r16,zero
    d32c:	202ed0fa 	srli	r23,r4,3
    d330:	34c0004c 	andi	r19,r6,1
    d334:	0009883a 	mov	r4,zero
    d338:	b8eeb03a 	or	r23,r23,r3
    d33c:	003e4f06 	br	cc7c <__muldf3+0x168>
    d340:	20c003cc 	andi	r3,r4,15
    d344:	00800104 	movi	r2,4
    d348:	0021883a 	mov	r16,zero
    d34c:	18bfdf1e 	bne	r3,r2,d2cc <__muldf3+0x7b8>
    d350:	8004927a 	slli	r2,r16,9
    d354:	8006977a 	slli	r3,r16,29
    d358:	1020d33a 	srli	r16,r2,12
    d35c:	003ff306 	br	d32c <__muldf3+0x818>
    d360:	0021883a 	mov	r16,zero
    d364:	003feb06 	br	d314 <__muldf3+0x800>
    d368:	00800434 	movhi	r2,16
    d36c:	84000234 	orhi	r16,r16,8
    d370:	10bfffc4 	addi	r2,r2,-1
    d374:	4cc0004c 	andi	r19,r9,1
    d378:	80a0703a 	and	r16,r16,r2
    d37c:	003ea606 	br	ce18 <__muldf3+0x304>

0000d380 <__subdf3>:
    d380:	00c00434 	movhi	r3,16
    d384:	18ffffc4 	addi	r3,r3,-1
    d388:	defffb04 	addi	sp,sp,-20
    d38c:	28d2703a 	and	r9,r5,r3
    d390:	3814d53a 	srli	r10,r7,20
    d394:	38c6703a 	and	r3,r7,r3
    d398:	3004d77a 	srli	r2,r6,29
    d39c:	dc800215 	stw	r18,8(sp)
    d3a0:	dc000015 	stw	r16,0(sp)
    d3a4:	2824d7fa 	srli	r18,r5,31
    d3a8:	2820d53a 	srli	r16,r5,20
    d3ac:	481290fa 	slli	r9,r9,3
    d3b0:	200ad77a 	srli	r5,r4,29
    d3b4:	180690fa 	slli	r3,r3,3
    d3b8:	dc400115 	stw	r17,4(sp)
    d3bc:	dfc00415 	stw	ra,16(sp)
    d3c0:	202290fa 	slli	r17,r4,3
    d3c4:	dcc00315 	stw	r19,12(sp)
    d3c8:	5281ffcc 	andi	r10,r10,2047
    d3cc:	0101ffc4 	movi	r4,2047
    d3d0:	9011883a 	mov	r8,r18
    d3d4:	8401ffcc 	andi	r16,r16,2047
    d3d8:	94803fcc 	andi	r18,r18,255
    d3dc:	494ab03a 	or	r5,r9,r5
    d3e0:	380ed7fa 	srli	r7,r7,31
    d3e4:	1886b03a 	or	r3,r3,r2
    d3e8:	300c90fa 	slli	r6,r6,3
    d3ec:	51009026 	beq	r10,r4,d630 <__subdf3+0x2b0>
    d3f0:	39c0005c 	xori	r7,r7,1
    d3f4:	8285c83a 	sub	r2,r16,r10
    d3f8:	91c06f26 	beq	r18,r7,d5b8 <__subdf3+0x238>
    d3fc:	0080b10e 	bge	zero,r2,d6c4 <__subdf3+0x344>
    d400:	50002a1e 	bne	r10,zero,d4ac <__subdf3+0x12c>
    d404:	1988b03a 	or	r4,r3,r6
    d408:	2000941e 	bne	r4,zero,d65c <__subdf3+0x2dc>
    d40c:	888001cc 	andi	r2,r17,7
    d410:	10005b26 	beq	r2,zero,d580 <__subdf3+0x200>
    d414:	88c003cc 	andi	r3,r17,15
    d418:	00800104 	movi	r2,4
    d41c:	18805826 	beq	r3,r2,d580 <__subdf3+0x200>
    d420:	88c00104 	addi	r3,r17,4
    d424:	1c63803a 	cmpltu	r17,r3,r17
    d428:	2c4b883a 	add	r5,r5,r17
    d42c:	2880202c 	andhi	r2,r5,128
    d430:	9200004c 	andi	r8,r18,1
    d434:	1823883a 	mov	r17,r3
    d438:	10005426 	beq	r2,zero,d58c <__subdf3+0x20c>
    d43c:	84000044 	addi	r16,r16,1
    d440:	0081ffc4 	movi	r2,2047
    d444:	8080bf26 	beq	r16,r2,d744 <__subdf3+0x3c4>
    d448:	013fe034 	movhi	r4,65408
    d44c:	213fffc4 	addi	r4,r4,-1
    d450:	290a703a 	and	r5,r5,r4
    d454:	2804977a 	slli	r2,r5,29
    d458:	280a927a 	slli	r5,r5,9
    d45c:	8822d0fa 	srli	r17,r17,3
    d460:	8401ffcc 	andi	r16,r16,2047
    d464:	2808d33a 	srli	r4,r5,12
    d468:	1444b03a 	or	r2,r2,r17
    d46c:	8401ffcc 	andi	r16,r16,2047
    d470:	800a953a 	slli	r5,r16,20
    d474:	40c03fcc 	andi	r3,r8,255
    d478:	04000434 	movhi	r16,16
    d47c:	180697fa 	slli	r3,r3,31
    d480:	843fffc4 	addi	r16,r16,-1
    d484:	2420703a 	and	r16,r4,r16
    d488:	8160b03a 	or	r16,r16,r5
    d48c:	80c6b03a 	or	r3,r16,r3
    d490:	dfc00417 	ldw	ra,16(sp)
    d494:	dcc00317 	ldw	r19,12(sp)
    d498:	dc800217 	ldw	r18,8(sp)
    d49c:	dc400117 	ldw	r17,4(sp)
    d4a0:	dc000017 	ldw	r16,0(sp)
    d4a4:	dec00504 	addi	sp,sp,20
    d4a8:	f800283a 	ret
    d4ac:	0101ffc4 	movi	r4,2047
    d4b0:	813fd626 	beq	r16,r4,d40c <__subdf3+0x8c>
    d4b4:	18c02034 	orhi	r3,r3,128
    d4b8:	01000e04 	movi	r4,56
    d4bc:	2080a416 	blt	r4,r2,d750 <__subdf3+0x3d0>
    d4c0:	010007c4 	movi	r4,31
    d4c4:	2080c716 	blt	r4,r2,d7e4 <__subdf3+0x464>
    d4c8:	01000804 	movi	r4,32
    d4cc:	2089c83a 	sub	r4,r4,r2
    d4d0:	1910983a 	sll	r8,r3,r4
    d4d4:	308ed83a 	srl	r7,r6,r2
    d4d8:	3108983a 	sll	r4,r6,r4
    d4dc:	1884d83a 	srl	r2,r3,r2
    d4e0:	41ccb03a 	or	r6,r8,r7
    d4e4:	2008c03a 	cmpne	r4,r4,zero
    d4e8:	310cb03a 	or	r6,r6,r4
    d4ec:	898dc83a 	sub	r6,r17,r6
    d4f0:	89a3803a 	cmpltu	r17,r17,r6
    d4f4:	288bc83a 	sub	r5,r5,r2
    d4f8:	2c4bc83a 	sub	r5,r5,r17
    d4fc:	3023883a 	mov	r17,r6
    d500:	2880202c 	andhi	r2,r5,128
    d504:	10006b26 	beq	r2,zero,d6b4 <__subdf3+0x334>
    d508:	04c02034 	movhi	r19,128
    d50c:	9cffffc4 	addi	r19,r19,-1
    d510:	2ce6703a 	and	r19,r5,r19
    d514:	98007c26 	beq	r19,zero,d708 <__subdf3+0x388>
    d518:	9809883a 	mov	r4,r19
    d51c:	00015480 	call	1548 <__clzsi2>
    d520:	10fffe04 	addi	r3,r2,-8
    d524:	010007c4 	movi	r4,31
    d528:	20c07d16 	blt	r4,r3,d720 <__subdf3+0x3a0>
    d52c:	01400a04 	movi	r5,40
    d530:	2885c83a 	sub	r2,r5,r2
    d534:	888ad83a 	srl	r5,r17,r2
    d538:	98e6983a 	sll	r19,r19,r3
    d53c:	88e2983a 	sll	r17,r17,r3
    d540:	2ce6b03a 	or	r19,r5,r19
    d544:	1c007a16 	blt	r3,r16,d730 <__subdf3+0x3b0>
    d548:	1c21c83a 	sub	r16,r3,r16
    d54c:	81400044 	addi	r5,r16,1
    d550:	00c007c4 	movi	r3,31
    d554:	19409616 	blt	r3,r5,d7b0 <__subdf3+0x430>
    d558:	1c21c83a 	sub	r16,r3,r16
    d55c:	8c08983a 	sll	r4,r17,r16
    d560:	8946d83a 	srl	r3,r17,r5
    d564:	9c20983a 	sll	r16,r19,r16
    d568:	2008c03a 	cmpne	r4,r4,zero
    d56c:	994ad83a 	srl	r5,r19,r5
    d570:	1c06b03a 	or	r3,r3,r16
    d574:	1922b03a 	or	r17,r3,r4
    d578:	0021883a 	mov	r16,zero
    d57c:	003fa306 	br	d40c <__subdf3+0x8c>
    d580:	2880202c 	andhi	r2,r5,128
    d584:	9200004c 	andi	r8,r18,1
    d588:	103fac1e 	bne	r2,zero,d43c <__subdf3+0xbc>
    d58c:	2804977a 	slli	r2,r5,29
    d590:	8822d0fa 	srli	r17,r17,3
    d594:	00c1ffc4 	movi	r3,2047
    d598:	280ad0fa 	srli	r5,r5,3
    d59c:	1444b03a 	or	r2,r2,r17
    d5a0:	80c02726 	beq	r16,r3,d640 <__subdf3+0x2c0>
    d5a4:	01000434 	movhi	r4,16
    d5a8:	213fffc4 	addi	r4,r4,-1
    d5ac:	80e0703a 	and	r16,r16,r3
    d5b0:	2908703a 	and	r4,r5,r4
    d5b4:	003fad06 	br	d46c <__subdf3+0xec>
    d5b8:	0080690e 	bge	zero,r2,d760 <__subdf3+0x3e0>
    d5bc:	50002f26 	beq	r10,zero,d67c <__subdf3+0x2fc>
    d5c0:	0101ffc4 	movi	r4,2047
    d5c4:	813f9126 	beq	r16,r4,d40c <__subdf3+0x8c>
    d5c8:	18c02034 	orhi	r3,r3,128
    d5cc:	01000e04 	movi	r4,56
    d5d0:	2080b00e 	bge	r4,r2,d894 <__subdf3+0x514>
    d5d4:	198cb03a 	or	r6,r3,r6
    d5d8:	300ec03a 	cmpne	r7,r6,zero
    d5dc:	0005883a 	mov	r2,zero
    d5e0:	3c4f883a 	add	r7,r7,r17
    d5e4:	3c63803a 	cmpltu	r17,r7,r17
    d5e8:	114b883a 	add	r5,r2,r5
    d5ec:	2c4b883a 	add	r5,r5,r17
    d5f0:	3823883a 	mov	r17,r7
    d5f4:	2880202c 	andhi	r2,r5,128
    d5f8:	10002e26 	beq	r2,zero,d6b4 <__subdf3+0x334>
    d5fc:	84000044 	addi	r16,r16,1
    d600:	0081ffc4 	movi	r2,2047
    d604:	8080de26 	beq	r16,r2,d980 <__subdf3+0x600>
    d608:	00bfe034 	movhi	r2,65408
    d60c:	10bfffc4 	addi	r2,r2,-1
    d610:	288a703a 	and	r5,r5,r2
    d614:	880cd07a 	srli	r6,r17,1
    d618:	280897fa 	slli	r4,r5,31
    d61c:	88c0004c 	andi	r3,r17,1
    d620:	30e2b03a 	or	r17,r6,r3
    d624:	280ad07a 	srli	r5,r5,1
    d628:	8922b03a 	or	r17,r17,r4
    d62c:	003f7706 	br	d40c <__subdf3+0x8c>
    d630:	1984b03a 	or	r2,r3,r6
    d634:	103f6e26 	beq	r2,zero,d3f0 <__subdf3+0x70>
    d638:	39c03fcc 	andi	r7,r7,255
    d63c:	003f6d06 	br	d3f4 <__subdf3+0x74>
    d640:	1146b03a 	or	r3,r2,r5
    d644:	18003f26 	beq	r3,zero,d744 <__subdf3+0x3c4>
    d648:	00c00434 	movhi	r3,16
    d64c:	29000234 	orhi	r4,r5,8
    d650:	18ffffc4 	addi	r3,r3,-1
    d654:	20c8703a 	and	r4,r4,r3
    d658:	003f8406 	br	d46c <__subdf3+0xec>
    d65c:	10bfffc4 	addi	r2,r2,-1
    d660:	1000501e 	bne	r2,zero,d7a4 <__subdf3+0x424>
    d664:	898fc83a 	sub	r7,r17,r6
    d668:	89e3803a 	cmpltu	r17,r17,r7
    d66c:	28cbc83a 	sub	r5,r5,r3
    d670:	2c4bc83a 	sub	r5,r5,r17
    d674:	3823883a 	mov	r17,r7
    d678:	003fa106 	br	d500 <__subdf3+0x180>
    d67c:	1988b03a 	or	r4,r3,r6
    d680:	203f6226 	beq	r4,zero,d40c <__subdf3+0x8c>
    d684:	10bfffc4 	addi	r2,r2,-1
    d688:	10009b1e 	bne	r2,zero,d8f8 <__subdf3+0x578>
    d68c:	344d883a 	add	r6,r6,r17
    d690:	3463803a 	cmpltu	r17,r6,r17
    d694:	194b883a 	add	r5,r3,r5
    d698:	2c4b883a 	add	r5,r5,r17
    d69c:	3023883a 	mov	r17,r6
    d6a0:	003fd406 	br	d5f4 <__subdf3+0x274>
    d6a4:	1106b03a 	or	r3,r2,r4
    d6a8:	1800b426 	beq	r3,zero,d97c <__subdf3+0x5fc>
    d6ac:	100b883a 	mov	r5,r2
    d6b0:	2023883a 	mov	r17,r4
    d6b4:	888001cc 	andi	r2,r17,7
    d6b8:	103f561e 	bne	r2,zero,d414 <__subdf3+0x94>
    d6bc:	9200004c 	andi	r8,r18,1
    d6c0:	003fb206 	br	d58c <__subdf3+0x20c>
    d6c4:	1000531e 	bne	r2,zero,d814 <__subdf3+0x494>
    d6c8:	80800044 	addi	r2,r16,1
    d6cc:	1081ffcc 	andi	r2,r2,2047
    d6d0:	01000044 	movi	r4,1
    d6d4:	2080a00e 	bge	r4,r2,d958 <__subdf3+0x5d8>
    d6d8:	8985c83a 	sub	r2,r17,r6
    d6dc:	8889803a 	cmpltu	r4,r17,r2
    d6e0:	28e7c83a 	sub	r19,r5,r3
    d6e4:	9927c83a 	sub	r19,r19,r4
    d6e8:	9900202c 	andhi	r4,r19,128
    d6ec:	20006226 	beq	r4,zero,d878 <__subdf3+0x4f8>
    d6f0:	3463c83a 	sub	r17,r6,r17
    d6f4:	194bc83a 	sub	r5,r3,r5
    d6f8:	344d803a 	cmpltu	r6,r6,r17
    d6fc:	29a7c83a 	sub	r19,r5,r6
    d700:	3825883a 	mov	r18,r7
    d704:	983f841e 	bne	r19,zero,d518 <__subdf3+0x198>
    d708:	8809883a 	mov	r4,r17
    d70c:	00015480 	call	1548 <__clzsi2>
    d710:	10800804 	addi	r2,r2,32
    d714:	10fffe04 	addi	r3,r2,-8
    d718:	010007c4 	movi	r4,31
    d71c:	20ff830e 	bge	r4,r3,d52c <__subdf3+0x1ac>
    d720:	14fff604 	addi	r19,r2,-40
    d724:	8ce6983a 	sll	r19,r17,r19
    d728:	0023883a 	mov	r17,zero
    d72c:	1c3f860e 	bge	r3,r16,d548 <__subdf3+0x1c8>
    d730:	017fe034 	movhi	r5,65408
    d734:	297fffc4 	addi	r5,r5,-1
    d738:	80e1c83a 	sub	r16,r16,r3
    d73c:	994a703a 	and	r5,r19,r5
    d740:	003f3206 	br	d40c <__subdf3+0x8c>
    d744:	0009883a 	mov	r4,zero
    d748:	0005883a 	mov	r2,zero
    d74c:	003f4706 	br	d46c <__subdf3+0xec>
    d750:	198cb03a 	or	r6,r3,r6
    d754:	300cc03a 	cmpne	r6,r6,zero
    d758:	0005883a 	mov	r2,zero
    d75c:	003f6306 	br	d4ec <__subdf3+0x16c>
    d760:	10009d1e 	bne	r2,zero,d9d8 <__subdf3+0x658>
    d764:	81c00044 	addi	r7,r16,1
    d768:	3881ffcc 	andi	r2,r7,2047
    d76c:	02400044 	movi	r9,1
    d770:	4880680e 	bge	r9,r2,d914 <__subdf3+0x594>
    d774:	0081ffc4 	movi	r2,2047
    d778:	3880ae26 	beq	r7,r2,da34 <__subdf3+0x6b4>
    d77c:	344d883a 	add	r6,r6,r17
    d780:	3463803a 	cmpltu	r17,r6,r17
    d784:	194b883a 	add	r5,r3,r5
    d788:	2c4b883a 	add	r5,r5,r17
    d78c:	282297fa 	slli	r17,r5,31
    d790:	300cd07a 	srli	r6,r6,1
    d794:	280ad07a 	srli	r5,r5,1
    d798:	3821883a 	mov	r16,r7
    d79c:	89a2b03a 	or	r17,r17,r6
    d7a0:	003f1a06 	br	d40c <__subdf3+0x8c>
    d7a4:	0101ffc4 	movi	r4,2047
    d7a8:	813f431e 	bne	r16,r4,d4b8 <__subdf3+0x138>
    d7ac:	003f1706 	br	d40c <__subdf3+0x8c>
    d7b0:	80bff844 	addi	r2,r16,-31
    d7b4:	00c00804 	movi	r3,32
    d7b8:	9884d83a 	srl	r2,r19,r2
    d7bc:	28c05126 	beq	r5,r3,d904 <__subdf3+0x584>
    d7c0:	00c00fc4 	movi	r3,63
    d7c4:	1c21c83a 	sub	r16,r3,r16
    d7c8:	9c26983a 	sll	r19,r19,r16
    d7cc:	9c62b03a 	or	r17,r19,r17
    d7d0:	8822c03a 	cmpne	r17,r17,zero
    d7d4:	88a2b03a 	or	r17,r17,r2
    d7d8:	000b883a 	mov	r5,zero
    d7dc:	0021883a 	mov	r16,zero
    d7e0:	003fb406 	br	d6b4 <__subdf3+0x334>
    d7e4:	113ff804 	addi	r4,r2,-32
    d7e8:	01c00804 	movi	r7,32
    d7ec:	1908d83a 	srl	r4,r3,r4
    d7f0:	11c04626 	beq	r2,r7,d90c <__subdf3+0x58c>
    d7f4:	01c01004 	movi	r7,64
    d7f8:	3885c83a 	sub	r2,r7,r2
    d7fc:	1884983a 	sll	r2,r3,r2
    d800:	118cb03a 	or	r6,r2,r6
    d804:	300cc03a 	cmpne	r6,r6,zero
    d808:	310cb03a 	or	r6,r6,r4
    d80c:	0005883a 	mov	r2,zero
    d810:	003f3606 	br	d4ec <__subdf3+0x16c>
    d814:	80002b26 	beq	r16,zero,d8c4 <__subdf3+0x544>
    d818:	0101ffc4 	movi	r4,2047
    d81c:	51006926 	beq	r10,r4,d9c4 <__subdf3+0x644>
    d820:	0085c83a 	sub	r2,zero,r2
    d824:	29402034 	orhi	r5,r5,128
    d828:	01000e04 	movi	r4,56
    d82c:	20807d16 	blt	r4,r2,da24 <__subdf3+0x6a4>
    d830:	010007c4 	movi	r4,31
    d834:	2080d916 	blt	r4,r2,db9c <__subdf3+0x81c>
    d838:	01000804 	movi	r4,32
    d83c:	2089c83a 	sub	r4,r4,r2
    d840:	2912983a 	sll	r9,r5,r4
    d844:	8890d83a 	srl	r8,r17,r2
    d848:	8908983a 	sll	r4,r17,r4
    d84c:	2884d83a 	srl	r2,r5,r2
    d850:	4a22b03a 	or	r17,r9,r8
    d854:	2008c03a 	cmpne	r4,r4,zero
    d858:	8922b03a 	or	r17,r17,r4
    d85c:	3463c83a 	sub	r17,r6,r17
    d860:	1885c83a 	sub	r2,r3,r2
    d864:	344d803a 	cmpltu	r6,r6,r17
    d868:	118bc83a 	sub	r5,r2,r6
    d86c:	5021883a 	mov	r16,r10
    d870:	3825883a 	mov	r18,r7
    d874:	003f2206 	br	d500 <__subdf3+0x180>
    d878:	9886b03a 	or	r3,r19,r2
    d87c:	18001c1e 	bne	r3,zero,d8f0 <__subdf3+0x570>
    d880:	0011883a 	mov	r8,zero
    d884:	000b883a 	mov	r5,zero
    d888:	0023883a 	mov	r17,zero
    d88c:	0021883a 	mov	r16,zero
    d890:	003f3e06 	br	d58c <__subdf3+0x20c>
    d894:	010007c4 	movi	r4,31
    d898:	20803c16 	blt	r4,r2,d98c <__subdf3+0x60c>
    d89c:	01000804 	movi	r4,32
    d8a0:	2089c83a 	sub	r4,r4,r2
    d8a4:	1912983a 	sll	r9,r3,r4
    d8a8:	308ed83a 	srl	r7,r6,r2
    d8ac:	3108983a 	sll	r4,r6,r4
    d8b0:	1884d83a 	srl	r2,r3,r2
    d8b4:	49ceb03a 	or	r7,r9,r7
    d8b8:	2008c03a 	cmpne	r4,r4,zero
    d8bc:	390eb03a 	or	r7,r7,r4
    d8c0:	003f4706 	br	d5e0 <__subdf3+0x260>
    d8c4:	2c48b03a 	or	r4,r5,r17
    d8c8:	20003e26 	beq	r4,zero,d9c4 <__subdf3+0x644>
    d8cc:	0084303a 	nor	r2,zero,r2
    d8d0:	10003a1e 	bne	r2,zero,d9bc <__subdf3+0x63c>
    d8d4:	3463c83a 	sub	r17,r6,r17
    d8d8:	194bc83a 	sub	r5,r3,r5
    d8dc:	344d803a 	cmpltu	r6,r6,r17
    d8e0:	298bc83a 	sub	r5,r5,r6
    d8e4:	5021883a 	mov	r16,r10
    d8e8:	3825883a 	mov	r18,r7
    d8ec:	003f0406 	br	d500 <__subdf3+0x180>
    d8f0:	1023883a 	mov	r17,r2
    d8f4:	003f0706 	br	d514 <__subdf3+0x194>
    d8f8:	0101ffc4 	movi	r4,2047
    d8fc:	813f331e 	bne	r16,r4,d5cc <__subdf3+0x24c>
    d900:	003ec206 	br	d40c <__subdf3+0x8c>
    d904:	0027883a 	mov	r19,zero
    d908:	003fb006 	br	d7cc <__subdf3+0x44c>
    d90c:	0005883a 	mov	r2,zero
    d910:	003fbb06 	br	d800 <__subdf3+0x480>
    d914:	2c44b03a 	or	r2,r5,r17
    d918:	80008b1e 	bne	r16,zero,db48 <__subdf3+0x7c8>
    d91c:	1000b526 	beq	r2,zero,dbf4 <__subdf3+0x874>
    d920:	1984b03a 	or	r2,r3,r6
    d924:	103eb926 	beq	r2,zero,d40c <__subdf3+0x8c>
    d928:	3449883a 	add	r4,r6,r17
    d92c:	2463803a 	cmpltu	r17,r4,r17
    d930:	194b883a 	add	r5,r3,r5
    d934:	2c4b883a 	add	r5,r5,r17
    d938:	2880202c 	andhi	r2,r5,128
    d93c:	2023883a 	mov	r17,r4
    d940:	103f5c26 	beq	r2,zero,d6b4 <__subdf3+0x334>
    d944:	00bfe034 	movhi	r2,65408
    d948:	10bfffc4 	addi	r2,r2,-1
    d94c:	4821883a 	mov	r16,r9
    d950:	288a703a 	and	r5,r5,r2
    d954:	003ead06 	br	d40c <__subdf3+0x8c>
    d958:	2c44b03a 	or	r2,r5,r17
    d95c:	8000291e 	bne	r16,zero,da04 <__subdf3+0x684>
    d960:	10004f1e 	bne	r2,zero,daa0 <__subdf3+0x720>
    d964:	1984b03a 	or	r2,r3,r6
    d968:	10000426 	beq	r2,zero,d97c <__subdf3+0x5fc>
    d96c:	180b883a 	mov	r5,r3
    d970:	3023883a 	mov	r17,r6
    d974:	3825883a 	mov	r18,r7
    d978:	003ea406 	br	d40c <__subdf3+0x8c>
    d97c:	0011883a 	mov	r8,zero
    d980:	000b883a 	mov	r5,zero
    d984:	0023883a 	mov	r17,zero
    d988:	003f0006 	br	d58c <__subdf3+0x20c>
    d98c:	11fff804 	addi	r7,r2,-32
    d990:	19c8d83a 	srl	r4,r3,r7
    d994:	01c00804 	movi	r7,32
    d998:	11c07e26 	beq	r2,r7,db94 <__subdf3+0x814>
    d99c:	01c01004 	movi	r7,64
    d9a0:	3885c83a 	sub	r2,r7,r2
    d9a4:	1884983a 	sll	r2,r3,r2
    d9a8:	118cb03a 	or	r6,r2,r6
    d9ac:	300ec03a 	cmpne	r7,r6,zero
    d9b0:	390eb03a 	or	r7,r7,r4
    d9b4:	0005883a 	mov	r2,zero
    d9b8:	003f0906 	br	d5e0 <__subdf3+0x260>
    d9bc:	0101ffc4 	movi	r4,2047
    d9c0:	513f991e 	bne	r10,r4,d828 <__subdf3+0x4a8>
    d9c4:	180b883a 	mov	r5,r3
    d9c8:	3023883a 	mov	r17,r6
    d9cc:	5021883a 	mov	r16,r10
    d9d0:	3825883a 	mov	r18,r7
    d9d4:	003e8d06 	br	d40c <__subdf3+0x8c>
    d9d8:	80001a1e 	bne	r16,zero,da44 <__subdf3+0x6c4>
    d9dc:	2c48b03a 	or	r4,r5,r17
    d9e0:	20005526 	beq	r4,zero,db38 <__subdf3+0x7b8>
    d9e4:	0084303a 	nor	r2,zero,r2
    d9e8:	1000511e 	bne	r2,zero,db30 <__subdf3+0x7b0>
    d9ec:	89a3883a 	add	r17,r17,r6
    d9f0:	194b883a 	add	r5,r3,r5
    d9f4:	898d803a 	cmpltu	r6,r17,r6
    d9f8:	298b883a 	add	r5,r5,r6
    d9fc:	5021883a 	mov	r16,r10
    da00:	003efc06 	br	d5f4 <__subdf3+0x274>
    da04:	1000341e 	bne	r2,zero,dad8 <__subdf3+0x758>
    da08:	1984b03a 	or	r2,r3,r6
    da0c:	10006f26 	beq	r2,zero,dbcc <__subdf3+0x84c>
    da10:	180b883a 	mov	r5,r3
    da14:	3023883a 	mov	r17,r6
    da18:	3825883a 	mov	r18,r7
    da1c:	0401ffc4 	movi	r16,2047
    da20:	003e7a06 	br	d40c <__subdf3+0x8c>
    da24:	2c62b03a 	or	r17,r5,r17
    da28:	8822c03a 	cmpne	r17,r17,zero
    da2c:	0005883a 	mov	r2,zero
    da30:	003f8a06 	br	d85c <__subdf3+0x4dc>
    da34:	3821883a 	mov	r16,r7
    da38:	000b883a 	mov	r5,zero
    da3c:	0023883a 	mov	r17,zero
    da40:	003ed206 	br	d58c <__subdf3+0x20c>
    da44:	0101ffc4 	movi	r4,2047
    da48:	51003b26 	beq	r10,r4,db38 <__subdf3+0x7b8>
    da4c:	0085c83a 	sub	r2,zero,r2
    da50:	29402034 	orhi	r5,r5,128
    da54:	01000e04 	movi	r4,56
    da58:	20806216 	blt	r4,r2,dbe4 <__subdf3+0x864>
    da5c:	010007c4 	movi	r4,31
    da60:	20806b16 	blt	r4,r2,dc10 <__subdf3+0x890>
    da64:	01000804 	movi	r4,32
    da68:	2089c83a 	sub	r4,r4,r2
    da6c:	2912983a 	sll	r9,r5,r4
    da70:	888ed83a 	srl	r7,r17,r2
    da74:	8908983a 	sll	r4,r17,r4
    da78:	2884d83a 	srl	r2,r5,r2
    da7c:	49e2b03a 	or	r17,r9,r7
    da80:	2008c03a 	cmpne	r4,r4,zero
    da84:	8922b03a 	or	r17,r17,r4
    da88:	89a3883a 	add	r17,r17,r6
    da8c:	10c5883a 	add	r2,r2,r3
    da90:	898d803a 	cmpltu	r6,r17,r6
    da94:	118b883a 	add	r5,r2,r6
    da98:	5021883a 	mov	r16,r10
    da9c:	003ed506 	br	d5f4 <__subdf3+0x274>
    daa0:	1984b03a 	or	r2,r3,r6
    daa4:	103e5926 	beq	r2,zero,d40c <__subdf3+0x8c>
    daa8:	8989c83a 	sub	r4,r17,r6
    daac:	8911803a 	cmpltu	r8,r17,r4
    dab0:	28c5c83a 	sub	r2,r5,r3
    dab4:	1205c83a 	sub	r2,r2,r8
    dab8:	1200202c 	andhi	r8,r2,128
    dabc:	403ef926 	beq	r8,zero,d6a4 <__subdf3+0x324>
    dac0:	3463c83a 	sub	r17,r6,r17
    dac4:	194bc83a 	sub	r5,r3,r5
    dac8:	344d803a 	cmpltu	r6,r6,r17
    dacc:	298bc83a 	sub	r5,r5,r6
    dad0:	3825883a 	mov	r18,r7
    dad4:	003e4d06 	br	d40c <__subdf3+0x8c>
    dad8:	1984b03a 	or	r2,r3,r6
    dadc:	10002b26 	beq	r2,zero,db8c <__subdf3+0x80c>
    dae0:	2808d0fa 	srli	r4,r5,3
    dae4:	8822d0fa 	srli	r17,r17,3
    dae8:	280a977a 	slli	r5,r5,29
    daec:	2080022c 	andhi	r2,r4,8
    daf0:	2c62b03a 	or	r17,r5,r17
    daf4:	10000826 	beq	r2,zero,db18 <__subdf3+0x798>
    daf8:	1810d0fa 	srli	r8,r3,3
    dafc:	4080022c 	andhi	r2,r8,8
    db00:	1000051e 	bne	r2,zero,db18 <__subdf3+0x798>
    db04:	300cd0fa 	srli	r6,r6,3
    db08:	1804977a 	slli	r2,r3,29
    db0c:	4009883a 	mov	r4,r8
    db10:	3825883a 	mov	r18,r7
    db14:	11a2b03a 	or	r17,r2,r6
    db18:	880ad77a 	srli	r5,r17,29
    db1c:	200890fa 	slli	r4,r4,3
    db20:	882290fa 	slli	r17,r17,3
    db24:	0401ffc4 	movi	r16,2047
    db28:	290ab03a 	or	r5,r5,r4
    db2c:	003e3706 	br	d40c <__subdf3+0x8c>
    db30:	0101ffc4 	movi	r4,2047
    db34:	513fc71e 	bne	r10,r4,da54 <__subdf3+0x6d4>
    db38:	180b883a 	mov	r5,r3
    db3c:	3023883a 	mov	r17,r6
    db40:	5021883a 	mov	r16,r10
    db44:	003e3106 	br	d40c <__subdf3+0x8c>
    db48:	10002d26 	beq	r2,zero,dc00 <__subdf3+0x880>
    db4c:	1984b03a 	or	r2,r3,r6
    db50:	10000e26 	beq	r2,zero,db8c <__subdf3+0x80c>
    db54:	2808d0fa 	srli	r4,r5,3
    db58:	8822d0fa 	srli	r17,r17,3
    db5c:	280a977a 	slli	r5,r5,29
    db60:	2080022c 	andhi	r2,r4,8
    db64:	2c62b03a 	or	r17,r5,r17
    db68:	103feb26 	beq	r2,zero,db18 <__subdf3+0x798>
    db6c:	180ed0fa 	srli	r7,r3,3
    db70:	3880022c 	andhi	r2,r7,8
    db74:	103fe81e 	bne	r2,zero,db18 <__subdf3+0x798>
    db78:	300cd0fa 	srli	r6,r6,3
    db7c:	1804977a 	slli	r2,r3,29
    db80:	3809883a 	mov	r4,r7
    db84:	11a2b03a 	or	r17,r2,r6
    db88:	003fe306 	br	db18 <__subdf3+0x798>
    db8c:	0401ffc4 	movi	r16,2047
    db90:	003e1e06 	br	d40c <__subdf3+0x8c>
    db94:	0005883a 	mov	r2,zero
    db98:	003f8306 	br	d9a8 <__subdf3+0x628>
    db9c:	113ff804 	addi	r4,r2,-32
    dba0:	02000804 	movi	r8,32
    dba4:	2908d83a 	srl	r4,r5,r4
    dba8:	12002526 	beq	r2,r8,dc40 <__subdf3+0x8c0>
    dbac:	02001004 	movi	r8,64
    dbb0:	4085c83a 	sub	r2,r8,r2
    dbb4:	288a983a 	sll	r5,r5,r2
    dbb8:	2c62b03a 	or	r17,r5,r17
    dbbc:	8822c03a 	cmpne	r17,r17,zero
    dbc0:	8922b03a 	or	r17,r17,r4
    dbc4:	0005883a 	mov	r2,zero
    dbc8:	003f2406 	br	d85c <__subdf3+0x4dc>
    dbcc:	01402034 	movhi	r5,128
    dbd0:	0011883a 	mov	r8,zero
    dbd4:	297fffc4 	addi	r5,r5,-1
    dbd8:	047ffe04 	movi	r17,-8
    dbdc:	0401ffc4 	movi	r16,2047
    dbe0:	003e6a06 	br	d58c <__subdf3+0x20c>
    dbe4:	2c62b03a 	or	r17,r5,r17
    dbe8:	8822c03a 	cmpne	r17,r17,zero
    dbec:	0005883a 	mov	r2,zero
    dbf0:	003fa506 	br	da88 <__subdf3+0x708>
    dbf4:	180b883a 	mov	r5,r3
    dbf8:	3023883a 	mov	r17,r6
    dbfc:	003e0306 	br	d40c <__subdf3+0x8c>
    dc00:	180b883a 	mov	r5,r3
    dc04:	3023883a 	mov	r17,r6
    dc08:	0401ffc4 	movi	r16,2047
    dc0c:	003dff06 	br	d40c <__subdf3+0x8c>
    dc10:	113ff804 	addi	r4,r2,-32
    dc14:	01c00804 	movi	r7,32
    dc18:	2908d83a 	srl	r4,r5,r4
    dc1c:	11c00a26 	beq	r2,r7,dc48 <__subdf3+0x8c8>
    dc20:	01c01004 	movi	r7,64
    dc24:	3885c83a 	sub	r2,r7,r2
    dc28:	288a983a 	sll	r5,r5,r2
    dc2c:	2c62b03a 	or	r17,r5,r17
    dc30:	8822c03a 	cmpne	r17,r17,zero
    dc34:	8922b03a 	or	r17,r17,r4
    dc38:	0005883a 	mov	r2,zero
    dc3c:	003f9206 	br	da88 <__subdf3+0x708>
    dc40:	000b883a 	mov	r5,zero
    dc44:	003fdc06 	br	dbb8 <__subdf3+0x838>
    dc48:	000b883a 	mov	r5,zero
    dc4c:	003ff706 	br	dc2c <__subdf3+0x8ac>

0000dc50 <__fixdfsi>:
    dc50:	2806d53a 	srli	r3,r5,20
    dc54:	00800434 	movhi	r2,16
    dc58:	10bfffc4 	addi	r2,r2,-1
    dc5c:	18c1ffcc 	andi	r3,r3,2047
    dc60:	0180ff84 	movi	r6,1022
    dc64:	2884703a 	and	r2,r5,r2
    dc68:	280ad7fa 	srli	r5,r5,31
    dc6c:	30c0130e 	bge	r6,r3,dcbc <__fixdfsi+0x6c>
    dc70:	01810744 	movi	r6,1053
    dc74:	30c00d16 	blt	r6,r3,dcac <__fixdfsi+0x5c>
    dc78:	01810cc4 	movi	r6,1075
    dc7c:	30cdc83a 	sub	r6,r6,r3
    dc80:	01c007c4 	movi	r7,31
    dc84:	10800434 	orhi	r2,r2,16
    dc88:	39800e0e 	bge	r7,r6,dcc4 <__fixdfsi+0x74>
    dc8c:	010104c4 	movi	r4,1043
    dc90:	20c7c83a 	sub	r3,r4,r3
    dc94:	10c6d83a 	srl	r3,r2,r3
    dc98:	29403fcc 	andi	r5,r5,255
    dc9c:	0145c83a 	sub	r2,zero,r5
    dca0:	1884f03a 	xor	r2,r3,r2
    dca4:	1145883a 	add	r2,r2,r5
    dca8:	f800283a 	ret
    dcac:	00a00034 	movhi	r2,32768
    dcb0:	10bfffc4 	addi	r2,r2,-1
    dcb4:	2885883a 	add	r2,r5,r2
    dcb8:	f800283a 	ret
    dcbc:	0005883a 	mov	r2,zero
    dcc0:	f800283a 	ret
    dcc4:	18fefb44 	addi	r3,r3,-1043
    dcc8:	2188d83a 	srl	r4,r4,r6
    dccc:	10c6983a 	sll	r3,r2,r3
    dcd0:	20c6b03a 	or	r3,r4,r3
    dcd4:	003ff006 	br	dc98 <__fixdfsi+0x48>

0000dcd8 <__floatsidf>:
    dcd8:	defffd04 	addi	sp,sp,-12
    dcdc:	dc400115 	stw	r17,4(sp)
    dce0:	dfc00215 	stw	ra,8(sp)
    dce4:	dc000015 	stw	r16,0(sp)
    dce8:	2023883a 	mov	r17,r4
    dcec:	20001426 	beq	r4,zero,dd40 <__floatsidf+0x68>
    dcf0:	2020d7fa 	srli	r16,r4,31
    dcf4:	80000126 	beq	r16,zero,dcfc <__floatsidf+0x24>
    dcf8:	0123c83a 	sub	r17,zero,r4
    dcfc:	8809883a 	mov	r4,r17
    dd00:	00015480 	call	1548 <__clzsi2>
    dd04:	01410784 	movi	r5,1054
    dd08:	00c00284 	movi	r3,10
    dd0c:	288bc83a 	sub	r5,r5,r2
    dd10:	18801c16 	blt	r3,r2,dd84 <__floatsidf+0xac>
    dd14:	00c002c4 	movi	r3,11
    dd18:	1887c83a 	sub	r3,r3,r2
    dd1c:	88c8d83a 	srl	r4,r17,r3
    dd20:	00c00434 	movhi	r3,16
    dd24:	18ffffc4 	addi	r3,r3,-1
    dd28:	10800544 	addi	r2,r2,21
    dd2c:	20c8703a 	and	r4,r4,r3
    dd30:	8884983a 	sll	r2,r17,r2
    dd34:	28c1ffcc 	andi	r3,r5,2047
    dd38:	800d883a 	mov	r6,r16
    dd3c:	00000406 	br	dd50 <__floatsidf+0x78>
    dd40:	000d883a 	mov	r6,zero
    dd44:	0007883a 	mov	r3,zero
    dd48:	0009883a 	mov	r4,zero
    dd4c:	0005883a 	mov	r2,zero
    dd50:	180a953a 	slli	r5,r3,20
    dd54:	31803fcc 	andi	r6,r6,255
    dd58:	00c00434 	movhi	r3,16
    dd5c:	300c97fa 	slli	r6,r6,31
    dd60:	18ffffc4 	addi	r3,r3,-1
    dd64:	20c6703a 	and	r3,r4,r3
    dd68:	1946b03a 	or	r3,r3,r5
    dd6c:	1986b03a 	or	r3,r3,r6
    dd70:	dfc00217 	ldw	ra,8(sp)
    dd74:	dc400117 	ldw	r17,4(sp)
    dd78:	dc000017 	ldw	r16,0(sp)
    dd7c:	dec00304 	addi	sp,sp,12
    dd80:	f800283a 	ret
    dd84:	10fffd44 	addi	r3,r2,-11
    dd88:	88c8983a 	sll	r4,r17,r3
    dd8c:	00800434 	movhi	r2,16
    dd90:	10bfffc4 	addi	r2,r2,-1
    dd94:	2088703a 	and	r4,r4,r2
    dd98:	28c1ffcc 	andi	r3,r5,2047
    dd9c:	800d883a 	mov	r6,r16
    dda0:	0005883a 	mov	r2,zero
    dda4:	003fea06 	br	dd50 <__floatsidf+0x78>

0000dda8 <__floatunsidf>:
    dda8:	defffe04 	addi	sp,sp,-8
    ddac:	dc000015 	stw	r16,0(sp)
    ddb0:	dfc00115 	stw	ra,4(sp)
    ddb4:	2021883a 	mov	r16,r4
    ddb8:	20001026 	beq	r4,zero,ddfc <__floatunsidf+0x54>
    ddbc:	00015480 	call	1548 <__clzsi2>
    ddc0:	01410784 	movi	r5,1054
    ddc4:	100d883a 	mov	r6,r2
    ddc8:	288bc83a 	sub	r5,r5,r2
    ddcc:	00800284 	movi	r2,10
    ddd0:	11801616 	blt	r2,r6,de2c <__floatunsidf+0x84>
    ddd4:	008002c4 	movi	r2,11
    ddd8:	1185c83a 	sub	r2,r2,r6
    dddc:	8084d83a 	srl	r2,r16,r2
    dde0:	00c00434 	movhi	r3,16
    dde4:	31c00544 	addi	r7,r6,21
    dde8:	18ffffc4 	addi	r3,r3,-1
    ddec:	81e0983a 	sll	r16,r16,r7
    ddf0:	10cc703a 	and	r6,r2,r3
    ddf4:	2941ffcc 	andi	r5,r5,2047
    ddf8:	00000206 	br	de04 <__floatunsidf+0x5c>
    ddfc:	000b883a 	mov	r5,zero
    de00:	000d883a 	mov	r6,zero
    de04:	280a953a 	slli	r5,r5,20
    de08:	00c00434 	movhi	r3,16
    de0c:	18ffffc4 	addi	r3,r3,-1
    de10:	30c6703a 	and	r3,r6,r3
    de14:	8005883a 	mov	r2,r16
    de18:	1946b03a 	or	r3,r3,r5
    de1c:	dfc00117 	ldw	ra,4(sp)
    de20:	dc000017 	ldw	r16,0(sp)
    de24:	dec00204 	addi	sp,sp,8
    de28:	f800283a 	ret
    de2c:	31bffd44 	addi	r6,r6,-11
    de30:	818c983a 	sll	r6,r16,r6
    de34:	00800434 	movhi	r2,16
    de38:	10bfffc4 	addi	r2,r2,-1
    de3c:	2941ffcc 	andi	r5,r5,2047
    de40:	0021883a 	mov	r16,zero
    de44:	308c703a 	and	r6,r6,r2
    de48:	003fee06 	br	de04 <__floatunsidf+0x5c>

0000de4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de4c:	defffe04 	addi	sp,sp,-8
    de50:	dfc00115 	stw	ra,4(sp)
    de54:	df000015 	stw	fp,0(sp)
    de58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de5c:	00800074 	movhi	r2,1
    de60:	10918504 	addi	r2,r2,17940
    de64:	10800017 	ldw	r2,0(r2)
    de68:	10000526 	beq	r2,zero,de80 <alt_get_errno+0x34>
    de6c:	00800074 	movhi	r2,1
    de70:	10918504 	addi	r2,r2,17940
    de74:	10800017 	ldw	r2,0(r2)
    de78:	103ee83a 	callr	r2
    de7c:	00000206 	br	de88 <alt_get_errno+0x3c>
    de80:	00800074 	movhi	r2,1
    de84:	10919204 	addi	r2,r2,17992
}
    de88:	e037883a 	mov	sp,fp
    de8c:	dfc00117 	ldw	ra,4(sp)
    de90:	df000017 	ldw	fp,0(sp)
    de94:	dec00204 	addi	sp,sp,8
    de98:	f800283a 	ret

0000de9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    de9c:	defffb04 	addi	sp,sp,-20
    dea0:	dfc00415 	stw	ra,16(sp)
    dea4:	df000315 	stw	fp,12(sp)
    dea8:	df000304 	addi	fp,sp,12
    deac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    deb0:	e0bfff17 	ldw	r2,-4(fp)
    deb4:	10000816 	blt	r2,zero,ded8 <close+0x3c>
    deb8:	e13fff17 	ldw	r4,-4(fp)
    debc:	01400304 	movi	r5,12
    dec0:	0000eb00 	call	eb0 <__mulsi3>
    dec4:	1007883a 	mov	r3,r2
    dec8:	00800074 	movhi	r2,1
    decc:	108bda04 	addi	r2,r2,12136
    ded0:	1885883a 	add	r2,r3,r2
    ded4:	00000106 	br	dedc <close+0x40>
    ded8:	0005883a 	mov	r2,zero
    dedc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    dee0:	e0bffd17 	ldw	r2,-12(fp)
    dee4:	10001926 	beq	r2,zero,df4c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    dee8:	e0bffd17 	ldw	r2,-12(fp)
    deec:	10800017 	ldw	r2,0(r2)
    def0:	10800417 	ldw	r2,16(r2)
    def4:	10000626 	beq	r2,zero,df10 <close+0x74>
    def8:	e0bffd17 	ldw	r2,-12(fp)
    defc:	10800017 	ldw	r2,0(r2)
    df00:	10800417 	ldw	r2,16(r2)
    df04:	e13ffd17 	ldw	r4,-12(fp)
    df08:	103ee83a 	callr	r2
    df0c:	00000106 	br	df14 <close+0x78>
    df10:	0005883a 	mov	r2,zero
    df14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    df18:	e13fff17 	ldw	r4,-4(fp)
    df1c:	000e4dc0 	call	e4dc <alt_release_fd>
    if (rval < 0)
    df20:	e0bffe17 	ldw	r2,-8(fp)
    df24:	1000070e 	bge	r2,zero,df44 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    df28:	000de4c0 	call	de4c <alt_get_errno>
    df2c:	1007883a 	mov	r3,r2
    df30:	e0bffe17 	ldw	r2,-8(fp)
    df34:	0085c83a 	sub	r2,zero,r2
    df38:	18800015 	stw	r2,0(r3)
      return -1;
    df3c:	00bfffc4 	movi	r2,-1
    df40:	00000706 	br	df60 <close+0xc4>
    }
    return 0;
    df44:	0005883a 	mov	r2,zero
    df48:	00000506 	br	df60 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    df4c:	000de4c0 	call	de4c <alt_get_errno>
    df50:	1007883a 	mov	r3,r2
    df54:	00801444 	movi	r2,81
    df58:	18800015 	stw	r2,0(r3)
    return -1;
    df5c:	00bfffc4 	movi	r2,-1
  }
}
    df60:	e037883a 	mov	sp,fp
    df64:	dfc00117 	ldw	ra,4(sp)
    df68:	df000017 	ldw	fp,0(sp)
    df6c:	dec00204 	addi	sp,sp,8
    df70:	f800283a 	ret

0000df74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    df74:	defffc04 	addi	sp,sp,-16
    df78:	df000315 	stw	fp,12(sp)
    df7c:	df000304 	addi	fp,sp,12
    df80:	e13ffd15 	stw	r4,-12(fp)
    df84:	e17ffe15 	stw	r5,-8(fp)
    df88:	e1bfff15 	stw	r6,-4(fp)
  return len;
    df8c:	e0bfff17 	ldw	r2,-4(fp)
}
    df90:	e037883a 	mov	sp,fp
    df94:	df000017 	ldw	fp,0(sp)
    df98:	dec00104 	addi	sp,sp,4
    df9c:	f800283a 	ret

0000dfa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dfa0:	defffe04 	addi	sp,sp,-8
    dfa4:	dfc00115 	stw	ra,4(sp)
    dfa8:	df000015 	stw	fp,0(sp)
    dfac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dfb0:	00800074 	movhi	r2,1
    dfb4:	10918504 	addi	r2,r2,17940
    dfb8:	10800017 	ldw	r2,0(r2)
    dfbc:	10000526 	beq	r2,zero,dfd4 <alt_get_errno+0x34>
    dfc0:	00800074 	movhi	r2,1
    dfc4:	10918504 	addi	r2,r2,17940
    dfc8:	10800017 	ldw	r2,0(r2)
    dfcc:	103ee83a 	callr	r2
    dfd0:	00000206 	br	dfdc <alt_get_errno+0x3c>
    dfd4:	00800074 	movhi	r2,1
    dfd8:	10919204 	addi	r2,r2,17992
}
    dfdc:	e037883a 	mov	sp,fp
    dfe0:	dfc00117 	ldw	ra,4(sp)
    dfe4:	df000017 	ldw	fp,0(sp)
    dfe8:	dec00204 	addi	sp,sp,8
    dfec:	f800283a 	ret

0000dff0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    dff0:	defffb04 	addi	sp,sp,-20
    dff4:	dfc00415 	stw	ra,16(sp)
    dff8:	df000315 	stw	fp,12(sp)
    dffc:	df000304 	addi	fp,sp,12
    e000:	e13ffe15 	stw	r4,-8(fp)
    e004:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e008:	e0bffe17 	ldw	r2,-8(fp)
    e00c:	10000816 	blt	r2,zero,e030 <fstat+0x40>
    e010:	e13ffe17 	ldw	r4,-8(fp)
    e014:	01400304 	movi	r5,12
    e018:	0000eb00 	call	eb0 <__mulsi3>
    e01c:	1007883a 	mov	r3,r2
    e020:	00800074 	movhi	r2,1
    e024:	108bda04 	addi	r2,r2,12136
    e028:	1885883a 	add	r2,r3,r2
    e02c:	00000106 	br	e034 <fstat+0x44>
    e030:	0005883a 	mov	r2,zero
    e034:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e038:	e0bffd17 	ldw	r2,-12(fp)
    e03c:	10001026 	beq	r2,zero,e080 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e040:	e0bffd17 	ldw	r2,-12(fp)
    e044:	10800017 	ldw	r2,0(r2)
    e048:	10800817 	ldw	r2,32(r2)
    e04c:	10000726 	beq	r2,zero,e06c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    e050:	e0bffd17 	ldw	r2,-12(fp)
    e054:	10800017 	ldw	r2,0(r2)
    e058:	10800817 	ldw	r2,32(r2)
    e05c:	e13ffd17 	ldw	r4,-12(fp)
    e060:	e17fff17 	ldw	r5,-4(fp)
    e064:	103ee83a 	callr	r2
    e068:	00000a06 	br	e094 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e06c:	e0bfff17 	ldw	r2,-4(fp)
    e070:	00c80004 	movi	r3,8192
    e074:	10c00115 	stw	r3,4(r2)
      return 0;
    e078:	0005883a 	mov	r2,zero
    e07c:	00000506 	br	e094 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e080:	000dfa00 	call	dfa0 <alt_get_errno>
    e084:	1007883a 	mov	r3,r2
    e088:	00801444 	movi	r2,81
    e08c:	18800015 	stw	r2,0(r3)
    return -1;
    e090:	00bfffc4 	movi	r2,-1
  }
}
    e094:	e037883a 	mov	sp,fp
    e098:	dfc00117 	ldw	ra,4(sp)
    e09c:	df000017 	ldw	fp,0(sp)
    e0a0:	dec00204 	addi	sp,sp,8
    e0a4:	f800283a 	ret

0000e0a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e0a8:	defffe04 	addi	sp,sp,-8
    e0ac:	dfc00115 	stw	ra,4(sp)
    e0b0:	df000015 	stw	fp,0(sp)
    e0b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e0b8:	00800074 	movhi	r2,1
    e0bc:	10918504 	addi	r2,r2,17940
    e0c0:	10800017 	ldw	r2,0(r2)
    e0c4:	10000526 	beq	r2,zero,e0dc <alt_get_errno+0x34>
    e0c8:	00800074 	movhi	r2,1
    e0cc:	10918504 	addi	r2,r2,17940
    e0d0:	10800017 	ldw	r2,0(r2)
    e0d4:	103ee83a 	callr	r2
    e0d8:	00000206 	br	e0e4 <alt_get_errno+0x3c>
    e0dc:	00800074 	movhi	r2,1
    e0e0:	10919204 	addi	r2,r2,17992
}
    e0e4:	e037883a 	mov	sp,fp
    e0e8:	dfc00117 	ldw	ra,4(sp)
    e0ec:	df000017 	ldw	fp,0(sp)
    e0f0:	dec00204 	addi	sp,sp,8
    e0f4:	f800283a 	ret

0000e0f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e0f8:	deffed04 	addi	sp,sp,-76
    e0fc:	dfc01215 	stw	ra,72(sp)
    e100:	df001115 	stw	fp,68(sp)
    e104:	df001104 	addi	fp,sp,68
    e108:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e10c:	e0bfff17 	ldw	r2,-4(fp)
    e110:	10000816 	blt	r2,zero,e134 <isatty+0x3c>
    e114:	e13fff17 	ldw	r4,-4(fp)
    e118:	01400304 	movi	r5,12
    e11c:	0000eb00 	call	eb0 <__mulsi3>
    e120:	1007883a 	mov	r3,r2
    e124:	00800074 	movhi	r2,1
    e128:	108bda04 	addi	r2,r2,12136
    e12c:	1885883a 	add	r2,r3,r2
    e130:	00000106 	br	e138 <isatty+0x40>
    e134:	0005883a 	mov	r2,zero
    e138:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e13c:	e0bfef17 	ldw	r2,-68(fp)
    e140:	10000e26 	beq	r2,zero,e17c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e144:	e0bfef17 	ldw	r2,-68(fp)
    e148:	10800017 	ldw	r2,0(r2)
    e14c:	10800817 	ldw	r2,32(r2)
    e150:	1000021e 	bne	r2,zero,e15c <isatty+0x64>
    {
      return 1;
    e154:	00800044 	movi	r2,1
    e158:	00000d06 	br	e190 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e15c:	e0bff004 	addi	r2,fp,-64
    e160:	e13fff17 	ldw	r4,-4(fp)
    e164:	100b883a 	mov	r5,r2
    e168:	000dff00 	call	dff0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e16c:	e0bff117 	ldw	r2,-60(fp)
    e170:	10880020 	cmpeqi	r2,r2,8192
    e174:	10803fcc 	andi	r2,r2,255
    e178:	00000506 	br	e190 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e17c:	000e0a80 	call	e0a8 <alt_get_errno>
    e180:	1007883a 	mov	r3,r2
    e184:	00801444 	movi	r2,81
    e188:	18800015 	stw	r2,0(r3)
    return 0;
    e18c:	0005883a 	mov	r2,zero
  }
}
    e190:	e037883a 	mov	sp,fp
    e194:	dfc00117 	ldw	ra,4(sp)
    e198:	df000017 	ldw	fp,0(sp)
    e19c:	dec00204 	addi	sp,sp,8
    e1a0:	f800283a 	ret

0000e1a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e1a4:	defffe04 	addi	sp,sp,-8
    e1a8:	dfc00115 	stw	ra,4(sp)
    e1ac:	df000015 	stw	fp,0(sp)
    e1b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e1b4:	00800074 	movhi	r2,1
    e1b8:	10918504 	addi	r2,r2,17940
    e1bc:	10800017 	ldw	r2,0(r2)
    e1c0:	10000526 	beq	r2,zero,e1d8 <alt_get_errno+0x34>
    e1c4:	00800074 	movhi	r2,1
    e1c8:	10918504 	addi	r2,r2,17940
    e1cc:	10800017 	ldw	r2,0(r2)
    e1d0:	103ee83a 	callr	r2
    e1d4:	00000206 	br	e1e0 <alt_get_errno+0x3c>
    e1d8:	00800074 	movhi	r2,1
    e1dc:	10919204 	addi	r2,r2,17992
}
    e1e0:	e037883a 	mov	sp,fp
    e1e4:	dfc00117 	ldw	ra,4(sp)
    e1e8:	df000017 	ldw	fp,0(sp)
    e1ec:	dec00204 	addi	sp,sp,8
    e1f0:	f800283a 	ret

0000e1f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e1f4:	defff904 	addi	sp,sp,-28
    e1f8:	dfc00615 	stw	ra,24(sp)
    e1fc:	df000515 	stw	fp,20(sp)
    e200:	df000504 	addi	fp,sp,20
    e204:	e13ffd15 	stw	r4,-12(fp)
    e208:	e17ffe15 	stw	r5,-8(fp)
    e20c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e210:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e214:	e0bffd17 	ldw	r2,-12(fp)
    e218:	10000816 	blt	r2,zero,e23c <lseek+0x48>
    e21c:	e13ffd17 	ldw	r4,-12(fp)
    e220:	01400304 	movi	r5,12
    e224:	0000eb00 	call	eb0 <__mulsi3>
    e228:	1007883a 	mov	r3,r2
    e22c:	00800074 	movhi	r2,1
    e230:	108bda04 	addi	r2,r2,12136
    e234:	1885883a 	add	r2,r3,r2
    e238:	00000106 	br	e240 <lseek+0x4c>
    e23c:	0005883a 	mov	r2,zero
    e240:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e244:	e0bffc17 	ldw	r2,-16(fp)
    e248:	10001026 	beq	r2,zero,e28c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e24c:	e0bffc17 	ldw	r2,-16(fp)
    e250:	10800017 	ldw	r2,0(r2)
    e254:	10800717 	ldw	r2,28(r2)
    e258:	10000926 	beq	r2,zero,e280 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e25c:	e0bffc17 	ldw	r2,-16(fp)
    e260:	10800017 	ldw	r2,0(r2)
    e264:	10800717 	ldw	r2,28(r2)
    e268:	e13ffc17 	ldw	r4,-16(fp)
    e26c:	e17ffe17 	ldw	r5,-8(fp)
    e270:	e1bfff17 	ldw	r6,-4(fp)
    e274:	103ee83a 	callr	r2
    e278:	e0bffb15 	stw	r2,-20(fp)
    e27c:	00000506 	br	e294 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e280:	00bfde84 	movi	r2,-134
    e284:	e0bffb15 	stw	r2,-20(fp)
    e288:	00000206 	br	e294 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    e28c:	00bfebc4 	movi	r2,-81
    e290:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e294:	e0bffb17 	ldw	r2,-20(fp)
    e298:	1000070e 	bge	r2,zero,e2b8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    e29c:	000e1a40 	call	e1a4 <alt_get_errno>
    e2a0:	1007883a 	mov	r3,r2
    e2a4:	e0bffb17 	ldw	r2,-20(fp)
    e2a8:	0085c83a 	sub	r2,zero,r2
    e2ac:	18800015 	stw	r2,0(r3)
    rc = -1;
    e2b0:	00bfffc4 	movi	r2,-1
    e2b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e2b8:	e0bffb17 	ldw	r2,-20(fp)
}
    e2bc:	e037883a 	mov	sp,fp
    e2c0:	dfc00117 	ldw	ra,4(sp)
    e2c4:	df000017 	ldw	fp,0(sp)
    e2c8:	dec00204 	addi	sp,sp,8
    e2cc:	f800283a 	ret

0000e2d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e2d0:	defffd04 	addi	sp,sp,-12
    e2d4:	dfc00215 	stw	ra,8(sp)
    e2d8:	df000115 	stw	fp,4(sp)
    e2dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e2e0:	0009883a 	mov	r4,zero
    e2e4:	000e7940 	call	e794 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e2e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e2ec:	000e7c80 	call	e7c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e2f0:	01000074 	movhi	r4,1
    e2f4:	21097a04 	addi	r4,r4,9704
    e2f8:	01400074 	movhi	r5,1
    e2fc:	29497a04 	addi	r5,r5,9704
    e300:	01800074 	movhi	r6,1
    e304:	31897a04 	addi	r6,r6,9704
    e308:	00115900 	call	11590 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e30c:	00110700 	call	11070 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e310:	01000074 	movhi	r4,1
    e314:	21043304 	addi	r4,r4,4300
    e318:	0011ee40 	call	11ee4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e31c:	d1201917 	ldw	r4,-32668(gp)
    e320:	d0e01a17 	ldw	r3,-32664(gp)
    e324:	d0a01b17 	ldw	r2,-32660(gp)
    e328:	180b883a 	mov	r5,r3
    e32c:	100d883a 	mov	r6,r2
    e330:	00001f40 	call	1f4 <main>
    e334:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e338:	01000044 	movi	r4,1
    e33c:	000de9c0 	call	de9c <close>
  exit (result);
    e340:	e13fff17 	ldw	r4,-4(fp)
    e344:	0011ef80 	call	11ef8 <exit>

0000e348 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e348:	defffe04 	addi	sp,sp,-8
    e34c:	df000115 	stw	fp,4(sp)
    e350:	df000104 	addi	fp,sp,4
    e354:	e13fff15 	stw	r4,-4(fp)
}
    e358:	e037883a 	mov	sp,fp
    e35c:	df000017 	ldw	fp,0(sp)
    e360:	dec00104 	addi	sp,sp,4
    e364:	f800283a 	ret

0000e368 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e368:	defffe04 	addi	sp,sp,-8
    e36c:	df000115 	stw	fp,4(sp)
    e370:	df000104 	addi	fp,sp,4
    e374:	e13fff15 	stw	r4,-4(fp)
}
    e378:	e037883a 	mov	sp,fp
    e37c:	df000017 	ldw	fp,0(sp)
    e380:	dec00104 	addi	sp,sp,4
    e384:	f800283a 	ret

0000e388 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e388:	defffe04 	addi	sp,sp,-8
    e38c:	dfc00115 	stw	ra,4(sp)
    e390:	df000015 	stw	fp,0(sp)
    e394:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e398:	00800074 	movhi	r2,1
    e39c:	10918504 	addi	r2,r2,17940
    e3a0:	10800017 	ldw	r2,0(r2)
    e3a4:	10000526 	beq	r2,zero,e3bc <alt_get_errno+0x34>
    e3a8:	00800074 	movhi	r2,1
    e3ac:	10918504 	addi	r2,r2,17940
    e3b0:	10800017 	ldw	r2,0(r2)
    e3b4:	103ee83a 	callr	r2
    e3b8:	00000206 	br	e3c4 <alt_get_errno+0x3c>
    e3bc:	00800074 	movhi	r2,1
    e3c0:	10919204 	addi	r2,r2,17992
}
    e3c4:	e037883a 	mov	sp,fp
    e3c8:	dfc00117 	ldw	ra,4(sp)
    e3cc:	df000017 	ldw	fp,0(sp)
    e3d0:	dec00204 	addi	sp,sp,8
    e3d4:	f800283a 	ret

0000e3d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e3d8:	defff904 	addi	sp,sp,-28
    e3dc:	dfc00615 	stw	ra,24(sp)
    e3e0:	df000515 	stw	fp,20(sp)
    e3e4:	df000504 	addi	fp,sp,20
    e3e8:	e13ffd15 	stw	r4,-12(fp)
    e3ec:	e17ffe15 	stw	r5,-8(fp)
    e3f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e3f4:	e0bffd17 	ldw	r2,-12(fp)
    e3f8:	10000816 	blt	r2,zero,e41c <read+0x44>
    e3fc:	e13ffd17 	ldw	r4,-12(fp)
    e400:	01400304 	movi	r5,12
    e404:	0000eb00 	call	eb0 <__mulsi3>
    e408:	1007883a 	mov	r3,r2
    e40c:	00800074 	movhi	r2,1
    e410:	108bda04 	addi	r2,r2,12136
    e414:	1885883a 	add	r2,r3,r2
    e418:	00000106 	br	e420 <read+0x48>
    e41c:	0005883a 	mov	r2,zero
    e420:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e424:	e0bffb17 	ldw	r2,-20(fp)
    e428:	10002226 	beq	r2,zero,e4b4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e42c:	e0bffb17 	ldw	r2,-20(fp)
    e430:	10800217 	ldw	r2,8(r2)
    e434:	108000cc 	andi	r2,r2,3
    e438:	10800060 	cmpeqi	r2,r2,1
    e43c:	1000181e 	bne	r2,zero,e4a0 <read+0xc8>
        (fd->dev->read))
    e440:	e0bffb17 	ldw	r2,-20(fp)
    e444:	10800017 	ldw	r2,0(r2)
    e448:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e44c:	10001426 	beq	r2,zero,e4a0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e450:	e0bffb17 	ldw	r2,-20(fp)
    e454:	10800017 	ldw	r2,0(r2)
    e458:	10800517 	ldw	r2,20(r2)
    e45c:	e0ffff17 	ldw	r3,-4(fp)
    e460:	e13ffb17 	ldw	r4,-20(fp)
    e464:	e17ffe17 	ldw	r5,-8(fp)
    e468:	180d883a 	mov	r6,r3
    e46c:	103ee83a 	callr	r2
    e470:	e0bffc15 	stw	r2,-16(fp)
    e474:	e0bffc17 	ldw	r2,-16(fp)
    e478:	1000070e 	bge	r2,zero,e498 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    e47c:	000e3880 	call	e388 <alt_get_errno>
    e480:	1007883a 	mov	r3,r2
    e484:	e0bffc17 	ldw	r2,-16(fp)
    e488:	0085c83a 	sub	r2,zero,r2
    e48c:	18800015 	stw	r2,0(r3)
          return -1;
    e490:	00bfffc4 	movi	r2,-1
    e494:	00000c06 	br	e4c8 <read+0xf0>
        }
        return rval;
    e498:	e0bffc17 	ldw	r2,-16(fp)
    e49c:	00000a06 	br	e4c8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e4a0:	000e3880 	call	e388 <alt_get_errno>
    e4a4:	1007883a 	mov	r3,r2
    e4a8:	00800344 	movi	r2,13
    e4ac:	18800015 	stw	r2,0(r3)
    e4b0:	00000406 	br	e4c4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e4b4:	000e3880 	call	e388 <alt_get_errno>
    e4b8:	1007883a 	mov	r3,r2
    e4bc:	00801444 	movi	r2,81
    e4c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e4c4:	00bfffc4 	movi	r2,-1
}
    e4c8:	e037883a 	mov	sp,fp
    e4cc:	dfc00117 	ldw	ra,4(sp)
    e4d0:	df000017 	ldw	fp,0(sp)
    e4d4:	dec00204 	addi	sp,sp,8
    e4d8:	f800283a 	ret

0000e4dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e4dc:	defffc04 	addi	sp,sp,-16
    e4e0:	dfc00315 	stw	ra,12(sp)
    e4e4:	df000215 	stw	fp,8(sp)
    e4e8:	dc000115 	stw	r16,4(sp)
    e4ec:	df000204 	addi	fp,sp,8
    e4f0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    e4f4:	e0bffe17 	ldw	r2,-8(fp)
    e4f8:	108000d0 	cmplti	r2,r2,3
    e4fc:	1000111e 	bne	r2,zero,e544 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    e500:	04000074 	movhi	r16,1
    e504:	840bda04 	addi	r16,r16,12136
    e508:	e0bffe17 	ldw	r2,-8(fp)
    e50c:	1009883a 	mov	r4,r2
    e510:	01400304 	movi	r5,12
    e514:	0000eb00 	call	eb0 <__mulsi3>
    e518:	10800204 	addi	r2,r2,8
    e51c:	8085883a 	add	r2,r16,r2
    e520:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e524:	04000074 	movhi	r16,1
    e528:	840bda04 	addi	r16,r16,12136
    e52c:	e0bffe17 	ldw	r2,-8(fp)
    e530:	1009883a 	mov	r4,r2
    e534:	01400304 	movi	r5,12
    e538:	0000eb00 	call	eb0 <__mulsi3>
    e53c:	8085883a 	add	r2,r16,r2
    e540:	10000015 	stw	zero,0(r2)
  }
}
    e544:	e6ffff04 	addi	sp,fp,-4
    e548:	dfc00217 	ldw	ra,8(sp)
    e54c:	df000117 	ldw	fp,4(sp)
    e550:	dc000017 	ldw	r16,0(sp)
    e554:	dec00304 	addi	sp,sp,12
    e558:	f800283a 	ret

0000e55c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e55c:	defff904 	addi	sp,sp,-28
    e560:	df000615 	stw	fp,24(sp)
    e564:	df000604 	addi	fp,sp,24
    e568:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e56c:	0005303a 	rdctl	r2,status
    e570:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e574:	e0fffc17 	ldw	r3,-16(fp)
    e578:	00bfff84 	movi	r2,-2
    e57c:	1884703a 	and	r2,r3,r2
    e580:	1001703a 	wrctl	status,r2
  
  return context;
    e584:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e588:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e58c:	d0a00c17 	ldw	r2,-32720(gp)
    e590:	10c000c4 	addi	r3,r2,3
    e594:	00bfff04 	movi	r2,-4
    e598:	1884703a 	and	r2,r3,r2
    e59c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e5a0:	d0e00c17 	ldw	r3,-32720(gp)
    e5a4:	e0bfff17 	ldw	r2,-4(fp)
    e5a8:	1887883a 	add	r3,r3,r2
    e5ac:	00808034 	movhi	r2,512
    e5b0:	10800004 	addi	r2,r2,0
    e5b4:	10c0062e 	bgeu	r2,r3,e5d0 <sbrk+0x74>
    e5b8:	e0bffa17 	ldw	r2,-24(fp)
    e5bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e5c0:	e0bffd17 	ldw	r2,-12(fp)
    e5c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e5c8:	00bfffc4 	movi	r2,-1
    e5cc:	00000b06 	br	e5fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e5d0:	d0a00c17 	ldw	r2,-32720(gp)
    e5d4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    e5d8:	d0e00c17 	ldw	r3,-32720(gp)
    e5dc:	e0bfff17 	ldw	r2,-4(fp)
    e5e0:	1885883a 	add	r2,r3,r2
    e5e4:	d0a00c15 	stw	r2,-32720(gp)
    e5e8:	e0bffa17 	ldw	r2,-24(fp)
    e5ec:	e0bffe15 	stw	r2,-8(fp)
    e5f0:	e0bffe17 	ldw	r2,-8(fp)
    e5f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e5f8:	e0bffb17 	ldw	r2,-20(fp)
} 
    e5fc:	e037883a 	mov	sp,fp
    e600:	df000017 	ldw	fp,0(sp)
    e604:	dec00104 	addi	sp,sp,4
    e608:	f800283a 	ret

0000e60c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e60c:	defffe04 	addi	sp,sp,-8
    e610:	dfc00115 	stw	ra,4(sp)
    e614:	df000015 	stw	fp,0(sp)
    e618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e61c:	00800074 	movhi	r2,1
    e620:	10918504 	addi	r2,r2,17940
    e624:	10800017 	ldw	r2,0(r2)
    e628:	10000526 	beq	r2,zero,e640 <alt_get_errno+0x34>
    e62c:	00800074 	movhi	r2,1
    e630:	10918504 	addi	r2,r2,17940
    e634:	10800017 	ldw	r2,0(r2)
    e638:	103ee83a 	callr	r2
    e63c:	00000206 	br	e648 <alt_get_errno+0x3c>
    e640:	00800074 	movhi	r2,1
    e644:	10919204 	addi	r2,r2,17992
}
    e648:	e037883a 	mov	sp,fp
    e64c:	dfc00117 	ldw	ra,4(sp)
    e650:	df000017 	ldw	fp,0(sp)
    e654:	dec00204 	addi	sp,sp,8
    e658:	f800283a 	ret

0000e65c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e65c:	defff904 	addi	sp,sp,-28
    e660:	dfc00615 	stw	ra,24(sp)
    e664:	df000515 	stw	fp,20(sp)
    e668:	df000504 	addi	fp,sp,20
    e66c:	e13ffd15 	stw	r4,-12(fp)
    e670:	e17ffe15 	stw	r5,-8(fp)
    e674:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e678:	e0bffd17 	ldw	r2,-12(fp)
    e67c:	10000816 	blt	r2,zero,e6a0 <write+0x44>
    e680:	e13ffd17 	ldw	r4,-12(fp)
    e684:	01400304 	movi	r5,12
    e688:	0000eb00 	call	eb0 <__mulsi3>
    e68c:	1007883a 	mov	r3,r2
    e690:	00800074 	movhi	r2,1
    e694:	108bda04 	addi	r2,r2,12136
    e698:	1885883a 	add	r2,r3,r2
    e69c:	00000106 	br	e6a4 <write+0x48>
    e6a0:	0005883a 	mov	r2,zero
    e6a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e6a8:	e0bffb17 	ldw	r2,-20(fp)
    e6ac:	10002126 	beq	r2,zero,e734 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e6b0:	e0bffb17 	ldw	r2,-20(fp)
    e6b4:	10800217 	ldw	r2,8(r2)
    e6b8:	108000cc 	andi	r2,r2,3
    e6bc:	10001826 	beq	r2,zero,e720 <write+0xc4>
    e6c0:	e0bffb17 	ldw	r2,-20(fp)
    e6c4:	10800017 	ldw	r2,0(r2)
    e6c8:	10800617 	ldw	r2,24(r2)
    e6cc:	10001426 	beq	r2,zero,e720 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e6d0:	e0bffb17 	ldw	r2,-20(fp)
    e6d4:	10800017 	ldw	r2,0(r2)
    e6d8:	10800617 	ldw	r2,24(r2)
    e6dc:	e0ffff17 	ldw	r3,-4(fp)
    e6e0:	e13ffb17 	ldw	r4,-20(fp)
    e6e4:	e17ffe17 	ldw	r5,-8(fp)
    e6e8:	180d883a 	mov	r6,r3
    e6ec:	103ee83a 	callr	r2
    e6f0:	e0bffc15 	stw	r2,-16(fp)
    e6f4:	e0bffc17 	ldw	r2,-16(fp)
    e6f8:	1000070e 	bge	r2,zero,e718 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e6fc:	000e60c0 	call	e60c <alt_get_errno>
    e700:	1007883a 	mov	r3,r2
    e704:	e0bffc17 	ldw	r2,-16(fp)
    e708:	0085c83a 	sub	r2,zero,r2
    e70c:	18800015 	stw	r2,0(r3)
        return -1;
    e710:	00bfffc4 	movi	r2,-1
    e714:	00000c06 	br	e748 <write+0xec>
      }
      return rval;
    e718:	e0bffc17 	ldw	r2,-16(fp)
    e71c:	00000a06 	br	e748 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e720:	000e60c0 	call	e60c <alt_get_errno>
    e724:	1007883a 	mov	r3,r2
    e728:	00800344 	movi	r2,13
    e72c:	18800015 	stw	r2,0(r3)
    e730:	00000406 	br	e744 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e734:	000e60c0 	call	e60c <alt_get_errno>
    e738:	1007883a 	mov	r3,r2
    e73c:	00801444 	movi	r2,81
    e740:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e744:	00bfffc4 	movi	r2,-1
}
    e748:	e037883a 	mov	sp,fp
    e74c:	dfc00117 	ldw	ra,4(sp)
    e750:	df000017 	ldw	fp,0(sp)
    e754:	dec00204 	addi	sp,sp,8
    e758:	f800283a 	ret

0000e75c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e75c:	defffd04 	addi	sp,sp,-12
    e760:	dfc00215 	stw	ra,8(sp)
    e764:	df000115 	stw	fp,4(sp)
    e768:	df000104 	addi	fp,sp,4
    e76c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e770:	e13fff17 	ldw	r4,-4(fp)
    e774:	01400074 	movhi	r5,1
    e778:	29518204 	addi	r5,r5,17928
    e77c:	0010fcc0 	call	10fcc <alt_dev_llist_insert>
}
    e780:	e037883a 	mov	sp,fp
    e784:	dfc00117 	ldw	ra,4(sp)
    e788:	df000017 	ldw	fp,0(sp)
    e78c:	dec00204 	addi	sp,sp,8
    e790:	f800283a 	ret

0000e794 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e794:	defffd04 	addi	sp,sp,-12
    e798:	dfc00215 	stw	ra,8(sp)
    e79c:	df000115 	stw	fp,4(sp)
    e7a0:	df000104 	addi	fp,sp,4
    e7a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    e7a8:	0011a480 	call	11a48 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e7ac:	00800044 	movi	r2,1
    e7b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e7b4:	e037883a 	mov	sp,fp
    e7b8:	dfc00117 	ldw	ra,4(sp)
    e7bc:	df000017 	ldw	fp,0(sp)
    e7c0:	dec00204 	addi	sp,sp,8
    e7c4:	f800283a 	ret

0000e7c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e7c8:	defffe04 	addi	sp,sp,-8
    e7cc:	dfc00115 	stw	ra,4(sp)
    e7d0:	df000015 	stw	fp,0(sp)
    e7d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    e7d8:	01008074 	movhi	r4,513
    e7dc:	2128b804 	addi	r4,r4,-23840
    e7e0:	000b883a 	mov	r5,zero
    e7e4:	000d883a 	mov	r6,zero
    e7e8:	01c0fa04 	movi	r7,1000
    e7ec:	000fe980 	call	fe98 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
    e7f0:	01000074 	movhi	r4,1
    e7f4:	210c3a04 	addi	r4,r4,12520
    e7f8:	000e9180 	call	e918 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e7fc:	01000074 	movhi	r4,1
    e800:	210c7704 	addi	r4,r4,12764
    e804:	000b883a 	mov	r5,zero
    e808:	018000c4 	movi	r6,3
    e80c:	000f53c0 	call	f53c <altera_avalon_jtag_uart_init>
    e810:	01000074 	movhi	r4,1
    e814:	210c6d04 	addi	r4,r4,12724
    e818:	000e75c0 	call	e75c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    e81c:	00c00044 	movi	r3,1
    e820:	00808074 	movhi	r2,513
    e824:	10a80004 	addi	r2,r2,-24576
    e828:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND0, New_UltraSound0);
    e82c:	01000074 	movhi	r4,1
    e830:	21108f04 	addi	r4,r4,16956
    e834:	000b883a 	mov	r5,zero
    e838:	01800184 	movi	r6,6
    e83c:	00100300 	call	10030 <altera_avalon_uart_init>
    e840:	01000074 	movhi	r4,1
    e844:	21108504 	addi	r4,r4,16916
    e848:	000e75c0 	call	e75c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND1, New_UltraSound1);
    e84c:	01000074 	movhi	r4,1
    e850:	2110c004 	addi	r4,r4,17152
    e854:	000b883a 	mov	r5,zero
    e858:	018001c4 	movi	r6,7
    e85c:	00100300 	call	10030 <altera_avalon_uart_init>
    e860:	01000074 	movhi	r4,1
    e864:	2110b604 	addi	r4,r4,17112
    e868:	000e75c0 	call	e75c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND2, New_UltraSound2);
    e86c:	01000074 	movhi	r4,1
    e870:	2110f104 	addi	r4,r4,17348
    e874:	000b883a 	mov	r5,zero
    e878:	01800204 	movi	r6,8
    e87c:	00100300 	call	10030 <altera_avalon_uart_init>
    e880:	01000074 	movhi	r4,1
    e884:	2110e704 	addi	r4,r4,17308
    e888:	000e75c0 	call	e75c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( NEW_ULTRASOUND3, New_UltraSound3);
    e88c:	01000074 	movhi	r4,1
    e890:	21112204 	addi	r4,r4,17544
    e894:	000b883a 	mov	r5,zero
    e898:	01800244 	movi	r6,9
    e89c:	00100300 	call	10030 <altera_avalon_uart_init>
    e8a0:	01000074 	movhi	r4,1
    e8a4:	21111804 	addi	r4,r4,17504
    e8a8:	000e75c0 	call	e75c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    e8ac:	01000074 	movhi	r4,1
    e8b0:	21115304 	addi	r4,r4,17740
    e8b4:	000b883a 	mov	r5,zero
    e8b8:	01800104 	movi	r6,4
    e8bc:	00100300 	call	10030 <altera_avalon_uart_init>
    e8c0:	01000074 	movhi	r4,1
    e8c4:	21114904 	addi	r4,r4,17700
    e8c8:	000e75c0 	call	e75c <alt_dev_reg>
}
    e8cc:	e037883a 	mov	sp,fp
    e8d0:	dfc00117 	ldw	ra,4(sp)
    e8d4:	df000017 	ldw	fp,0(sp)
    e8d8:	dec00204 	addi	sp,sp,8
    e8dc:	f800283a 	ret

0000e8e0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    e8e0:	defffd04 	addi	sp,sp,-12
    e8e4:	dfc00215 	stw	ra,8(sp)
    e8e8:	df000115 	stw	fp,4(sp)
    e8ec:	df000104 	addi	fp,sp,4
    e8f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    e8f4:	e13fff17 	ldw	r4,-4(fp)
    e8f8:	01400074 	movhi	r5,1
    e8fc:	29518704 	addi	r5,r5,17948
    e900:	0010fcc0 	call	10fcc <alt_dev_llist_insert>
}
    e904:	e037883a 	mov	sp,fp
    e908:	dfc00117 	ldw	ra,4(sp)
    e90c:	df000017 	ldw	fp,0(sp)
    e910:	dec00204 	addi	sp,sp,8
    e914:	f800283a 	ret

0000e918 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    e918:	defffc04 	addi	sp,sp,-16
    e91c:	dfc00315 	stw	ra,12(sp)
    e920:	df000215 	stw	fp,8(sp)
    e924:	df000204 	addi	fp,sp,8
    e928:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    e92c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    e930:	e13fff17 	ldw	r4,-4(fp)
    e934:	000e96c0 	call	e96c <alt_epcs_flash_query>
    e938:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    e93c:	e0bffe17 	ldw	r2,-8(fp)
    e940:	1000041e 	bne	r2,zero,e954 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    e944:	e0bfff17 	ldw	r2,-4(fp)
    e948:	1009883a 	mov	r4,r2
    e94c:	000e8e00 	call	e8e0 <alt_flash_device_register>
    e950:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    e954:	e0bffe17 	ldw	r2,-8(fp)
}
    e958:	e037883a 	mov	sp,fp
    e95c:	dfc00117 	ldw	ra,4(sp)
    e960:	df000017 	ldw	fp,0(sp)
    e964:	dec00204 	addi	sp,sp,8
    e968:	f800283a 	ret

0000e96c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    e96c:	defffc04 	addi	sp,sp,-16
    e970:	dfc00315 	stw	ra,12(sp)
    e974:	df000215 	stw	fp,8(sp)
    e978:	df000204 	addi	fp,sp,8
    e97c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    e980:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    e984:	e0bfff17 	ldw	r2,-4(fp)
    e988:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
    e98c:	e0bfff17 	ldw	r2,-4(fp)
    e990:	10802e17 	ldw	r2,184(r2)
    e994:	1009883a 	mov	r4,r2
    e998:	0010c9c0 	call	10c9c <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
    e99c:	10c03fcc 	andi	r3,r2,255
    e9a0:	e0bfff17 	ldw	r2,-4(fp)
    e9a4:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    e9a8:	e0bfff17 	ldw	r2,-4(fp)
    e9ac:	10803017 	ldw	r2,192(r2)
    e9b0:	10800598 	cmpnei	r2,r2,22
    e9b4:	10000a1e 	bne	r2,zero,e9e0 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    e9b8:	e0bfff17 	ldw	r2,-4(fp)
    e9bc:	00c02034 	movhi	r3,128
    e9c0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
    e9c4:	e0bfff17 	ldw	r2,-4(fp)
    e9c8:	00c02004 	movi	r3,128
    e9cc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    e9d0:	e0bfff17 	ldw	r2,-4(fp)
    e9d4:	00c00074 	movhi	r3,1
    e9d8:	10c01015 	stw	r3,64(r2)
    e9dc:	0000ce06 	br	ed18 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    e9e0:	e0bfff17 	ldw	r2,-4(fp)
    e9e4:	10803017 	ldw	r2,192(r2)
    e9e8:	10800518 	cmpnei	r2,r2,20
    e9ec:	10000a1e 	bne	r2,zero,ea18 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    e9f0:	e0bfff17 	ldw	r2,-4(fp)
    e9f4:	00c00834 	movhi	r3,32
    e9f8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
    e9fc:	e0bfff17 	ldw	r2,-4(fp)
    ea00:	00c00804 	movi	r3,32
    ea04:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    ea08:	e0bfff17 	ldw	r2,-4(fp)
    ea0c:	00c00074 	movhi	r3,1
    ea10:	10c01015 	stw	r3,64(r2)
    ea14:	0000c006 	br	ed18 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    ea18:	e0bfff17 	ldw	r2,-4(fp)
    ea1c:	10803017 	ldw	r2,192(r2)
    ea20:	108004d8 	cmpnei	r2,r2,19
    ea24:	10000a1e 	bne	r2,zero,ea50 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    ea28:	e0bfff17 	ldw	r2,-4(fp)
    ea2c:	00c00434 	movhi	r3,16
    ea30:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
    ea34:	e0bfff17 	ldw	r2,-4(fp)
    ea38:	00c00404 	movi	r3,16
    ea3c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    ea40:	e0bfff17 	ldw	r2,-4(fp)
    ea44:	00c00074 	movhi	r3,1
    ea48:	10c01015 	stw	r3,64(r2)
    ea4c:	0000b206 	br	ed18 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    ea50:	e0bfff17 	ldw	r2,-4(fp)
    ea54:	10803017 	ldw	r2,192(r2)
    ea58:	10800498 	cmpnei	r2,r2,18
    ea5c:	10000a1e 	bne	r2,zero,ea88 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    ea60:	e0bfff17 	ldw	r2,-4(fp)
    ea64:	00c00234 	movhi	r3,8
    ea68:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
    ea6c:	e0bfff17 	ldw	r2,-4(fp)
    ea70:	00c00204 	movi	r3,8
    ea74:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    ea78:	e0bfff17 	ldw	r2,-4(fp)
    ea7c:	00c00074 	movhi	r3,1
    ea80:	10c01015 	stw	r3,64(r2)
    ea84:	0000a406 	br	ed18 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    ea88:	e0bfff17 	ldw	r2,-4(fp)
    ea8c:	10803017 	ldw	r2,192(r2)
    ea90:	10800418 	cmpnei	r2,r2,16
    ea94:	10000a1e 	bne	r2,zero,eac0 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    ea98:	e0bfff17 	ldw	r2,-4(fp)
    ea9c:	00c000b4 	movhi	r3,2
    eaa0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
    eaa4:	e0bfff17 	ldw	r2,-4(fp)
    eaa8:	00c00104 	movi	r3,4
    eaac:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
    eab0:	e0bfff17 	ldw	r2,-4(fp)
    eab4:	00e00014 	movui	r3,32768
    eab8:	10c01015 	stw	r3,64(r2)
    eabc:	00009606 	br	ed18 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    eac0:	e0bfff17 	ldw	r2,-4(fp)
    eac4:	10802e17 	ldw	r2,184(r2)
    eac8:	1009883a 	mov	r4,r2
    eacc:	0010d040 	call	10d04 <epcs_read_device_id>
    ead0:	1007883a 	mov	r3,r2
    ead4:	e0bfff17 	ldw	r2,-4(fp)
    ead8:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
    eadc:	e0bfff17 	ldw	r2,-4(fp)
    eae0:	10c03017 	ldw	r3,192(r2)
    eae4:	00804034 	movhi	r2,256
    eae8:	10bfffc4 	addi	r2,r2,-1
    eaec:	1886703a 	and	r3,r3,r2
    eaf0:	00800874 	movhi	r2,33
    eaf4:	10ae8544 	addi	r2,r2,-17899
    eaf8:	18800a1e 	bne	r3,r2,eb24 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    eafc:	e0bfff17 	ldw	r2,-4(fp)
    eb00:	00c00834 	movhi	r3,32
    eb04:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
    eb08:	e0bfff17 	ldw	r2,-4(fp)
    eb0c:	00c00804 	movi	r3,32
    eb10:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    eb14:	e0bfff17 	ldw	r2,-4(fp)
    eb18:	00c00074 	movhi	r3,1
    eb1c:	10c01015 	stw	r3,64(r2)
    eb20:	00007d06 	br	ed18 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
    eb24:	e0bfff17 	ldw	r2,-4(fp)
    eb28:	10c03017 	ldw	r3,192(r2)
    eb2c:	00804034 	movhi	r2,256
    eb30:	10bfffc4 	addi	r2,r2,-1
    eb34:	1886703a 	and	r3,r3,r2
    eb38:	00800874 	movhi	r2,33
    eb3c:	10ae8584 	addi	r2,r2,-17898
    eb40:	18800a1e 	bne	r3,r2,eb6c <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
    eb44:	e0bfff17 	ldw	r2,-4(fp)
    eb48:	00c01034 	movhi	r3,64
    eb4c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
    eb50:	e0bfff17 	ldw	r2,-4(fp)
    eb54:	00c01004 	movi	r3,64
    eb58:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    eb5c:	e0bfff17 	ldw	r2,-4(fp)
    eb60:	00c00074 	movhi	r3,1
    eb64:	10c01015 	stw	r3,64(r2)
    eb68:	00006b06 	br	ed18 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
    eb6c:	e0bfff17 	ldw	r2,-4(fp)
    eb70:	10c03017 	ldw	r3,192(r2)
    eb74:	00804034 	movhi	r2,256
    eb78:	10bfffc4 	addi	r2,r2,-1
    eb7c:	1886703a 	and	r3,r3,r2
    eb80:	00800874 	movhi	r2,33
    eb84:	10ae85c4 	addi	r2,r2,-17897
    eb88:	18800a1e 	bne	r3,r2,ebb4 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    eb8c:	e0bfff17 	ldw	r2,-4(fp)
    eb90:	00c02034 	movhi	r3,128
    eb94:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
    eb98:	e0bfff17 	ldw	r2,-4(fp)
    eb9c:	00c02004 	movi	r3,128
    eba0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    eba4:	e0bfff17 	ldw	r2,-4(fp)
    eba8:	00c00074 	movhi	r3,1
    ebac:	10c01015 	stw	r3,64(r2)
    ebb0:	00005906 	br	ed18 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    ebb4:	e0bfff17 	ldw	r2,-4(fp)
    ebb8:	10c03017 	ldw	r3,192(r2)
    ebbc:	00804034 	movhi	r2,256
    ebc0:	10bfffc4 	addi	r2,r2,-1
    ebc4:	1886703a 	and	r3,r3,r2
    ebc8:	00800874 	movhi	r2,33
    ebcc:	10ae8604 	addi	r2,r2,-17896
    ebd0:	18800a1e 	bne	r3,r2,ebfc <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    ebd4:	e0bfff17 	ldw	r2,-4(fp)
    ebd8:	00c04034 	movhi	r3,256
    ebdc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    ebe0:	e0bfff17 	ldw	r2,-4(fp)
    ebe4:	00c04004 	movi	r3,256
    ebe8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ebec:	e0bfff17 	ldw	r2,-4(fp)
    ebf0:	00c00074 	movhi	r3,1
    ebf4:	10c01015 	stw	r3,64(r2)
    ebf8:	00004706 	br	ed18 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    ebfc:	e0bfff17 	ldw	r2,-4(fp)
    ec00:	10803017 	ldw	r2,192(r2)
    ec04:	10803fcc 	andi	r2,r2,255
    ec08:	10800618 	cmpnei	r2,r2,24
    ec0c:	10000a1e 	bne	r2,zero,ec38 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    ec10:	e0bfff17 	ldw	r2,-4(fp)
    ec14:	00c04034 	movhi	r3,256
    ec18:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
    ec1c:	e0bfff17 	ldw	r2,-4(fp)
    ec20:	00c01004 	movi	r3,64
    ec24:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
    ec28:	e0bfff17 	ldw	r2,-4(fp)
    ec2c:	00c00134 	movhi	r3,4
    ec30:	10c01015 	stw	r3,64(r2)
    ec34:	00003806 	br	ed18 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    ec38:	e0bfff17 	ldw	r2,-4(fp)
    ec3c:	10803017 	ldw	r2,192(r2)
    ec40:	10803fcc 	andi	r2,r2,255
    ec44:	10800658 	cmpnei	r2,r2,25
    ec48:	10000d1e 	bne	r2,zero,ec80 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    ec4c:	e0bfff17 	ldw	r2,-4(fp)
    ec50:	00c08034 	movhi	r3,512
    ec54:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    ec58:	e0bfff17 	ldw	r2,-4(fp)
    ec5c:	00c08004 	movi	r3,512
    ec60:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ec64:	e0bfff17 	ldw	r2,-4(fp)
    ec68:	00c00074 	movhi	r3,1
    ec6c:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    ec70:	e0bfff17 	ldw	r2,-4(fp)
    ec74:	00c00044 	movi	r3,1
    ec78:	10c03215 	stw	r3,200(r2)
    ec7c:	00002606 	br	ed18 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
    ec80:	e0bfff17 	ldw	r2,-4(fp)
    ec84:	10803017 	ldw	r2,192(r2)
    ec88:	10803fcc 	andi	r2,r2,255
    ec8c:	10800818 	cmpnei	r2,r2,32
    ec90:	10000d1e 	bne	r2,zero,ecc8 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
    ec94:	e0bfff17 	ldw	r2,-4(fp)
    ec98:	00c10034 	movhi	r3,1024
    ec9c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
    eca0:	e0bfff17 	ldw	r2,-4(fp)
    eca4:	00c10004 	movi	r3,1024
    eca8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ecac:	e0bfff17 	ldw	r2,-4(fp)
    ecb0:	00c00074 	movhi	r3,1
    ecb4:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    ecb8:	e0bfff17 	ldw	r2,-4(fp)
    ecbc:	00c00044 	movi	r3,1
    ecc0:	10c03215 	stw	r3,200(r2)
    ecc4:	00001406 	br	ed18 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
    ecc8:	e0bfff17 	ldw	r2,-4(fp)
    eccc:	10803017 	ldw	r2,192(r2)
    ecd0:	10803fcc 	andi	r2,r2,255
    ecd4:	10800858 	cmpnei	r2,r2,33
    ecd8:	10000d1e 	bne	r2,zero,ed10 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
    ecdc:	e0bfff17 	ldw	r2,-4(fp)
    ece0:	00c20034 	movhi	r3,2048
    ece4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
    ece8:	e0bfff17 	ldw	r2,-4(fp)
    ecec:	00c20004 	movi	r3,2048
    ecf0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    ecf4:	e0bfff17 	ldw	r2,-4(fp)
    ecf8:	00c00074 	movhi	r3,1
    ecfc:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    ed00:	e0bfff17 	ldw	r2,-4(fp)
    ed04:	00c00044 	movi	r3,1
    ed08:	10c03215 	stw	r3,200(r2)
    ed0c:	00000206 	br	ed18 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    ed10:	00bffb44 	movi	r2,-19
    ed14:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    ed18:	e0bfff17 	ldw	r2,-4(fp)
    ed1c:	10800e17 	ldw	r2,56(r2)
    ed20:	1007883a 	mov	r3,r2
    ed24:	e0bfff17 	ldw	r2,-4(fp)
    ed28:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
    ed2c:	e0bfff17 	ldw	r2,-4(fp)
    ed30:	00c00044 	movi	r3,1
    ed34:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
    ed38:	e0bfff17 	ldw	r2,-4(fp)
    ed3c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    ed40:	e0bfff17 	ldw	r2,-4(fp)
    ed44:	00c04004 	movi	r3,256
    ed48:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
    ed4c:	e0bffe17 	ldw	r2,-8(fp)
}
    ed50:	e037883a 	mov	sp,fp
    ed54:	dfc00117 	ldw	ra,4(sp)
    ed58:	df000017 	ldw	fp,0(sp)
    ed5c:	dec00204 	addi	sp,sp,8
    ed60:	f800283a 	ret

0000ed64 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    ed64:	deffee04 	addi	sp,sp,-72
    ed68:	dfc01115 	stw	ra,68(sp)
    ed6c:	df001015 	stw	fp,64(sp)
    ed70:	df001004 	addi	fp,sp,64
    ed74:	e13ffc15 	stw	r4,-16(fp)
    ed78:	e17ffd15 	stw	r5,-12(fp)
    ed7c:	e1bffe15 	stw	r6,-8(fp)
    ed80:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    ed84:	00800804 	movi	r2,32
    ed88:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
    ed8c:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
    ed90:	00002606 	br	ee2c <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    ed94:	e0bff117 	ldw	r2,-60(fp)
    ed98:	e0ffff17 	ldw	r3,-4(fp)
    ed9c:	1880012e 	bgeu	r3,r2,eda4 <alt_epcs_flash_memcmp+0x40>
    eda0:	1805883a 	mov	r2,r3
    eda4:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    eda8:	e0fffe17 	ldw	r3,-8(fp)
    edac:	e0bff017 	ldw	r2,-64(fp)
    edb0:	1887883a 	add	r3,r3,r2
    edb4:	e0bff404 	addi	r2,fp,-48
    edb8:	e13ffc17 	ldw	r4,-16(fp)
    edbc:	180b883a 	mov	r5,r3
    edc0:	100d883a 	mov	r6,r2
    edc4:	e1fff217 	ldw	r7,-56(fp)
    edc8:	000f3400 	call	f340 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    edcc:	1000020e 	bge	r2,zero,edd8 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    edd0:	00bfffc4 	movi	r2,-1
    edd4:	00001806 	br	ee38 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    edd8:	e0bff017 	ldw	r2,-64(fp)
    eddc:	e0fffd17 	ldw	r3,-12(fp)
    ede0:	1889883a 	add	r4,r3,r2
    ede4:	e0bff217 	ldw	r2,-56(fp)
    ede8:	e0fff404 	addi	r3,fp,-48
    edec:	180b883a 	mov	r5,r3
    edf0:	100d883a 	mov	r6,r2
    edf4:	0011f300 	call	11f30 <memcmp>
    edf8:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
    edfc:	e0bff317 	ldw	r2,-52(fp)
    ee00:	10000226 	beq	r2,zero,ee0c <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
    ee04:	e0bff317 	ldw	r2,-52(fp)
    ee08:	00000b06 	br	ee38 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
    ee0c:	e0bff217 	ldw	r2,-56(fp)
    ee10:	e0ffff17 	ldw	r3,-4(fp)
    ee14:	1885c83a 	sub	r2,r3,r2
    ee18:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
    ee1c:	e0fff017 	ldw	r3,-64(fp)
    ee20:	e0bff217 	ldw	r2,-56(fp)
    ee24:	1885883a 	add	r2,r3,r2
    ee28:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    ee2c:	e0bfff17 	ldw	r2,-4(fp)
    ee30:	103fd81e 	bne	r2,zero,ed94 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    ee34:	0005883a 	mov	r2,zero
}
    ee38:	e037883a 	mov	sp,fp
    ee3c:	dfc00117 	ldw	ra,4(sp)
    ee40:	df000017 	ldw	fp,0(sp)
    ee44:	dec00204 	addi	sp,sp,8
    ee48:	f800283a 	ret

0000ee4c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    ee4c:	defff404 	addi	sp,sp,-48
    ee50:	dfc00b15 	stw	ra,44(sp)
    ee54:	df000a15 	stw	fp,40(sp)
    ee58:	df000a04 	addi	fp,sp,40
    ee5c:	e13ffc15 	stw	r4,-16(fp)
    ee60:	e17ffd15 	stw	r5,-12(fp)
    ee64:	e1bffe15 	stw	r6,-8(fp)
    ee68:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
    ee6c:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    ee70:	e03ff815 	stw	zero,-32(fp)
    ee74:	00008306 	br	f084 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    ee78:	e0fffc17 	ldw	r3,-16(fp)
    ee7c:	e0bff817 	ldw	r2,-32(fp)
    ee80:	1004913a 	slli	r2,r2,4
    ee84:	10800d04 	addi	r2,r2,52
    ee88:	1885883a 	add	r2,r3,r2
    ee8c:	10800017 	ldw	r2,0(r2)
    ee90:	e0fffd17 	ldw	r3,-12(fp)
    ee94:	18807816 	blt	r3,r2,f078 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
    ee98:	e0fffc17 	ldw	r3,-16(fp)
    ee9c:	e0bff817 	ldw	r2,-32(fp)
    eea0:	1004913a 	slli	r2,r2,4
    eea4:	10800d04 	addi	r2,r2,52
    eea8:	1885883a 	add	r2,r3,r2
    eeac:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
    eeb0:	e13ffc17 	ldw	r4,-16(fp)
    eeb4:	e0bff817 	ldw	r2,-32(fp)
    eeb8:	1004913a 	slli	r2,r2,4
    eebc:	10800e04 	addi	r2,r2,56
    eec0:	2085883a 	add	r2,r4,r2
    eec4:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
    eec8:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    eecc:	e0fffd17 	ldw	r3,-12(fp)
    eed0:	1880690e 	bge	r3,r2,f078 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    eed4:	e0fffc17 	ldw	r3,-16(fp)
    eed8:	e0bff817 	ldw	r2,-32(fp)
    eedc:	1004913a 	slli	r2,r2,4
    eee0:	10800d04 	addi	r2,r2,52
    eee4:	1885883a 	add	r2,r3,r2
    eee8:	10800017 	ldw	r2,0(r2)
    eeec:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    eef0:	e03ff915 	stw	zero,-28(fp)
    eef4:	00005806 	br	f058 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
    eef8:	e0fffd17 	ldw	r3,-12(fp)
    eefc:	e0bffa17 	ldw	r2,-24(fp)
    ef00:	18804916 	blt	r3,r2,f028 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
    ef04:	e0fffc17 	ldw	r3,-16(fp)
    ef08:	e0bff817 	ldw	r2,-32(fp)
    ef0c:	10800104 	addi	r2,r2,4
    ef10:	1004913a 	slli	r2,r2,4
    ef14:	1885883a 	add	r2,r3,r2
    ef18:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
    ef1c:	e0bffa17 	ldw	r2,-24(fp)
    ef20:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
    ef24:	e0fffd17 	ldw	r3,-12(fp)
    ef28:	18803f0e 	bge	r3,r2,f028 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    ef2c:	e0fffc17 	ldw	r3,-16(fp)
    ef30:	e0bff817 	ldw	r2,-32(fp)
    ef34:	10800104 	addi	r2,r2,4
    ef38:	1004913a 	slli	r2,r2,4
    ef3c:	1885883a 	add	r2,r3,r2
    ef40:	10c00017 	ldw	r3,0(r2)
    ef44:	e0bffa17 	ldw	r2,-24(fp)
    ef48:	1887883a 	add	r3,r3,r2
    ef4c:	e0bffd17 	ldw	r2,-12(fp)
    ef50:	1885c83a 	sub	r2,r3,r2
    ef54:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    ef58:	e0fffb17 	ldw	r3,-20(fp)
    ef5c:	e0bfff17 	ldw	r2,-4(fp)
    ef60:	1880010e 	bge	r3,r2,ef68 <alt_epcs_flash_write+0x11c>
    ef64:	1805883a 	mov	r2,r3
    ef68:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    ef6c:	e0bffb17 	ldw	r2,-20(fp)
    ef70:	e13ffc17 	ldw	r4,-16(fp)
    ef74:	e17ffe17 	ldw	r5,-8(fp)
    ef78:	e1bffd17 	ldw	r6,-12(fp)
    ef7c:	100f883a 	mov	r7,r2
    ef80:	000ed640 	call	ed64 <alt_epcs_flash_memcmp>
    ef84:	10001226 	beq	r2,zero,efd0 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    ef88:	e0bffc17 	ldw	r2,-16(fp)
    ef8c:	10800817 	ldw	r2,32(r2)
    ef90:	e13ffc17 	ldw	r4,-16(fp)
    ef94:	e17ffa17 	ldw	r5,-24(fp)
    ef98:	103ee83a 	callr	r2
    ef9c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
    efa0:	e0bff717 	ldw	r2,-36(fp)
    efa4:	10000a1e 	bne	r2,zero,efd0 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
    efa8:	e0bffc17 	ldw	r2,-16(fp)
    efac:	10800917 	ldw	r2,36(r2)
    efb0:	e0fffb17 	ldw	r3,-20(fp)
    efb4:	d8c00015 	stw	r3,0(sp)
    efb8:	e13ffc17 	ldw	r4,-16(fp)
    efbc:	e17ffa17 	ldw	r5,-24(fp)
    efc0:	e1bffd17 	ldw	r6,-12(fp)
    efc4:	e1fffe17 	ldw	r7,-8(fp)
    efc8:	103ee83a 	callr	r2
    efcc:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    efd0:	e0ffff17 	ldw	r3,-4(fp)
    efd4:	e0bffb17 	ldw	r2,-20(fp)
    efd8:	18802e26 	beq	r3,r2,f094 <alt_epcs_flash_write+0x248>
    efdc:	e0bff717 	ldw	r2,-36(fp)
    efe0:	10002c1e 	bne	r2,zero,f094 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
    efe4:	e0ffff17 	ldw	r3,-4(fp)
    efe8:	e0bffb17 	ldw	r2,-20(fp)
    efec:	1885c83a 	sub	r2,r3,r2
    eff0:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    eff4:	e0fffc17 	ldw	r3,-16(fp)
    eff8:	e0bff817 	ldw	r2,-32(fp)
    effc:	10800104 	addi	r2,r2,4
    f000:	1004913a 	slli	r2,r2,4
    f004:	1885883a 	add	r2,r3,r2
    f008:	10c00017 	ldw	r3,0(r2)
    f00c:	e0bffa17 	ldw	r2,-24(fp)
    f010:	1885883a 	add	r2,r3,r2
    f014:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    f018:	e0bffb17 	ldw	r2,-20(fp)
    f01c:	e0fffe17 	ldw	r3,-8(fp)
    f020:	1885883a 	add	r2,r3,r2
    f024:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    f028:	e0fffc17 	ldw	r3,-16(fp)
    f02c:	e0bff817 	ldw	r2,-32(fp)
    f030:	10800104 	addi	r2,r2,4
    f034:	1004913a 	slli	r2,r2,4
    f038:	1885883a 	add	r2,r3,r2
    f03c:	10800017 	ldw	r2,0(r2)
    f040:	e0fffa17 	ldw	r3,-24(fp)
    f044:	1885883a 	add	r2,r3,r2
    f048:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    f04c:	e0bff917 	ldw	r2,-28(fp)
    f050:	10800044 	addi	r2,r2,1
    f054:	e0bff915 	stw	r2,-28(fp)
    f058:	e0fffc17 	ldw	r3,-16(fp)
    f05c:	e0bff817 	ldw	r2,-32(fp)
    f060:	1004913a 	slli	r2,r2,4
    f064:	10800f04 	addi	r2,r2,60
    f068:	1885883a 	add	r2,r3,r2
    f06c:	10800017 	ldw	r2,0(r2)
    f070:	e0fff917 	ldw	r3,-28(fp)
    f074:	18bfa016 	blt	r3,r2,eef8 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    f078:	e0bff817 	ldw	r2,-32(fp)
    f07c:	10800044 	addi	r2,r2,1
    f080:	e0bff815 	stw	r2,-32(fp)
    f084:	e0bffc17 	ldw	r2,-16(fp)
    f088:	10800c17 	ldw	r2,48(r2)
    f08c:	e0fff817 	ldw	r3,-32(fp)
    f090:	18bf7916 	blt	r3,r2,ee78 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    f094:	e0bff717 	ldw	r2,-36(fp)
}
    f098:	e037883a 	mov	sp,fp
    f09c:	dfc00117 	ldw	ra,4(sp)
    f0a0:	df000017 	ldw	fp,0(sp)
    f0a4:	dec00204 	addi	sp,sp,8
    f0a8:	f800283a 	ret

0000f0ac <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    f0ac:	defffa04 	addi	sp,sp,-24
    f0b0:	df000515 	stw	fp,20(sp)
    f0b4:	df000504 	addi	fp,sp,20
    f0b8:	e13ffd15 	stw	r4,-12(fp)
    f0bc:	e17ffe15 	stw	r5,-8(fp)
    f0c0:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    f0c4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    f0c8:	e0bffd17 	ldw	r2,-12(fp)
    f0cc:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
    f0d0:	e0bffc17 	ldw	r2,-16(fp)
    f0d4:	10c00c17 	ldw	r3,48(r2)
    f0d8:	e0bfff17 	ldw	r2,-4(fp)
    f0dc:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    f0e0:	e0bffc17 	ldw	r2,-16(fp)
    f0e4:	10800c17 	ldw	r2,48(r2)
    f0e8:	1000031e 	bne	r2,zero,f0f8 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
    f0ec:	00bffec4 	movi	r2,-5
    f0f0:	e0bffb15 	stw	r2,-20(fp)
    f0f4:	00000b06 	br	f124 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    f0f8:	e0bffc17 	ldw	r2,-16(fp)
    f0fc:	10800c17 	ldw	r2,48(r2)
    f100:	10800250 	cmplti	r2,r2,9
    f104:	1000031e 	bne	r2,zero,f114 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
    f108:	00bffd04 	movi	r2,-12
    f10c:	e0bffb15 	stw	r2,-20(fp)
    f110:	00000406 	br	f124 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
    f114:	e0bffc17 	ldw	r2,-16(fp)
    f118:	10c00d04 	addi	r3,r2,52
    f11c:	e0bffe17 	ldw	r2,-8(fp)
    f120:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    f124:	e0bffb17 	ldw	r2,-20(fp)
}
    f128:	e037883a 	mov	sp,fp
    f12c:	df000017 	ldw	fp,0(sp)
    f130:	dec00104 	addi	sp,sp,4
    f134:	f800283a 	ret

0000f138 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    f138:	defff904 	addi	sp,sp,-28
    f13c:	df000615 	stw	fp,24(sp)
    f140:	df000604 	addi	fp,sp,24
    f144:	e13ffe15 	stw	r4,-8(fp)
    f148:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    f14c:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    f150:	e0bffe17 	ldw	r2,-8(fp)
    f154:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    f158:	e0bffb17 	ldw	r2,-20(fp)
    f15c:	10800c17 	ldw	r2,48(r2)
    f160:	10bfffc4 	addi	r2,r2,-1
    f164:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f168:	e0fffb17 	ldw	r3,-20(fp)
    f16c:	e0bffc17 	ldw	r2,-16(fp)
    f170:	1004913a 	slli	r2,r2,4
    f174:	10800d04 	addi	r2,r2,52
    f178:	1885883a 	add	r2,r3,r2
    f17c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f180:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    f184:	e13ffb17 	ldw	r4,-20(fp)
    f188:	e0bffc17 	ldw	r2,-16(fp)
    f18c:	1004913a 	slli	r2,r2,4
    f190:	10800e04 	addi	r2,r2,56
    f194:	2085883a 	add	r2,r4,r2
    f198:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f19c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    f1a0:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    f1a4:	e0bfff17 	ldw	r2,-4(fp)
    f1a8:	e0fffd17 	ldw	r3,-12(fp)
    f1ac:	1880022e 	bgeu	r3,r2,f1b8 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    f1b0:	00bffec4 	movi	r2,-5
    f1b4:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
    f1b8:	e0bffa17 	ldw	r2,-24(fp)
}
    f1bc:	e037883a 	mov	sp,fp
    f1c0:	df000017 	ldw	fp,0(sp)
    f1c4:	dec00104 	addi	sp,sp,4
    f1c8:	f800283a 	ret

0000f1cc <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    f1cc:	defffa04 	addi	sp,sp,-24
    f1d0:	dfc00515 	stw	ra,20(sp)
    f1d4:	df000415 	stw	fp,16(sp)
    f1d8:	df000404 	addi	fp,sp,16
    f1dc:	e13ffe15 	stw	r4,-8(fp)
    f1e0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    f1e4:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    f1e8:	e0bffe17 	ldw	r2,-8(fp)
    f1ec:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    f1f0:	e13ffe17 	ldw	r4,-8(fp)
    f1f4:	e17fff17 	ldw	r5,-4(fp)
    f1f8:	000f1380 	call	f138 <alt_epcs_test_address>
    f1fc:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
    f200:	e0bffc17 	ldw	r2,-16(fp)
    f204:	10000816 	blt	r2,zero,f228 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    f208:	e0bffd17 	ldw	r2,-12(fp)
    f20c:	11002e17 	ldw	r4,184(r2)
    f210:	e0ffff17 	ldw	r3,-4(fp)
    f214:	e0bffd17 	ldw	r2,-12(fp)
    f218:	10803217 	ldw	r2,200(r2)
    f21c:	180b883a 	mov	r5,r3
    f220:	100d883a 	mov	r6,r2
    f224:	00108dc0 	call	108dc <epcs_sector_erase>
  }
  return ret_code;
    f228:	e0bffc17 	ldw	r2,-16(fp)
}
    f22c:	e037883a 	mov	sp,fp
    f230:	dfc00117 	ldw	ra,4(sp)
    f234:	df000017 	ldw	fp,0(sp)
    f238:	dec00204 	addi	sp,sp,8
    f23c:	f800283a 	ret

0000f240 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    f240:	defff404 	addi	sp,sp,-48
    f244:	dfc00b15 	stw	ra,44(sp)
    f248:	df000a15 	stw	fp,40(sp)
    f24c:	df000a04 	addi	fp,sp,40
    f250:	e13ffc15 	stw	r4,-16(fp)
    f254:	e17ffd15 	stw	r5,-12(fp)
    f258:	e1bffe15 	stw	r6,-8(fp)
    f25c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    f260:	e0bffc17 	ldw	r2,-16(fp)
    f264:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    f268:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    f26c:	e13ffc17 	ldw	r4,-16(fp)
    f270:	e17ffe17 	ldw	r5,-8(fp)
    f274:	000f1380 	call	f138 <alt_epcs_test_address>
    f278:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    f27c:	e0bff917 	ldw	r2,-28(fp)
    f280:	10002916 	blt	r2,zero,f328 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    f284:	00002606 	br	f320 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    f288:	e0bff817 	ldw	r2,-32(fp)
    f28c:	10c03117 	ldw	r3,196(r2)
    f290:	e0bffe17 	ldw	r2,-8(fp)
    f294:	1887883a 	add	r3,r3,r2
    f298:	e0bff817 	ldw	r2,-32(fp)
    f29c:	10803117 	ldw	r2,196(r2)
    f2a0:	0085c83a 	sub	r2,zero,r2
    f2a4:	1884703a 	and	r2,r3,r2
    f2a8:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    f2ac:	e0fffa17 	ldw	r3,-24(fp)
    f2b0:	e0bffe17 	ldw	r2,-8(fp)
    f2b4:	1885c83a 	sub	r2,r3,r2
    f2b8:	e0c00217 	ldw	r3,8(fp)
    f2bc:	1880010e 	bge	r3,r2,f2c4 <alt_epcs_flash_write_block+0x84>
    f2c0:	1805883a 	mov	r2,r3
    f2c4:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    f2c8:	e0bff817 	ldw	r2,-32(fp)
    f2cc:	11002e17 	ldw	r4,184(r2)
    f2d0:	e0bff717 	ldw	r2,-36(fp)
    f2d4:	e0ffff17 	ldw	r3,-4(fp)
    f2d8:	1887883a 	add	r3,r3,r2
    f2dc:	e0bff817 	ldw	r2,-32(fp)
    f2e0:	10803217 	ldw	r2,200(r2)
    f2e4:	d8800015 	stw	r2,0(sp)
    f2e8:	e17ffe17 	ldw	r5,-8(fp)
    f2ec:	180d883a 	mov	r6,r3
    f2f0:	e1fffb17 	ldw	r7,-20(fp)
    f2f4:	0010b800 	call	10b80 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    f2f8:	e0c00217 	ldw	r3,8(fp)
    f2fc:	e0bffb17 	ldw	r2,-20(fp)
    f300:	1885c83a 	sub	r2,r3,r2
    f304:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    f308:	e0fff717 	ldw	r3,-36(fp)
    f30c:	e0bffb17 	ldw	r2,-20(fp)
    f310:	1885883a 	add	r2,r3,r2
    f314:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    f318:	e0bffa17 	ldw	r2,-24(fp)
    f31c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    f320:	e0800217 	ldw	r2,8(fp)
    f324:	103fd81e 	bne	r2,zero,f288 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    f328:	e0bff917 	ldw	r2,-28(fp)
}
    f32c:	e037883a 	mov	sp,fp
    f330:	dfc00117 	ldw	ra,4(sp)
    f334:	df000017 	ldw	fp,0(sp)
    f338:	dec00204 	addi	sp,sp,8
    f33c:	f800283a 	ret

0000f340 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    f340:	defff704 	addi	sp,sp,-36
    f344:	dfc00815 	stw	ra,32(sp)
    f348:	df000715 	stw	fp,28(sp)
    f34c:	df000704 	addi	fp,sp,28
    f350:	e13ffc15 	stw	r4,-16(fp)
    f354:	e17ffd15 	stw	r5,-12(fp)
    f358:	e1bffe15 	stw	r6,-8(fp)
    f35c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    f360:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    f364:	e0bffc17 	ldw	r2,-16(fp)
    f368:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    f36c:	e13ffc17 	ldw	r4,-16(fp)
    f370:	e17ffd17 	ldw	r5,-12(fp)
    f374:	000f1380 	call	f138 <alt_epcs_test_address>
    f378:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
    f37c:	e0bffa17 	ldw	r2,-24(fp)
    f380:	10000f16 	blt	r2,zero,f3c0 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    f384:	e0bffb17 	ldw	r2,-20(fp)
    f388:	10c02e17 	ldw	r3,184(r2)
    f38c:	e0bffb17 	ldw	r2,-20(fp)
    f390:	10803217 	ldw	r2,200(r2)
    f394:	d8800015 	stw	r2,0(sp)
    f398:	1809883a 	mov	r4,r3
    f39c:	e17ffd17 	ldw	r5,-12(fp)
    f3a0:	e1bffe17 	ldw	r6,-8(fp)
    f3a4:	e1ffff17 	ldw	r7,-4(fp)
    f3a8:	00109d40 	call	109d4 <epcs_read_buffer>
    f3ac:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    f3b0:	e0fffa17 	ldw	r3,-24(fp)
    f3b4:	e0bfff17 	ldw	r2,-4(fp)
    f3b8:	1880011e 	bne	r3,r2,f3c0 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    f3bc:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
    f3c0:	e0bffa17 	ldw	r2,-24(fp)
}
    f3c4:	e037883a 	mov	sp,fp
    f3c8:	dfc00117 	ldw	ra,4(sp)
    f3cc:	df000017 	ldw	fp,0(sp)
    f3d0:	dec00204 	addi	sp,sp,8
    f3d4:	f800283a 	ret

0000f3d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f3d8:	defffa04 	addi	sp,sp,-24
    f3dc:	dfc00515 	stw	ra,20(sp)
    f3e0:	df000415 	stw	fp,16(sp)
    f3e4:	df000404 	addi	fp,sp,16
    f3e8:	e13ffd15 	stw	r4,-12(fp)
    f3ec:	e17ffe15 	stw	r5,-8(fp)
    f3f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f3f4:	e0bffd17 	ldw	r2,-12(fp)
    f3f8:	10800017 	ldw	r2,0(r2)
    f3fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f400:	e0bffc17 	ldw	r2,-16(fp)
    f404:	10c00a04 	addi	r3,r2,40
    f408:	e0bffd17 	ldw	r2,-12(fp)
    f40c:	10800217 	ldw	r2,8(r2)
    f410:	1809883a 	mov	r4,r3
    f414:	e17ffe17 	ldw	r5,-8(fp)
    f418:	e1bfff17 	ldw	r6,-4(fp)
    f41c:	100f883a 	mov	r7,r2
    f420:	000fa000 	call	fa00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f424:	e037883a 	mov	sp,fp
    f428:	dfc00117 	ldw	ra,4(sp)
    f42c:	df000017 	ldw	fp,0(sp)
    f430:	dec00204 	addi	sp,sp,8
    f434:	f800283a 	ret

0000f438 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f438:	defffa04 	addi	sp,sp,-24
    f43c:	dfc00515 	stw	ra,20(sp)
    f440:	df000415 	stw	fp,16(sp)
    f444:	df000404 	addi	fp,sp,16
    f448:	e13ffd15 	stw	r4,-12(fp)
    f44c:	e17ffe15 	stw	r5,-8(fp)
    f450:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f454:	e0bffd17 	ldw	r2,-12(fp)
    f458:	10800017 	ldw	r2,0(r2)
    f45c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f460:	e0bffc17 	ldw	r2,-16(fp)
    f464:	10c00a04 	addi	r3,r2,40
    f468:	e0bffd17 	ldw	r2,-12(fp)
    f46c:	10800217 	ldw	r2,8(r2)
    f470:	1809883a 	mov	r4,r3
    f474:	e17ffe17 	ldw	r5,-8(fp)
    f478:	e1bfff17 	ldw	r6,-4(fp)
    f47c:	100f883a 	mov	r7,r2
    f480:	000fc0c0 	call	fc0c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f484:	e037883a 	mov	sp,fp
    f488:	dfc00117 	ldw	ra,4(sp)
    f48c:	df000017 	ldw	fp,0(sp)
    f490:	dec00204 	addi	sp,sp,8
    f494:	f800283a 	ret

0000f498 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f498:	defffc04 	addi	sp,sp,-16
    f49c:	dfc00315 	stw	ra,12(sp)
    f4a0:	df000215 	stw	fp,8(sp)
    f4a4:	df000204 	addi	fp,sp,8
    f4a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f4ac:	e0bfff17 	ldw	r2,-4(fp)
    f4b0:	10800017 	ldw	r2,0(r2)
    f4b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f4b8:	e0bffe17 	ldw	r2,-8(fp)
    f4bc:	10c00a04 	addi	r3,r2,40
    f4c0:	e0bfff17 	ldw	r2,-4(fp)
    f4c4:	10800217 	ldw	r2,8(r2)
    f4c8:	1809883a 	mov	r4,r3
    f4cc:	100b883a 	mov	r5,r2
    f4d0:	000f8ac0 	call	f8ac <altera_avalon_jtag_uart_close>
}
    f4d4:	e037883a 	mov	sp,fp
    f4d8:	dfc00117 	ldw	ra,4(sp)
    f4dc:	df000017 	ldw	fp,0(sp)
    f4e0:	dec00204 	addi	sp,sp,8
    f4e4:	f800283a 	ret

0000f4e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f4e8:	defffa04 	addi	sp,sp,-24
    f4ec:	dfc00515 	stw	ra,20(sp)
    f4f0:	df000415 	stw	fp,16(sp)
    f4f4:	df000404 	addi	fp,sp,16
    f4f8:	e13ffd15 	stw	r4,-12(fp)
    f4fc:	e17ffe15 	stw	r5,-8(fp)
    f500:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f504:	e0bffd17 	ldw	r2,-12(fp)
    f508:	10800017 	ldw	r2,0(r2)
    f50c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f510:	e0bffc17 	ldw	r2,-16(fp)
    f514:	10800a04 	addi	r2,r2,40
    f518:	1009883a 	mov	r4,r2
    f51c:	e17ffe17 	ldw	r5,-8(fp)
    f520:	e1bfff17 	ldw	r6,-4(fp)
    f524:	000f9140 	call	f914 <altera_avalon_jtag_uart_ioctl>
}
    f528:	e037883a 	mov	sp,fp
    f52c:	dfc00117 	ldw	ra,4(sp)
    f530:	df000017 	ldw	fp,0(sp)
    f534:	dec00204 	addi	sp,sp,8
    f538:	f800283a 	ret

0000f53c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f53c:	defffa04 	addi	sp,sp,-24
    f540:	dfc00515 	stw	ra,20(sp)
    f544:	df000415 	stw	fp,16(sp)
    f548:	df000404 	addi	fp,sp,16
    f54c:	e13ffd15 	stw	r4,-12(fp)
    f550:	e17ffe15 	stw	r5,-8(fp)
    f554:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f558:	e0bffd17 	ldw	r2,-12(fp)
    f55c:	00c00044 	movi	r3,1
    f560:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f564:	e0bffd17 	ldw	r2,-12(fp)
    f568:	10800017 	ldw	r2,0(r2)
    f56c:	10800104 	addi	r2,r2,4
    f570:	1007883a 	mov	r3,r2
    f574:	e0bffd17 	ldw	r2,-12(fp)
    f578:	10800817 	ldw	r2,32(r2)
    f57c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f580:	e0fffe17 	ldw	r3,-8(fp)
    f584:	e0bfff17 	ldw	r2,-4(fp)
    f588:	d8000015 	stw	zero,0(sp)
    f58c:	1809883a 	mov	r4,r3
    f590:	100b883a 	mov	r5,r2
    f594:	01800074 	movhi	r6,1
    f598:	31bd8004 	addi	r6,r6,-2560
    f59c:	e1fffd17 	ldw	r7,-12(fp)
    f5a0:	00111e00 	call	111e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f5a4:	e0bffd17 	ldw	r2,-12(fp)
    f5a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f5ac:	e0bffd17 	ldw	r2,-12(fp)
    f5b0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f5b4:	00800074 	movhi	r2,1
    f5b8:	10919704 	addi	r2,r2,18012
    f5bc:	10800017 	ldw	r2,0(r2)
    f5c0:	1809883a 	mov	r4,r3
    f5c4:	100b883a 	mov	r5,r2
    f5c8:	01800074 	movhi	r6,1
    f5cc:	31be0104 	addi	r6,r6,-2044
    f5d0:	e1fffd17 	ldw	r7,-12(fp)
    f5d4:	0010e3c0 	call	10e3c <alt_alarm_start>
    f5d8:	1000040e 	bge	r2,zero,f5ec <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f5dc:	e0fffd17 	ldw	r3,-12(fp)
    f5e0:	00a00034 	movhi	r2,32768
    f5e4:	10bfffc4 	addi	r2,r2,-1
    f5e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f5ec:	e037883a 	mov	sp,fp
    f5f0:	dfc00117 	ldw	ra,4(sp)
    f5f4:	df000017 	ldw	fp,0(sp)
    f5f8:	dec00204 	addi	sp,sp,8
    f5fc:	f800283a 	ret

0000f600 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f600:	defff804 	addi	sp,sp,-32
    f604:	df000715 	stw	fp,28(sp)
    f608:	df000704 	addi	fp,sp,28
    f60c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f610:	e0bfff17 	ldw	r2,-4(fp)
    f614:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f618:	e0bffb17 	ldw	r2,-20(fp)
    f61c:	10800017 	ldw	r2,0(r2)
    f620:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f624:	e0bffc17 	ldw	r2,-16(fp)
    f628:	10800104 	addi	r2,r2,4
    f62c:	10800037 	ldwio	r2,0(r2)
    f630:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f634:	e0bffd17 	ldw	r2,-12(fp)
    f638:	1080c00c 	andi	r2,r2,768
    f63c:	1000011e 	bne	r2,zero,f644 <altera_avalon_jtag_uart_irq+0x44>
      break;
    f640:	00006c06 	br	f7f4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f644:	e0bffd17 	ldw	r2,-12(fp)
    f648:	1080400c 	andi	r2,r2,256
    f64c:	10003426 	beq	r2,zero,f720 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f650:	00800074 	movhi	r2,1
    f654:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f658:	e0bffb17 	ldw	r2,-20(fp)
    f65c:	10800a17 	ldw	r2,40(r2)
    f660:	10800044 	addi	r2,r2,1
    f664:	1081ffcc 	andi	r2,r2,2047
    f668:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f66c:	e0bffb17 	ldw	r2,-20(fp)
    f670:	10c00b17 	ldw	r3,44(r2)
    f674:	e0bffe17 	ldw	r2,-8(fp)
    f678:	1880011e 	bne	r3,r2,f680 <altera_avalon_jtag_uart_irq+0x80>
          break;
    f67c:	00001606 	br	f6d8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f680:	e0bffc17 	ldw	r2,-16(fp)
    f684:	10800037 	ldwio	r2,0(r2)
    f688:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f68c:	e0bff917 	ldw	r2,-28(fp)
    f690:	10a0000c 	andi	r2,r2,32768
    f694:	1000011e 	bne	r2,zero,f69c <altera_avalon_jtag_uart_irq+0x9c>
          break;
    f698:	00000f06 	br	f6d8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f69c:	e0bffb17 	ldw	r2,-20(fp)
    f6a0:	10800a17 	ldw	r2,40(r2)
    f6a4:	e0fff917 	ldw	r3,-28(fp)
    f6a8:	1809883a 	mov	r4,r3
    f6ac:	e0fffb17 	ldw	r3,-20(fp)
    f6b0:	1885883a 	add	r2,r3,r2
    f6b4:	10800e04 	addi	r2,r2,56
    f6b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f6bc:	e0bffb17 	ldw	r2,-20(fp)
    f6c0:	10800a17 	ldw	r2,40(r2)
    f6c4:	10800044 	addi	r2,r2,1
    f6c8:	10c1ffcc 	andi	r3,r2,2047
    f6cc:	e0bffb17 	ldw	r2,-20(fp)
    f6d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f6d4:	003fe006 	br	f658 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f6d8:	e0bff917 	ldw	r2,-28(fp)
    f6dc:	10bfffec 	andhi	r2,r2,65535
    f6e0:	10000f26 	beq	r2,zero,f720 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f6e4:	e0bffb17 	ldw	r2,-20(fp)
    f6e8:	10c00817 	ldw	r3,32(r2)
    f6ec:	00bfff84 	movi	r2,-2
    f6f0:	1886703a 	and	r3,r3,r2
    f6f4:	e0bffb17 	ldw	r2,-20(fp)
    f6f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f6fc:	e0bffc17 	ldw	r2,-16(fp)
    f700:	10800104 	addi	r2,r2,4
    f704:	1007883a 	mov	r3,r2
    f708:	e0bffb17 	ldw	r2,-20(fp)
    f70c:	10800817 	ldw	r2,32(r2)
    f710:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f714:	e0bffc17 	ldw	r2,-16(fp)
    f718:	10800104 	addi	r2,r2,4
    f71c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f720:	e0bffd17 	ldw	r2,-12(fp)
    f724:	1080800c 	andi	r2,r2,512
    f728:	10003126 	beq	r2,zero,f7f0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f72c:	e0bffd17 	ldw	r2,-12(fp)
    f730:	1004d43a 	srli	r2,r2,16
    f734:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f738:	00001406 	br	f78c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f73c:	e0bffc17 	ldw	r2,-16(fp)
    f740:	e0fffb17 	ldw	r3,-20(fp)
    f744:	18c00d17 	ldw	r3,52(r3)
    f748:	e13ffb17 	ldw	r4,-20(fp)
    f74c:	20c7883a 	add	r3,r4,r3
    f750:	18c20e04 	addi	r3,r3,2104
    f754:	18c00003 	ldbu	r3,0(r3)
    f758:	18c03fcc 	andi	r3,r3,255
    f75c:	18c0201c 	xori	r3,r3,128
    f760:	18ffe004 	addi	r3,r3,-128
    f764:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f768:	e0bffb17 	ldw	r2,-20(fp)
    f76c:	10800d17 	ldw	r2,52(r2)
    f770:	10800044 	addi	r2,r2,1
    f774:	10c1ffcc 	andi	r3,r2,2047
    f778:	e0bffb17 	ldw	r2,-20(fp)
    f77c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f780:	e0bffa17 	ldw	r2,-24(fp)
    f784:	10bfffc4 	addi	r2,r2,-1
    f788:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f78c:	e0bffa17 	ldw	r2,-24(fp)
    f790:	10000526 	beq	r2,zero,f7a8 <altera_avalon_jtag_uart_irq+0x1a8>
    f794:	e0bffb17 	ldw	r2,-20(fp)
    f798:	10c00d17 	ldw	r3,52(r2)
    f79c:	e0bffb17 	ldw	r2,-20(fp)
    f7a0:	10800c17 	ldw	r2,48(r2)
    f7a4:	18bfe51e 	bne	r3,r2,f73c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f7a8:	e0bffa17 	ldw	r2,-24(fp)
    f7ac:	10001026 	beq	r2,zero,f7f0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f7b0:	e0bffb17 	ldw	r2,-20(fp)
    f7b4:	10c00817 	ldw	r3,32(r2)
    f7b8:	00bfff44 	movi	r2,-3
    f7bc:	1886703a 	and	r3,r3,r2
    f7c0:	e0bffb17 	ldw	r2,-20(fp)
    f7c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f7c8:	e0bffb17 	ldw	r2,-20(fp)
    f7cc:	10800017 	ldw	r2,0(r2)
    f7d0:	10800104 	addi	r2,r2,4
    f7d4:	1007883a 	mov	r3,r2
    f7d8:	e0bffb17 	ldw	r2,-20(fp)
    f7dc:	10800817 	ldw	r2,32(r2)
    f7e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f7e4:	e0bffc17 	ldw	r2,-16(fp)
    f7e8:	10800104 	addi	r2,r2,4
    f7ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f7f0:	003f8c06 	br	f624 <altera_avalon_jtag_uart_irq+0x24>
}
    f7f4:	e037883a 	mov	sp,fp
    f7f8:	df000017 	ldw	fp,0(sp)
    f7fc:	dec00104 	addi	sp,sp,4
    f800:	f800283a 	ret

0000f804 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f804:	defff804 	addi	sp,sp,-32
    f808:	df000715 	stw	fp,28(sp)
    f80c:	df000704 	addi	fp,sp,28
    f810:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f814:	e0bffb17 	ldw	r2,-20(fp)
    f818:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f81c:	e0bff917 	ldw	r2,-28(fp)
    f820:	10800017 	ldw	r2,0(r2)
    f824:	10800104 	addi	r2,r2,4
    f828:	10800037 	ldwio	r2,0(r2)
    f82c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f830:	e0bffa17 	ldw	r2,-24(fp)
    f834:	1081000c 	andi	r2,r2,1024
    f838:	10000b26 	beq	r2,zero,f868 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f83c:	e0bff917 	ldw	r2,-28(fp)
    f840:	10800017 	ldw	r2,0(r2)
    f844:	10800104 	addi	r2,r2,4
    f848:	1007883a 	mov	r3,r2
    f84c:	e0bff917 	ldw	r2,-28(fp)
    f850:	10800817 	ldw	r2,32(r2)
    f854:	10810014 	ori	r2,r2,1024
    f858:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f85c:	e0bff917 	ldw	r2,-28(fp)
    f860:	10000915 	stw	zero,36(r2)
    f864:	00000a06 	br	f890 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f868:	e0bff917 	ldw	r2,-28(fp)
    f86c:	10c00917 	ldw	r3,36(r2)
    f870:	00a00034 	movhi	r2,32768
    f874:	10bfff04 	addi	r2,r2,-4
    f878:	10c00536 	bltu	r2,r3,f890 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f87c:	e0bff917 	ldw	r2,-28(fp)
    f880:	10800917 	ldw	r2,36(r2)
    f884:	10c00044 	addi	r3,r2,1
    f888:	e0bff917 	ldw	r2,-28(fp)
    f88c:	10c00915 	stw	r3,36(r2)
    f890:	00800074 	movhi	r2,1
    f894:	10919704 	addi	r2,r2,18012
    f898:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f89c:	e037883a 	mov	sp,fp
    f8a0:	df000017 	ldw	fp,0(sp)
    f8a4:	dec00104 	addi	sp,sp,4
    f8a8:	f800283a 	ret

0000f8ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f8ac:	defffd04 	addi	sp,sp,-12
    f8b0:	df000215 	stw	fp,8(sp)
    f8b4:	df000204 	addi	fp,sp,8
    f8b8:	e13ffe15 	stw	r4,-8(fp)
    f8bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f8c0:	00000506 	br	f8d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f8c4:	e0bfff17 	ldw	r2,-4(fp)
    f8c8:	1090000c 	andi	r2,r2,16384
    f8cc:	10000226 	beq	r2,zero,f8d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f8d0:	00bffd44 	movi	r2,-11
    f8d4:	00000b06 	br	f904 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f8d8:	e0bffe17 	ldw	r2,-8(fp)
    f8dc:	10c00d17 	ldw	r3,52(r2)
    f8e0:	e0bffe17 	ldw	r2,-8(fp)
    f8e4:	10800c17 	ldw	r2,48(r2)
    f8e8:	18800526 	beq	r3,r2,f900 <altera_avalon_jtag_uart_close+0x54>
    f8ec:	e0bffe17 	ldw	r2,-8(fp)
    f8f0:	10c00917 	ldw	r3,36(r2)
    f8f4:	e0bffe17 	ldw	r2,-8(fp)
    f8f8:	10800117 	ldw	r2,4(r2)
    f8fc:	18bff136 	bltu	r3,r2,f8c4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f900:	0005883a 	mov	r2,zero
}
    f904:	e037883a 	mov	sp,fp
    f908:	df000017 	ldw	fp,0(sp)
    f90c:	dec00104 	addi	sp,sp,4
    f910:	f800283a 	ret

0000f914 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f914:	defffa04 	addi	sp,sp,-24
    f918:	df000515 	stw	fp,20(sp)
    f91c:	df000504 	addi	fp,sp,20
    f920:	e13ffd15 	stw	r4,-12(fp)
    f924:	e17ffe15 	stw	r5,-8(fp)
    f928:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f92c:	00bff9c4 	movi	r2,-25
    f930:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f934:	e0bffe17 	ldw	r2,-8(fp)
    f938:	10da8060 	cmpeqi	r3,r2,27137
    f93c:	1800031e 	bne	r3,zero,f94c <altera_avalon_jtag_uart_ioctl+0x38>
    f940:	109a80a0 	cmpeqi	r2,r2,27138
    f944:	1000191e 	bne	r2,zero,f9ac <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    f948:	00002806 	br	f9ec <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f94c:	e0bffd17 	ldw	r2,-12(fp)
    f950:	10c00117 	ldw	r3,4(r2)
    f954:	00a00034 	movhi	r2,32768
    f958:	10bfffc4 	addi	r2,r2,-1
    f95c:	18801226 	beq	r3,r2,f9a8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    f960:	e0bfff17 	ldw	r2,-4(fp)
    f964:	10800017 	ldw	r2,0(r2)
    f968:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f96c:	e0bffc17 	ldw	r2,-16(fp)
    f970:	10800090 	cmplti	r2,r2,2
    f974:	1000061e 	bne	r2,zero,f990 <altera_avalon_jtag_uart_ioctl+0x7c>
    f978:	e0fffc17 	ldw	r3,-16(fp)
    f97c:	00a00034 	movhi	r2,32768
    f980:	10bfffc4 	addi	r2,r2,-1
    f984:	18800226 	beq	r3,r2,f990 <altera_avalon_jtag_uart_ioctl+0x7c>
    f988:	e0bffc17 	ldw	r2,-16(fp)
    f98c:	00000206 	br	f998 <altera_avalon_jtag_uart_ioctl+0x84>
    f990:	00a00034 	movhi	r2,32768
    f994:	10bfff84 	addi	r2,r2,-2
    f998:	e0fffd17 	ldw	r3,-12(fp)
    f99c:	18800115 	stw	r2,4(r3)
      rc = 0;
    f9a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f9a4:	00001106 	br	f9ec <altera_avalon_jtag_uart_ioctl+0xd8>
    f9a8:	00001006 	br	f9ec <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f9ac:	e0bffd17 	ldw	r2,-12(fp)
    f9b0:	10c00117 	ldw	r3,4(r2)
    f9b4:	00a00034 	movhi	r2,32768
    f9b8:	10bfffc4 	addi	r2,r2,-1
    f9bc:	18800a26 	beq	r3,r2,f9e8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f9c0:	e0bffd17 	ldw	r2,-12(fp)
    f9c4:	10c00917 	ldw	r3,36(r2)
    f9c8:	e0bffd17 	ldw	r2,-12(fp)
    f9cc:	10800117 	ldw	r2,4(r2)
    f9d0:	1885803a 	cmpltu	r2,r3,r2
    f9d4:	10c03fcc 	andi	r3,r2,255
    f9d8:	e0bfff17 	ldw	r2,-4(fp)
    f9dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f9e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f9e4:	00000006 	br	f9e8 <altera_avalon_jtag_uart_ioctl+0xd4>
    f9e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f9ec:	e0bffb17 	ldw	r2,-20(fp)
}
    f9f0:	e037883a 	mov	sp,fp
    f9f4:	df000017 	ldw	fp,0(sp)
    f9f8:	dec00104 	addi	sp,sp,4
    f9fc:	f800283a 	ret

0000fa00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fa00:	defff304 	addi	sp,sp,-52
    fa04:	dfc00c15 	stw	ra,48(sp)
    fa08:	df000b15 	stw	fp,44(sp)
    fa0c:	df000b04 	addi	fp,sp,44
    fa10:	e13ffc15 	stw	r4,-16(fp)
    fa14:	e17ffd15 	stw	r5,-12(fp)
    fa18:	e1bffe15 	stw	r6,-8(fp)
    fa1c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fa20:	e0bffd17 	ldw	r2,-12(fp)
    fa24:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fa28:	00004906 	br	fb50 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fa2c:	e0bffc17 	ldw	r2,-16(fp)
    fa30:	10800a17 	ldw	r2,40(r2)
    fa34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fa38:	e0bffc17 	ldw	r2,-16(fp)
    fa3c:	10800b17 	ldw	r2,44(r2)
    fa40:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fa44:	e0fff717 	ldw	r3,-36(fp)
    fa48:	e0bff817 	ldw	r2,-32(fp)
    fa4c:	18800536 	bltu	r3,r2,fa64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fa50:	e0fff717 	ldw	r3,-36(fp)
    fa54:	e0bff817 	ldw	r2,-32(fp)
    fa58:	1885c83a 	sub	r2,r3,r2
    fa5c:	e0bff615 	stw	r2,-40(fp)
    fa60:	00000406 	br	fa74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fa64:	00c20004 	movi	r3,2048
    fa68:	e0bff817 	ldw	r2,-32(fp)
    fa6c:	1885c83a 	sub	r2,r3,r2
    fa70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fa74:	e0bff617 	ldw	r2,-40(fp)
    fa78:	1000011e 	bne	r2,zero,fa80 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    fa7c:	00001d06 	br	faf4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    fa80:	e0fffe17 	ldw	r3,-8(fp)
    fa84:	e0bff617 	ldw	r2,-40(fp)
    fa88:	1880022e 	bgeu	r3,r2,fa94 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    fa8c:	e0bffe17 	ldw	r2,-8(fp)
    fa90:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fa94:	e0bff817 	ldw	r2,-32(fp)
    fa98:	10800e04 	addi	r2,r2,56
    fa9c:	e0fffc17 	ldw	r3,-16(fp)
    faa0:	1885883a 	add	r2,r3,r2
    faa4:	e13ff517 	ldw	r4,-44(fp)
    faa8:	100b883a 	mov	r5,r2
    faac:	e1bff617 	ldw	r6,-40(fp)
    fab0:	0006f180 	call	6f18 <memcpy>
      ptr   += n;
    fab4:	e0fff517 	ldw	r3,-44(fp)
    fab8:	e0bff617 	ldw	r2,-40(fp)
    fabc:	1885883a 	add	r2,r3,r2
    fac0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fac4:	e0fffe17 	ldw	r3,-8(fp)
    fac8:	e0bff617 	ldw	r2,-40(fp)
    facc:	1885c83a 	sub	r2,r3,r2
    fad0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fad4:	e0fff817 	ldw	r3,-32(fp)
    fad8:	e0bff617 	ldw	r2,-40(fp)
    fadc:	1885883a 	add	r2,r3,r2
    fae0:	10c1ffcc 	andi	r3,r2,2047
    fae4:	e0bffc17 	ldw	r2,-16(fp)
    fae8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    faec:	e0bffe17 	ldw	r2,-8(fp)
    faf0:	00bfce16 	blt	zero,r2,fa2c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    faf4:	e0fff517 	ldw	r3,-44(fp)
    faf8:	e0bffd17 	ldw	r2,-12(fp)
    fafc:	18800126 	beq	r3,r2,fb04 <altera_avalon_jtag_uart_read+0x104>
      break;
    fb00:	00001506 	br	fb58 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fb04:	e0bfff17 	ldw	r2,-4(fp)
    fb08:	1090000c 	andi	r2,r2,16384
    fb0c:	10000126 	beq	r2,zero,fb14 <altera_avalon_jtag_uart_read+0x114>
      break;
    fb10:	00001106 	br	fb58 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fb14:	0001883a 	nop
    fb18:	e0bffc17 	ldw	r2,-16(fp)
    fb1c:	10c00a17 	ldw	r3,40(r2)
    fb20:	e0bff717 	ldw	r2,-36(fp)
    fb24:	1880051e 	bne	r3,r2,fb3c <altera_avalon_jtag_uart_read+0x13c>
    fb28:	e0bffc17 	ldw	r2,-16(fp)
    fb2c:	10c00917 	ldw	r3,36(r2)
    fb30:	e0bffc17 	ldw	r2,-16(fp)
    fb34:	10800117 	ldw	r2,4(r2)
    fb38:	18bff736 	bltu	r3,r2,fb18 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fb3c:	e0bffc17 	ldw	r2,-16(fp)
    fb40:	10c00a17 	ldw	r3,40(r2)
    fb44:	e0bff717 	ldw	r2,-36(fp)
    fb48:	1880011e 	bne	r3,r2,fb50 <altera_avalon_jtag_uart_read+0x150>
      break;
    fb4c:	00000206 	br	fb58 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fb50:	e0bffe17 	ldw	r2,-8(fp)
    fb54:	00bfb516 	blt	zero,r2,fa2c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fb58:	e0fff517 	ldw	r3,-44(fp)
    fb5c:	e0bffd17 	ldw	r2,-12(fp)
    fb60:	18801826 	beq	r3,r2,fbc4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb64:	0005303a 	rdctl	r2,status
    fb68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb6c:	e0fffa17 	ldw	r3,-24(fp)
    fb70:	00bfff84 	movi	r2,-2
    fb74:	1884703a 	and	r2,r3,r2
    fb78:	1001703a 	wrctl	status,r2
  
  return context;
    fb7c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fb80:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fb84:	e0bffc17 	ldw	r2,-16(fp)
    fb88:	10800817 	ldw	r2,32(r2)
    fb8c:	10c00054 	ori	r3,r2,1
    fb90:	e0bffc17 	ldw	r2,-16(fp)
    fb94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fb98:	e0bffc17 	ldw	r2,-16(fp)
    fb9c:	10800017 	ldw	r2,0(r2)
    fba0:	10800104 	addi	r2,r2,4
    fba4:	1007883a 	mov	r3,r2
    fba8:	e0bffc17 	ldw	r2,-16(fp)
    fbac:	10800817 	ldw	r2,32(r2)
    fbb0:	18800035 	stwio	r2,0(r3)
    fbb4:	e0bff917 	ldw	r2,-28(fp)
    fbb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbbc:	e0bffb17 	ldw	r2,-20(fp)
    fbc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fbc4:	e0fff517 	ldw	r3,-44(fp)
    fbc8:	e0bffd17 	ldw	r2,-12(fp)
    fbcc:	18800426 	beq	r3,r2,fbe0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    fbd0:	e0fff517 	ldw	r3,-44(fp)
    fbd4:	e0bffd17 	ldw	r2,-12(fp)
    fbd8:	1885c83a 	sub	r2,r3,r2
    fbdc:	00000606 	br	fbf8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    fbe0:	e0bfff17 	ldw	r2,-4(fp)
    fbe4:	1090000c 	andi	r2,r2,16384
    fbe8:	10000226 	beq	r2,zero,fbf4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    fbec:	00bffd44 	movi	r2,-11
    fbf0:	00000106 	br	fbf8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    fbf4:	00bffec4 	movi	r2,-5
}
    fbf8:	e037883a 	mov	sp,fp
    fbfc:	dfc00117 	ldw	ra,4(sp)
    fc00:	df000017 	ldw	fp,0(sp)
    fc04:	dec00204 	addi	sp,sp,8
    fc08:	f800283a 	ret

0000fc0c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fc0c:	defff304 	addi	sp,sp,-52
    fc10:	dfc00c15 	stw	ra,48(sp)
    fc14:	df000b15 	stw	fp,44(sp)
    fc18:	df000b04 	addi	fp,sp,44
    fc1c:	e13ffc15 	stw	r4,-16(fp)
    fc20:	e17ffd15 	stw	r5,-12(fp)
    fc24:	e1bffe15 	stw	r6,-8(fp)
    fc28:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fc2c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fc30:	e0bffd17 	ldw	r2,-12(fp)
    fc34:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fc38:	00003806 	br	fd1c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fc3c:	e0bffc17 	ldw	r2,-16(fp)
    fc40:	10800c17 	ldw	r2,48(r2)
    fc44:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    fc48:	e0bffc17 	ldw	r2,-16(fp)
    fc4c:	10800d17 	ldw	r2,52(r2)
    fc50:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fc54:	e0fff817 	ldw	r3,-32(fp)
    fc58:	e0bff517 	ldw	r2,-44(fp)
    fc5c:	1880062e 	bgeu	r3,r2,fc78 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fc60:	e0fff517 	ldw	r3,-44(fp)
    fc64:	e0bff817 	ldw	r2,-32(fp)
    fc68:	1885c83a 	sub	r2,r3,r2
    fc6c:	10bfffc4 	addi	r2,r2,-1
    fc70:	e0bff615 	stw	r2,-40(fp)
    fc74:	00000b06 	br	fca4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fc78:	e0bff517 	ldw	r2,-44(fp)
    fc7c:	10000526 	beq	r2,zero,fc94 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fc80:	00c20004 	movi	r3,2048
    fc84:	e0bff817 	ldw	r2,-32(fp)
    fc88:	1885c83a 	sub	r2,r3,r2
    fc8c:	e0bff615 	stw	r2,-40(fp)
    fc90:	00000406 	br	fca4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fc94:	00c1ffc4 	movi	r3,2047
    fc98:	e0bff817 	ldw	r2,-32(fp)
    fc9c:	1885c83a 	sub	r2,r3,r2
    fca0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fca4:	e0bff617 	ldw	r2,-40(fp)
    fca8:	1000011e 	bne	r2,zero,fcb0 <altera_avalon_jtag_uart_write+0xa4>
        break;
    fcac:	00001d06 	br	fd24 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    fcb0:	e0fffe17 	ldw	r3,-8(fp)
    fcb4:	e0bff617 	ldw	r2,-40(fp)
    fcb8:	1880022e 	bgeu	r3,r2,fcc4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    fcbc:	e0bffe17 	ldw	r2,-8(fp)
    fcc0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fcc4:	e0bff817 	ldw	r2,-32(fp)
    fcc8:	10820e04 	addi	r2,r2,2104
    fccc:	e0fffc17 	ldw	r3,-16(fp)
    fcd0:	1885883a 	add	r2,r3,r2
    fcd4:	1009883a 	mov	r4,r2
    fcd8:	e17ffd17 	ldw	r5,-12(fp)
    fcdc:	e1bff617 	ldw	r6,-40(fp)
    fce0:	0006f180 	call	6f18 <memcpy>
      ptr   += n;
    fce4:	e0fffd17 	ldw	r3,-12(fp)
    fce8:	e0bff617 	ldw	r2,-40(fp)
    fcec:	1885883a 	add	r2,r3,r2
    fcf0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fcf4:	e0fffe17 	ldw	r3,-8(fp)
    fcf8:	e0bff617 	ldw	r2,-40(fp)
    fcfc:	1885c83a 	sub	r2,r3,r2
    fd00:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fd04:	e0fff817 	ldw	r3,-32(fp)
    fd08:	e0bff617 	ldw	r2,-40(fp)
    fd0c:	1885883a 	add	r2,r3,r2
    fd10:	10c1ffcc 	andi	r3,r2,2047
    fd14:	e0bffc17 	ldw	r2,-16(fp)
    fd18:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fd1c:	e0bffe17 	ldw	r2,-8(fp)
    fd20:	00bfc616 	blt	zero,r2,fc3c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd24:	0005303a 	rdctl	r2,status
    fd28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd2c:	e0fffa17 	ldw	r3,-24(fp)
    fd30:	00bfff84 	movi	r2,-2
    fd34:	1884703a 	and	r2,r3,r2
    fd38:	1001703a 	wrctl	status,r2
  
  return context;
    fd3c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fd40:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fd44:	e0bffc17 	ldw	r2,-16(fp)
    fd48:	10800817 	ldw	r2,32(r2)
    fd4c:	10c00094 	ori	r3,r2,2
    fd50:	e0bffc17 	ldw	r2,-16(fp)
    fd54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fd58:	e0bffc17 	ldw	r2,-16(fp)
    fd5c:	10800017 	ldw	r2,0(r2)
    fd60:	10800104 	addi	r2,r2,4
    fd64:	1007883a 	mov	r3,r2
    fd68:	e0bffc17 	ldw	r2,-16(fp)
    fd6c:	10800817 	ldw	r2,32(r2)
    fd70:	18800035 	stwio	r2,0(r3)
    fd74:	e0bff917 	ldw	r2,-28(fp)
    fd78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd7c:	e0bffb17 	ldw	r2,-20(fp)
    fd80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fd84:	e0bffe17 	ldw	r2,-8(fp)
    fd88:	0080120e 	bge	zero,r2,fdd4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    fd8c:	e0bfff17 	ldw	r2,-4(fp)
    fd90:	1090000c 	andi	r2,r2,16384
    fd94:	10000126 	beq	r2,zero,fd9c <altera_avalon_jtag_uart_write+0x190>
        break;
    fd98:	00001006 	br	fddc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fd9c:	0001883a 	nop
    fda0:	e0bffc17 	ldw	r2,-16(fp)
    fda4:	10c00d17 	ldw	r3,52(r2)
    fda8:	e0bff517 	ldw	r2,-44(fp)
    fdac:	1880051e 	bne	r3,r2,fdc4 <altera_avalon_jtag_uart_write+0x1b8>
    fdb0:	e0bffc17 	ldw	r2,-16(fp)
    fdb4:	10c00917 	ldw	r3,36(r2)
    fdb8:	e0bffc17 	ldw	r2,-16(fp)
    fdbc:	10800117 	ldw	r2,4(r2)
    fdc0:	18bff736 	bltu	r3,r2,fda0 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fdc4:	e0bffc17 	ldw	r2,-16(fp)
    fdc8:	10800917 	ldw	r2,36(r2)
    fdcc:	10000126 	beq	r2,zero,fdd4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    fdd0:	00000206 	br	fddc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    fdd4:	e0bffe17 	ldw	r2,-8(fp)
    fdd8:	00bf9716 	blt	zero,r2,fc38 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fddc:	e0fffd17 	ldw	r3,-12(fp)
    fde0:	e0bff717 	ldw	r2,-36(fp)
    fde4:	18800426 	beq	r3,r2,fdf8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    fde8:	e0fffd17 	ldw	r3,-12(fp)
    fdec:	e0bff717 	ldw	r2,-36(fp)
    fdf0:	1885c83a 	sub	r2,r3,r2
    fdf4:	00000606 	br	fe10 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    fdf8:	e0bfff17 	ldw	r2,-4(fp)
    fdfc:	1090000c 	andi	r2,r2,16384
    fe00:	10000226 	beq	r2,zero,fe0c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    fe04:	00bffd44 	movi	r2,-11
    fe08:	00000106 	br	fe10 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fe0c:	00bffec4 	movi	r2,-5
}
    fe10:	e037883a 	mov	sp,fp
    fe14:	dfc00117 	ldw	ra,4(sp)
    fe18:	df000017 	ldw	fp,0(sp)
    fe1c:	dec00204 	addi	sp,sp,8
    fe20:	f800283a 	ret

0000fe24 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fe24:	defffa04 	addi	sp,sp,-24
    fe28:	dfc00515 	stw	ra,20(sp)
    fe2c:	df000415 	stw	fp,16(sp)
    fe30:	df000404 	addi	fp,sp,16
    fe34:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fe38:	0007883a 	mov	r3,zero
    fe3c:	e0bfff17 	ldw	r2,-4(fp)
    fe40:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fe44:	e0bfff17 	ldw	r2,-4(fp)
    fe48:	10800104 	addi	r2,r2,4
    fe4c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe50:	0005303a 	rdctl	r2,status
    fe54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe58:	e0fffd17 	ldw	r3,-12(fp)
    fe5c:	00bfff84 	movi	r2,-2
    fe60:	1884703a 	and	r2,r3,r2
    fe64:	1001703a 	wrctl	status,r2
  
  return context;
    fe68:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fe6c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fe70:	00119440 	call	11944 <alt_tick>
    fe74:	e0bffc17 	ldw	r2,-16(fp)
    fe78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe7c:	e0bffe17 	ldw	r2,-8(fp)
    fe80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fe84:	e037883a 	mov	sp,fp
    fe88:	dfc00117 	ldw	ra,4(sp)
    fe8c:	df000017 	ldw	fp,0(sp)
    fe90:	dec00204 	addi	sp,sp,8
    fe94:	f800283a 	ret

0000fe98 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fe98:	defff804 	addi	sp,sp,-32
    fe9c:	dfc00715 	stw	ra,28(sp)
    fea0:	df000615 	stw	fp,24(sp)
    fea4:	df000604 	addi	fp,sp,24
    fea8:	e13ffc15 	stw	r4,-16(fp)
    feac:	e17ffd15 	stw	r5,-12(fp)
    feb0:	e1bffe15 	stw	r6,-8(fp)
    feb4:	e1ffff15 	stw	r7,-4(fp)
    feb8:	e0bfff17 	ldw	r2,-4(fp)
    febc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fec0:	00800074 	movhi	r2,1
    fec4:	10919704 	addi	r2,r2,18012
    fec8:	10800017 	ldw	r2,0(r2)
    fecc:	1000041e 	bne	r2,zero,fee0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    fed0:	00800074 	movhi	r2,1
    fed4:	10919704 	addi	r2,r2,18012
    fed8:	e0fffb17 	ldw	r3,-20(fp)
    fedc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fee0:	e0bffc17 	ldw	r2,-16(fp)
    fee4:	10800104 	addi	r2,r2,4
    fee8:	00c001c4 	movi	r3,7
    feec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fef0:	d8000015 	stw	zero,0(sp)
    fef4:	e13ffd17 	ldw	r4,-12(fp)
    fef8:	e17ffe17 	ldw	r5,-8(fp)
    fefc:	01800074 	movhi	r6,1
    ff00:	31bf8904 	addi	r6,r6,-476
    ff04:	e1fffc17 	ldw	r7,-16(fp)
    ff08:	00111e00 	call	111e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    ff0c:	e037883a 	mov	sp,fp
    ff10:	dfc00117 	ldw	ra,4(sp)
    ff14:	df000017 	ldw	fp,0(sp)
    ff18:	dec00204 	addi	sp,sp,8
    ff1c:	f800283a 	ret

0000ff20 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ff20:	defffa04 	addi	sp,sp,-24
    ff24:	dfc00515 	stw	ra,20(sp)
    ff28:	df000415 	stw	fp,16(sp)
    ff2c:	df000404 	addi	fp,sp,16
    ff30:	e13ffd15 	stw	r4,-12(fp)
    ff34:	e17ffe15 	stw	r5,-8(fp)
    ff38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    ff3c:	e0bffd17 	ldw	r2,-12(fp)
    ff40:	10800017 	ldw	r2,0(r2)
    ff44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    ff48:	e0bffc17 	ldw	r2,-16(fp)
    ff4c:	10c00a04 	addi	r3,r2,40
    ff50:	e0bffd17 	ldw	r2,-12(fp)
    ff54:	10800217 	ldw	r2,8(r2)
    ff58:	1809883a 	mov	r4,r3
    ff5c:	e17ffe17 	ldw	r5,-8(fp)
    ff60:	e1bfff17 	ldw	r6,-4(fp)
    ff64:	100f883a 	mov	r7,r2
    ff68:	00104380 	call	10438 <altera_avalon_uart_read>
      fd->fd_flags);
}
    ff6c:	e037883a 	mov	sp,fp
    ff70:	dfc00117 	ldw	ra,4(sp)
    ff74:	df000017 	ldw	fp,0(sp)
    ff78:	dec00204 	addi	sp,sp,8
    ff7c:	f800283a 	ret

0000ff80 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ff80:	defffa04 	addi	sp,sp,-24
    ff84:	dfc00515 	stw	ra,20(sp)
    ff88:	df000415 	stw	fp,16(sp)
    ff8c:	df000404 	addi	fp,sp,16
    ff90:	e13ffd15 	stw	r4,-12(fp)
    ff94:	e17ffe15 	stw	r5,-8(fp)
    ff98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    ff9c:	e0bffd17 	ldw	r2,-12(fp)
    ffa0:	10800017 	ldw	r2,0(r2)
    ffa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    ffa8:	e0bffc17 	ldw	r2,-16(fp)
    ffac:	10c00a04 	addi	r3,r2,40
    ffb0:	e0bffd17 	ldw	r2,-12(fp)
    ffb4:	10800217 	ldw	r2,8(r2)
    ffb8:	1809883a 	mov	r4,r3
    ffbc:	e17ffe17 	ldw	r5,-8(fp)
    ffc0:	e1bfff17 	ldw	r6,-4(fp)
    ffc4:	100f883a 	mov	r7,r2
    ffc8:	00106640 	call	10664 <altera_avalon_uart_write>
      fd->fd_flags);
}
    ffcc:	e037883a 	mov	sp,fp
    ffd0:	dfc00117 	ldw	ra,4(sp)
    ffd4:	df000017 	ldw	fp,0(sp)
    ffd8:	dec00204 	addi	sp,sp,8
    ffdc:	f800283a 	ret

0000ffe0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    ffe0:	defffc04 	addi	sp,sp,-16
    ffe4:	dfc00315 	stw	ra,12(sp)
    ffe8:	df000215 	stw	fp,8(sp)
    ffec:	df000204 	addi	fp,sp,8
    fff0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    fff4:	e0bfff17 	ldw	r2,-4(fp)
    fff8:	10800017 	ldw	r2,0(r2)
    fffc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   10000:	e0bffe17 	ldw	r2,-8(fp)
   10004:	10c00a04 	addi	r3,r2,40
   10008:	e0bfff17 	ldw	r2,-4(fp)
   1000c:	10800217 	ldw	r2,8(r2)
   10010:	1809883a 	mov	r4,r3
   10014:	100b883a 	mov	r5,r2
   10018:	00103940 	call	10394 <altera_avalon_uart_close>
}
   1001c:	e037883a 	mov	sp,fp
   10020:	dfc00117 	ldw	ra,4(sp)
   10024:	df000017 	ldw	fp,0(sp)
   10028:	dec00204 	addi	sp,sp,8
   1002c:	f800283a 	ret

00010030 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   10030:	defff804 	addi	sp,sp,-32
   10034:	dfc00715 	stw	ra,28(sp)
   10038:	df000615 	stw	fp,24(sp)
   1003c:	df000604 	addi	fp,sp,24
   10040:	e13ffd15 	stw	r4,-12(fp)
   10044:	e17ffe15 	stw	r5,-8(fp)
   10048:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   1004c:	e0bffd17 	ldw	r2,-12(fp)
   10050:	10800017 	ldw	r2,0(r2)
   10054:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   10058:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   1005c:	1000041e 	bne	r2,zero,10070 <altera_avalon_uart_init+0x40>
   10060:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   10064:	1000021e 	bne	r2,zero,10070 <altera_avalon_uart_init+0x40>
   10068:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   1006c:	10000226 	beq	r2,zero,10078 <altera_avalon_uart_init+0x48>
   10070:	00800044 	movi	r2,1
   10074:	00000106 	br	1007c <altera_avalon_uart_init+0x4c>
   10078:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1007c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   10080:	e0bffc17 	ldw	r2,-16(fp)
   10084:	10000f1e 	bne	r2,zero,100c4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   10088:	e0bffd17 	ldw	r2,-12(fp)
   1008c:	00c32004 	movi	r3,3200
   10090:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   10094:	e0bffb17 	ldw	r2,-20(fp)
   10098:	10800304 	addi	r2,r2,12
   1009c:	e0fffd17 	ldw	r3,-12(fp)
   100a0:	18c00117 	ldw	r3,4(r3)
   100a4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   100a8:	d8000015 	stw	zero,0(sp)
   100ac:	e13ffe17 	ldw	r4,-8(fp)
   100b0:	e17fff17 	ldw	r5,-4(fp)
   100b4:	01800074 	movhi	r6,1
   100b8:	31803604 	addi	r6,r6,216
   100bc:	e1fffd17 	ldw	r7,-12(fp)
   100c0:	00111e00 	call	111e0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   100c4:	e037883a 	mov	sp,fp
   100c8:	dfc00117 	ldw	ra,4(sp)
   100cc:	df000017 	ldw	fp,0(sp)
   100d0:	dec00204 	addi	sp,sp,8
   100d4:	f800283a 	ret

000100d8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   100d8:	defffa04 	addi	sp,sp,-24
   100dc:	dfc00515 	stw	ra,20(sp)
   100e0:	df000415 	stw	fp,16(sp)
   100e4:	df000404 	addi	fp,sp,16
   100e8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   100ec:	e0bfff17 	ldw	r2,-4(fp)
   100f0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   100f4:	e0bffc17 	ldw	r2,-16(fp)
   100f8:	10800017 	ldw	r2,0(r2)
   100fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   10100:	e0bffd17 	ldw	r2,-12(fp)
   10104:	10800204 	addi	r2,r2,8
   10108:	10800037 	ldwio	r2,0(r2)
   1010c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   10110:	e0bffd17 	ldw	r2,-12(fp)
   10114:	10800204 	addi	r2,r2,8
   10118:	0007883a 	mov	r3,zero
   1011c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   10120:	e0bffd17 	ldw	r2,-12(fp)
   10124:	10800204 	addi	r2,r2,8
   10128:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   1012c:	e0bffe17 	ldw	r2,-8(fp)
   10130:	1080200c 	andi	r2,r2,128
   10134:	10000326 	beq	r2,zero,10144 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   10138:	e13ffc17 	ldw	r4,-16(fp)
   1013c:	e17ffe17 	ldw	r5,-8(fp)
   10140:	00101700 	call	10170 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   10144:	e0bffe17 	ldw	r2,-8(fp)
   10148:	1081100c 	andi	r2,r2,1088
   1014c:	10000326 	beq	r2,zero,1015c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   10150:	e13ffc17 	ldw	r4,-16(fp)
   10154:	e17ffe17 	ldw	r5,-8(fp)
   10158:	00102500 	call	10250 <altera_avalon_uart_txirq>
  }
  

}
   1015c:	e037883a 	mov	sp,fp
   10160:	dfc00117 	ldw	ra,4(sp)
   10164:	df000017 	ldw	fp,0(sp)
   10168:	dec00204 	addi	sp,sp,8
   1016c:	f800283a 	ret

00010170 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   10170:	defffc04 	addi	sp,sp,-16
   10174:	df000315 	stw	fp,12(sp)
   10178:	df000304 	addi	fp,sp,12
   1017c:	e13ffe15 	stw	r4,-8(fp)
   10180:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	108000cc 	andi	r2,r2,3
   1018c:	10000126 	beq	r2,zero,10194 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   10190:	00002b06 	br	10240 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   10194:	e0bffe17 	ldw	r2,-8(fp)
   10198:	10800317 	ldw	r2,12(r2)
   1019c:	e0bffe17 	ldw	r2,-8(fp)
   101a0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   101a4:	e0bffe17 	ldw	r2,-8(fp)
   101a8:	10800317 	ldw	r2,12(r2)
   101ac:	10800044 	addi	r2,r2,1
   101b0:	10800fcc 	andi	r2,r2,63
   101b4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   101b8:	e0bffe17 	ldw	r2,-8(fp)
   101bc:	10800317 	ldw	r2,12(r2)
   101c0:	e0fffe17 	ldw	r3,-8(fp)
   101c4:	18c00017 	ldw	r3,0(r3)
   101c8:	18c00037 	ldwio	r3,0(r3)
   101cc:	1809883a 	mov	r4,r3
   101d0:	e0fffe17 	ldw	r3,-8(fp)
   101d4:	1885883a 	add	r2,r3,r2
   101d8:	10800704 	addi	r2,r2,28
   101dc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   101e0:	e0bffe17 	ldw	r2,-8(fp)
   101e4:	e0fffd17 	ldw	r3,-12(fp)
   101e8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   101ec:	e0bffe17 	ldw	r2,-8(fp)
   101f0:	10800317 	ldw	r2,12(r2)
   101f4:	10800044 	addi	r2,r2,1
   101f8:	10800fcc 	andi	r2,r2,63
   101fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   10200:	e0bffe17 	ldw	r2,-8(fp)
   10204:	10c00217 	ldw	r3,8(r2)
   10208:	e0bffd17 	ldw	r2,-12(fp)
   1020c:	18800c1e 	bne	r3,r2,10240 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   10210:	e0bffe17 	ldw	r2,-8(fp)
   10214:	10c00117 	ldw	r3,4(r2)
   10218:	00bfdfc4 	movi	r2,-129
   1021c:	1886703a 	and	r3,r3,r2
   10220:	e0bffe17 	ldw	r2,-8(fp)
   10224:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   10228:	e0bffe17 	ldw	r2,-8(fp)
   1022c:	10800017 	ldw	r2,0(r2)
   10230:	10800304 	addi	r2,r2,12
   10234:	e0fffe17 	ldw	r3,-8(fp)
   10238:	18c00117 	ldw	r3,4(r3)
   1023c:	10c00035 	stwio	r3,0(r2)
  }   
}
   10240:	e037883a 	mov	sp,fp
   10244:	df000017 	ldw	fp,0(sp)
   10248:	dec00104 	addi	sp,sp,4
   1024c:	f800283a 	ret

00010250 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   10250:	defffb04 	addi	sp,sp,-20
   10254:	df000415 	stw	fp,16(sp)
   10258:	df000404 	addi	fp,sp,16
   1025c:	e13ffc15 	stw	r4,-16(fp)
   10260:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   10264:	e0bffc17 	ldw	r2,-16(fp)
   10268:	10c00417 	ldw	r3,16(r2)
   1026c:	e0bffc17 	ldw	r2,-16(fp)
   10270:	10800517 	ldw	r2,20(r2)
   10274:	18803226 	beq	r3,r2,10340 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   10278:	e0bffc17 	ldw	r2,-16(fp)
   1027c:	10800617 	ldw	r2,24(r2)
   10280:	1080008c 	andi	r2,r2,2
   10284:	10000326 	beq	r2,zero,10294 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   10288:	e0bffd17 	ldw	r2,-12(fp)
   1028c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   10290:	10001d26 	beq	r2,zero,10308 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   10294:	e0bffc17 	ldw	r2,-16(fp)
   10298:	10800417 	ldw	r2,16(r2)
   1029c:	e0bffc17 	ldw	r2,-16(fp)
   102a0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   102a4:	e0bffc17 	ldw	r2,-16(fp)
   102a8:	10800017 	ldw	r2,0(r2)
   102ac:	10800104 	addi	r2,r2,4
   102b0:	e0fffc17 	ldw	r3,-16(fp)
   102b4:	18c00417 	ldw	r3,16(r3)
   102b8:	e13ffc17 	ldw	r4,-16(fp)
   102bc:	20c7883a 	add	r3,r4,r3
   102c0:	18c01704 	addi	r3,r3,92
   102c4:	18c00003 	ldbu	r3,0(r3)
   102c8:	18c03fcc 	andi	r3,r3,255
   102cc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   102d0:	e0bffc17 	ldw	r2,-16(fp)
   102d4:	10800417 	ldw	r2,16(r2)
   102d8:	10800044 	addi	r2,r2,1
   102dc:	e0fffc17 	ldw	r3,-16(fp)
   102e0:	18800415 	stw	r2,16(r3)
   102e4:	10c00fcc 	andi	r3,r2,63
   102e8:	e0bffc17 	ldw	r2,-16(fp)
   102ec:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   102f0:	e0bffc17 	ldw	r2,-16(fp)
   102f4:	10800117 	ldw	r2,4(r2)
   102f8:	10c01014 	ori	r3,r2,64
   102fc:	e0bffc17 	ldw	r2,-16(fp)
   10300:	10c00115 	stw	r3,4(r2)
   10304:	00000e06 	br	10340 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   10308:	e0bffc17 	ldw	r2,-16(fp)
   1030c:	10800017 	ldw	r2,0(r2)
   10310:	10800204 	addi	r2,r2,8
   10314:	10800037 	ldwio	r2,0(r2)
   10318:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1031c:	e0bffd17 	ldw	r2,-12(fp)
   10320:	1082000c 	andi	r2,r2,2048
   10324:	1000061e 	bne	r2,zero,10340 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   10328:	e0bffc17 	ldw	r2,-16(fp)
   1032c:	10c00117 	ldw	r3,4(r2)
   10330:	00bfefc4 	movi	r2,-65
   10334:	1886703a 	and	r3,r3,r2
   10338:	e0bffc17 	ldw	r2,-16(fp)
   1033c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   10340:	e0bffc17 	ldw	r2,-16(fp)
   10344:	10c00417 	ldw	r3,16(r2)
   10348:	e0bffc17 	ldw	r2,-16(fp)
   1034c:	10800517 	ldw	r2,20(r2)
   10350:	1880061e 	bne	r3,r2,1036c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   10354:	e0bffc17 	ldw	r2,-16(fp)
   10358:	10c00117 	ldw	r3,4(r2)
   1035c:	00beefc4 	movi	r2,-1089
   10360:	1886703a 	and	r3,r3,r2
   10364:	e0bffc17 	ldw	r2,-16(fp)
   10368:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1036c:	e0bffc17 	ldw	r2,-16(fp)
   10370:	10800017 	ldw	r2,0(r2)
   10374:	10800304 	addi	r2,r2,12
   10378:	e0fffc17 	ldw	r3,-16(fp)
   1037c:	18c00117 	ldw	r3,4(r3)
   10380:	10c00035 	stwio	r3,0(r2)
}
   10384:	e037883a 	mov	sp,fp
   10388:	df000017 	ldw	fp,0(sp)
   1038c:	dec00104 	addi	sp,sp,4
   10390:	f800283a 	ret

00010394 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   10394:	defffd04 	addi	sp,sp,-12
   10398:	df000215 	stw	fp,8(sp)
   1039c:	df000204 	addi	fp,sp,8
   103a0:	e13ffe15 	stw	r4,-8(fp)
   103a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   103a8:	00000506 	br	103c0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   103ac:	e0bfff17 	ldw	r2,-4(fp)
   103b0:	1090000c 	andi	r2,r2,16384
   103b4:	10000226 	beq	r2,zero,103c0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   103b8:	00bffd44 	movi	r2,-11
   103bc:	00000606 	br	103d8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   103c0:	e0bffe17 	ldw	r2,-8(fp)
   103c4:	10c00417 	ldw	r3,16(r2)
   103c8:	e0bffe17 	ldw	r2,-8(fp)
   103cc:	10800517 	ldw	r2,20(r2)
   103d0:	18bff61e 	bne	r3,r2,103ac <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   103d4:	0005883a 	mov	r2,zero
}
   103d8:	e037883a 	mov	sp,fp
   103dc:	df000017 	ldw	fp,0(sp)
   103e0:	dec00104 	addi	sp,sp,4
   103e4:	f800283a 	ret

000103e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   103e8:	defffe04 	addi	sp,sp,-8
   103ec:	dfc00115 	stw	ra,4(sp)
   103f0:	df000015 	stw	fp,0(sp)
   103f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   103f8:	00800074 	movhi	r2,1
   103fc:	10918504 	addi	r2,r2,17940
   10400:	10800017 	ldw	r2,0(r2)
   10404:	10000526 	beq	r2,zero,1041c <alt_get_errno+0x34>
   10408:	00800074 	movhi	r2,1
   1040c:	10918504 	addi	r2,r2,17940
   10410:	10800017 	ldw	r2,0(r2)
   10414:	103ee83a 	callr	r2
   10418:	00000206 	br	10424 <alt_get_errno+0x3c>
   1041c:	00800074 	movhi	r2,1
   10420:	10919204 	addi	r2,r2,17992
}
   10424:	e037883a 	mov	sp,fp
   10428:	dfc00117 	ldw	ra,4(sp)
   1042c:	df000017 	ldw	fp,0(sp)
   10430:	dec00204 	addi	sp,sp,8
   10434:	f800283a 	ret

00010438 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   10438:	defff204 	addi	sp,sp,-56
   1043c:	dfc00d15 	stw	ra,52(sp)
   10440:	df000c15 	stw	fp,48(sp)
   10444:	df000c04 	addi	fp,sp,48
   10448:	e13ffc15 	stw	r4,-16(fp)
   1044c:	e17ffd15 	stw	r5,-12(fp)
   10450:	e1bffe15 	stw	r6,-8(fp)
   10454:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   10458:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   1045c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   10460:	e0bfff17 	ldw	r2,-4(fp)
   10464:	1090000c 	andi	r2,r2,16384
   10468:	1005003a 	cmpeq	r2,r2,zero
   1046c:	10803fcc 	andi	r2,r2,255
   10470:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   10474:	00001306 	br	104c4 <altera_avalon_uart_read+0x8c>
    {
      count++;
   10478:	e0bff517 	ldw	r2,-44(fp)
   1047c:	10800044 	addi	r2,r2,1
   10480:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   10484:	e0bffd17 	ldw	r2,-12(fp)
   10488:	10c00044 	addi	r3,r2,1
   1048c:	e0fffd15 	stw	r3,-12(fp)
   10490:	e0fffc17 	ldw	r3,-16(fp)
   10494:	18c00217 	ldw	r3,8(r3)
   10498:	e13ffc17 	ldw	r4,-16(fp)
   1049c:	20c7883a 	add	r3,r4,r3
   104a0:	18c00704 	addi	r3,r3,28
   104a4:	18c00003 	ldbu	r3,0(r3)
   104a8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   104ac:	e0bffc17 	ldw	r2,-16(fp)
   104b0:	10800217 	ldw	r2,8(r2)
   104b4:	10800044 	addi	r2,r2,1
   104b8:	10c00fcc 	andi	r3,r2,63
   104bc:	e0bffc17 	ldw	r2,-16(fp)
   104c0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   104c4:	e0fff517 	ldw	r3,-44(fp)
   104c8:	e0bffe17 	ldw	r2,-8(fp)
   104cc:	1880050e 	bge	r3,r2,104e4 <altera_avalon_uart_read+0xac>
   104d0:	e0bffc17 	ldw	r2,-16(fp)
   104d4:	10c00217 	ldw	r3,8(r2)
   104d8:	e0bffc17 	ldw	r2,-16(fp)
   104dc:	10800317 	ldw	r2,12(r2)
   104e0:	18bfe51e 	bne	r3,r2,10478 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   104e4:	e0bff517 	ldw	r2,-44(fp)
   104e8:	1000251e 	bne	r2,zero,10580 <altera_avalon_uart_read+0x148>
   104ec:	e0bffc17 	ldw	r2,-16(fp)
   104f0:	10c00217 	ldw	r3,8(r2)
   104f4:	e0bffc17 	ldw	r2,-16(fp)
   104f8:	10800317 	ldw	r2,12(r2)
   104fc:	1880201e 	bne	r3,r2,10580 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   10500:	e0bff617 	ldw	r2,-40(fp)
   10504:	1000071e 	bne	r2,zero,10524 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   10508:	00103e80 	call	103e8 <alt_get_errno>
   1050c:	1007883a 	mov	r3,r2
   10510:	008002c4 	movi	r2,11
   10514:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   10518:	00800044 	movi	r2,1
   1051c:	e0bff405 	stb	r2,-48(fp)
        break;
   10520:	00001b06 	br	10590 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10524:	0005303a 	rdctl	r2,status
   10528:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1052c:	e0fff817 	ldw	r3,-32(fp)
   10530:	00bfff84 	movi	r2,-2
   10534:	1884703a 	and	r2,r3,r2
   10538:	1001703a 	wrctl	status,r2
  
  return context;
   1053c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   10540:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   10544:	e0bffc17 	ldw	r2,-16(fp)
   10548:	10800117 	ldw	r2,4(r2)
   1054c:	10c02014 	ori	r3,r2,128
   10550:	e0bffc17 	ldw	r2,-16(fp)
   10554:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   10558:	e0bffc17 	ldw	r2,-16(fp)
   1055c:	10800017 	ldw	r2,0(r2)
   10560:	10800304 	addi	r2,r2,12
   10564:	e0fffc17 	ldw	r3,-16(fp)
   10568:	18c00117 	ldw	r3,4(r3)
   1056c:	10c00035 	stwio	r3,0(r2)
   10570:	e0bff717 	ldw	r2,-36(fp)
   10574:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10578:	e0bff917 	ldw	r2,-28(fp)
   1057c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   10580:	e0bff517 	ldw	r2,-44(fp)
   10584:	1000021e 	bne	r2,zero,10590 <altera_avalon_uart_read+0x158>
   10588:	e0bffe17 	ldw	r2,-8(fp)
   1058c:	103fb91e 	bne	r2,zero,10474 <altera_avalon_uart_read+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10590:	0005303a 	rdctl	r2,status
   10594:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10598:	e0fffa17 	ldw	r3,-24(fp)
   1059c:	00bfff84 	movi	r2,-2
   105a0:	1884703a 	and	r2,r3,r2
   105a4:	1001703a 	wrctl	status,r2
  
  return context;
   105a8:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   105ac:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   105b0:	e0bffc17 	ldw	r2,-16(fp)
   105b4:	10800117 	ldw	r2,4(r2)
   105b8:	10c02014 	ori	r3,r2,128
   105bc:	e0bffc17 	ldw	r2,-16(fp)
   105c0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	10800017 	ldw	r2,0(r2)
   105cc:	10800304 	addi	r2,r2,12
   105d0:	e0fffc17 	ldw	r3,-16(fp)
   105d4:	18c00117 	ldw	r3,4(r3)
   105d8:	10c00035 	stwio	r3,0(r2)
   105dc:	e0bff717 	ldw	r2,-36(fp)
   105e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   105e4:	e0bffb17 	ldw	r2,-20(fp)
   105e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   105ec:	e0bff403 	ldbu	r2,-48(fp)
   105f0:	10000226 	beq	r2,zero,105fc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   105f4:	00bffd44 	movi	r2,-11
   105f8:	00000106 	br	10600 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   105fc:	e0bff517 	ldw	r2,-44(fp)
  }
}
   10600:	e037883a 	mov	sp,fp
   10604:	dfc00117 	ldw	ra,4(sp)
   10608:	df000017 	ldw	fp,0(sp)
   1060c:	dec00204 	addi	sp,sp,8
   10610:	f800283a 	ret

00010614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10614:	defffe04 	addi	sp,sp,-8
   10618:	dfc00115 	stw	ra,4(sp)
   1061c:	df000015 	stw	fp,0(sp)
   10620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10624:	00800074 	movhi	r2,1
   10628:	10918504 	addi	r2,r2,17940
   1062c:	10800017 	ldw	r2,0(r2)
   10630:	10000526 	beq	r2,zero,10648 <alt_get_errno+0x34>
   10634:	00800074 	movhi	r2,1
   10638:	10918504 	addi	r2,r2,17940
   1063c:	10800017 	ldw	r2,0(r2)
   10640:	103ee83a 	callr	r2
   10644:	00000206 	br	10650 <alt_get_errno+0x3c>
   10648:	00800074 	movhi	r2,1
   1064c:	10919204 	addi	r2,r2,17992
}
   10650:	e037883a 	mov	sp,fp
   10654:	dfc00117 	ldw	ra,4(sp)
   10658:	df000017 	ldw	fp,0(sp)
   1065c:	dec00204 	addi	sp,sp,8
   10660:	f800283a 	ret

00010664 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   10664:	defff204 	addi	sp,sp,-56
   10668:	dfc00d15 	stw	ra,52(sp)
   1066c:	df000c15 	stw	fp,48(sp)
   10670:	df000c04 	addi	fp,sp,48
   10674:	e13ffc15 	stw	r4,-16(fp)
   10678:	e17ffd15 	stw	r5,-12(fp)
   1067c:	e1bffe15 	stw	r6,-8(fp)
   10680:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   10684:	e0bffe17 	ldw	r2,-8(fp)
   10688:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   1068c:	e0bfff17 	ldw	r2,-4(fp)
   10690:	1090000c 	andi	r2,r2,16384
   10694:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   10698:	00003c06 	br	1078c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1069c:	e0bffc17 	ldw	r2,-16(fp)
   106a0:	10800517 	ldw	r2,20(r2)
   106a4:	10800044 	addi	r2,r2,1
   106a8:	10800fcc 	andi	r2,r2,63
   106ac:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   106b0:	e0bffc17 	ldw	r2,-16(fp)
   106b4:	10c00417 	ldw	r3,16(r2)
   106b8:	e0bff617 	ldw	r2,-40(fp)
   106bc:	1880221e 	bne	r3,r2,10748 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   106c0:	e0bff517 	ldw	r2,-44(fp)
   106c4:	10000526 	beq	r2,zero,106dc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   106c8:	00106140 	call	10614 <alt_get_errno>
   106cc:	1007883a 	mov	r3,r2
   106d0:	008002c4 	movi	r2,11
   106d4:	18800015 	stw	r2,0(r3)
        break;
   106d8:	00002e06 	br	10794 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106dc:	0005303a 	rdctl	r2,status
   106e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106e4:	e0fff817 	ldw	r3,-32(fp)
   106e8:	00bfff84 	movi	r2,-2
   106ec:	1884703a 	and	r2,r3,r2
   106f0:	1001703a 	wrctl	status,r2
  
  return context;
   106f4:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   106f8:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   106fc:	e0bffc17 	ldw	r2,-16(fp)
   10700:	10800117 	ldw	r2,4(r2)
   10704:	10c11014 	ori	r3,r2,1088
   10708:	e0bffc17 	ldw	r2,-16(fp)
   1070c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   10710:	e0bffc17 	ldw	r2,-16(fp)
   10714:	10800017 	ldw	r2,0(r2)
   10718:	10800304 	addi	r2,r2,12
   1071c:	e0fffc17 	ldw	r3,-16(fp)
   10720:	18c00117 	ldw	r3,4(r3)
   10724:	10c00035 	stwio	r3,0(r2)
   10728:	e0bff717 	ldw	r2,-36(fp)
   1072c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10730:	e0bff917 	ldw	r2,-28(fp)
   10734:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   10738:	e0bffc17 	ldw	r2,-16(fp)
   1073c:	10c00417 	ldw	r3,16(r2)
   10740:	e0bff617 	ldw	r2,-40(fp)
   10744:	18bffc26 	beq	r3,r2,10738 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
   10748:	e0bff417 	ldw	r2,-48(fp)
   1074c:	10bfffc4 	addi	r2,r2,-1
   10750:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   10754:	e0bffc17 	ldw	r2,-16(fp)
   10758:	10c00517 	ldw	r3,20(r2)
   1075c:	e0bffd17 	ldw	r2,-12(fp)
   10760:	11000044 	addi	r4,r2,1
   10764:	e13ffd15 	stw	r4,-12(fp)
   10768:	10800003 	ldbu	r2,0(r2)
   1076c:	1009883a 	mov	r4,r2
   10770:	e0bffc17 	ldw	r2,-16(fp)
   10774:	10c5883a 	add	r2,r2,r3
   10778:	10801704 	addi	r2,r2,92
   1077c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   10780:	e0bffc17 	ldw	r2,-16(fp)
   10784:	e0fff617 	ldw	r3,-40(fp)
   10788:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1078c:	e0bff417 	ldw	r2,-48(fp)
   10790:	103fc21e 	bne	r2,zero,1069c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10794:	0005303a 	rdctl	r2,status
   10798:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1079c:	e0fffa17 	ldw	r3,-24(fp)
   107a0:	00bfff84 	movi	r2,-2
   107a4:	1884703a 	and	r2,r3,r2
   107a8:	1001703a 	wrctl	status,r2
  
  return context;
   107ac:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   107b0:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   107b4:	e0bffc17 	ldw	r2,-16(fp)
   107b8:	10800117 	ldw	r2,4(r2)
   107bc:	10c11014 	ori	r3,r2,1088
   107c0:	e0bffc17 	ldw	r2,-16(fp)
   107c4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   107c8:	e0bffc17 	ldw	r2,-16(fp)
   107cc:	10800017 	ldw	r2,0(r2)
   107d0:	10800304 	addi	r2,r2,12
   107d4:	e0fffc17 	ldw	r3,-16(fp)
   107d8:	18c00117 	ldw	r3,4(r3)
   107dc:	10c00035 	stwio	r3,0(r2)
   107e0:	e0bff717 	ldw	r2,-36(fp)
   107e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107e8:	e0bffb17 	ldw	r2,-20(fp)
   107ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   107f0:	e0fffe17 	ldw	r3,-8(fp)
   107f4:	e0bff417 	ldw	r2,-48(fp)
   107f8:	1885c83a 	sub	r2,r3,r2
}
   107fc:	e037883a 	mov	sp,fp
   10800:	dfc00117 	ldw	ra,4(sp)
   10804:	df000017 	ldw	fp,0(sp)
   10808:	dec00204 	addi	sp,sp,8
   1080c:	f800283a 	ret

00010810 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   10810:	defff904 	addi	sp,sp,-28
   10814:	dfc00615 	stw	ra,24(sp)
   10818:	df000515 	stw	fp,20(sp)
   1081c:	df000504 	addi	fp,sp,20
   10820:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   10824:	00800144 	movi	r2,5
   10828:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   1082c:	00800044 	movi	r2,1
   10830:	d8800015 	stw	r2,0(sp)
   10834:	e0bffe44 	addi	r2,fp,-7
   10838:	d8800115 	stw	r2,4(sp)
   1083c:	d8000215 	stw	zero,8(sp)
   10840:	e13fff17 	ldw	r4,-4(fp)
   10844:	000b883a 	mov	r5,zero
   10848:	01800044 	movi	r6,1
   1084c:	e1fffe04 	addi	r7,fp,-8
   10850:	0011a680 	call	11a68 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   10854:	e0bffe43 	ldbu	r2,-7(fp)
}
   10858:	e037883a 	mov	sp,fp
   1085c:	dfc00117 	ldw	ra,4(sp)
   10860:	df000017 	ldw	fp,0(sp)
   10864:	dec00204 	addi	sp,sp,8
   10868:	f800283a 	ret

0001086c <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   1086c:	defffd04 	addi	sp,sp,-12
   10870:	dfc00215 	stw	ra,8(sp)
   10874:	df000115 	stw	fp,4(sp)
   10878:	df000104 	addi	fp,sp,4
   1087c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   10880:	e13fff17 	ldw	r4,-4(fp)
   10884:	00108100 	call	10810 <epcs_read_status_register>
   10888:	10803fcc 	andi	r2,r2,255
   1088c:	1080004c 	andi	r2,r2,1
}
   10890:	e037883a 	mov	sp,fp
   10894:	dfc00117 	ldw	ra,4(sp)
   10898:	df000017 	ldw	fp,0(sp)
   1089c:	dec00204 	addi	sp,sp,8
   108a0:	f800283a 	ret

000108a4 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   108a4:	defffd04 	addi	sp,sp,-12
   108a8:	dfc00215 	stw	ra,8(sp)
   108ac:	df000115 	stw	fp,4(sp)
   108b0:	df000104 	addi	fp,sp,4
   108b4:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   108b8:	0001883a 	nop
   108bc:	e13fff17 	ldw	r4,-4(fp)
   108c0:	001086c0 	call	1086c <epcs_test_wip>
   108c4:	103ffd1e 	bne	r2,zero,108bc <epcs_await_wip_released+0x18>
  {
  }
}
   108c8:	e037883a 	mov	sp,fp
   108cc:	dfc00117 	ldw	ra,4(sp)
   108d0:	df000017 	ldw	fp,0(sp)
   108d4:	dec00204 	addi	sp,sp,8
   108d8:	f800283a 	ret

000108dc <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   108dc:	defff604 	addi	sp,sp,-40
   108e0:	dfc00915 	stw	ra,36(sp)
   108e4:	df000815 	stw	fp,32(sp)
   108e8:	df000804 	addi	fp,sp,32
   108ec:	e13ffd15 	stw	r4,-12(fp)
   108f0:	e17ffe15 	stw	r5,-8(fp)
   108f4:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   108f8:	e0bfff17 	ldw	r2,-4(fp)
   108fc:	10001226 	beq	r2,zero,10948 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   10900:	00bff604 	movi	r2,-40
   10904:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   10908:	e0bffe17 	ldw	r2,-8(fp)
   1090c:	1004d63a 	srli	r2,r2,24
   10910:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   10914:	e0bffe17 	ldw	r2,-8(fp)
   10918:	1004d43a 	srli	r2,r2,16
   1091c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   10920:	e0bffe17 	ldw	r2,-8(fp)
   10924:	1004d23a 	srli	r2,r2,8
   10928:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   1092c:	e0bffe17 	ldw	r2,-8(fp)
   10930:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   10934:	00800144 	movi	r2,5
   10938:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   1093c:	e13ffd17 	ldw	r4,-12(fp)
   10940:	0010d840 	call	10d84 <epcs_enter_4_bytes_mode>
   10944:	00000c06 	br	10978 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
   10948:	00bff604 	movi	r2,-40
   1094c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   10950:	e0bffe17 	ldw	r2,-8(fp)
   10954:	1004d43a 	srli	r2,r2,16
   10958:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   1095c:	e0bffe17 	ldw	r2,-8(fp)
   10960:	1004d23a 	srli	r2,r2,8
   10964:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   10968:	e0bffe17 	ldw	r2,-8(fp)
   1096c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   10970:	00800104 	movi	r2,4
   10974:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   10978:	e13ffd17 	ldw	r4,-12(fp)
   1097c:	0010ac80 	call	10ac8 <epcs_write_enable>

  alt_avalon_spi_command(
   10980:	e0fffb03 	ldbu	r3,-20(fp)
   10984:	e0bffb44 	addi	r2,fp,-19
   10988:	d8000015 	stw	zero,0(sp)
   1098c:	d8000115 	stw	zero,4(sp)
   10990:	d8000215 	stw	zero,8(sp)
   10994:	e13ffd17 	ldw	r4,-12(fp)
   10998:	000b883a 	mov	r5,zero
   1099c:	180d883a 	mov	r6,r3
   109a0:	100f883a 	mov	r7,r2
   109a4:	0011a680 	call	11a68 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   109a8:	e13ffd17 	ldw	r4,-12(fp)
   109ac:	00108a40 	call	108a4 <epcs_await_wip_released>

  if(four_bytes_mode)
   109b0:	e0bfff17 	ldw	r2,-4(fp)
   109b4:	10000226 	beq	r2,zero,109c0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   109b8:	e13ffd17 	ldw	r4,-12(fp)
   109bc:	0010de00 	call	10de0 <epcs_exit_4_bytes_mode>
  }
}
   109c0:	e037883a 	mov	sp,fp
   109c4:	dfc00117 	ldw	ra,4(sp)
   109c8:	df000017 	ldw	fp,0(sp)
   109cc:	dec00204 	addi	sp,sp,8
   109d0:	f800283a 	ret

000109d4 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   109d4:	defff404 	addi	sp,sp,-48
   109d8:	dfc00b15 	stw	ra,44(sp)
   109dc:	df000a15 	stw	fp,40(sp)
   109e0:	df000a04 	addi	fp,sp,40
   109e4:	e13ffc15 	stw	r4,-16(fp)
   109e8:	e17ffd15 	stw	r5,-12(fp)
   109ec:	e1bffe15 	stw	r6,-8(fp)
   109f0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   109f4:	008000c4 	movi	r2,3
   109f8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   109fc:	e0800217 	ldw	r2,8(fp)
   10a00:	10001026 	beq	r2,zero,10a44 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   10a04:	e0bffd17 	ldw	r2,-12(fp)
   10a08:	1004d63a 	srli	r2,r2,24
   10a0c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   10a10:	e0bffd17 	ldw	r2,-12(fp)
   10a14:	1005d43a 	srai	r2,r2,16
   10a18:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   10a1c:	e0bffd17 	ldw	r2,-12(fp)
   10a20:	1005d23a 	srai	r2,r2,8
   10a24:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   10a28:	e0bffd17 	ldw	r2,-12(fp)
   10a2c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   10a30:	00800144 	movi	r2,5
   10a34:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   10a38:	e13ffc17 	ldw	r4,-16(fp)
   10a3c:	0010d840 	call	10d84 <epcs_enter_4_bytes_mode>
   10a40:	00000a06 	br	10a6c <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   10a44:	e0bffd17 	ldw	r2,-12(fp)
   10a48:	1005d43a 	srai	r2,r2,16
   10a4c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   10a50:	e0bffd17 	ldw	r2,-12(fp)
   10a54:	1005d23a 	srai	r2,r2,8
   10a58:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   10a5c:	e0bffd17 	ldw	r2,-12(fp)
   10a60:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   10a64:	00800104 	movi	r2,4
   10a68:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   10a6c:	e13ffc17 	ldw	r4,-16(fp)
   10a70:	00108a40 	call	108a4 <epcs_await_wip_released>

  alt_avalon_spi_command(
   10a74:	e0bfff17 	ldw	r2,-4(fp)
   10a78:	e0fffa04 	addi	r3,fp,-24
   10a7c:	d8800015 	stw	r2,0(sp)
   10a80:	e0bffe17 	ldw	r2,-8(fp)
   10a84:	d8800115 	stw	r2,4(sp)
   10a88:	d8000215 	stw	zero,8(sp)
   10a8c:	e13ffc17 	ldw	r4,-16(fp)
   10a90:	000b883a 	mov	r5,zero
   10a94:	e1bff917 	ldw	r6,-28(fp)
   10a98:	180f883a 	mov	r7,r3
   10a9c:	0011a680 	call	11a68 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   10aa0:	e0800217 	ldw	r2,8(fp)
   10aa4:	10000226 	beq	r2,zero,10ab0 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
   10aa8:	e13ffc17 	ldw	r4,-16(fp)
   10aac:	0010de00 	call	10de0 <epcs_exit_4_bytes_mode>
  }

  return length;
   10ab0:	e0bfff17 	ldw	r2,-4(fp)
}
   10ab4:	e037883a 	mov	sp,fp
   10ab8:	dfc00117 	ldw	ra,4(sp)
   10abc:	df000017 	ldw	fp,0(sp)
   10ac0:	dec00204 	addi	sp,sp,8
   10ac4:	f800283a 	ret

00010ac8 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   10ac8:	defff904 	addi	sp,sp,-28
   10acc:	dfc00615 	stw	ra,24(sp)
   10ad0:	df000515 	stw	fp,20(sp)
   10ad4:	df000504 	addi	fp,sp,20
   10ad8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   10adc:	00800184 	movi	r2,6
   10ae0:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   10ae4:	d8000015 	stw	zero,0(sp)
   10ae8:	d8000115 	stw	zero,4(sp)
   10aec:	d8000215 	stw	zero,8(sp)
   10af0:	e13fff17 	ldw	r4,-4(fp)
   10af4:	000b883a 	mov	r5,zero
   10af8:	01800044 	movi	r6,1
   10afc:	e1fffe04 	addi	r7,fp,-8
   10b00:	0011a680 	call	11a68 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   10b04:	e037883a 	mov	sp,fp
   10b08:	dfc00117 	ldw	ra,4(sp)
   10b0c:	df000017 	ldw	fp,0(sp)
   10b10:	dec00204 	addi	sp,sp,8
   10b14:	f800283a 	ret

00010b18 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   10b18:	defff804 	addi	sp,sp,-32
   10b1c:	dfc00715 	stw	ra,28(sp)
   10b20:	df000615 	stw	fp,24(sp)
   10b24:	df000604 	addi	fp,sp,24
   10b28:	e13ffe15 	stw	r4,-8(fp)
   10b2c:	2805883a 	mov	r2,r5
   10b30:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   10b34:	00800044 	movi	r2,1
   10b38:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   10b3c:	e0bfff03 	ldbu	r2,-4(fp)
   10b40:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   10b44:	d8000015 	stw	zero,0(sp)
   10b48:	d8000115 	stw	zero,4(sp)
   10b4c:	d8000215 	stw	zero,8(sp)
   10b50:	e13ffe17 	ldw	r4,-8(fp)
   10b54:	000b883a 	mov	r5,zero
   10b58:	01800084 	movi	r6,2
   10b5c:	e1fffd04 	addi	r7,fp,-12
   10b60:	0011a680 	call	11a68 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   10b64:	e13ffe17 	ldw	r4,-8(fp)
   10b68:	00108a40 	call	108a4 <epcs_await_wip_released>
}
   10b6c:	e037883a 	mov	sp,fp
   10b70:	dfc00117 	ldw	ra,4(sp)
   10b74:	df000017 	ldw	fp,0(sp)
   10b78:	dec00204 	addi	sp,sp,8
   10b7c:	f800283a 	ret

00010b80 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   10b80:	defff404 	addi	sp,sp,-48
   10b84:	dfc00b15 	stw	ra,44(sp)
   10b88:	df000a15 	stw	fp,40(sp)
   10b8c:	df000a04 	addi	fp,sp,40
   10b90:	e13ffc15 	stw	r4,-16(fp)
   10b94:	e17ffd15 	stw	r5,-12(fp)
   10b98:	e1bffe15 	stw	r6,-8(fp)
   10b9c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   10ba0:	00800084 	movi	r2,2
   10ba4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   10ba8:	e0800217 	ldw	r2,8(fp)
   10bac:	10001026 	beq	r2,zero,10bf0 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
   10bb0:	e0bffd17 	ldw	r2,-12(fp)
   10bb4:	1004d63a 	srli	r2,r2,24
   10bb8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   10bbc:	e0bffd17 	ldw	r2,-12(fp)
   10bc0:	1005d43a 	srai	r2,r2,16
   10bc4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   10bc8:	e0bffd17 	ldw	r2,-12(fp)
   10bcc:	1005d23a 	srai	r2,r2,8
   10bd0:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   10bd4:	e0bffd17 	ldw	r2,-12(fp)
   10bd8:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   10bdc:	00800144 	movi	r2,5
   10be0:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   10be4:	e13ffc17 	ldw	r4,-16(fp)
   10be8:	0010d840 	call	10d84 <epcs_enter_4_bytes_mode>
   10bec:	00000a06 	br	10c18 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   10bf0:	e0bffd17 	ldw	r2,-12(fp)
   10bf4:	1005d43a 	srai	r2,r2,16
   10bf8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   10bfc:	e0bffd17 	ldw	r2,-12(fp)
   10c00:	1005d23a 	srai	r2,r2,8
   10c04:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   10c08:	e0bffd17 	ldw	r2,-12(fp)
   10c0c:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   10c10:	00800104 	movi	r2,4
   10c14:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   10c18:	e13ffc17 	ldw	r4,-16(fp)
   10c1c:	0010ac80 	call	10ac8 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   10c20:	e0fffa04 	addi	r3,fp,-24
   10c24:	d8000015 	stw	zero,0(sp)
   10c28:	d8000115 	stw	zero,4(sp)
   10c2c:	00800044 	movi	r2,1
   10c30:	d8800215 	stw	r2,8(sp)
   10c34:	e13ffc17 	ldw	r4,-16(fp)
   10c38:	000b883a 	mov	r5,zero
   10c3c:	e1bff917 	ldw	r6,-28(fp)
   10c40:	180f883a 	mov	r7,r3
   10c44:	0011a680 	call	11a68 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   10c48:	e0bfff17 	ldw	r2,-4(fp)
   10c4c:	d8000015 	stw	zero,0(sp)
   10c50:	d8000115 	stw	zero,4(sp)
   10c54:	d8000215 	stw	zero,8(sp)
   10c58:	e13ffc17 	ldw	r4,-16(fp)
   10c5c:	000b883a 	mov	r5,zero
   10c60:	100d883a 	mov	r6,r2
   10c64:	e1fffe17 	ldw	r7,-8(fp)
   10c68:	0011a680 	call	11a68 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   10c6c:	e13ffc17 	ldw	r4,-16(fp)
   10c70:	00108a40 	call	108a4 <epcs_await_wip_released>

  if(four_bytes_mode)
   10c74:	e0800217 	ldw	r2,8(fp)
   10c78:	10000226 	beq	r2,zero,10c84 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
   10c7c:	e13ffc17 	ldw	r4,-16(fp)
   10c80:	0010de00 	call	10de0 <epcs_exit_4_bytes_mode>
  }

  return length;
   10c84:	e0bfff17 	ldw	r2,-4(fp)
}
   10c88:	e037883a 	mov	sp,fp
   10c8c:	dfc00117 	ldw	ra,4(sp)
   10c90:	df000017 	ldw	fp,0(sp)
   10c94:	dec00204 	addi	sp,sp,8
   10c98:	f800283a 	ret

00010c9c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   10c9c:	defff804 	addi	sp,sp,-32
   10ca0:	dfc00715 	stw	ra,28(sp)
   10ca4:	df000615 	stw	fp,24(sp)
   10ca8:	df000604 	addi	fp,sp,24
   10cac:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   10cb0:	00bfeac4 	movi	r2,-85
   10cb4:	e0bffd05 	stb	r2,-12(fp)
   10cb8:	e03ffd45 	stb	zero,-11(fp)
   10cbc:	e03ffd85 	stb	zero,-10(fp)
   10cc0:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   10cc4:	00800044 	movi	r2,1
   10cc8:	d8800015 	stw	r2,0(sp)
   10ccc:	e0bffe04 	addi	r2,fp,-8
   10cd0:	d8800115 	stw	r2,4(sp)
   10cd4:	d8000215 	stw	zero,8(sp)
   10cd8:	e13fff17 	ldw	r4,-4(fp)
   10cdc:	000b883a 	mov	r5,zero
   10ce0:	01800104 	movi	r6,4
   10ce4:	e1fffd04 	addi	r7,fp,-12
   10ce8:	0011a680 	call	11a68 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   10cec:	e0bffe03 	ldbu	r2,-8(fp)
}
   10cf0:	e037883a 	mov	sp,fp
   10cf4:	dfc00117 	ldw	ra,4(sp)
   10cf8:	df000017 	ldw	fp,0(sp)
   10cfc:	dec00204 	addi	sp,sp,8
   10d00:	f800283a 	ret

00010d04 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   10d04:	defff904 	addi	sp,sp,-28
   10d08:	dfc00615 	stw	ra,24(sp)
   10d0c:	df000515 	stw	fp,20(sp)
   10d10:	df000504 	addi	fp,sp,20
   10d14:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   10d18:	00bfe7c4 	movi	r2,-97
   10d1c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   10d20:	008000c4 	movi	r2,3
   10d24:	d8800015 	stw	r2,0(sp)
   10d28:	e0bffe44 	addi	r2,fp,-7
   10d2c:	d8800115 	stw	r2,4(sp)
   10d30:	d8000215 	stw	zero,8(sp)
   10d34:	e13fff17 	ldw	r4,-4(fp)
   10d38:	000b883a 	mov	r5,zero
   10d3c:	01800044 	movi	r6,1
   10d40:	e1fffe04 	addi	r7,fp,-8
   10d44:	0011a680 	call	11a68 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   10d48:	e0bffe43 	ldbu	r2,-7(fp)
   10d4c:	10803fcc 	andi	r2,r2,255
   10d50:	1006943a 	slli	r3,r2,16
   10d54:	e0bffe83 	ldbu	r2,-6(fp)
   10d58:	10803fcc 	andi	r2,r2,255
   10d5c:	1004923a 	slli	r2,r2,8
   10d60:	1886b03a 	or	r3,r3,r2
   10d64:	e0bffec3 	ldbu	r2,-5(fp)
   10d68:	10803fcc 	andi	r2,r2,255
   10d6c:	1884b03a 	or	r2,r3,r2
}
   10d70:	e037883a 	mov	sp,fp
   10d74:	dfc00117 	ldw	ra,4(sp)
   10d78:	df000017 	ldw	fp,0(sp)
   10d7c:	dec00204 	addi	sp,sp,8
   10d80:	f800283a 	ret

00010d84 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   10d84:	defff904 	addi	sp,sp,-28
   10d88:	dfc00615 	stw	ra,24(sp)
   10d8c:	df000515 	stw	fp,20(sp)
   10d90:	df000504 	addi	fp,sp,20
   10d94:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   10d98:	00bfedc4 	movi	r2,-73
   10d9c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   10da0:	e13fff17 	ldw	r4,-4(fp)
   10da4:	0010ac80 	call	10ac8 <epcs_write_enable>

  alt_avalon_spi_command(
   10da8:	d8000015 	stw	zero,0(sp)
   10dac:	d8000115 	stw	zero,4(sp)
   10db0:	d8000215 	stw	zero,8(sp)
   10db4:	e13fff17 	ldw	r4,-4(fp)
   10db8:	000b883a 	mov	r5,zero
   10dbc:	01800044 	movi	r6,1
   10dc0:	e1fffe04 	addi	r7,fp,-8
   10dc4:	0011a680 	call	11a68 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   10dc8:	0001883a 	nop
}
   10dcc:	e037883a 	mov	sp,fp
   10dd0:	dfc00117 	ldw	ra,4(sp)
   10dd4:	df000017 	ldw	fp,0(sp)
   10dd8:	dec00204 	addi	sp,sp,8
   10ddc:	f800283a 	ret

00010de0 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   10de0:	defff904 	addi	sp,sp,-28
   10de4:	dfc00615 	stw	ra,24(sp)
   10de8:	df000515 	stw	fp,20(sp)
   10dec:	df000504 	addi	fp,sp,20
   10df0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   10df4:	00bffa44 	movi	r2,-23
   10df8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   10dfc:	e13fff17 	ldw	r4,-4(fp)
   10e00:	0010ac80 	call	10ac8 <epcs_write_enable>

  alt_avalon_spi_command(
   10e04:	d8000015 	stw	zero,0(sp)
   10e08:	d8000115 	stw	zero,4(sp)
   10e0c:	d8000215 	stw	zero,8(sp)
   10e10:	e13fff17 	ldw	r4,-4(fp)
   10e14:	000b883a 	mov	r5,zero
   10e18:	01800044 	movi	r6,1
   10e1c:	e1fffe04 	addi	r7,fp,-8
   10e20:	0011a680 	call	11a68 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   10e24:	0001883a 	nop
}
   10e28:	e037883a 	mov	sp,fp
   10e2c:	dfc00117 	ldw	ra,4(sp)
   10e30:	df000017 	ldw	fp,0(sp)
   10e34:	dec00204 	addi	sp,sp,8
   10e38:	f800283a 	ret

00010e3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10e3c:	defff504 	addi	sp,sp,-44
   10e40:	df000a15 	stw	fp,40(sp)
   10e44:	df000a04 	addi	fp,sp,40
   10e48:	e13ffc15 	stw	r4,-16(fp)
   10e4c:	e17ffd15 	stw	r5,-12(fp)
   10e50:	e1bffe15 	stw	r6,-8(fp)
   10e54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10e58:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10e5c:	00800074 	movhi	r2,1
   10e60:	10919704 	addi	r2,r2,18012
   10e64:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10e68:	10003f26 	beq	r2,zero,10f68 <alt_alarm_start+0x12c>
  {
    if (alarm)
   10e6c:	e0bffc17 	ldw	r2,-16(fp)
   10e70:	10003b26 	beq	r2,zero,10f60 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10e74:	e0bffc17 	ldw	r2,-16(fp)
   10e78:	e0fffe17 	ldw	r3,-8(fp)
   10e7c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10e80:	e0bffc17 	ldw	r2,-16(fp)
   10e84:	e0ffff17 	ldw	r3,-4(fp)
   10e88:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e8c:	0005303a 	rdctl	r2,status
   10e90:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e94:	e0fff817 	ldw	r3,-32(fp)
   10e98:	00bfff84 	movi	r2,-2
   10e9c:	1884703a 	and	r2,r3,r2
   10ea0:	1001703a 	wrctl	status,r2
  
  return context;
   10ea4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10ea8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10eac:	00800074 	movhi	r2,1
   10eb0:	10919804 	addi	r2,r2,18016
   10eb4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10eb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10ebc:	e0fffd17 	ldw	r3,-12(fp)
   10ec0:	e0bff617 	ldw	r2,-40(fp)
   10ec4:	1885883a 	add	r2,r3,r2
   10ec8:	10c00044 	addi	r3,r2,1
   10ecc:	e0bffc17 	ldw	r2,-16(fp)
   10ed0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10ed4:	e0bffc17 	ldw	r2,-16(fp)
   10ed8:	10c00217 	ldw	r3,8(r2)
   10edc:	e0bff617 	ldw	r2,-40(fp)
   10ee0:	1880042e 	bgeu	r3,r2,10ef4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   10ee4:	e0bffc17 	ldw	r2,-16(fp)
   10ee8:	00c00044 	movi	r3,1
   10eec:	10c00405 	stb	r3,16(r2)
   10ef0:	00000206 	br	10efc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   10ef4:	e0bffc17 	ldw	r2,-16(fp)
   10ef8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10efc:	e0fffc17 	ldw	r3,-16(fp)
   10f00:	00800074 	movhi	r2,1
   10f04:	10918a04 	addi	r2,r2,17960
   10f08:	e0bff915 	stw	r2,-28(fp)
   10f0c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10f10:	e0bffa17 	ldw	r2,-24(fp)
   10f14:	e0fff917 	ldw	r3,-28(fp)
   10f18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10f1c:	e0bff917 	ldw	r2,-28(fp)
   10f20:	10c00017 	ldw	r3,0(r2)
   10f24:	e0bffa17 	ldw	r2,-24(fp)
   10f28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10f2c:	e0bff917 	ldw	r2,-28(fp)
   10f30:	10800017 	ldw	r2,0(r2)
   10f34:	e0fffa17 	ldw	r3,-24(fp)
   10f38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10f3c:	e0bff917 	ldw	r2,-28(fp)
   10f40:	e0fffa17 	ldw	r3,-24(fp)
   10f44:	10c00015 	stw	r3,0(r2)
   10f48:	e0bff717 	ldw	r2,-36(fp)
   10f4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f50:	e0bffb17 	ldw	r2,-20(fp)
   10f54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10f58:	0005883a 	mov	r2,zero
   10f5c:	00000306 	br	10f6c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   10f60:	00bffa84 	movi	r2,-22
   10f64:	00000106 	br	10f6c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   10f68:	00bfde84 	movi	r2,-134
  }
}
   10f6c:	e037883a 	mov	sp,fp
   10f70:	df000017 	ldw	fp,0(sp)
   10f74:	dec00104 	addi	sp,sp,4
   10f78:	f800283a 	ret

00010f7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10f7c:	defffe04 	addi	sp,sp,-8
   10f80:	dfc00115 	stw	ra,4(sp)
   10f84:	df000015 	stw	fp,0(sp)
   10f88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10f8c:	00800074 	movhi	r2,1
   10f90:	10918504 	addi	r2,r2,17940
   10f94:	10800017 	ldw	r2,0(r2)
   10f98:	10000526 	beq	r2,zero,10fb0 <alt_get_errno+0x34>
   10f9c:	00800074 	movhi	r2,1
   10fa0:	10918504 	addi	r2,r2,17940
   10fa4:	10800017 	ldw	r2,0(r2)
   10fa8:	103ee83a 	callr	r2
   10fac:	00000206 	br	10fb8 <alt_get_errno+0x3c>
   10fb0:	00800074 	movhi	r2,1
   10fb4:	10919204 	addi	r2,r2,17992
}
   10fb8:	e037883a 	mov	sp,fp
   10fbc:	dfc00117 	ldw	ra,4(sp)
   10fc0:	df000017 	ldw	fp,0(sp)
   10fc4:	dec00204 	addi	sp,sp,8
   10fc8:	f800283a 	ret

00010fcc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10fcc:	defffa04 	addi	sp,sp,-24
   10fd0:	dfc00515 	stw	ra,20(sp)
   10fd4:	df000415 	stw	fp,16(sp)
   10fd8:	df000404 	addi	fp,sp,16
   10fdc:	e13ffe15 	stw	r4,-8(fp)
   10fe0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10fe4:	e0bffe17 	ldw	r2,-8(fp)
   10fe8:	10000326 	beq	r2,zero,10ff8 <alt_dev_llist_insert+0x2c>
   10fec:	e0bffe17 	ldw	r2,-8(fp)
   10ff0:	10800217 	ldw	r2,8(r2)
   10ff4:	1000061e 	bne	r2,zero,11010 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10ff8:	0010f7c0 	call	10f7c <alt_get_errno>
   10ffc:	1007883a 	mov	r3,r2
   11000:	00800584 	movi	r2,22
   11004:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11008:	00bffa84 	movi	r2,-22
   1100c:	00001306 	br	1105c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11010:	e0bffe17 	ldw	r2,-8(fp)
   11014:	e0ffff17 	ldw	r3,-4(fp)
   11018:	e0fffc15 	stw	r3,-16(fp)
   1101c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11020:	e0bffd17 	ldw	r2,-12(fp)
   11024:	e0fffc17 	ldw	r3,-16(fp)
   11028:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1102c:	e0bffc17 	ldw	r2,-16(fp)
   11030:	10c00017 	ldw	r3,0(r2)
   11034:	e0bffd17 	ldw	r2,-12(fp)
   11038:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1103c:	e0bffc17 	ldw	r2,-16(fp)
   11040:	10800017 	ldw	r2,0(r2)
   11044:	e0fffd17 	ldw	r3,-12(fp)
   11048:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1104c:	e0bffc17 	ldw	r2,-16(fp)
   11050:	e0fffd17 	ldw	r3,-12(fp)
   11054:	10c00015 	stw	r3,0(r2)

  return 0;  
   11058:	0005883a 	mov	r2,zero
}
   1105c:	e037883a 	mov	sp,fp
   11060:	dfc00117 	ldw	ra,4(sp)
   11064:	df000017 	ldw	fp,0(sp)
   11068:	dec00204 	addi	sp,sp,8
   1106c:	f800283a 	ret

00011070 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11070:	defffd04 	addi	sp,sp,-12
   11074:	dfc00215 	stw	ra,8(sp)
   11078:	df000115 	stw	fp,4(sp)
   1107c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11080:	00800074 	movhi	r2,1
   11084:	1088a104 	addi	r2,r2,8836
   11088:	e0bfff15 	stw	r2,-4(fp)
   1108c:	00000606 	br	110a8 <_do_ctors+0x38>
        (*ctor) (); 
   11090:	e0bfff17 	ldw	r2,-4(fp)
   11094:	10800017 	ldw	r2,0(r2)
   11098:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1109c:	e0bfff17 	ldw	r2,-4(fp)
   110a0:	10bfff04 	addi	r2,r2,-4
   110a4:	e0bfff15 	stw	r2,-4(fp)
   110a8:	e0ffff17 	ldw	r3,-4(fp)
   110ac:	00800074 	movhi	r2,1
   110b0:	1088a204 	addi	r2,r2,8840
   110b4:	18bff62e 	bgeu	r3,r2,11090 <_do_ctors+0x20>
        (*ctor) (); 
}
   110b8:	e037883a 	mov	sp,fp
   110bc:	dfc00117 	ldw	ra,4(sp)
   110c0:	df000017 	ldw	fp,0(sp)
   110c4:	dec00204 	addi	sp,sp,8
   110c8:	f800283a 	ret

000110cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   110cc:	defffd04 	addi	sp,sp,-12
   110d0:	dfc00215 	stw	ra,8(sp)
   110d4:	df000115 	stw	fp,4(sp)
   110d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   110dc:	00800074 	movhi	r2,1
   110e0:	1088a104 	addi	r2,r2,8836
   110e4:	e0bfff15 	stw	r2,-4(fp)
   110e8:	00000606 	br	11104 <_do_dtors+0x38>
        (*dtor) (); 
   110ec:	e0bfff17 	ldw	r2,-4(fp)
   110f0:	10800017 	ldw	r2,0(r2)
   110f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   110f8:	e0bfff17 	ldw	r2,-4(fp)
   110fc:	10bfff04 	addi	r2,r2,-4
   11100:	e0bfff15 	stw	r2,-4(fp)
   11104:	e0ffff17 	ldw	r3,-4(fp)
   11108:	00800074 	movhi	r2,1
   1110c:	1088a204 	addi	r2,r2,8840
   11110:	18bff62e 	bgeu	r3,r2,110ec <_do_dtors+0x20>
        (*dtor) (); 
}
   11114:	e037883a 	mov	sp,fp
   11118:	dfc00117 	ldw	ra,4(sp)
   1111c:	df000017 	ldw	fp,0(sp)
   11120:	dec00204 	addi	sp,sp,8
   11124:	f800283a 	ret

00011128 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   11128:	defffc04 	addi	sp,sp,-16
   1112c:	dfc00315 	stw	ra,12(sp)
   11130:	df000215 	stw	fp,8(sp)
   11134:	df000204 	addi	fp,sp,8
   11138:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   1113c:	e13fff17 	ldw	r4,-4(fp)
   11140:	d1600d04 	addi	r5,gp,-32716
   11144:	0011c6c0 	call	11c6c <alt_find_dev>
   11148:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   1114c:	e0bffe17 	ldw	r2,-8(fp)
   11150:	10000926 	beq	r2,zero,11178 <alt_flash_open_dev+0x50>
   11154:	e0bffe17 	ldw	r2,-8(fp)
   11158:	10800317 	ldw	r2,12(r2)
   1115c:	10000626 	beq	r2,zero,11178 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   11160:	e0bffe17 	ldw	r2,-8(fp)
   11164:	10800317 	ldw	r2,12(r2)
   11168:	e13ffe17 	ldw	r4,-8(fp)
   1116c:	e17fff17 	ldw	r5,-4(fp)
   11170:	103ee83a 	callr	r2
   11174:	00000106 	br	1117c <alt_flash_open_dev+0x54>
  }

  return dev;
   11178:	e0bffe17 	ldw	r2,-8(fp)
}
   1117c:	e037883a 	mov	sp,fp
   11180:	dfc00117 	ldw	ra,4(sp)
   11184:	df000017 	ldw	fp,0(sp)
   11188:	dec00204 	addi	sp,sp,8
   1118c:	f800283a 	ret

00011190 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   11190:	defffd04 	addi	sp,sp,-12
   11194:	dfc00215 	stw	ra,8(sp)
   11198:	df000115 	stw	fp,4(sp)
   1119c:	df000104 	addi	fp,sp,4
   111a0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   111a4:	e0bfff17 	ldw	r2,-4(fp)
   111a8:	10000726 	beq	r2,zero,111c8 <alt_flash_close_dev+0x38>
   111ac:	e0bfff17 	ldw	r2,-4(fp)
   111b0:	10800417 	ldw	r2,16(r2)
   111b4:	10000426 	beq	r2,zero,111c8 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
   111b8:	e0bfff17 	ldw	r2,-4(fp)
   111bc:	10800417 	ldw	r2,16(r2)
   111c0:	e13fff17 	ldw	r4,-4(fp)
   111c4:	103ee83a 	callr	r2
  }
  return;
   111c8:	0001883a 	nop
}
   111cc:	e037883a 	mov	sp,fp
   111d0:	dfc00117 	ldw	ra,4(sp)
   111d4:	df000017 	ldw	fp,0(sp)
   111d8:	dec00204 	addi	sp,sp,8
   111dc:	f800283a 	ret

000111e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   111e0:	defff904 	addi	sp,sp,-28
   111e4:	dfc00615 	stw	ra,24(sp)
   111e8:	df000515 	stw	fp,20(sp)
   111ec:	df000504 	addi	fp,sp,20
   111f0:	e13ffc15 	stw	r4,-16(fp)
   111f4:	e17ffd15 	stw	r5,-12(fp)
   111f8:	e1bffe15 	stw	r6,-8(fp)
   111fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11200:	e0800217 	ldw	r2,8(fp)
   11204:	d8800015 	stw	r2,0(sp)
   11208:	e13ffc17 	ldw	r4,-16(fp)
   1120c:	e17ffd17 	ldw	r5,-12(fp)
   11210:	e1bffe17 	ldw	r6,-8(fp)
   11214:	e1ffff17 	ldw	r7,-4(fp)
   11218:	00113c00 	call	113c0 <alt_iic_isr_register>
}  
   1121c:	e037883a 	mov	sp,fp
   11220:	dfc00117 	ldw	ra,4(sp)
   11224:	df000017 	ldw	fp,0(sp)
   11228:	dec00204 	addi	sp,sp,8
   1122c:	f800283a 	ret

00011230 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11230:	defff904 	addi	sp,sp,-28
   11234:	df000615 	stw	fp,24(sp)
   11238:	df000604 	addi	fp,sp,24
   1123c:	e13ffe15 	stw	r4,-8(fp)
   11240:	e17fff15 	stw	r5,-4(fp)
   11244:	e0bfff17 	ldw	r2,-4(fp)
   11248:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1124c:	0005303a 	rdctl	r2,status
   11250:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11254:	e0fffb17 	ldw	r3,-20(fp)
   11258:	00bfff84 	movi	r2,-2
   1125c:	1884703a 	and	r2,r3,r2
   11260:	1001703a 	wrctl	status,r2
  
  return context;
   11264:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11268:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1126c:	e0bffa17 	ldw	r2,-24(fp)
   11270:	00c00044 	movi	r3,1
   11274:	1884983a 	sll	r2,r3,r2
   11278:	1007883a 	mov	r3,r2
   1127c:	00800074 	movhi	r2,1
   11280:	10919604 	addi	r2,r2,18008
   11284:	10800017 	ldw	r2,0(r2)
   11288:	1886b03a 	or	r3,r3,r2
   1128c:	00800074 	movhi	r2,1
   11290:	10919604 	addi	r2,r2,18008
   11294:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11298:	00800074 	movhi	r2,1
   1129c:	10919604 	addi	r2,r2,18008
   112a0:	10800017 	ldw	r2,0(r2)
   112a4:	100170fa 	wrctl	ienable,r2
   112a8:	e0bffc17 	ldw	r2,-16(fp)
   112ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112b0:	e0bffd17 	ldw	r2,-12(fp)
   112b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   112b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   112bc:	0001883a 	nop
}
   112c0:	e037883a 	mov	sp,fp
   112c4:	df000017 	ldw	fp,0(sp)
   112c8:	dec00104 	addi	sp,sp,4
   112cc:	f800283a 	ret

000112d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   112d0:	defff904 	addi	sp,sp,-28
   112d4:	df000615 	stw	fp,24(sp)
   112d8:	df000604 	addi	fp,sp,24
   112dc:	e13ffe15 	stw	r4,-8(fp)
   112e0:	e17fff15 	stw	r5,-4(fp)
   112e4:	e0bfff17 	ldw	r2,-4(fp)
   112e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112ec:	0005303a 	rdctl	r2,status
   112f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112f4:	e0fffb17 	ldw	r3,-20(fp)
   112f8:	00bfff84 	movi	r2,-2
   112fc:	1884703a 	and	r2,r3,r2
   11300:	1001703a 	wrctl	status,r2
  
  return context;
   11304:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11308:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1130c:	e0bffa17 	ldw	r2,-24(fp)
   11310:	00c00044 	movi	r3,1
   11314:	1884983a 	sll	r2,r3,r2
   11318:	0084303a 	nor	r2,zero,r2
   1131c:	1007883a 	mov	r3,r2
   11320:	00800074 	movhi	r2,1
   11324:	10919604 	addi	r2,r2,18008
   11328:	10800017 	ldw	r2,0(r2)
   1132c:	1886703a 	and	r3,r3,r2
   11330:	00800074 	movhi	r2,1
   11334:	10919604 	addi	r2,r2,18008
   11338:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1133c:	00800074 	movhi	r2,1
   11340:	10919604 	addi	r2,r2,18008
   11344:	10800017 	ldw	r2,0(r2)
   11348:	100170fa 	wrctl	ienable,r2
   1134c:	e0bffc17 	ldw	r2,-16(fp)
   11350:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11354:	e0bffd17 	ldw	r2,-12(fp)
   11358:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1135c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11360:	0001883a 	nop
}
   11364:	e037883a 	mov	sp,fp
   11368:	df000017 	ldw	fp,0(sp)
   1136c:	dec00104 	addi	sp,sp,4
   11370:	f800283a 	ret

00011374 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11374:	defffc04 	addi	sp,sp,-16
   11378:	df000315 	stw	fp,12(sp)
   1137c:	df000304 	addi	fp,sp,12
   11380:	e13ffe15 	stw	r4,-8(fp)
   11384:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11388:	000530fa 	rdctl	r2,ienable
   1138c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11390:	e0bfff17 	ldw	r2,-4(fp)
   11394:	00c00044 	movi	r3,1
   11398:	1884983a 	sll	r2,r3,r2
   1139c:	1007883a 	mov	r3,r2
   113a0:	e0bffd17 	ldw	r2,-12(fp)
   113a4:	1884703a 	and	r2,r3,r2
   113a8:	1004c03a 	cmpne	r2,r2,zero
   113ac:	10803fcc 	andi	r2,r2,255
}
   113b0:	e037883a 	mov	sp,fp
   113b4:	df000017 	ldw	fp,0(sp)
   113b8:	dec00104 	addi	sp,sp,4
   113bc:	f800283a 	ret

000113c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   113c0:	defff504 	addi	sp,sp,-44
   113c4:	dfc00a15 	stw	ra,40(sp)
   113c8:	df000915 	stw	fp,36(sp)
   113cc:	df000904 	addi	fp,sp,36
   113d0:	e13ffc15 	stw	r4,-16(fp)
   113d4:	e17ffd15 	stw	r5,-12(fp)
   113d8:	e1bffe15 	stw	r6,-8(fp)
   113dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   113e0:	00bffa84 	movi	r2,-22
   113e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   113e8:	e0bffd17 	ldw	r2,-12(fp)
   113ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   113f0:	e0bff817 	ldw	r2,-32(fp)
   113f4:	10800808 	cmpgei	r2,r2,32
   113f8:	1000271e 	bne	r2,zero,11498 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113fc:	0005303a 	rdctl	r2,status
   11400:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11404:	e0fffa17 	ldw	r3,-24(fp)
   11408:	00bfff84 	movi	r2,-2
   1140c:	1884703a 	and	r2,r3,r2
   11410:	1001703a 	wrctl	status,r2
  
  return context;
   11414:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11418:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1141c:	00800074 	movhi	r2,1
   11420:	1091a304 	addi	r2,r2,18060
   11424:	e0fff817 	ldw	r3,-32(fp)
   11428:	180690fa 	slli	r3,r3,3
   1142c:	10c5883a 	add	r2,r2,r3
   11430:	e0fffe17 	ldw	r3,-8(fp)
   11434:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11438:	00800074 	movhi	r2,1
   1143c:	1091a304 	addi	r2,r2,18060
   11440:	e0fff817 	ldw	r3,-32(fp)
   11444:	180690fa 	slli	r3,r3,3
   11448:	18c00104 	addi	r3,r3,4
   1144c:	10c5883a 	add	r2,r2,r3
   11450:	e0ffff17 	ldw	r3,-4(fp)
   11454:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11458:	e0bffe17 	ldw	r2,-8(fp)
   1145c:	10000526 	beq	r2,zero,11474 <alt_iic_isr_register+0xb4>
   11460:	e0bff817 	ldw	r2,-32(fp)
   11464:	e13ffc17 	ldw	r4,-16(fp)
   11468:	100b883a 	mov	r5,r2
   1146c:	00112300 	call	11230 <alt_ic_irq_enable>
   11470:	00000406 	br	11484 <alt_iic_isr_register+0xc4>
   11474:	e0bff817 	ldw	r2,-32(fp)
   11478:	e13ffc17 	ldw	r4,-16(fp)
   1147c:	100b883a 	mov	r5,r2
   11480:	00112d00 	call	112d0 <alt_ic_irq_disable>
   11484:	e0bff715 	stw	r2,-36(fp)
   11488:	e0bff917 	ldw	r2,-28(fp)
   1148c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11490:	e0bffb17 	ldw	r2,-20(fp)
   11494:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11498:	e0bff717 	ldw	r2,-36(fp)
}
   1149c:	e037883a 	mov	sp,fp
   114a0:	dfc00117 	ldw	ra,4(sp)
   114a4:	df000017 	ldw	fp,0(sp)
   114a8:	dec00204 	addi	sp,sp,8
   114ac:	f800283a 	ret

000114b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   114b0:	defff804 	addi	sp,sp,-32
   114b4:	dfc00715 	stw	ra,28(sp)
   114b8:	df000615 	stw	fp,24(sp)
   114bc:	dc000515 	stw	r16,20(sp)
   114c0:	df000604 	addi	fp,sp,24
   114c4:	e13ffb15 	stw	r4,-20(fp)
   114c8:	e17ffc15 	stw	r5,-16(fp)
   114cc:	e1bffd15 	stw	r6,-12(fp)
   114d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   114d4:	e13ffc17 	ldw	r4,-16(fp)
   114d8:	e17ffd17 	ldw	r5,-12(fp)
   114dc:	e1bffe17 	ldw	r6,-8(fp)
   114e0:	001174c0 	call	1174c <open>
   114e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   114e8:	e0bffa17 	ldw	r2,-24(fp)
   114ec:	10002216 	blt	r2,zero,11578 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   114f0:	04000074 	movhi	r16,1
   114f4:	840bda04 	addi	r16,r16,12136
   114f8:	e0bffa17 	ldw	r2,-24(fp)
   114fc:	1009883a 	mov	r4,r2
   11500:	01400304 	movi	r5,12
   11504:	0000eb00 	call	eb0 <__mulsi3>
   11508:	8085883a 	add	r2,r16,r2
   1150c:	10c00017 	ldw	r3,0(r2)
   11510:	e0bffb17 	ldw	r2,-20(fp)
   11514:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11518:	04000074 	movhi	r16,1
   1151c:	840bda04 	addi	r16,r16,12136
   11520:	e0bffa17 	ldw	r2,-24(fp)
   11524:	1009883a 	mov	r4,r2
   11528:	01400304 	movi	r5,12
   1152c:	0000eb00 	call	eb0 <__mulsi3>
   11530:	10800104 	addi	r2,r2,4
   11534:	8085883a 	add	r2,r16,r2
   11538:	10c00017 	ldw	r3,0(r2)
   1153c:	e0bffb17 	ldw	r2,-20(fp)
   11540:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11544:	04000074 	movhi	r16,1
   11548:	840bda04 	addi	r16,r16,12136
   1154c:	e0bffa17 	ldw	r2,-24(fp)
   11550:	1009883a 	mov	r4,r2
   11554:	01400304 	movi	r5,12
   11558:	0000eb00 	call	eb0 <__mulsi3>
   1155c:	10800204 	addi	r2,r2,8
   11560:	8085883a 	add	r2,r16,r2
   11564:	10c00017 	ldw	r3,0(r2)
   11568:	e0bffb17 	ldw	r2,-20(fp)
   1156c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11570:	e13ffa17 	ldw	r4,-24(fp)
   11574:	000e4dc0 	call	e4dc <alt_release_fd>
  }
} 
   11578:	e6ffff04 	addi	sp,fp,-4
   1157c:	dfc00217 	ldw	ra,8(sp)
   11580:	df000117 	ldw	fp,4(sp)
   11584:	dc000017 	ldw	r16,0(sp)
   11588:	dec00304 	addi	sp,sp,12
   1158c:	f800283a 	ret

00011590 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11590:	defffb04 	addi	sp,sp,-20
   11594:	dfc00415 	stw	ra,16(sp)
   11598:	df000315 	stw	fp,12(sp)
   1159c:	df000304 	addi	fp,sp,12
   115a0:	e13ffd15 	stw	r4,-12(fp)
   115a4:	e17ffe15 	stw	r5,-8(fp)
   115a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   115ac:	01000074 	movhi	r4,1
   115b0:	210bdd04 	addi	r4,r4,12148
   115b4:	e17ffd17 	ldw	r5,-12(fp)
   115b8:	01800044 	movi	r6,1
   115bc:	01c07fc4 	movi	r7,511
   115c0:	00114b00 	call	114b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   115c4:	01000074 	movhi	r4,1
   115c8:	210bda04 	addi	r4,r4,12136
   115cc:	e17ffe17 	ldw	r5,-8(fp)
   115d0:	000d883a 	mov	r6,zero
   115d4:	01c07fc4 	movi	r7,511
   115d8:	00114b00 	call	114b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   115dc:	01000074 	movhi	r4,1
   115e0:	210be004 	addi	r4,r4,12160
   115e4:	e17fff17 	ldw	r5,-4(fp)
   115e8:	01800044 	movi	r6,1
   115ec:	01c07fc4 	movi	r7,511
   115f0:	00114b00 	call	114b0 <alt_open_fd>
}  
   115f4:	e037883a 	mov	sp,fp
   115f8:	dfc00117 	ldw	ra,4(sp)
   115fc:	df000017 	ldw	fp,0(sp)
   11600:	dec00204 	addi	sp,sp,8
   11604:	f800283a 	ret

00011608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11608:	defffe04 	addi	sp,sp,-8
   1160c:	dfc00115 	stw	ra,4(sp)
   11610:	df000015 	stw	fp,0(sp)
   11614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11618:	00800074 	movhi	r2,1
   1161c:	10918504 	addi	r2,r2,17940
   11620:	10800017 	ldw	r2,0(r2)
   11624:	10000526 	beq	r2,zero,1163c <alt_get_errno+0x34>
   11628:	00800074 	movhi	r2,1
   1162c:	10918504 	addi	r2,r2,17940
   11630:	10800017 	ldw	r2,0(r2)
   11634:	103ee83a 	callr	r2
   11638:	00000206 	br	11644 <alt_get_errno+0x3c>
   1163c:	00800074 	movhi	r2,1
   11640:	10919204 	addi	r2,r2,17992
}
   11644:	e037883a 	mov	sp,fp
   11648:	dfc00117 	ldw	ra,4(sp)
   1164c:	df000017 	ldw	fp,0(sp)
   11650:	dec00204 	addi	sp,sp,8
   11654:	f800283a 	ret

00011658 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11658:	defffb04 	addi	sp,sp,-20
   1165c:	dfc00415 	stw	ra,16(sp)
   11660:	df000315 	stw	fp,12(sp)
   11664:	dc000215 	stw	r16,8(sp)
   11668:	df000304 	addi	fp,sp,12
   1166c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11670:	e0bffe17 	ldw	r2,-8(fp)
   11674:	10800217 	ldw	r2,8(r2)
   11678:	10d00034 	orhi	r3,r2,16384
   1167c:	e0bffe17 	ldw	r2,-8(fp)
   11680:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11684:	e03ffd15 	stw	zero,-12(fp)
   11688:	00002306 	br	11718 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1168c:	04000074 	movhi	r16,1
   11690:	840bda04 	addi	r16,r16,12136
   11694:	e0bffd17 	ldw	r2,-12(fp)
   11698:	1009883a 	mov	r4,r2
   1169c:	01400304 	movi	r5,12
   116a0:	0000eb00 	call	eb0 <__mulsi3>
   116a4:	8085883a 	add	r2,r16,r2
   116a8:	10c00017 	ldw	r3,0(r2)
   116ac:	e0bffe17 	ldw	r2,-8(fp)
   116b0:	10800017 	ldw	r2,0(r2)
   116b4:	1880151e 	bne	r3,r2,1170c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   116b8:	04000074 	movhi	r16,1
   116bc:	840bda04 	addi	r16,r16,12136
   116c0:	e0bffd17 	ldw	r2,-12(fp)
   116c4:	1009883a 	mov	r4,r2
   116c8:	01400304 	movi	r5,12
   116cc:	0000eb00 	call	eb0 <__mulsi3>
   116d0:	10800204 	addi	r2,r2,8
   116d4:	8085883a 	add	r2,r16,r2
   116d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   116dc:	10000b0e 	bge	r2,zero,1170c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   116e0:	e13ffd17 	ldw	r4,-12(fp)
   116e4:	01400304 	movi	r5,12
   116e8:	0000eb00 	call	eb0 <__mulsi3>
   116ec:	1007883a 	mov	r3,r2
   116f0:	00800074 	movhi	r2,1
   116f4:	108bda04 	addi	r2,r2,12136
   116f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   116fc:	e0bffe17 	ldw	r2,-8(fp)
   11700:	18800226 	beq	r3,r2,1170c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11704:	00bffcc4 	movi	r2,-13
   11708:	00000a06 	br	11734 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1170c:	e0bffd17 	ldw	r2,-12(fp)
   11710:	10800044 	addi	r2,r2,1
   11714:	e0bffd15 	stw	r2,-12(fp)
   11718:	00800074 	movhi	r2,1
   1171c:	10918404 	addi	r2,r2,17936
   11720:	10800017 	ldw	r2,0(r2)
   11724:	1007883a 	mov	r3,r2
   11728:	e0bffd17 	ldw	r2,-12(fp)
   1172c:	18bfd72e 	bgeu	r3,r2,1168c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11730:	0005883a 	mov	r2,zero
}
   11734:	e6ffff04 	addi	sp,fp,-4
   11738:	dfc00217 	ldw	ra,8(sp)
   1173c:	df000117 	ldw	fp,4(sp)
   11740:	dc000017 	ldw	r16,0(sp)
   11744:	dec00304 	addi	sp,sp,12
   11748:	f800283a 	ret

0001174c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1174c:	defff604 	addi	sp,sp,-40
   11750:	dfc00915 	stw	ra,36(sp)
   11754:	df000815 	stw	fp,32(sp)
   11758:	df000804 	addi	fp,sp,32
   1175c:	e13ffd15 	stw	r4,-12(fp)
   11760:	e17ffe15 	stw	r5,-8(fp)
   11764:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11768:	00bfffc4 	movi	r2,-1
   1176c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11770:	00bffb44 	movi	r2,-19
   11774:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11778:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1177c:	e13ffd17 	ldw	r4,-12(fp)
   11780:	01400074 	movhi	r5,1
   11784:	29518204 	addi	r5,r5,17928
   11788:	0011c6c0 	call	11c6c <alt_find_dev>
   1178c:	e0bff815 	stw	r2,-32(fp)
   11790:	e0bff817 	ldw	r2,-32(fp)
   11794:	1000051e 	bne	r2,zero,117ac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11798:	e13ffd17 	ldw	r4,-12(fp)
   1179c:	0011cfc0 	call	11cfc <alt_find_file>
   117a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   117a4:	00800044 	movi	r2,1
   117a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   117ac:	e0bff817 	ldw	r2,-32(fp)
   117b0:	10002b26 	beq	r2,zero,11860 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   117b4:	e13ff817 	ldw	r4,-32(fp)
   117b8:	0011e100 	call	11e10 <alt_get_fd>
   117bc:	e0bff915 	stw	r2,-28(fp)
   117c0:	e0bff917 	ldw	r2,-28(fp)
   117c4:	1000030e 	bge	r2,zero,117d4 <open+0x88>
    {
      status = index;
   117c8:	e0bff917 	ldw	r2,-28(fp)
   117cc:	e0bffa15 	stw	r2,-24(fp)
   117d0:	00002506 	br	11868 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   117d4:	e13ff917 	ldw	r4,-28(fp)
   117d8:	01400304 	movi	r5,12
   117dc:	0000eb00 	call	eb0 <__mulsi3>
   117e0:	1007883a 	mov	r3,r2
   117e4:	00800074 	movhi	r2,1
   117e8:	108bda04 	addi	r2,r2,12136
   117ec:	1885883a 	add	r2,r3,r2
   117f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   117f4:	e0fffe17 	ldw	r3,-8(fp)
   117f8:	00900034 	movhi	r2,16384
   117fc:	10bfffc4 	addi	r2,r2,-1
   11800:	1886703a 	and	r3,r3,r2
   11804:	e0bffc17 	ldw	r2,-16(fp)
   11808:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1180c:	e0bffb17 	ldw	r2,-20(fp)
   11810:	1000051e 	bne	r2,zero,11828 <open+0xdc>
   11814:	e13ffc17 	ldw	r4,-16(fp)
   11818:	00116580 	call	11658 <alt_file_locked>
   1181c:	e0bffa15 	stw	r2,-24(fp)
   11820:	e0bffa17 	ldw	r2,-24(fp)
   11824:	10001016 	blt	r2,zero,11868 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11828:	e0bff817 	ldw	r2,-32(fp)
   1182c:	10800317 	ldw	r2,12(r2)
   11830:	10000826 	beq	r2,zero,11854 <open+0x108>
   11834:	e0bff817 	ldw	r2,-32(fp)
   11838:	10800317 	ldw	r2,12(r2)
   1183c:	e13ffc17 	ldw	r4,-16(fp)
   11840:	e17ffd17 	ldw	r5,-12(fp)
   11844:	e1bffe17 	ldw	r6,-8(fp)
   11848:	e1ffff17 	ldw	r7,-4(fp)
   1184c:	103ee83a 	callr	r2
   11850:	00000106 	br	11858 <open+0x10c>
   11854:	0005883a 	mov	r2,zero
   11858:	e0bffa15 	stw	r2,-24(fp)
   1185c:	00000206 	br	11868 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11860:	00bffb44 	movi	r2,-19
   11864:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11868:	e0bffa17 	ldw	r2,-24(fp)
   1186c:	1000090e 	bge	r2,zero,11894 <open+0x148>
  {
    alt_release_fd (index);  
   11870:	e13ff917 	ldw	r4,-28(fp)
   11874:	000e4dc0 	call	e4dc <alt_release_fd>
    ALT_ERRNO = -status;
   11878:	00116080 	call	11608 <alt_get_errno>
   1187c:	1007883a 	mov	r3,r2
   11880:	e0bffa17 	ldw	r2,-24(fp)
   11884:	0085c83a 	sub	r2,zero,r2
   11888:	18800015 	stw	r2,0(r3)
    return -1;
   1188c:	00bfffc4 	movi	r2,-1
   11890:	00000106 	br	11898 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11894:	e0bff917 	ldw	r2,-28(fp)
}
   11898:	e037883a 	mov	sp,fp
   1189c:	dfc00117 	ldw	ra,4(sp)
   118a0:	df000017 	ldw	fp,0(sp)
   118a4:	dec00204 	addi	sp,sp,8
   118a8:	f800283a 	ret

000118ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   118ac:	defffa04 	addi	sp,sp,-24
   118b0:	df000515 	stw	fp,20(sp)
   118b4:	df000504 	addi	fp,sp,20
   118b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118bc:	0005303a 	rdctl	r2,status
   118c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118c4:	e0fffc17 	ldw	r3,-16(fp)
   118c8:	00bfff84 	movi	r2,-2
   118cc:	1884703a 	and	r2,r3,r2
   118d0:	1001703a 	wrctl	status,r2
  
  return context;
   118d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   118d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   118dc:	e0bfff17 	ldw	r2,-4(fp)
   118e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   118e4:	e0bffd17 	ldw	r2,-12(fp)
   118e8:	10800017 	ldw	r2,0(r2)
   118ec:	e0fffd17 	ldw	r3,-12(fp)
   118f0:	18c00117 	ldw	r3,4(r3)
   118f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   118f8:	e0bffd17 	ldw	r2,-12(fp)
   118fc:	10800117 	ldw	r2,4(r2)
   11900:	e0fffd17 	ldw	r3,-12(fp)
   11904:	18c00017 	ldw	r3,0(r3)
   11908:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1190c:	e0bffd17 	ldw	r2,-12(fp)
   11910:	e0fffd17 	ldw	r3,-12(fp)
   11914:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11918:	e0bffd17 	ldw	r2,-12(fp)
   1191c:	e0fffd17 	ldw	r3,-12(fp)
   11920:	10c00015 	stw	r3,0(r2)
   11924:	e0bffb17 	ldw	r2,-20(fp)
   11928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1192c:	e0bffe17 	ldw	r2,-8(fp)
   11930:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11934:	e037883a 	mov	sp,fp
   11938:	df000017 	ldw	fp,0(sp)
   1193c:	dec00104 	addi	sp,sp,4
   11940:	f800283a 	ret

00011944 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11944:	defffb04 	addi	sp,sp,-20
   11948:	dfc00415 	stw	ra,16(sp)
   1194c:	df000315 	stw	fp,12(sp)
   11950:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11954:	d0a01017 	ldw	r2,-32704(gp)
   11958:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1195c:	d0a01e17 	ldw	r2,-32648(gp)
   11960:	10800044 	addi	r2,r2,1
   11964:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11968:	00002e06 	br	11a24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1196c:	e0bffd17 	ldw	r2,-12(fp)
   11970:	10800017 	ldw	r2,0(r2)
   11974:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11978:	e0bffd17 	ldw	r2,-12(fp)
   1197c:	10800403 	ldbu	r2,16(r2)
   11980:	10803fcc 	andi	r2,r2,255
   11984:	10000426 	beq	r2,zero,11998 <alt_tick+0x54>
   11988:	d0a01e17 	ldw	r2,-32648(gp)
   1198c:	1000021e 	bne	r2,zero,11998 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11990:	e0bffd17 	ldw	r2,-12(fp)
   11994:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11998:	e0bffd17 	ldw	r2,-12(fp)
   1199c:	10800217 	ldw	r2,8(r2)
   119a0:	d0e01e17 	ldw	r3,-32648(gp)
   119a4:	18801d36 	bltu	r3,r2,11a1c <alt_tick+0xd8>
   119a8:	e0bffd17 	ldw	r2,-12(fp)
   119ac:	10800403 	ldbu	r2,16(r2)
   119b0:	10803fcc 	andi	r2,r2,255
   119b4:	1000191e 	bne	r2,zero,11a1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   119b8:	e0bffd17 	ldw	r2,-12(fp)
   119bc:	10800317 	ldw	r2,12(r2)
   119c0:	e0fffd17 	ldw	r3,-12(fp)
   119c4:	18c00517 	ldw	r3,20(r3)
   119c8:	1809883a 	mov	r4,r3
   119cc:	103ee83a 	callr	r2
   119d0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   119d4:	e0bfff17 	ldw	r2,-4(fp)
   119d8:	1000031e 	bne	r2,zero,119e8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   119dc:	e13ffd17 	ldw	r4,-12(fp)
   119e0:	00118ac0 	call	118ac <alt_alarm_stop>
   119e4:	00000d06 	br	11a1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   119e8:	e0bffd17 	ldw	r2,-12(fp)
   119ec:	10c00217 	ldw	r3,8(r2)
   119f0:	e0bfff17 	ldw	r2,-4(fp)
   119f4:	1887883a 	add	r3,r3,r2
   119f8:	e0bffd17 	ldw	r2,-12(fp)
   119fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11a00:	e0bffd17 	ldw	r2,-12(fp)
   11a04:	10c00217 	ldw	r3,8(r2)
   11a08:	d0a01e17 	ldw	r2,-32648(gp)
   11a0c:	1880032e 	bgeu	r3,r2,11a1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11a10:	e0bffd17 	ldw	r2,-12(fp)
   11a14:	00c00044 	movi	r3,1
   11a18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11a1c:	e0bffe17 	ldw	r2,-8(fp)
   11a20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11a24:	e0fffd17 	ldw	r3,-12(fp)
   11a28:	d0a01004 	addi	r2,gp,-32704
   11a2c:	18bfcf1e 	bne	r3,r2,1196c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11a30:	0001883a 	nop
}
   11a34:	e037883a 	mov	sp,fp
   11a38:	dfc00117 	ldw	ra,4(sp)
   11a3c:	df000017 	ldw	fp,0(sp)
   11a40:	dec00204 	addi	sp,sp,8
   11a44:	f800283a 	ret

00011a48 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11a48:	deffff04 	addi	sp,sp,-4
   11a4c:	df000015 	stw	fp,0(sp)
   11a50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11a54:	000170fa 	wrctl	ienable,zero
}
   11a58:	e037883a 	mov	sp,fp
   11a5c:	df000017 	ldw	fp,0(sp)
   11a60:	dec00104 	addi	sp,sp,4
   11a64:	f800283a 	ret

00011a68 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   11a68:	defff404 	addi	sp,sp,-48
   11a6c:	df000b15 	stw	fp,44(sp)
   11a70:	df000b04 	addi	fp,sp,44
   11a74:	e13ffc15 	stw	r4,-16(fp)
   11a78:	e17ffd15 	stw	r5,-12(fp)
   11a7c:	e1bffe15 	stw	r6,-8(fp)
   11a80:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   11a84:	e0ffff17 	ldw	r3,-4(fp)
   11a88:	e0bffe17 	ldw	r2,-8(fp)
   11a8c:	1885883a 	add	r2,r3,r2
   11a90:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   11a94:	e0c00217 	ldw	r3,8(fp)
   11a98:	e0800117 	ldw	r2,4(fp)
   11a9c:	1885883a 	add	r2,r3,r2
   11aa0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   11aa4:	e0800117 	ldw	r2,4(fp)
   11aa8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   11aac:	e0bffe17 	ldw	r2,-8(fp)
   11ab0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   11ab4:	00800044 	movi	r2,1
   11ab8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   11abc:	e0bffc17 	ldw	r2,-16(fp)
   11ac0:	10800504 	addi	r2,r2,20
   11ac4:	1009883a 	mov	r4,r2
   11ac8:	e0bffd17 	ldw	r2,-12(fp)
   11acc:	00c00044 	movi	r3,1
   11ad0:	1884983a 	sll	r2,r3,r2
   11ad4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   11ad8:	e0800317 	ldw	r2,12(fp)
   11adc:	1080008c 	andi	r2,r2,2
   11ae0:	1000051e 	bne	r2,zero,11af8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   11ae4:	e0bffc17 	ldw	r2,-16(fp)
   11ae8:	10800304 	addi	r2,r2,12
   11aec:	1007883a 	mov	r3,r2
   11af0:	00810004 	movi	r2,1024
   11af4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   11af8:	e0bffc17 	ldw	r2,-16(fp)
   11afc:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   11b00:	e0bffc17 	ldw	r2,-16(fp)
   11b04:	10800204 	addi	r2,r2,8
   11b08:	10800037 	ldwio	r2,0(r2)
   11b0c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11b10:	e0bffa17 	ldw	r2,-24(fp)
   11b14:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   11b18:	10000226 	beq	r2,zero,11b24 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11b1c:	e0bff717 	ldw	r2,-36(fp)
   11b20:	1000031e 	bne	r2,zero,11b30 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   11b24:	e0bffa17 	ldw	r2,-24(fp)
   11b28:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11b2c:	103ff426 	beq	r2,zero,11b00 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   11b30:	e0bffa17 	ldw	r2,-24(fp)
   11b34:	1080100c 	andi	r2,r2,64
   11b38:	10001e26 	beq	r2,zero,11bb4 <alt_avalon_spi_command+0x14c>
   11b3c:	e0bff717 	ldw	r2,-36(fp)
   11b40:	00801c0e 	bge	zero,r2,11bb4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   11b44:	e0bff717 	ldw	r2,-36(fp)
   11b48:	10bfffc4 	addi	r2,r2,-1
   11b4c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   11b50:	e0ffff17 	ldw	r3,-4(fp)
   11b54:	e0bff817 	ldw	r2,-32(fp)
   11b58:	18800a2e 	bgeu	r3,r2,11b84 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   11b5c:	e0bffc17 	ldw	r2,-16(fp)
   11b60:	10800104 	addi	r2,r2,4
   11b64:	1009883a 	mov	r4,r2
   11b68:	e0bfff17 	ldw	r2,-4(fp)
   11b6c:	10c00044 	addi	r3,r2,1
   11b70:	e0ffff15 	stw	r3,-4(fp)
   11b74:	10800003 	ldbu	r2,0(r2)
   11b78:	10803fcc 	andi	r2,r2,255
   11b7c:	20800035 	stwio	r2,0(r4)
   11b80:	00000c06 	br	11bb4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   11b84:	e0bff517 	ldw	r2,-44(fp)
   11b88:	10000826 	beq	r2,zero,11bac <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   11b8c:	e0bff517 	ldw	r2,-44(fp)
   11b90:	10bfffc4 	addi	r2,r2,-1
   11b94:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   11b98:	e0bffc17 	ldw	r2,-16(fp)
   11b9c:	10800104 	addi	r2,r2,4
   11ba0:	0007883a 	mov	r3,zero
   11ba4:	10c00035 	stwio	r3,0(r2)
   11ba8:	00000206 	br	11bb4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   11bac:	00bf0004 	movi	r2,-1024
   11bb0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   11bb4:	e0bffa17 	ldw	r2,-24(fp)
   11bb8:	1080200c 	andi	r2,r2,128
   11bbc:	10001726 	beq	r2,zero,11c1c <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   11bc0:	e0bffc17 	ldw	r2,-16(fp)
   11bc4:	10800037 	ldwio	r2,0(r2)
   11bc8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   11bcc:	e0bff617 	ldw	r2,-40(fp)
   11bd0:	10000426 	beq	r2,zero,11be4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   11bd4:	e0bff617 	ldw	r2,-40(fp)
   11bd8:	10bfffc4 	addi	r2,r2,-1
   11bdc:	e0bff615 	stw	r2,-40(fp)
   11be0:	00000506 	br	11bf8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   11be4:	e0800217 	ldw	r2,8(fp)
   11be8:	10c00044 	addi	r3,r2,1
   11bec:	e0c00215 	stw	r3,8(fp)
   11bf0:	e0fffb17 	ldw	r3,-20(fp)
   11bf4:	10c00005 	stb	r3,0(r2)
      credits++;
   11bf8:	e0bff717 	ldw	r2,-36(fp)
   11bfc:	10800044 	addi	r2,r2,1
   11c00:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   11c04:	e0bff617 	ldw	r2,-40(fp)
   11c08:	1000041e 	bne	r2,zero,11c1c <alt_avalon_spi_command+0x1b4>
   11c0c:	e0c00217 	ldw	r3,8(fp)
   11c10:	e0bff917 	ldw	r2,-28(fp)
   11c14:	1880011e 	bne	r3,r2,11c1c <alt_avalon_spi_command+0x1b4>
        break;
   11c18:	00000106 	br	11c20 <alt_avalon_spi_command+0x1b8>
    }
    
  }
   11c1c:	003fb806 	br	11b00 <alt_avalon_spi_command+0x98>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   11c20:	e0bffc17 	ldw	r2,-16(fp)
   11c24:	10800204 	addi	r2,r2,8
   11c28:	10800037 	ldwio	r2,0(r2)
   11c2c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   11c30:	e0bffa17 	ldw	r2,-24(fp)
   11c34:	1080080c 	andi	r2,r2,32
   11c38:	103ff926 	beq	r2,zero,11c20 <alt_avalon_spi_command+0x1b8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   11c3c:	e0800317 	ldw	r2,12(fp)
   11c40:	1080004c 	andi	r2,r2,1
   11c44:	1000041e 	bne	r2,zero,11c58 <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   11c48:	e0bffc17 	ldw	r2,-16(fp)
   11c4c:	10800304 	addi	r2,r2,12
   11c50:	0007883a 	mov	r3,zero
   11c54:	10c00035 	stwio	r3,0(r2)

  return read_length;
   11c58:	e0800117 	ldw	r2,4(fp)
}
   11c5c:	e037883a 	mov	sp,fp
   11c60:	df000017 	ldw	fp,0(sp)
   11c64:	dec00104 	addi	sp,sp,4
   11c68:	f800283a 	ret

00011c6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11c6c:	defffa04 	addi	sp,sp,-24
   11c70:	dfc00515 	stw	ra,20(sp)
   11c74:	df000415 	stw	fp,16(sp)
   11c78:	df000404 	addi	fp,sp,16
   11c7c:	e13ffe15 	stw	r4,-8(fp)
   11c80:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11c84:	e0bfff17 	ldw	r2,-4(fp)
   11c88:	10800017 	ldw	r2,0(r2)
   11c8c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11c90:	e13ffe17 	ldw	r4,-8(fp)
   11c94:	00016d00 	call	16d0 <strlen>
   11c98:	10800044 	addi	r2,r2,1
   11c9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ca0:	00000d06 	br	11cd8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11ca4:	e0bffc17 	ldw	r2,-16(fp)
   11ca8:	10c00217 	ldw	r3,8(r2)
   11cac:	e0bffd17 	ldw	r2,-12(fp)
   11cb0:	1809883a 	mov	r4,r3
   11cb4:	e17ffe17 	ldw	r5,-8(fp)
   11cb8:	100d883a 	mov	r6,r2
   11cbc:	0011f300 	call	11f30 <memcmp>
   11cc0:	1000021e 	bne	r2,zero,11ccc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11cc4:	e0bffc17 	ldw	r2,-16(fp)
   11cc8:	00000706 	br	11ce8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11ccc:	e0bffc17 	ldw	r2,-16(fp)
   11cd0:	10800017 	ldw	r2,0(r2)
   11cd4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11cd8:	e0fffc17 	ldw	r3,-16(fp)
   11cdc:	e0bfff17 	ldw	r2,-4(fp)
   11ce0:	18bff01e 	bne	r3,r2,11ca4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11ce4:	0005883a 	mov	r2,zero
}
   11ce8:	e037883a 	mov	sp,fp
   11cec:	dfc00117 	ldw	ra,4(sp)
   11cf0:	df000017 	ldw	fp,0(sp)
   11cf4:	dec00204 	addi	sp,sp,8
   11cf8:	f800283a 	ret

00011cfc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11cfc:	defffb04 	addi	sp,sp,-20
   11d00:	dfc00415 	stw	ra,16(sp)
   11d04:	df000315 	stw	fp,12(sp)
   11d08:	df000304 	addi	fp,sp,12
   11d0c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11d10:	00800074 	movhi	r2,1
   11d14:	10918004 	addi	r2,r2,17920
   11d18:	10800017 	ldw	r2,0(r2)
   11d1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11d20:	00003106 	br	11de8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   11d24:	e0bffd17 	ldw	r2,-12(fp)
   11d28:	10800217 	ldw	r2,8(r2)
   11d2c:	1009883a 	mov	r4,r2
   11d30:	00016d00 	call	16d0 <strlen>
   11d34:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11d38:	e0bffd17 	ldw	r2,-12(fp)
   11d3c:	10c00217 	ldw	r3,8(r2)
   11d40:	e0bffe17 	ldw	r2,-8(fp)
   11d44:	10bfffc4 	addi	r2,r2,-1
   11d48:	1885883a 	add	r2,r3,r2
   11d4c:	10800003 	ldbu	r2,0(r2)
   11d50:	10803fcc 	andi	r2,r2,255
   11d54:	1080201c 	xori	r2,r2,128
   11d58:	10bfe004 	addi	r2,r2,-128
   11d5c:	10800bd8 	cmpnei	r2,r2,47
   11d60:	1000031e 	bne	r2,zero,11d70 <alt_find_file+0x74>
    {
      len -= 1;
   11d64:	e0bffe17 	ldw	r2,-8(fp)
   11d68:	10bfffc4 	addi	r2,r2,-1
   11d6c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11d70:	e0bffe17 	ldw	r2,-8(fp)
   11d74:	e0ffff17 	ldw	r3,-4(fp)
   11d78:	1885883a 	add	r2,r3,r2
   11d7c:	10800003 	ldbu	r2,0(r2)
   11d80:	10803fcc 	andi	r2,r2,255
   11d84:	1080201c 	xori	r2,r2,128
   11d88:	10bfe004 	addi	r2,r2,-128
   11d8c:	10800be0 	cmpeqi	r2,r2,47
   11d90:	1000081e 	bne	r2,zero,11db4 <alt_find_file+0xb8>
   11d94:	e0bffe17 	ldw	r2,-8(fp)
   11d98:	e0ffff17 	ldw	r3,-4(fp)
   11d9c:	1885883a 	add	r2,r3,r2
   11da0:	10800003 	ldbu	r2,0(r2)
   11da4:	10803fcc 	andi	r2,r2,255
   11da8:	1080201c 	xori	r2,r2,128
   11dac:	10bfe004 	addi	r2,r2,-128
   11db0:	10000a1e 	bne	r2,zero,11ddc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11db4:	e0bffd17 	ldw	r2,-12(fp)
   11db8:	10c00217 	ldw	r3,8(r2)
   11dbc:	e0bffe17 	ldw	r2,-8(fp)
   11dc0:	1809883a 	mov	r4,r3
   11dc4:	e17fff17 	ldw	r5,-4(fp)
   11dc8:	100d883a 	mov	r6,r2
   11dcc:	0011f300 	call	11f30 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11dd0:	1000021e 	bne	r2,zero,11ddc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11dd4:	e0bffd17 	ldw	r2,-12(fp)
   11dd8:	00000806 	br	11dfc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   11ddc:	e0bffd17 	ldw	r2,-12(fp)
   11de0:	10800017 	ldw	r2,0(r2)
   11de4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11de8:	e0fffd17 	ldw	r3,-12(fp)
   11dec:	00800074 	movhi	r2,1
   11df0:	10918004 	addi	r2,r2,17920
   11df4:	18bfcb1e 	bne	r3,r2,11d24 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11df8:	0005883a 	mov	r2,zero
}
   11dfc:	e037883a 	mov	sp,fp
   11e00:	dfc00117 	ldw	ra,4(sp)
   11e04:	df000017 	ldw	fp,0(sp)
   11e08:	dec00204 	addi	sp,sp,8
   11e0c:	f800283a 	ret

00011e10 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11e10:	defffa04 	addi	sp,sp,-24
   11e14:	dfc00515 	stw	ra,20(sp)
   11e18:	df000415 	stw	fp,16(sp)
   11e1c:	dc000315 	stw	r16,12(sp)
   11e20:	df000404 	addi	fp,sp,16
   11e24:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11e28:	00bffa04 	movi	r2,-24
   11e2c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11e30:	e03ffc15 	stw	zero,-16(fp)
   11e34:	00002106 	br	11ebc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   11e38:	04000074 	movhi	r16,1
   11e3c:	840bda04 	addi	r16,r16,12136
   11e40:	e0bffc17 	ldw	r2,-16(fp)
   11e44:	1009883a 	mov	r4,r2
   11e48:	01400304 	movi	r5,12
   11e4c:	0000eb00 	call	eb0 <__mulsi3>
   11e50:	8085883a 	add	r2,r16,r2
   11e54:	10800017 	ldw	r2,0(r2)
   11e58:	1000151e 	bne	r2,zero,11eb0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   11e5c:	04000074 	movhi	r16,1
   11e60:	840bda04 	addi	r16,r16,12136
   11e64:	e0bffc17 	ldw	r2,-16(fp)
   11e68:	1009883a 	mov	r4,r2
   11e6c:	01400304 	movi	r5,12
   11e70:	0000eb00 	call	eb0 <__mulsi3>
   11e74:	8085883a 	add	r2,r16,r2
   11e78:	e0fffe17 	ldw	r3,-8(fp)
   11e7c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11e80:	00800074 	movhi	r2,1
   11e84:	10918404 	addi	r2,r2,17936
   11e88:	10c00017 	ldw	r3,0(r2)
   11e8c:	e0bffc17 	ldw	r2,-16(fp)
   11e90:	1880040e 	bge	r3,r2,11ea4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   11e94:	00800074 	movhi	r2,1
   11e98:	10918404 	addi	r2,r2,17936
   11e9c:	e0fffc17 	ldw	r3,-16(fp)
   11ea0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11ea4:	e0bffc17 	ldw	r2,-16(fp)
   11ea8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11eac:	00000606 	br	11ec8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11eb0:	e0bffc17 	ldw	r2,-16(fp)
   11eb4:	10800044 	addi	r2,r2,1
   11eb8:	e0bffc15 	stw	r2,-16(fp)
   11ebc:	e0bffc17 	ldw	r2,-16(fp)
   11ec0:	10800810 	cmplti	r2,r2,32
   11ec4:	103fdc1e 	bne	r2,zero,11e38 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11ec8:	e0bffd17 	ldw	r2,-12(fp)
}
   11ecc:	e6ffff04 	addi	sp,fp,-4
   11ed0:	dfc00217 	ldw	ra,8(sp)
   11ed4:	df000117 	ldw	fp,4(sp)
   11ed8:	dc000017 	ldw	r16,0(sp)
   11edc:	dec00304 	addi	sp,sp,12
   11ee0:	f800283a 	ret

00011ee4 <atexit>:
   11ee4:	200b883a 	mov	r5,r4
   11ee8:	000d883a 	mov	r6,zero
   11eec:	0009883a 	mov	r4,zero
   11ef0:	000f883a 	mov	r7,zero
   11ef4:	0011fac1 	jmpi	11fac <__register_exitproc>

00011ef8 <exit>:
   11ef8:	defffe04 	addi	sp,sp,-8
   11efc:	000b883a 	mov	r5,zero
   11f00:	dc000015 	stw	r16,0(sp)
   11f04:	dfc00115 	stw	ra,4(sp)
   11f08:	2021883a 	mov	r16,r4
   11f0c:	00120c00 	call	120c0 <__call_exitprocs>
   11f10:	00800074 	movhi	r2,1
   11f14:	10917a04 	addi	r2,r2,17896
   11f18:	11000017 	ldw	r4,0(r2)
   11f1c:	20800f17 	ldw	r2,60(r4)
   11f20:	10000126 	beq	r2,zero,11f28 <exit+0x30>
   11f24:	103ee83a 	callr	r2
   11f28:	8009883a 	mov	r4,r16
   11f2c:	00122540 	call	12254 <_exit>

00011f30 <memcmp>:
   11f30:	01c000c4 	movi	r7,3
   11f34:	3980192e 	bgeu	r7,r6,11f9c <memcmp+0x6c>
   11f38:	2144b03a 	or	r2,r4,r5
   11f3c:	11c4703a 	and	r2,r2,r7
   11f40:	10000f26 	beq	r2,zero,11f80 <memcmp+0x50>
   11f44:	20800003 	ldbu	r2,0(r4)
   11f48:	28c00003 	ldbu	r3,0(r5)
   11f4c:	10c0151e 	bne	r2,r3,11fa4 <memcmp+0x74>
   11f50:	31bfff84 	addi	r6,r6,-2
   11f54:	01ffffc4 	movi	r7,-1
   11f58:	00000406 	br	11f6c <memcmp+0x3c>
   11f5c:	20800003 	ldbu	r2,0(r4)
   11f60:	28c00003 	ldbu	r3,0(r5)
   11f64:	31bfffc4 	addi	r6,r6,-1
   11f68:	10c00e1e 	bne	r2,r3,11fa4 <memcmp+0x74>
   11f6c:	21000044 	addi	r4,r4,1
   11f70:	29400044 	addi	r5,r5,1
   11f74:	31fff91e 	bne	r6,r7,11f5c <memcmp+0x2c>
   11f78:	0005883a 	mov	r2,zero
   11f7c:	f800283a 	ret
   11f80:	20c00017 	ldw	r3,0(r4)
   11f84:	28800017 	ldw	r2,0(r5)
   11f88:	1880041e 	bne	r3,r2,11f9c <memcmp+0x6c>
   11f8c:	31bfff04 	addi	r6,r6,-4
   11f90:	21000104 	addi	r4,r4,4
   11f94:	29400104 	addi	r5,r5,4
   11f98:	39bff936 	bltu	r7,r6,11f80 <memcmp+0x50>
   11f9c:	303fe91e 	bne	r6,zero,11f44 <memcmp+0x14>
   11fa0:	003ff506 	br	11f78 <memcmp+0x48>
   11fa4:	10c5c83a 	sub	r2,r2,r3
   11fa8:	f800283a 	ret

00011fac <__register_exitproc>:
   11fac:	00800074 	movhi	r2,1
   11fb0:	defffa04 	addi	sp,sp,-24
   11fb4:	10917a04 	addi	r2,r2,17896
   11fb8:	dc000315 	stw	r16,12(sp)
   11fbc:	14000017 	ldw	r16,0(r2)
   11fc0:	dc400415 	stw	r17,16(sp)
   11fc4:	dfc00515 	stw	ra,20(sp)
   11fc8:	80805217 	ldw	r2,328(r16)
   11fcc:	2023883a 	mov	r17,r4
   11fd0:	10003626 	beq	r2,zero,120ac <__register_exitproc+0x100>
   11fd4:	10c00117 	ldw	r3,4(r2)
   11fd8:	010007c4 	movi	r4,31
   11fdc:	20c00e16 	blt	r4,r3,12018 <__register_exitproc+0x6c>
   11fe0:	1a400044 	addi	r9,r3,1
   11fe4:	8800211e 	bne	r17,zero,1206c <__register_exitproc+0xc0>
   11fe8:	18c00084 	addi	r3,r3,2
   11fec:	18c7883a 	add	r3,r3,r3
   11ff0:	18c7883a 	add	r3,r3,r3
   11ff4:	12400115 	stw	r9,4(r2)
   11ff8:	10c7883a 	add	r3,r2,r3
   11ffc:	19400015 	stw	r5,0(r3)
   12000:	0005883a 	mov	r2,zero
   12004:	dfc00517 	ldw	ra,20(sp)
   12008:	dc400417 	ldw	r17,16(sp)
   1200c:	dc000317 	ldw	r16,12(sp)
   12010:	dec00604 	addi	sp,sp,24
   12014:	f800283a 	ret
   12018:	00800034 	movhi	r2,0
   1201c:	10800004 	addi	r2,r2,0
   12020:	10002526 	beq	r2,zero,120b8 <__register_exitproc+0x10c>
   12024:	01006404 	movi	r4,400
   12028:	d9400015 	stw	r5,0(sp)
   1202c:	d9800115 	stw	r6,4(sp)
   12030:	d9c00215 	stw	r7,8(sp)
   12034:	00000000 	call	0 <__alt_mem_sdram>
   12038:	d9400017 	ldw	r5,0(sp)
   1203c:	d9800117 	ldw	r6,4(sp)
   12040:	d9c00217 	ldw	r7,8(sp)
   12044:	10001c26 	beq	r2,zero,120b8 <__register_exitproc+0x10c>
   12048:	80c05217 	ldw	r3,328(r16)
   1204c:	10000115 	stw	zero,4(r2)
   12050:	02400044 	movi	r9,1
   12054:	10c00015 	stw	r3,0(r2)
   12058:	80805215 	stw	r2,328(r16)
   1205c:	10006215 	stw	zero,392(r2)
   12060:	10006315 	stw	zero,396(r2)
   12064:	0007883a 	mov	r3,zero
   12068:	883fdf26 	beq	r17,zero,11fe8 <__register_exitproc+0x3c>
   1206c:	18d1883a 	add	r8,r3,r3
   12070:	4211883a 	add	r8,r8,r8
   12074:	1211883a 	add	r8,r2,r8
   12078:	41802215 	stw	r6,136(r8)
   1207c:	01000044 	movi	r4,1
   12080:	11806217 	ldw	r6,392(r2)
   12084:	20c8983a 	sll	r4,r4,r3
   12088:	310cb03a 	or	r6,r6,r4
   1208c:	11806215 	stw	r6,392(r2)
   12090:	41c04215 	stw	r7,264(r8)
   12094:	01800084 	movi	r6,2
   12098:	89bfd31e 	bne	r17,r6,11fe8 <__register_exitproc+0x3c>
   1209c:	11806317 	ldw	r6,396(r2)
   120a0:	3108b03a 	or	r4,r6,r4
   120a4:	11006315 	stw	r4,396(r2)
   120a8:	003fcf06 	br	11fe8 <__register_exitproc+0x3c>
   120ac:	80805304 	addi	r2,r16,332
   120b0:	80805215 	stw	r2,328(r16)
   120b4:	003fc706 	br	11fd4 <__register_exitproc+0x28>
   120b8:	00bfffc4 	movi	r2,-1
   120bc:	003fd106 	br	12004 <__register_exitproc+0x58>

000120c0 <__call_exitprocs>:
   120c0:	00800074 	movhi	r2,1
   120c4:	10917a04 	addi	r2,r2,17896
   120c8:	10800017 	ldw	r2,0(r2)
   120cc:	defff404 	addi	sp,sp,-48
   120d0:	dd800815 	stw	r22,32(sp)
   120d4:	d8800015 	stw	r2,0(sp)
   120d8:	10805204 	addi	r2,r2,328
   120dc:	dd000615 	stw	r20,24(sp)
   120e0:	dc800415 	stw	r18,16(sp)
   120e4:	dfc00b15 	stw	ra,44(sp)
   120e8:	df000a15 	stw	fp,40(sp)
   120ec:	ddc00915 	stw	r23,36(sp)
   120f0:	dd400715 	stw	r21,28(sp)
   120f4:	dcc00515 	stw	r19,20(sp)
   120f8:	dc400315 	stw	r17,12(sp)
   120fc:	dc000215 	stw	r16,8(sp)
   12100:	2025883a 	mov	r18,r4
   12104:	2829883a 	mov	r20,r5
   12108:	d8800115 	stw	r2,4(sp)
   1210c:	05bfffc4 	movi	r22,-1
   12110:	d8800017 	ldw	r2,0(sp)
   12114:	14c05217 	ldw	r19,328(r2)
   12118:	98001d26 	beq	r19,zero,12190 <__call_exitprocs+0xd0>
   1211c:	dd400117 	ldw	r21,4(sp)
   12120:	98800117 	ldw	r2,4(r19)
   12124:	173fffc4 	addi	fp,r2,-1
   12128:	e0000d16 	blt	fp,zero,12160 <__call_exitprocs+0xa0>
   1212c:	14000044 	addi	r16,r2,1
   12130:	8421883a 	add	r16,r16,r16
   12134:	8421883a 	add	r16,r16,r16
   12138:	84402004 	addi	r17,r16,128
   1213c:	9c63883a 	add	r17,r19,r17
   12140:	9c21883a 	add	r16,r19,r16
   12144:	a0001e26 	beq	r20,zero,121c0 <__call_exitprocs+0x100>
   12148:	80804017 	ldw	r2,256(r16)
   1214c:	15001c26 	beq	r2,r20,121c0 <__call_exitprocs+0x100>
   12150:	e73fffc4 	addi	fp,fp,-1
   12154:	843fff04 	addi	r16,r16,-4
   12158:	8c7fff04 	addi	r17,r17,-4
   1215c:	e5bff91e 	bne	fp,r22,12144 <__call_exitprocs+0x84>
   12160:	00800034 	movhi	r2,0
   12164:	10800004 	addi	r2,r2,0
   12168:	10000926 	beq	r2,zero,12190 <__call_exitprocs+0xd0>
   1216c:	98800117 	ldw	r2,4(r19)
   12170:	1000311e 	bne	r2,zero,12238 <__call_exitprocs+0x178>
   12174:	98800017 	ldw	r2,0(r19)
   12178:	10003426 	beq	r2,zero,1224c <__call_exitprocs+0x18c>
   1217c:	9809883a 	mov	r4,r19
   12180:	a8800015 	stw	r2,0(r21)
   12184:	00000000 	call	0 <__alt_mem_sdram>
   12188:	acc00017 	ldw	r19,0(r21)
   1218c:	983fe41e 	bne	r19,zero,12120 <__call_exitprocs+0x60>
   12190:	dfc00b17 	ldw	ra,44(sp)
   12194:	df000a17 	ldw	fp,40(sp)
   12198:	ddc00917 	ldw	r23,36(sp)
   1219c:	dd800817 	ldw	r22,32(sp)
   121a0:	dd400717 	ldw	r21,28(sp)
   121a4:	dd000617 	ldw	r20,24(sp)
   121a8:	dcc00517 	ldw	r19,20(sp)
   121ac:	dc800417 	ldw	r18,16(sp)
   121b0:	dc400317 	ldw	r17,12(sp)
   121b4:	dc000217 	ldw	r16,8(sp)
   121b8:	dec00c04 	addi	sp,sp,48
   121bc:	f800283a 	ret
   121c0:	98800117 	ldw	r2,4(r19)
   121c4:	80c00017 	ldw	r3,0(r16)
   121c8:	10bfffc4 	addi	r2,r2,-1
   121cc:	17001526 	beq	r2,fp,12224 <__call_exitprocs+0x164>
   121d0:	80000015 	stw	zero,0(r16)
   121d4:	183fde26 	beq	r3,zero,12150 <__call_exitprocs+0x90>
   121d8:	00800044 	movi	r2,1
   121dc:	1708983a 	sll	r4,r2,fp
   121e0:	98806217 	ldw	r2,392(r19)
   121e4:	9dc00117 	ldw	r23,4(r19)
   121e8:	2084703a 	and	r2,r4,r2
   121ec:	1000061e 	bne	r2,zero,12208 <__call_exitprocs+0x148>
   121f0:	183ee83a 	callr	r3
   121f4:	98800117 	ldw	r2,4(r19)
   121f8:	15ffc51e 	bne	r2,r23,12110 <__call_exitprocs+0x50>
   121fc:	a8800017 	ldw	r2,0(r21)
   12200:	14ffd326 	beq	r2,r19,12150 <__call_exitprocs+0x90>
   12204:	003fc206 	br	12110 <__call_exitprocs+0x50>
   12208:	98806317 	ldw	r2,396(r19)
   1220c:	2084703a 	and	r2,r4,r2
   12210:	1000061e 	bne	r2,zero,1222c <__call_exitprocs+0x16c>
   12214:	89400017 	ldw	r5,0(r17)
   12218:	9009883a 	mov	r4,r18
   1221c:	183ee83a 	callr	r3
   12220:	003ff406 	br	121f4 <__call_exitprocs+0x134>
   12224:	9f000115 	stw	fp,4(r19)
   12228:	003fea06 	br	121d4 <__call_exitprocs+0x114>
   1222c:	89000017 	ldw	r4,0(r17)
   12230:	183ee83a 	callr	r3
   12234:	003fef06 	br	121f4 <__call_exitprocs+0x134>
   12238:	98800017 	ldw	r2,0(r19)
   1223c:	982b883a 	mov	r21,r19
   12240:	1027883a 	mov	r19,r2
   12244:	983fb61e 	bne	r19,zero,12120 <__call_exitprocs+0x60>
   12248:	003fd106 	br	12190 <__call_exitprocs+0xd0>
   1224c:	0005883a 	mov	r2,zero
   12250:	003ffa06 	br	1223c <__call_exitprocs+0x17c>

00012254 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12254:	defffd04 	addi	sp,sp,-12
   12258:	df000215 	stw	fp,8(sp)
   1225c:	df000204 	addi	fp,sp,8
   12260:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12264:	0001883a 	nop
   12268:	e0bfff17 	ldw	r2,-4(fp)
   1226c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12270:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12274:	10000226 	beq	r2,zero,12280 <_exit+0x2c>
    ALT_SIM_FAIL();
   12278:	002af070 	cmpltui	zero,zero,43969
   1227c:	00000106 	br	12284 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12280:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12284:	003fff06 	br	12284 <_exit+0x30>
